id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html604/ROOT__Fit__Fitter.html:13254,Testability,log,log-likelihood,13254,"The pointer should not be stored and will be invalided after performing a new fitting.; In this case a new instance of ROOT::Math::Minimizer will be re-created and can be; obtained calling again GetMinimizer(). { return fMinimizer.get(); }. ROOT::Math::IMultiGenFunction * GetFCN() const. return pointer to last used objective function; (is NULL in case fit is not yet done); This pointer will be valid as far as the fitter class; has not been deleted. To be used after the fitting.; The pointer should not be stored and will be invalided after performing a new fitting.; In this case a new instance of the function pointer will be re-created and can be; obtained calling again GetFCN(). { return fObjFunction.get(); }. bool ApplyWeightCorrection(const ROOT::Math::IMultiGenFunction& loglw2, bool minimizeW2L = false). apply correction in the error matrix for the weights for likelihood fits; This method can be called only after a fit. The; passed function (loglw2) is a log-likelihood function impelemented using the; sum of weight squared; When using FitConfig.SetWeightCorrection() this correction is applied; automatically when doing a likelihood fit (binned or unbinned). bool DoInitMinimizer(); initialize the minimizer. bool DoMinimization(const ROOT::Fit::Fitter::BaseFunc& f, const ROOT::Math::IMultiGenFunction* chifunc = 0); do minimization. bool DoMinimization(const ROOT::Math::IMultiGenFunction* chifunc = 0); do minimization after having set obj function. void DoUpdateFitConfig(); update config after fit. int GetNCallsFromFCN(); get function calls from the FCN. void SetFunctionAndData(const ROOT::Fit::Fitter::IModelFunction& func, const ROOT::Fit::FitData& data); set data and function without cloning them. void ExamineFCN(); look at the user provided FCN and get data and model function is; they derive from ROOT::Fit FCN classes. » Author: L. Moneta Wed Aug 30 11:05:19 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last gene",MatchSource.WIKI,root/html604/ROOT__Fit__Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__Fitter.html
https://root.cern/root/html604/ROOT__Fit__Fitter.html:10746,Usability,simpl,simple,10746,"e given FCN function representing a multi-dimensional gradient function; interface (ROOT::Math::IMultiGradFunction). In this case the minimizer will use the; gradient information provided by the function.; For the options same consideration as in the previous method. bool FitFCN(const ROOT::Math::FitMethodGradFunction& fcn, const double* params = 0). Fit using a FitMethodGradFunction interface. Same as method above, but now extra information; can be taken from the function class. bool SetFCN(const ROOT::Math::IMultiGradFunction& fcn, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). Set the FCN function represented by a multi-dimensional gradient function interface; (ROOT::Math::IMultiGenFunction) and optionally the initial parameters; See also note above for the initial parameters for FitFCN. bool FitFCN(ROOT::Fit::Fitter::MinuitFCN_t fcn, int npar = 0, const double* params = 0, unsigned int dataSize = 0, bool chi2fit = false). bool EvalFCN(). Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN. void SetFunction(const IModelFunction & func, bool useGradient = false). Set the fitted function (model function) from a parametric function interface. void SetFunction(const IModel1DFunction & func, bool useGradient = false). Set the fitted function from a parametric 1D function interface. bool CalculateHessErrors(). perform an error analysis on the result using the Hessian; Errors are obtaied from the inverse of the Hessian matrix; To be called only after fitting and when a minimizer supporting the Hessian calculations is used; otherwise an error (false) is returned.; A new FitResult with the Hessian result will be produced. bool CalculateMinosErrors(). perform an error analysis on the result using MINOS; To be called only after fitting and when a minimizer supporting MINOS is used; otherwise an error (false) is returned.; The result will be appended in the fit result class; Optionally a vector of parameter",MatchSource.WIKI,root/html604/ROOT__Fit__Fitter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__Fitter.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:7057,Availability,error,errors,7057,"h::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:4301,Deployability,Update,UpdateNCalls,4301,"it::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:7144,Integrability,interface,interface,7144,"h::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2713,Modifiability,extend,extended,2713,"T::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2997,Modifiability,extend,extended,2997,") const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFuncti",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6192,Modifiability,extend,extended,6192,") const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6384,Modifiability,Inherit,Inheritance,6384,"ionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6397,Modifiability,Inherit,Inherited,6397,"ionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:13,Testability,Log,LogLikelihoodFCN,13,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:288,Testability,Log,LogLikelihoodFCN,288,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:358,Testability,Log,LogLikelihoodFCN,358,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:495,Testability,Log,LogLikelihoodFCN,495,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:671,Testability,Log,LogLikelihoodFCN,671," virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:1544,Testability,Log,LogLikelihoodFCN,1544," virtual~LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2247,Testability,Log,LogLikelihoodFCN,2247,"hodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2298,Testability,Log,LogLikelihoodFCN,2298,"OOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::U",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2367,Testability,Log,LogLikelihoodFCN,2367,"OOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFuncti",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2435,Testability,Log,LogLikelihoodFCN,2435,"::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2486,Testability,Log,LogLikelihoodFCN,2486,"ultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2612,Testability,Log,LogLikelihoodFCN,2612,"nst; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFuncti",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2743,Testability,Log,LogLikelihoodFCN,2743,"virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Mat",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2794,Testability,Log,LogLikelihoodFCN,2794," int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleR",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2897,Testability,Log,LogLikelihoodFCN,2897,"MultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:3883,Testability,Log,LogLikelihoodFCN,3883,"it::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:3962,Testability,Log,LogLikelihoodFCN,3962,"it::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6558,Testability,Log,LogLikelihoodFCN,6558,"th::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7904,Availability,error,errors,7904,"MultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:5096,Deployability,Update,UpdateNCalls,5096," f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7991,Integrability,interface,interface,7991,"MultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3460,Modifiability,extend,extended,3460,"Dim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtua",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3752,Modifiability,extend,extended,3752,"tiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7039,Modifiability,extend,extended,7039,"static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7231,Modifiability,Inherit,Inheritance,7231,"re; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7244,Modifiability,Inherit,Inherited,7244,"re; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:13,Testability,Log,LogLikelihoodFCN,13,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:292,Testability,Log,LogLikelihoodFCN,292,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:366,Testability,Log,LogLikelihoodFCN,366,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:511,Testability,Log,LogLikelihoodFCN,511,". ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>. LogLikelihoodFCN class; for likelihood fits. it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:687,Testability,Log,LogLikelihoodFCN,687," virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:1608,Testability,Log,LogLikelihoodFCN,1608," virtual~LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::UnBinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:2974,Testability,Log,LogLikelihoodFCN,2974,"ultiDim,ROOT::Fit::UnBinData>::DataPtr() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3029,Testability,Log,LogLikelihoodFCN,3029,"OOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientF",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3102,Testability,Log,LogLikelihoodFCN,3102,"oord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3174,Testability,Log,LogLikelihoodFCN,3174,"const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunct",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3229,Testability,Log,LogLikelihoodFCN,3229,"voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFi",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3359,Testability,Log,LogLikelihoodFCN,3359,"ultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROO",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3490,Testability,Log,LogLikelihoodFCN,3490,"nMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFit",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3545,Testability,Log,LogLikelihoodFCN,3545,":Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:3652,Testability,Log,LogLikelihoodFCN,3652,"ath::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::Log",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4658,Testability,Log,LogLikelihoodFCN,4658," f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4741,Testability,Log,LogLikelihoodFCN,4741," f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7405,Testability,Log,LogLikelihoodFCN,7405,"nMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag for indicating if likelihood is extended; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(*this); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood contribution and its gradient. void Gradient(const double* x, double* g) const; need to be virtual to be instantited. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html:3958,Deployability,Release,Release,3958,"uble err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__ParameterSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html
https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html:3969,Deployability,release,release,3969,"uble err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fValue; }. double StepSize() const; return step size. { return fStepSize; }. double LowerLimit() const; return lower limit value. {return fLowerLimit;}. double UpperLimit() const; return upper limit value. {return fUpperLimit;}. bool IsFixed() const; check if is fixed. { return fFix; }. bool HasLowerLimit() const; check if parameter has lower limit. {return fHasLowerLimit; }. bool HasUpperLimit() const; check if parameter has upper limit. {return fHasUpperLimit; }. bool IsBound() const; check if is bound. { return fHasLowerLimit || fHasUpperLimit; }. bool IsDoubleBound() const; check if is double bound (upper AND lower limit). { return fHasLowerLimit && fHasUpperLimit; }. const std::string & Name() const; return name. { return fName; }. void Release(); release the parameter. {fFix = false;}. RemoveLimits(). void SetUpperLimit(double up); set a single upper limit. void SetLowerLimit(double low); set a single lower limit. » Author: L. Moneta Thu Sep 21 16:21:48 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__ParameterSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html
https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html:2182,Modifiability,Inherit,Inheritance,2182,"it::ParameterSettingsParameterSettings(const string& name, double val, double err, double min, double max); voidRelease(); voidRemoveLimits(); voidSet(const string& name, double value); voidSet(const string& name, double value, double step); voidSet(const string& name, double value, double step, double lower, double upper); voidSetLimits(double low, double up); voidSetLowerLimit(double low); voidSetName(const string& name); voidSetStepSize(double err); voidSetUpperLimit(double up); voidSetValue(double val); doubleStepSize() const; doubleUpperLimit() const; doubleValue() const. Data Members; private:. boolfFixflag to control if parameter is fixed; boolfHasLowerLimitflag to control lower parameter limit; boolfHasUpperLimitflag to control upper parameter limit; doublefLowerLimitlower parameter limit; stringfNameparameter name; doublefStepSizeparameter step size (used by minimizer); doublefUpperLimitupper parameter limit; doublefValueparameter value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParameterSettings(). Default constructor. {}. ParameterSettings(const string& name, double val, double err); constructor for unlimited named Parameter. {}. ParameterSettings(const string& name, double val, double err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fV",MatchSource.WIKI,root/html604/ROOT__Fit__ParameterSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html
https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html:2195,Modifiability,Inherit,Inherited,2195,"it::ParameterSettingsParameterSettings(const string& name, double val, double err, double min, double max); voidRelease(); voidRemoveLimits(); voidSet(const string& name, double value); voidSet(const string& name, double value, double step); voidSet(const string& name, double value, double step, double lower, double upper); voidSetLimits(double low, double up); voidSetLowerLimit(double low); voidSetName(const string& name); voidSetStepSize(double err); voidSetUpperLimit(double up); voidSetValue(double val); doubleStepSize() const; doubleUpperLimit() const; doubleValue() const. Data Members; private:. boolfFixflag to control if parameter is fixed; boolfHasLowerLimitflag to control lower parameter limit; boolfHasUpperLimitflag to control upper parameter limit; doublefLowerLimitlower parameter limit; stringfNameparameter name; doublefStepSizeparameter step size (used by minimizer); doublefUpperLimitupper parameter limit; doublefValueparameter value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParameterSettings(). Default constructor. {}. ParameterSettings(const string& name, double val, double err); constructor for unlimited named Parameter. {}. ParameterSettings(const string& name, double val, double err, double min, double max); constructor for double limited Parameter. SetLimits(double low, double up). ParameterSettings(const string& name, double val); constructor for fixed Parameter. {}. void Set(const string& name, double value, double step); set value and name (unlimited parameter). SetName(const string& name). SetValue(double val). SetStepSize(double err). void Set(const string& name, double value, double step, double lower, double upper); set a limited parameter. void Set(const string& name, double value); set a fixed parameter. Fix(). ~ParameterSettings(). Destructor (no operations). {}. double Value() const; copy constructor and assignment operators (leave them to the compiler); return parameter value. { return fV",MatchSource.WIKI,root/html604/ROOT__Fit__ParameterSettings.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__ParameterSettings.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:7259,Availability,error,errors,7259,"ctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:4389,Deployability,Update,UpdateNCalls,4389,":ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:7346,Integrability,interface,interface,7346,"ctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:3798,Modifiability,extend,extended,3798,":ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:4091,Modifiability,extend,extended,4091,":ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6269,Modifiability,extend,extended,6269,"mbers; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by int",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6519,Modifiability,Inherit,Inheritance,6519,"T::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » La",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:6532,Modifiability,Inherit,Inherited,6532,"T::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » La",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:526,Testability,log,log,526,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>::DataPtr() const; virtual voidGradi",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:8106,Availability,error,errors,8106,"m>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:5184,Deployability,Update,UpdateNCalls,5184,"h::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:8193,Integrability,interface,interface,8193,"m>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4573,Modifiability,extend,extended,4573,"h::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4874,Modifiability,extend,extended,4874,"h::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& f); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = true); ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::BinData& data, const ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = true); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeights(); voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7116,Modifiability,extend,extended,7116,"h::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by int",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7366,Modifiability,Inherit,Inheritance,7366,"unction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » La",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:7379,Modifiability,Inherit,Inherited,7379,"unction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::fFunc. private:. vector<double>fGradfor derivatives; boolfIsExtendedflag to indicate if is extended (when false is a Multinomial lieklihood), default is true; unsigned intfNEffPointsnumber of effective points used in the fit; intfWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new PoissonLikelihoodFCN(*this); }. unsigned int NFitPoints() const; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i, double* g) const; i-th likelihood element and its gradient. void Gradient(const double* x, double* g) const; evaluate gradient. bool IsWeighted() const; { return (fWeight != 0); }. void UseSumOfWeights(); Use the weights in evaluating the likelihood. void UseSumOfWeightSquare(bool on = true); Use sum of the weight squared in evaluating the likelihood; (this is needed for calculating the errors). double DoEval(const double* x) const. Evaluation of the function (required by interface). double DoDerivative(const double* x, unsigned int icoord) const; for derivatives. » Author: L. Moneta Fri Aug 17 14:29:24 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » La",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:542,Testability,log,log,542,". ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>. class evaluating the log likelihood; for binned Poisson likelihood fits; it is template to distinguish gradient and non-gradient case. @ingroup FitMethodFunc. Function Members (Methods); public:. virtual~PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>(const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction*Clone() const; virtual const ROOT::Fit::BinData&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>::Data() const; virtual doubleDataElement(const double* x, unsigned int i, double* g) const; shared_ptr<ROOT::Fit::BinData>ROOT::Fit::BasicFCN<ROOT::Math::IGrad",MatchSource.WIKI,root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__PoissonLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Fit__SparseData.html:459,Availability,error,error,459,". ROOT::Fit::SparseData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::SparseData. class ROOT::Fit::SparseData: public ROOT::Fit::FitData. Function Members (Methods); public:. virtual~SparseData(); voidAdd(vector<double>& min, vector<double>& max, const double content, const double error = 1.); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidGetBinData(ROOT::Fit::BinData&) const; voidGetBinDataIntegral(ROOT::Fit::BinData&) const; voidGetBinDataNoZeros(ROOT::Fit::BinData&) const; voidGetPoint(const unsigned int i, vector<double>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[",MatchSource.WIKI,root/html604/ROOT__Fit__SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html
https://root.cern/root/html604/ROOT__Fit__SparseData.html:1122,Availability,error,error,1122,"ource:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::SparseData. class ROOT::Fit::SparseData: public ROOT::Fit::FitData. Function Members (Methods); public:. virtual~SparseData(); voidAdd(vector<double>& min, vector<double>& max, const double content, const double error = 1.); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidGetBinData(ROOT::Fit::BinData&) const; voidGetBinDataIntegral(ROOT::Fit::BinData&) const; voidGetBinDataNoZeros(ROOT::Fit::BinData&) const; voidGetPoint(const unsigned int i, vector<double>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int",MatchSource.WIKI,root/html604/ROOT__Fit__SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html
https://root.cern/root/html604/ROOT__Fit__SparseData.html:2305,Availability,error,error,2305,"e>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Fit__SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html
https://root.cern/root/html604/ROOT__Fit__SparseData.html:1787,Modifiability,Inherit,Inheritance,1787,"OOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidGetBinData(ROOT::Fit::BinData&) const; voidGetBinDataIntegral(ROOT::Fit::BinData&) const; voidGetBinDataNoZeros(ROOT::Fit::BinData&) const; voidGetPoint(const unsigned int i, vector<double>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROO",MatchSource.WIKI,root/html604/ROOT__Fit__SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html
https://root.cern/root/html604/ROOT__Fit__SparseData.html:1800,Modifiability,Inherit,Inherited,1800,"OOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidGetBinData(ROOT::Fit::BinData&) const; voidGetBinDataIntegral(ROOT::Fit::BinData&) const; voidGetBinDataNoZeros(ROOT::Fit::BinData&) const; voidGetPoint(const unsigned int i, vector<double>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int NPoints() const; Returns the number of points stored. unsigned int NDim() const; Returns the dimension of the object (bins). void Add(vector<double>& min, vector<double>& max, const double content, const double error = 1.); Adds a new bin specified by the vectors. void PrintList() const; Debug method to print the list of bins stored. void GetBinData(ROOT::Fit::BinData& ) const; Transforms the data into a ROOT::Fit::BinData structure. void GetBinDataIntegral(ROOT::Fit::BinData& ) const; Same as before, but with integral format. void GetBinDataNoZeros(ROOT::Fit::BinData& ) const; Same as before, but including zero content bins. » Author: David Gonzalez Maline Wed Aug 28 15:23:43 2009 » Copyright (c) 2006 LCG ROO",MatchSource.WIKI,root/html604/ROOT__Fit__SparseData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__SparseData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:579,Energy Efficiency,efficient,efficient,579,". ROOT::Fit::UnBinData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::UnBinData. class ROOT::Fit::UnBinData: public ROOT::Fit::FitData. Class describing the unbinned data sets (just x coordinates values) of any dimensions. There is the option to construct UnBindata copying the data in (using the DataVector class); or using pointer to external data (DataWrapper) class.; In general is found to be more efficient to copy the data.; In case of really large data sets for limiting memory consumption then the other option can be used; Specialized constructor exists for using external data up to 3 dimensions. When the data are copying in the number of points can be set later (or re-set) using Initialize and; the data are inserted one by one using the Add method.; It is mandatory to set the size before using the Add method. @ingroup FitData. Function Members (Methods); public:. virtual~UnBinData(); voidAdd(double x); voidAdd(const double* x); voidAdd(double x, double y); voidAdd(const double* x, double w); voidAdd(double x, double y, double z); const double*Coords(unsigned int ipoint) const; unsigned intDataSize() const; ROOT::Fit::FitDataROOT::Fit::FitData::FitData(); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidInitialize(unsigned int maxpoints, unsigned int dim = 1, bool isWeighted = false); boolIsWeighted() const; static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::Dat",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:662,Energy Efficiency,consumption,consumption,662,". ROOT::Fit::UnBinData. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::UnBinData. class ROOT::Fit::UnBinData: public ROOT::Fit::FitData. Class describing the unbinned data sets (just x coordinates values) of any dimensions. There is the option to construct UnBindata copying the data in (using the DataVector class); or using pointer to external data (DataWrapper) class.; In general is found to be more efficient to copy the data.; In case of really large data sets for limiting memory consumption then the other option can be used; Specialized constructor exists for using external data up to 3 dimensions. When the data are copying in the number of points can be set later (or re-set) using Initialize and; the data are inserted one by one using the Add method.; It is mandatory to set the size before using the Add method. @ingroup FitData. Function Members (Methods); public:. virtual~UnBinData(); voidAdd(double x); voidAdd(const double* x); voidAdd(double x, double y); voidAdd(const double* x, double w); voidAdd(double x, double y, double z); const double*Coords(unsigned int ipoint) const; unsigned intDataSize() const; ROOT::Fit::FitDataROOT::Fit::FitData::FitData(); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidInitialize(unsigned int maxpoints, unsigned int dim = 1, bool isWeighted = false); boolIsWeighted() const; static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::Dat",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:4222,Energy Efficiency,allocate,allocate,4222,"); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const double* dataZ, const ROOT::Fit::DataRange& range, bool isWeighted = false); doubleWeight(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). private:. ROOT::Fit::UnBinData&operator=(const ROOT::Fit::UnBinData&); ROOT::Fit::UnBinDataUnBinData(const ROOT::Fit::UnBinData&). Data Members; private:. ROOT::Fit::DataVector*fDataVectorpointer to internal data vector (null for external data); ROOT::Fit::DataWrapper*fDataWrapperpointer to structure wrapping external data (null when data are copied in); unsigned intfDimcoordinate data dimension; unsigned intfNPointsnumer of fit points; unsigned intfPointSizepoit size dimension (coordinate + weight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit UnBinData(unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from dimension of point and max number of points (to pre-allocate vector). explicit UnBinData(const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from range and default option. UnBinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from options and range. UnBinData(unsigned int n, const double* dataX). constructor for 1D external data (data are not copied inside). UnBinData(unsigned int n, const double* dataX, const double* dataY, bool isWeighted = false). constructor for 2D external data (data are not copied inside); or 1D data with a weight (if isWeighted = true). UnBinData(unsigned int n, const double* dataX, const double* dataY, const double* dataZ, bool isWeighted = false). constructor for 3D external data (data are not copied inside); or 2D data with a weight (if isWeighted = true). UnBinData(unsigned int n, const double* dataX, ",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:3763,Integrability,wrap,wrapping,3763,"opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int n, const double* dataX, const double* dataY, const double* dataZ, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const ROOT::Fit::DataRange& range, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const double* dataZ, const ROOT::Fit::DataRange& range, bool isWeighted = false); doubleWeight(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). private:. ROOT::Fit::UnBinData&operator=(const ROOT::Fit::UnBinData&); ROOT::Fit::UnBinDataUnBinData(const ROOT::Fit::UnBinData&). Data Members; private:. ROOT::Fit::DataVector*fDataVectorpointer to internal data vector (null for external data); ROOT::Fit::DataWrapper*fDataWrapperpointer to structure wrapping external data (null when data are copied in); unsigned intfDimcoordinate data dimension; unsigned intfNPointsnumer of fit points; unsigned intfPointSizepoit size dimension (coordinate + weight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit UnBinData(unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from dimension of point and max number of points (to pre-allocate vector). explicit UnBinData(const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from range and default option. UnBinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from options and range. UnBinData(unsigned int n, const double* dataX). constructor for 1D external data (data are not copied inside). UnBinData(unsigned int n, const double* dataX, const double* dataY, bool is",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:6623,Integrability,wrap,wrapper,6623,"nBinData(unsigned int maxpoints, const double* dataX, const ROOT::Fit::DataRange& range). constructor for 1D data and a range (data are copied inside according to the given range). UnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const ROOT::Fit::DataRange& range, bool isWeighted = false). constructor for 2D data and a range (data are copied inside according to the given range); or 1 1D data set + weight. If is weighted dataY is the pointer to the list of the weights. UnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const double* dataZ, const ROOT::Fit::DataRange& range, bool isWeighted = false). constructor for 3D data and a range (data are copied inside according to the given range); or a 2D data set + weights. If is weighted dataZ is the pointer to the list of the weights. UnBinData & operator=(const ROOT::Fit::UnBinData& ); assignment operator (private). { return *this; }. virtual ~UnBinData(). destructor, delete pointer to internal data or external data wrapper. void Initialize(unsigned int maxpoints, unsigned int dim = 1, bool isWeighted = false). preallocate a data set given size and dimension of the coordinates; if a vector already exists with correct dimension (point size) extend the existing one; to a total size of maxpoints (equivalent to a Resize). void Add(double x). add one dim coordinate data (unweighted). void Add(double x, double y). add 2-dim coordinate data; can also be used to add 1-dim data with a weight. void Add(double x, double y, double z). add 3-dim coordinate data; can also be used to add 2-dim data with a weight. void Add(const double* x). add multi-dim coordinate data. void Add(const double* x, double w). add multi-dim coordinate data + weight. const double * Coords(unsigned int ipoint) const. return pointer to coordinate data. bool IsWeighted() const. double Weight(unsigned int ipoint) const. void Resize(unsigned int npoints). resize the vector to the given npoints. unsigned int NPoi",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:3981,Modifiability,Inherit,Inheritance,3981,"* dataZ, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const ROOT::Fit::DataRange& range, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const double* dataZ, const ROOT::Fit::DataRange& range, bool isWeighted = false); doubleWeight(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). private:. ROOT::Fit::UnBinData&operator=(const ROOT::Fit::UnBinData&); ROOT::Fit::UnBinDataUnBinData(const ROOT::Fit::UnBinData&). Data Members; private:. ROOT::Fit::DataVector*fDataVectorpointer to internal data vector (null for external data); ROOT::Fit::DataWrapper*fDataWrapperpointer to structure wrapping external data (null when data are copied in); unsigned intfDimcoordinate data dimension; unsigned intfNPointsnumer of fit points; unsigned intfPointSizepoit size dimension (coordinate + weight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit UnBinData(unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from dimension of point and max number of points (to pre-allocate vector). explicit UnBinData(const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from range and default option. UnBinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from options and range. UnBinData(unsigned int n, const double* dataX). constructor for 1D external data (data are not copied inside). UnBinData(unsigned int n, const double* dataX, const double* dataY, bool isWeighted = false). constructor for 2D external data (data are not copied inside); or 1D data with a weight (if isWeighted = true). UnBinData(unsigned int n, const double* dataX, const double* dataY, const double* dat",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:3994,Modifiability,Inherit,Inherited,3994,"* dataZ, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const ROOT::Fit::DataRange& range, bool isWeighted = false); ROOT::Fit::UnBinDataUnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const double* dataZ, const ROOT::Fit::DataRange& range, bool isWeighted = false); doubleWeight(unsigned int ipoint) const. protected:. voidSetNPoints(unsigned int n). private:. ROOT::Fit::UnBinData&operator=(const ROOT::Fit::UnBinData&); ROOT::Fit::UnBinDataUnBinData(const ROOT::Fit::UnBinData&). Data Members; private:. ROOT::Fit::DataVector*fDataVectorpointer to internal data vector (null for external data); ROOT::Fit::DataWrapper*fDataWrapperpointer to structure wrapping external data (null when data are copied in); unsigned intfDimcoordinate data dimension; unsigned intfNPointsnumer of fit points; unsigned intfPointSizepoit size dimension (coordinate + weight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit UnBinData(unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from dimension of point and max number of points (to pre-allocate vector). explicit UnBinData(const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from range and default option. UnBinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, bool isWeighted = false). constructor from options and range. UnBinData(unsigned int n, const double* dataX). constructor for 1D external data (data are not copied inside). UnBinData(unsigned int n, const double* dataX, const double* dataY, bool isWeighted = false). constructor for 2D external data (data are not copied inside); or 1D data with a weight (if isWeighted = true). UnBinData(unsigned int n, const double* dataX, const double* dataY, const double* dat",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Fit__UnBinData.html:6851,Modifiability,extend,extend,6851," dataX, const double* dataY, const ROOT::Fit::DataRange& range, bool isWeighted = false). constructor for 2D data and a range (data are copied inside according to the given range); or 1 1D data set + weight. If is weighted dataY is the pointer to the list of the weights. UnBinData(unsigned int maxpoints, const double* dataX, const double* dataY, const double* dataZ, const ROOT::Fit::DataRange& range, bool isWeighted = false). constructor for 3D data and a range (data are copied inside according to the given range); or a 2D data set + weights. If is weighted dataZ is the pointer to the list of the weights. UnBinData & operator=(const ROOT::Fit::UnBinData& ); assignment operator (private). { return *this; }. virtual ~UnBinData(). destructor, delete pointer to internal data or external data wrapper. void Initialize(unsigned int maxpoints, unsigned int dim = 1, bool isWeighted = false). preallocate a data set given size and dimension of the coordinates; if a vector already exists with correct dimension (point size) extend the existing one; to a total size of maxpoints (equivalent to a Resize). void Add(double x). add one dim coordinate data (unweighted). void Add(double x, double y). add 2-dim coordinate data; can also be used to add 1-dim data with a weight. void Add(double x, double y, double z). add 3-dim coordinate data; can also be used to add 2-dim data with a weight. void Add(const double* x). add multi-dim coordinate data. void Add(const double* x, double w). add multi-dim coordinate data + weight. const double * Coords(unsigned int ipoint) const. return pointer to coordinate data. bool IsWeighted() const. double Weight(unsigned int ipoint) const. void Resize(unsigned int npoints). resize the vector to the given npoints. unsigned int NPoints() const. return number of contained points. { return fNPoints; }. unsigned int Size() const. return number of contained points. { return fNPoints; }. unsigned int NDim() const. return coordinate data dimension. { return fDim;",MatchSource.WIKI,root/html604/ROOT__Fit__UnBinData.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Fit__UnBinData.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1220,Availability,error,error,1220,"E; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable tr",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1248,Availability,toler,tolerance,1248,"E; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable tr",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1275,Availability,error,error,1275,"E; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable tr",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1307,Availability,toler,tolerance,1307,"E; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable tr",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:4803,Availability,toler,tolerance,4803,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:4883,Availability,error,error,4883,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5161,Availability,error,error,5161,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5190,Availability,toler,tolerance,5190,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5339,Availability,error,error,5339,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5636,Availability,toler,tolerance,5636,"doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. ret",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6350,Availability,toler,tolerance,6350,"rts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return num",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7137,Availability,Error,Error,7137,"ol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7171,Availability,error,error,7171,"ol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7239,Availability,error,error,7239,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7496,Availability,toler,tolerance,7496,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7557,Availability,toler,tolerance,7557,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:415,Deployability,integrat,integration,415,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:549,Deployability,integrat,integration,549,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1782,Deployability,integrat,integration,1782,"Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMul",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1964,Deployability,integrat,integration,1964,"on dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2167,Deployability,integrat,integration,2167,"egral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMu",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2448,Deployability,integrat,integration,2448,"racy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIn",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2615,Deployability,integrat,integration,2615,"1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const RO",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2704,Deployability,Integrat,Integration,2704,"s obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions(",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3672,Deployability,Integrat,IntegratorMultiDimOptionsOptions,3672,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3980,Deployability,Integrat,IntegratorMultiDimOptions,3980,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:4136,Deployability,Integrat,IntegrationMultiDim,4136,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5219,Deployability,integrat,integration,5219,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6965,Deployability,integrat,integration,6965," + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7096,Deployability,integrat,integration,7096,"veIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7159,Deployability,integrat,integration,7159,"ol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7306,Deployability,integrat,integration,7306,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7806,Deployability,Integrat,IntegratorMultiDimOptions,7806,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:14,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,14,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:265,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,265,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:311,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,311,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:395,Energy Efficiency,adapt,adaptive,395,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:516,Energy Efficiency,adapt,adaptive,516,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:655,Energy Efficiency,adapt,adapted,655,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2415,Energy Efficiency,adapt,adaptive,2415,"racy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIn",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2581,Energy Efficiency,adapt,adaptive,2581,"1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const RO",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2762,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,2762,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2804,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,2804,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2875,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,2875,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2917,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,2917,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3114,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,3114,"ubstantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual RO",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3567,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,3567,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3622,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,3622,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5450,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,5450,":VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working arr",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6075,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,6075,"unction evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6473,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,6473,"e absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:415,Integrability,integrat,integration,415,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:549,Integrability,integrat,integration,549,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:701,Integrability,rout,routine,701,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1782,Integrability,integrat,integration,1782,"Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMul",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1964,Integrability,integrat,integration,1964,"on dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2032,Integrability,rout,routine,2032,"o be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.00000",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2167,Integrability,integrat,integration,2167,"egral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMu",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2448,Integrability,integrat,integration,2448,"racy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIn",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2615,Integrability,integrat,integration,2615,"1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const RO",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2704,Integrability,Integrat,Integration,2704,"s obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions(",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3672,Integrability,Integrat,IntegratorMultiDimOptionsOptions,3672,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3980,Integrability,Integrat,IntegratorMultiDimOptions,3980,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:4136,Integrability,Integrat,IntegrationMultiDim,4136,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5219,Integrability,integrat,integration,5219,"unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6965,Integrability,integrat,integration,6965," + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7021,Integrability,interface,interface,7021," + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7096,Integrability,integrat,integration,7096,"veIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions rega",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7159,Integrability,integrat,integration,7159,"ol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT s",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7306,Integrability,integrat,integration,7306,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:7806,Integrability,Integrat,IntegratorMultiDimOptions,7806,"000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:14,Modifiability,Adapt,AdaptiveIntegratorMultiDim,14,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:265,Modifiability,Adapt,AdaptiveIntegratorMultiDim,265,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:311,Modifiability,Adapt,AdaptiveIntegratorMultiDim,311,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:395,Modifiability,adapt,adaptive,395,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:516,Modifiability,adapt,adaptive,516,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:655,Modifiability,adapt,adapted,655,". ROOT::Math::AdaptiveIntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::AdaptiveIntegratorMultiDim. class ROOT::Math::AdaptiveIntegratorMultiDim: public ROOT::Math::VirtualIntegratorMultiDim. class for adaptive quadrature integration in multi-dimensions using rectangular regions.; Algorithm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For ea",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2415,Modifiability,adapt,adaptive,2415,"racy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIn",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2581,Modifiability,adapt,adaptive,2581,"1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const RO",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2762,Modifiability,Adapt,AdaptiveIntegratorMultiDim,2762,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2804,Modifiability,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,2804,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2875,Modifiability,Adapt,AdaptiveIntegratorMultiDim,2875,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:2917,Modifiability,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,2917,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3114,Modifiability,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,3114,"ubstantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual RO",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3567,Modifiability,Adapt,AdaptiveIntegratorMultiDim,3567,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:3622,Modifiability,Adapt,AdaptiveIntegratorMultiDim,3622,"tiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsi",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5373,Modifiability,Inherit,Inheritance,5373,"Integrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5386,Modifiability,Inherit,Inherited,5386,"Integrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:5450,Modifiability,Adapt,AdaptiveIntegratorMultiDim,5450,":VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. doubleDoIntegral(const double* xmin, const double* xmax, bool absVal = false). Data Members; private:. doublefAbsTolabsolute tolerance; unsigned intfDimdimentionality of integrand; doublefErrorintegration error; const ROOT::Math::IMultiGenFunction*fFunpointer to integrand function; unsigned intfMaxPtsmaximum number of function evaluation requested; unsigned intfMinPtsminimum number of function evaluation requested; intfNEvalnumber of function evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working arr",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6075,Modifiability,Adapt,AdaptiveIntegratorMultiDim,6075,"unction evaluation; doublefRelErrorRelative error; doublefRelTolrelative tolerance; doublefResultlast integration result; unsigned intfSizemax size of working array (explode with dimension); intfStatusstatus of algorithm (error if not zero). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:6473,Modifiability,Adapt,AdaptiveIntegratorMultiDim,6473,"e absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); ",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1493,Performance,perform,performed,1493,"thm from A.C. Genz, A.A. Malik, An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html:1599,Performance,perform,performed,1599,"dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302. Converted/adapted by R.Brun to C++ from Fortran CERNLIB routine RADMUL (D120); The new code features many changes compared to the Fortran version. Control parameters are:. minpts: Minimum number of function evaluations requested. Must not exceed maxpts.; if minpts < 1 minpts is set to 2^n +2*n*(n+1) +1 where n is the function dimension; maxpts: Maximum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epstol, epsrel : Specified relative and absolute accuracy. The integral will stop if the relative error is less than relative tolerance OR the; absolute error is less than the absolute tolerance. The class computes in addition to the integral of the function is the desired interval:. an estimation of the relative accuracy of the result.; number of function evaluations performed.; status code :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. An integration rule of degree seven is used together with a certain; strategy of subdivision.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Rid",MatchSource.WIKI,root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AdaptiveIntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__AxisAngle.html:2420,Modifiability,Inherit,Inheritance,2420,"OT::Math::AxisAngle& rhs) const; ROOT::Math::AxisAngle::XYZVectoroperator()(const ROOT::Math::AxisAngle::XYZVector& v) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::Rotation3D& r) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::AxisAngle& a) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::EulerAngles& e) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::Quaternion& q) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationZYX& r) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationX& rx) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationY& ry) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::AxisAngle&operator=(const ROOT::Math::AxisAngle&); ROOT::Math::AxisAngle&operator=(ROOT::Math::AxisAngle&&); booloperator==(const ROOT::Math::AxisAngle& rhs) const; voidRectify(). private:. static doublePi(); voidRectifyAngle(). Data Members; private:. ROOT::Math::AxisAngle::ScalarfAnglerotation angle; ROOT::Math::AxisAngle::AxisVectorfAxisrotation axis (3D vector). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AxisAngle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AxisAngle.html
https://root.cern/root/html604/ROOT__Math__AxisAngle.html:2433,Modifiability,Inherit,Inherited,2433,"OT::Math::AxisAngle& rhs) const; ROOT::Math::AxisAngle::XYZVectoroperator()(const ROOT::Math::AxisAngle::XYZVector& v) const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>operator()<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::Rotation3D& r) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::AxisAngle& a) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::EulerAngles& e) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::Quaternion& q) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationZYX& r) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationX& rx) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationY& ry) const; ROOT::Math::AxisAngleoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::AxisAngle&operator=(const ROOT::Math::AxisAngle&); ROOT::Math::AxisAngle&operator=(ROOT::Math::AxisAngle&&); booloperator==(const ROOT::Math::AxisAngle& rhs) const; voidRectify(). private:. static doublePi(); voidRectifyAngle(). Data Members; private:. ROOT::Math::AxisAngle::ScalarfAnglerotation angle; ROOT::Math::AxisAngle::AxisVectorfAxisrotation axis (3D vector). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__AxisAngle.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__AxisAngle.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:638,Availability,avail,available,638,". ROOT::Math::BaseIntegratorOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BaseIntegratorOptions. class ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constr",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:1355,Availability,toler,tolerance,1355,"instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOp",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:1542,Availability,toler,tolerance,1542,"instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOp",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2198,Availability,toler,tolerance,2198,"ize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2274,Availability,toler,tolerance,2274,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2554,Availability,toler,tolerance,2554,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2642,Availability,toler,tolerance,2642,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:349,Deployability,integrat,integration,349,". ROOT::Math::BaseIntegratorOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BaseIntegratorOptions. class ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constr",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:491,Deployability,Integrat,Integration,491,". ROOT::Math::BaseIntegratorOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BaseIntegratorOptions. class ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constr",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2073,Deployability,Integrat,Integrator,2073,"st ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2104,Deployability,integrat,integrator,2104,"st ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:349,Integrability,integrat,integration,349,". ROOT::Math::BaseIntegratorOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BaseIntegratorOptions. class ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constr",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:491,Integrability,Integrat,Integration,491,". ROOT::Math::BaseIntegratorOptions. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BaseIntegratorOptions. class ROOT::Math::BaseIntegratorOptions. Base class for Numerical integration options; common in 1D and multi-dimension; This is an internal class and is not supposed to be instantiated by the user. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constr",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2073,Integrability,Integrat,Integrator,2073,"st ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2104,Integrability,integrat,integrator,2104,"st ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:1602,Modifiability,Inherit,Inheritance,1602, check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set,MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:1615,Modifiability,Inherit,Inherited,1615, check for available constructors.; public:. virtual~BaseIntegratorOptions(); doubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set,MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:1729,Safety,avoid,avoid,1729,ubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int ,MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2010,Safety,avoid,avoid,2010,"& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/ma",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2044,Usability,Clear,ClearExtra,2044,"(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This pa",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html:2867,Usability,Clear,ClearExtra,2867,"Size() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BaseIntegratorOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BaseIntegratorOptions.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:901,Availability,avail,available,901,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:3502,Deployability,Update,UpdateNCalls,3502,"MethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:3524,Deployability,update,update,3524,"MethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:499,Integrability,Interface,Interface,499,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:608,Integrability,interface,interface,608,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:626,Integrability,interface,interface,626,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>: public ROOT::Math::IBaseFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2883,Integrability,interface,interface,2883,":Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2721,Modifiability,Inherit,Inheritance,2721,"MultiDim&); virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last chang",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html:2734,Modifiability,Inherit,Inherited,2734,"MultiDim&); virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last chang",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IBaseFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:917,Availability,avail,available,917,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:4315,Deployability,Update,UpdateNCalls,4315,"h::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:4337,Deployability,update,update,4337,"h::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:515,Integrability,Interface,Interface,515,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:624,Integrability,interface,interface,624,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:642,Integrability,interface,interface,642,". ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>. class ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>: public ROOT::Math::IGradientFunctionMultiDim. FitMethodFunction class; Interface for objective functions (like chi2 and likelihood used in the fit); In addition to normal function interface provide interface for calculating each; data contrinution to the function which is required by some algorithm (like Fumili). @ingroup FitMethodFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>(int dim, int npoint); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; virtual doubleDataElement(const double* x, unsigned int i, double* g = 0) const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:3696,Integrability,interface,interface,3696,"iDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:3534,Modifiability,Inherit,Inheritance,3534,"gned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last chang",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html:3547,Modifiability,Inherit,Inherited,3547,"gned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>&); virtual voidResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidUpdateNCalls() const. Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tkUndefined. private:. unsigned intfNCallsnumber of function calls; unsigned intfNDimfunction dimension; unsigned intfNPointssize of the data. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; unsigned int NDim() const. Number of dimension (parameters) . From IGenMultiFunction interface. { return fNDim; }. double DataElement(const double* x, unsigned int i, double* g = 0) const. method returning the data i-th contribution to the fit objective function; For example the residual for the least square functions or the pdf element for the; likelihood functions.; Estimating eventually also the gradient of the data element if the passed pointer is not null. unsigned int NPoints() const. return the number of data points used in evaluating the function. { return fNPoints; }. unsigned int NCalls() const. return the total number of function calls (overrided if needed). { return fNCalls; }. void UpdateNCalls() const. update number of calls. { fNCalls++; }. void ResetNCalls(). reset number of function calls. { fNCalls = 0; }. » Author: L. Moneta Thu Aug 16 15:40:28 2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last chang",MatchSource.WIKI,root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicFitMethodFunction_-p1IGradientFunctionMultiDim_.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:1320,Availability,Error,ErrorDef,1320," virtual~BasicMinimizer(); ROOT::Math::BasicMinimizerBasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*GradObjFunction() const; virtual boolROOT::Math::Minimizer::Hesse(); virtual boolIsFixedVariab",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:1382,Availability,Error,Errors,1382," virtual~BasicMinimizer(); ROOT::Math::BasicMinimizerBasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*GradObjFunction() const; virtual boolROOT::Math::Minimizer::Hesse(); virtual boolIsFixedVariab",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:5001,Availability,Toler,Tolerance,5001,"SetErrorDef(double up); virtual boolSetFixedVariable(unsigned int, const string&, double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGradFunction& func); virtual boolSetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double, double); virtual boolSetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolSetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double step); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double val); virtual boolSetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*TransformFunction() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const.",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:5874,Availability,error,errors,5874,"tVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*TransformFunction() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. protected:. boolCheckDimension() const; boolCheckObjFunction() const; ROOT::Math::MinimTransformFunction*CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidSetFinalValues(const double* x); voidSetMinValue(double val). private:. ROOT::Math::BasicMinimizerBasicMinimizer(const ROOT::Math::BasicMinimizer&); ROOT::Math::BasicMinimizer&operator=(const ROOT::Math::BasicMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned i",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8297,Deployability,Release,ReleaseVariable,8297," , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8333,Deployability,release,release,8333," , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:6277,Modifiability,variab,variables,6277," string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. protected:. boolCheckDimension() const; boolCheckObjFunction() const; ROOT::Math::MinimTransformFunction*CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidSetFinalValues(const double* x); voidSetMinValue(double val). private:. ROOT::Math::BasicMinimizerBasicMinimizer(const ROOT::Math::BasicMinimizer&); ROOT::Math::BasicMinimizer&operator=(const ROOT::Math::BasicMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:6302,Modifiability,Inherit,Inheritance,6302,"on*CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidSetFinalValues(const double* x); voidSetMinValue(double val). private:. ROOT::Math::BasicMinimizerBasicMinimizer(const ROOT::Math::BasicMinimizer&); ROOT::Math::BasicMinimizer&operator=(const ROOT::Math::BasicMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double ,",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:6315,Modifiability,Inherit,Inherited,6315,"on*CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidSetFinalValues(const double* x); voidSetMinValue(double val). private:. ROOT::Math::BasicMinimizerBasicMinimizer(const ROOT::Math::BasicMinimizer&); ROOT::Math::BasicMinimizer&operator=(const ROOT::Math::BasicMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double ,",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:6876,Modifiability,variab,variable,6876,"inimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set ",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7010,Modifiability,variab,variable,7010,"r<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an alr",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7183,Modifiability,variab,variable,7183,"n*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7363,Modifiability,variab,variable,7363,"ted Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7485,Modifiability,variab,variable,7485,"const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered consta",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7617,Modifiability,variab,variable,7617,"structor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7699,Modifiability,variab,variables,7699,"n(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::Par",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7872,Modifiability,variab,variable,7872," string& name, double val, double step); set free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:7986,Modifiability,variab,variable,7986,"t string& name, double val, double step, double lower); set lower limit variable (override if minimizer supports them ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a n",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8100,Modifiability,variab,variable,8100,"hem ). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() co",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8219,Modifiability,variab,variable,8219,"et upper limit variable (override if minimizer supports them ). bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the ",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8282,Modifiability,variab,variable,8282,"igned int ivar, const string& name, double val, double step, double , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { r",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8353,Modifiability,variab,variable,8353," , double ); set upper/lower limited variable (override if minimizer supports them ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8431,Modifiability,variab,variable,8431,"m ). bool SetFixedVariable(unsigned int , const string& , double ); set fixed variable (override if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of par",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8522,Modifiability,variab,variables,8522,"ide if minimizer supports them ). bool SetVariableValue(unsigned int ivar, double val); set the value of an existing variable. bool SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8640,Modifiability,variab,variable,8640,"ol SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8663,Modifiability,variab,variable,8663,"ol SetVariableValues(const double* x); set the values of all existing variables (array must be dimensioned to the size of existing parameters). bool SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8725,Modifiability,Variab,VariableName,8725,"SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8776,Modifiability,variab,variables,8776,"SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8828,Modifiability,variab,variable,8828,"SetVariableStepSize(unsigned int ivar, double step); set the step size of an already existing variable. bool SetVariableLowerLimit(unsigned int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8849,Modifiability,Variab,VariableIndex,8849,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8903,Modifiability,variab,variable,8903,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8920,Modifiability,variab,variable,8920,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:8956,Modifiability,variab,variable,8956,"signed int ivar, double lower); set the lower-limit of an already existing variable. bool SetVariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:9318,Modifiability,variab,variables,9318,"gned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction() const. MinimTransformFunction * CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0). void SetFinalValues(const double* x). void SetMinValue(double val); { fMinVal = val; }. » Author: L. Moneta Oct 2012 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatic",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:9006,Performance,perform,perform,9006,"VariableUpperLimit(unsigned int ivar, double upper); set the upper-limit of an already existing variable. bool SetVariableLimits(unsigned int ivar, double lower, double upper); set the limits of an already existing variable. bool FixVariable(unsigned int ivar); fix an existing variable. bool ReleaseVariable(unsigned int ivar); release an existing variable. bool IsFixedVariable(unsigned int ivar) const; query if an existing variable is fixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction() const. MinimTransformFunction * CreateTransformation(vector<double>& startValues, const ROO",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:5891,Security,validat,validated,5891,"tVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*TransformFunction() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. protected:. boolCheckDimension() const; boolCheckObjFunction() const; ROOT::Math::MinimTransformFunction*CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidSetFinalValues(const double* x); voidSetMinValue(double val). private:. ROOT::Math::BasicMinimizerBasicMinimizer(const ROOT::Math::BasicMinimizer&); ROOT::Math::BasicMinimizer&operator=(const ROOT::Math::BasicMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. map<unsigned int,pair<double,double> >fBoundsmap specifying the bound using as key the parameter index; unsigned intfDim; doublefMinVal; vector<string>fNames; const ROOT::Math::IMultiGenFunction*fObjFunc; vector<double>fSteps; vector<double>fValues; vector<ROOT::Math::EMinimVariableType>fVarTypesvector specifyng the type of variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BasicMinimizer(). Default constructor. virtual ~BasicMinimizer(). Destructor. BasicMinimizer(const ROOT::Math::BasicMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool SetVariable(unsigned i",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:9814,Security,access,accessor,9814,"ixed (i.e. considered constant in the minimization); note that by default all variables are not fixed. bool GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; get variable settings in a variable object (like ROOT::Fit::ParamsSettings). std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names). int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. bool Minimize(); method to perform the minimization. double MinValue() const; return minimum function value. { return fMinVal; }. const double * X() const; return pointer to X values at the minimum. { return &fValues.front(); }. unsigned int NDim() const; number of dimensions. { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem). unsigned int NPar() const; total number of parameter defined. { return fValues.size(); }. const ROOT::Math::IMultiGenFunction * ObjFunction() const; return pointer to used objective function. { return fObjFunc; }. const ROOT::Math::IMultiGradFunction * GradObjFunction() const; return pointer to used gradient object function (NULL if gradient is not supported). void PrintResult() const; print result of minimization. const double * StepSizes() const; accessor methods. { return &fSteps.front(); }. bool CheckDimension() const. bool CheckObjFunction() const. MinimTransformFunction * CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0). void SetFinalValues(const double* x). void SetMinValue(double val); { fMinVal = val; }. » Author: L. Moneta Oct 2012 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html:864,Usability,Clear,Clear,864," virtual~BasicMinimizer(); ROOT::Math::BasicMinimizerBasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolFixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolGetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*GradObjFunction() const; virtual boolROOT::Math::Minimizer::Hesse(); virtual boolIsFixedVariab",MatchSource.WIKI,root/html604/ROOT__Math__BasicMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BasicMinimizer.html
https://root.cern/root/html604/ROOT__Math__Boost.html:3855,Modifiability,Inherit,Inheritance,3855,"th::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& beta). protected:. voidSetIdentity(). Data Members; public:. static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTZ; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXZ; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::Boost::EBoostMatrixIndexkTT; static ROOT::Math::Boost::EBoostMatrixIndexkXT; static ROOT::Math::Boost::EBoostMatrixIndexkXX; static ROOT::Math::Boost::EBoostMatrixIndexkXY; static ROOT::Math::Boost::EBoostMatrixIndexkXZ; static ROOT::Math::Boost::EBoostMatrixIndexkYT; static ROOT::Math::Boost::EBoostMatrixIndexkYY; static ROOT::Math::Boost::EBoostMatrixIndexkYZ; static ROOT::Math::Boost::EBoostMatrixIndexkZT; static ROOT::Math::Boost::EBoostMatrixIndexkZZ. private:. ROOT::Math::Boost::ScalarfM[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Boost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Boost.html
https://root.cern/root/html604/ROOT__Math__Boost.html:3868,Modifiability,Inherit,Inherited,3868,"th::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& beta). protected:. voidSetIdentity(). Data Members; public:. static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLTZ; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLXZ; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::Boost::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::Boost::EBoostMatrixIndexkTT; static ROOT::Math::Boost::EBoostMatrixIndexkXT; static ROOT::Math::Boost::EBoostMatrixIndexkXX; static ROOT::Math::Boost::EBoostMatrixIndexkXY; static ROOT::Math::Boost::EBoostMatrixIndexkXZ; static ROOT::Math::Boost::EBoostMatrixIndexkYT; static ROOT::Math::Boost::EBoostMatrixIndexkYY; static ROOT::Math::Boost::EBoostMatrixIndexkYZ; static ROOT::Math::Boost::EBoostMatrixIndexkZT; static ROOT::Math::Boost::EBoostMatrixIndexkZZ. private:. ROOT::Math::Boost::ScalarfM[10]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Boost.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Boost.html
https://root.cern/root/html604/ROOT__Math__BoostX.html:3214,Modifiability,Inherit,Inheritance,3214,ectify(); voidSetBeta(ROOT::Math::BoostX::Scalar beta); voidSetComponents(ROOT::Math::BoostX::Scalar beta_x). Data Members; public:. static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTZ; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXZ; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::BoostX::EBoostMatrixIndexkTT; static ROOT::Math::BoostX::EBoostMatrixIndexkXT; static ROOT::Math::BoostX::EBoostMatrixIndexkXX; static ROOT::Math::BoostX::EBoostMatrixIndexkXY; static ROOT::Math::BoostX::EBoostMatrixIndexkXZ; static ROOT::Math::BoostX::EBoostMatrixIndexkYT; static ROOT::Math::BoostX::EBoostMatrixIndexkYY; static ROOT::Math::BoostX::EBoostMatrixIndexkYZ; static ROOT::Math::BoostX::EBoostMatrixIndexkZT; static ROOT::Math::BoostX::EBoostMatrixIndexkZZ. private:. ROOT::Math::BoostX::ScalarfBetaboost beta X; ROOT::Math::BoostX::ScalarfGammaboost gamma. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__BoostX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BoostX.html
https://root.cern/root/html604/ROOT__Math__BoostX.html:3227,Modifiability,Inherit,Inherited,3227,ectify(); voidSetBeta(ROOT::Math::BoostX::Scalar beta); voidSetComponents(ROOT::Math::BoostX::Scalar beta_x). Data Members; public:. static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLTZ; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLXZ; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::BoostX::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::BoostX::EBoostMatrixIndexkTT; static ROOT::Math::BoostX::EBoostMatrixIndexkXT; static ROOT::Math::BoostX::EBoostMatrixIndexkXX; static ROOT::Math::BoostX::EBoostMatrixIndexkXY; static ROOT::Math::BoostX::EBoostMatrixIndexkXZ; static ROOT::Math::BoostX::EBoostMatrixIndexkYT; static ROOT::Math::BoostX::EBoostMatrixIndexkYY; static ROOT::Math::BoostX::EBoostMatrixIndexkYZ; static ROOT::Math::BoostX::EBoostMatrixIndexkZT; static ROOT::Math::BoostX::EBoostMatrixIndexkZZ. private:. ROOT::Math::BoostX::ScalarfBetaboost beta X; ROOT::Math::BoostX::ScalarfGammaboost gamma. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__BoostX.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BoostX.html
https://root.cern/root/html604/ROOT__Math__BoostY.html:3228,Modifiability,Inherit,Inheritance,3228,SetBeta(ROOT::Math::BoostY::Scalar beta); voidSetComponents(ROOT::Math::BoostY::Scalar beta_y). Data Members; public:. static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTZ; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXZ; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::BoostY::EBoostMatrixIndexkTT; static ROOT::Math::BoostY::EBoostMatrixIndexkXT; static ROOT::Math::BoostY::EBoostMatrixIndexkXX; static ROOT::Math::BoostY::EBoostMatrixIndexkXY; static ROOT::Math::BoostY::EBoostMatrixIndexkXZ; static ROOT::Math::BoostY::EBoostMatrixIndexkYT; static ROOT::Math::BoostY::EBoostMatrixIndexkYY; static ROOT::Math::BoostY::EBoostMatrixIndexkYZ; static ROOT::Math::BoostY::EBoostMatrixIndexkZT; static ROOT::Math::BoostY::EBoostMatrixIndexkZZ. private:. ROOT::Math::BoostY::ScalarfBetabeta Y of the Boost; ROOT::Math::BoostY::ScalarfGammagamma of the Boost. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__BoostY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BoostY.html
https://root.cern/root/html604/ROOT__Math__BoostY.html:3241,Modifiability,Inherit,Inherited,3241,SetBeta(ROOT::Math::BoostY::Scalar beta); voidSetComponents(ROOT::Math::BoostY::Scalar beta_y). Data Members; public:. static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLTZ; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLXZ; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::BoostY::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::BoostY::EBoostMatrixIndexkTT; static ROOT::Math::BoostY::EBoostMatrixIndexkXT; static ROOT::Math::BoostY::EBoostMatrixIndexkXX; static ROOT::Math::BoostY::EBoostMatrixIndexkXY; static ROOT::Math::BoostY::EBoostMatrixIndexkXZ; static ROOT::Math::BoostY::EBoostMatrixIndexkYT; static ROOT::Math::BoostY::EBoostMatrixIndexkYY; static ROOT::Math::BoostY::EBoostMatrixIndexkYZ; static ROOT::Math::BoostY::EBoostMatrixIndexkZT; static ROOT::Math::BoostY::EBoostMatrixIndexkZZ. private:. ROOT::Math::BoostY::ScalarfBetabeta Y of the Boost; ROOT::Math::BoostY::ScalarfGammagamma of the Boost. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__BoostY.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BoostY.html
https://root.cern/root/html604/ROOT__Math__BoostZ.html:3336,Modifiability,Inherit,Inheritance,3336,"IndexkLYX; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::BoostZ::EBoostMatrixIndexkTT; static ROOT::Math::BoostZ::EBoostMatrixIndexkXT; static ROOT::Math::BoostZ::EBoostMatrixIndexkXX; static ROOT::Math::BoostZ::EBoostMatrixIndexkXY; static ROOT::Math::BoostZ::EBoostMatrixIndexkXZ; static ROOT::Math::BoostZ::EBoostMatrixIndexkYT; static ROOT::Math::BoostZ::EBoostMatrixIndexkYY; static ROOT::Math::BoostZ::EBoostMatrixIndexkYZ; static ROOT::Math::BoostZ::EBoostMatrixIndexkZT; static ROOT::Math::BoostZ::EBoostMatrixIndexkZZ. private:. ROOT::Math::BoostZ::ScalarfBetaboost beta z; ROOT::Math::BoostZ::ScalarfGammaboost gamma. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BoostZ(); ========== Constructors and Assignment =====================. Default constructor (identity transformation). explicit BoostZ(Scalar beta_z). Construct given a Scalar beta_z. { SetComponents(beta_z); }. void Rectify(); The compiler-generated copy ctor, copy assignment, and dtor are OK. Re-adjust components to eliminate small deviations from a perfect; orthosyplectic matrix. SetComponents(ROOT::Math::BoostZ::Scalar beta_z); ======== Components ==============. Set components from a Scalar beta_z. GetComponents(ROOT::Math::BoostZ::Scalar& beta_z) const. Get components into a Scalar beta_z. Scalar Beta() const. Retrieve the beta of the Boost. { return fBeta; }. Scalar Gamma() const. Retrieve the gamma of the Boost. { return fGamma; }. void SetBeta(ROOT::Math::BoostZ::Scalar beta). Set the given beta of the Boost. { SetComponents(beta); }. XYZVector BetaVector() const. GetLorentzRotation(Scalar[] r) const. Get elements of internal ",MatchSource.WIKI,root/html604/ROOT__Math__BoostZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BoostZ.html
https://root.cern/root/html604/ROOT__Math__BoostZ.html:3349,Modifiability,Inherit,Inherited,3349,"IndexkLYX; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLYY; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLYZ; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZT; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZX; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZY; static ROOT::Math::BoostZ::ELorentzRotationMatrixIndexkLZZ; static ROOT::Math::BoostZ::EBoostMatrixIndexkTT; static ROOT::Math::BoostZ::EBoostMatrixIndexkXT; static ROOT::Math::BoostZ::EBoostMatrixIndexkXX; static ROOT::Math::BoostZ::EBoostMatrixIndexkXY; static ROOT::Math::BoostZ::EBoostMatrixIndexkXZ; static ROOT::Math::BoostZ::EBoostMatrixIndexkYT; static ROOT::Math::BoostZ::EBoostMatrixIndexkYY; static ROOT::Math::BoostZ::EBoostMatrixIndexkYZ; static ROOT::Math::BoostZ::EBoostMatrixIndexkZT; static ROOT::Math::BoostZ::EBoostMatrixIndexkZZ. private:. ROOT::Math::BoostZ::ScalarfBetaboost beta z; ROOT::Math::BoostZ::ScalarfGammaboost gamma. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BoostZ(); ========== Constructors and Assignment =====================. Default constructor (identity transformation). explicit BoostZ(Scalar beta_z). Construct given a Scalar beta_z. { SetComponents(beta_z); }. void Rectify(); The compiler-generated copy ctor, copy assignment, and dtor are OK. Re-adjust components to eliminate small deviations from a perfect; orthosyplectic matrix. SetComponents(ROOT::Math::BoostZ::Scalar beta_z); ======== Components ==============. Set components from a Scalar beta_z. GetComponents(ROOT::Math::BoostZ::Scalar& beta_z) const. Get components into a Scalar beta_z. Scalar Beta() const. Retrieve the beta of the Boost. { return fBeta; }. Scalar Gamma() const. Retrieve the gamma of the Boost. { return fGamma; }. void SetBeta(ROOT::Math::BoostZ::Scalar beta). Set the given beta of the Boost. { SetComponents(beta); }. XYZVector BetaVector() const. GetLorentzRotation(Scalar[] r) const. Get elements of internal ",MatchSource.WIKI,root/html604/ROOT__Math__BoostZ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BoostZ.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:1409,Availability,error,error,1409," use the Brent Method for function minimization in a given interval.; First, a grid search is used to bracket the minimum value; with the a step size = (xmax-xmin)/npx. The step size; can be controlled via the SetNpx() function. A default value of npx = 100 is used.; The default value con be changed using the static method SetDefaultNpx.; If the function is unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval.; If the Brent method fails to converge the bracketing is repeted on the latest best estimate of the; interval. The procedure is repeted with a maximum value (default =10) which can be set for all; BrentRootFinder classes with the method SetDefaultNSearch. This class is implemented from TF1::GetMinimum. To use the class, three steps have to be taken:; 1. Create the class.; 2. Set a function within an interval to look for the minimum.; 3. Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. @ingroup Min1D. Function Members (Methods); public:. virtual~BrentMinimizer1D(); ROOT::Math::BrentMinimizer1DBrentMinimizer1D(); ROOT::Math::BrentMinimizer1DBrentMinimizer1D(const ROOT::Math::BrentMinimizer1D&); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual const char*Name() const; ROOT::Math::BrentMinimizer1D&operator=(const ROOT::Math::BrentMinimizer1D&); static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); voidSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::IMinimizer1DROOT::Math::IMi",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:3940,Availability,toler,tolerance,3940,"ch interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() ",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:4128,Availability,error,error,4128,"Minimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time ",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:4207,Availability,error,error,4207,"nt estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int ",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:2997,Modifiability,Inherit,Inheritance,2997,"inimizer1D&); static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); voidSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&). Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket minimum with grid (def is 100); intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iteration",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:3010,Modifiability,Inherit,Inherited,3010,"inimizer1D&); static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); voidSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&). Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket minimum with grid (def is 100); intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iteration",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:358,Performance,perform,performing,358,". ROOT::Math::BrentMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::BrentMinimizer1D. class ROOT::Math::BrentMinimizer1D: private ROOT::Math::IMinimizer1D. User class for performing function minimization. It will use the Brent Method for function minimization in a given interval.; First, a grid search is used to bracket the minimum value; with the a step size = (xmax-xmin)/npx. The step size; can be controlled via the SetNpx() function. A default value of npx = 100 is used.; The default value con be changed using the static method SetDefaultNpx.; If the function is unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval.; If the Brent method fails to converge the bracketing is repeted on the latest best estimate of the; interval. The procedure is repeted with a maximum value (default =10) which can be set for all; BrentRootFinder classes with the method SetDefaultNSearch. This class is implemented from TF1::GetMinimum. To use the class, three steps have to be taken:; 1. Create the class.; 2. Set a function within an interval to look for the minimum.; 3. Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. @ingroup Min1D. Function Members (Methods); public:. virtual~BrentMinimizer1D(); ROOT::Math::BrentMinimizer1DBrentMinimizer1D(); ROOT::Math::BrentMinimizer1DBrentMinimizer1D(const ROOT::Math::BrentMinimizer1D&); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual const char*Name() const; ROOT::Math::BrentMinimizer1D&operator=(con",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:1460,Performance,perform,performed,1460,"erval.; First, a grid search is used to bracket the minimum value; with the a step size = (xmax-xmin)/npx. The step size; can be controlled via the SetNpx() function. A default value of npx = 100 is used.; The default value con be changed using the static method SetDefaultNpx.; If the function is unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval.; If the Brent method fails to converge the bracketing is repeted on the latest best estimate of the; interval. The procedure is repeted with a maximum value (default =10) which can be set for all; BrentRootFinder classes with the method SetDefaultNSearch. This class is implemented from TF1::GetMinimum. To use the class, three steps have to be taken:; 1. Create the class.; 2. Set a function within an interval to look for the minimum.; 3. Call the Minimize function with the error parameters. If another minimization is to be performed, repeat the last two steps. @ingroup Min1D. Function Members (Methods); public:. virtual~BrentMinimizer1D(); ROOT::Math::BrentMinimizer1DBrentMinimizer1D(); ROOT::Math::BrentMinimizer1DBrentMinimizer1D(const ROOT::Math::BrentMinimizer1D&); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual const char*Name() const; ROOT::Math::BrentMinimizer1D&operator=(const ROOT::Math::BrentMinimizer1D&); static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); voidSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:2652,Testability,log,log,2652,"er1D(const ROOT::Math::BrentMinimizer1D&); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual const char*Name() const; ROOT::Math::BrentMinimizer1D&operator=(const ROOT::Math::BrentMinimizer1D&); static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); voidSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&). Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket minimum with grid (def is 100); intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval.; doublefXMinimumPosition of the stimated minimum. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentMinimizer1D(); Default Constructor. . virtual ~BrentMinimizer1D(); Default Destructor. . {}. double XMinimum() const; Return current estimate of the position of the minimum. . { return fXMinimum; }. double XLower() const; Return current lower bound of the minimization interval. . { return fXMin; }. double XUpper() const; Return current upper bound of the minimization interval. . { return fXMax; }. double FValMinimum() const; Return function value at current estimate of the minimum. . double FValLower() const; Return function value at current lower bound of the minimization interval",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html:4814,Testability,log,log,4814,"of the minimization interval. . double FValUpper() const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.0E-8, double relTol = 1.0E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BrentMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:3635,Availability,error,error,3635,"usStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default",MatchSource.WIKI,root/html604/ROOT__Math__BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html
https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:3699,Availability,error,error,3699," the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id$ » Last generate",MatchSource.WIKI,root/html604/ROOT__Math__BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html
https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:2780,Modifiability,Inherit,Inheritance,2780,"terate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::BrentRootFinder&operator=(const ROOT::Math::BrentRootFinder&); virtual doubleRoot() const; static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket root with initial grid (def is 100); doublefRootCurrent stimation of the function root.; intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a g",MatchSource.WIKI,root/html604/ROOT__Math__BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html
https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:2793,Modifiability,Inherit,Inherited,2793,"terate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::BrentRootFinder&operator=(const ROOT::Math::BrentRootFinder&); virtual doubleRoot() const; static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket root with initial grid (def is 100); doublefRootCurrent stimation of the function root.; intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a g",MatchSource.WIKI,root/html604/ROOT__Math__BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html
https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:2428,Testability,log,log,2428,":Math::BrentRootFinderBrentRootFinder(); ROOT::Math::BrentRootFinderBrentRootFinder(const ROOT::Math::BrentRootFinder&); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intROOT::Math::IRootFinderMethod::Iterate(); virtual intIterations() const; virtual const char*Name() const; ROOT::Math::BrentRootFinder&operator=(const ROOT::Math::BrentRootFinder&); virtual doubleRoot() const; static voidSetDefaultNpx(int npx); static voidSetDefaultNSearch(int n); virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); voidSetLogScan(bool on); voidSetNpx(int npx); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. Data Members; private:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; boolfLogScanflag to control usage of a log scan; intfNIterNumber of iterations needed for the last estimation.; intfNpxNumber of points to bracket root with initial grid (def is 100); doublefRootCurrent stimation of the function root.; intfStatusStatus of code of the last estimate; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BrentRootFinder(); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx t",MatchSource.WIKI,root/html604/ROOT__Math__BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html
https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html:3861,Testability,log,log,3861,"); Default Constructor. . virtual ~BrentRootFinder(); Default Destructor. . {}. bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. double Root() const; Returns root value. Need to call first Solve(). . { return fRoot; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__BrentRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__BrentRootFinder.html
https://root.cern/root/html604/ROOT__Math__Cartesian2D_Double32_t_.html:2087,Modifiability,Inherit,Inheritance,2087,"; ROOT::Math::Cartesian2D<double>Cartesian2D<double>(); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidGetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar& xx, ROOT::Math::Cartesian2D<double>::Scalar& yy) const; ROOT::Math::Cartesian2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>&operator=(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>&operator=<ROOT::Math::Cartesian2D<double> >(const ROOT::Math::Cartesian2D<double>& v); booloperator==(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>::ScalarPhi() const; ROOT::Math::Cartesian2D<double>::ScalarR() const; voidRotate(ROOT::Math::Cartesian2D<double>::Scalar angle); voidScale(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetX(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetXY(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetY(ROOT::Math::Cartesian2D<double>::Scalar a); ROOT::Math::Cartesian2D<double>::ScalarX() const; ROOT::Math::Cartesian2D<double>::Scalarx() const; ROOT::Math::Cartesian2D<double>::ScalarY() const; ROOT::Math::Cartesian2D<double>::Scalary() const. Data Members; private:. Double32_tfX; Double32_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian2D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian2D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cartesian2D_Double32_t_.html:2100,Modifiability,Inherit,Inherited,2100,"; ROOT::Math::Cartesian2D<double>Cartesian2D<double>(); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidGetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar& xx, ROOT::Math::Cartesian2D<double>::Scalar& yy) const; ROOT::Math::Cartesian2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>&operator=(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>&operator=<ROOT::Math::Cartesian2D<double> >(const ROOT::Math::Cartesian2D<double>& v); booloperator==(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>::ScalarPhi() const; ROOT::Math::Cartesian2D<double>::ScalarR() const; voidRotate(ROOT::Math::Cartesian2D<double>::Scalar angle); voidScale(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetX(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetXY(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetY(ROOT::Math::Cartesian2D<double>::Scalar a); ROOT::Math::Cartesian2D<double>::ScalarX() const; ROOT::Math::Cartesian2D<double>::Scalarx() const; ROOT::Math::Cartesian2D<double>::ScalarY() const; ROOT::Math::Cartesian2D<double>::Scalary() const. Data Members; private:. Double32_tfX; Double32_tfY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian2D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian2D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cartesian2D_double_.html:2067,Modifiability,Inherit,Inheritance,2067,"ouble>(); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidGetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar& xx, ROOT::Math::Cartesian2D<double>::Scalar& yy) const; ROOT::Math::Cartesian2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>&operator=(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>&operator=<ROOT::Math::Cartesian2D<double> >(const ROOT::Math::Cartesian2D<double>& v); booloperator==(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>::ScalarPhi() const; ROOT::Math::Cartesian2D<double>::ScalarR() const; voidRotate(ROOT::Math::Cartesian2D<double>::Scalar angle); voidScale(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetX(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetXY(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetY(ROOT::Math::Cartesian2D<double>::Scalar a); ROOT::Math::Cartesian2D<double>::ScalarX() const; ROOT::Math::Cartesian2D<double>::Scalarx() const; ROOT::Math::Cartesian2D<double>::ScalarY() const; ROOT::Math::Cartesian2D<double>::Scalary() const. Data Members; private:. doublefX; doublefY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian2D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian2D_double_.html
https://root.cern/root/html604/ROOT__Math__Cartesian2D_double_.html:2080,Modifiability,Inherit,Inherited,2080,"ouble>(); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>Cartesian2D<double>(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidGetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar& xx, ROOT::Math::Cartesian2D<double>::Scalar& yy) const; ROOT::Math::Cartesian2D<double>::ScalarMag2() const; voidNegate(); booloperator!=(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>&operator=(const ROOT::Math::Cartesian2D<double>& v); ROOT::Math::Cartesian2D<double>&operator=<ROOT::Math::Cartesian2D<double> >(const ROOT::Math::Cartesian2D<double>& v); booloperator==(const ROOT::Math::Cartesian2D<double>& rhs) const; ROOT::Math::Cartesian2D<double>::ScalarPhi() const; ROOT::Math::Cartesian2D<double>::ScalarR() const; voidRotate(ROOT::Math::Cartesian2D<double>::Scalar angle); voidScale(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetCoordinates(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetX(ROOT::Math::Cartesian2D<double>::Scalar a); voidSetXY(ROOT::Math::Cartesian2D<double>::Scalar xx, ROOT::Math::Cartesian2D<double>::Scalar yy); voidSetY(ROOT::Math::Cartesian2D<double>::Scalar a); ROOT::Math::Cartesian2D<double>::ScalarX() const; ROOT::Math::Cartesian2D<double>::Scalarx() const; ROOT::Math::Cartesian2D<double>::ScalarY() const; ROOT::Math::Cartesian2D<double>::Scalary() const. Data Members; private:. doublefX; doublefY. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian2D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian2D_double_.html
https://root.cern/root/html604/ROOT__Math__Cartesian3D_Double32_t_.html:2700,Modifiability,Inherit,Inheritance,2700,"ROOT::Math::Cartesian3D<double>::ScalarRho() const; voidScale(ROOT::Math::Cartesian3D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetX(ROOT::Math::Cartesian3D<double>::Scalar xx); voidSetXYZ(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetY(ROOT::Math::Cartesian3D<double>::Scalar yy); voidSetZ(ROOT::Math::Cartesian3D<double>::Scalar zz); ROOT::Math::Cartesian3D<double>::ScalarTheta() const; ROOT::Math::Cartesian3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cartesian3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cartesian3D<double>::ScalarZ() const; doublez() const. Data Members; private:. Double32_tfXx coordinate; Double32_tfYy coordinate; Double32_tfZz coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cartesian3D & operator=(const ROOT::Math::Cartesian3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; }. void SetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz). Set internal data based on 3 Scalar numbers. { fX=xx; fY=yy; fZ=zz; }. void GetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar& xx, ROOT::Math::Cartesian3D<double>::Scalar& yy, ROOT::Math::Cartesian3D<double>::Scalar& zz) const. get internal data into 3 Scalar numbers. {xx=fX; yy=fY; zz=fZ;}. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar Mag2() const; { return fX*",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cartesian3D_Double32_t_.html:2713,Modifiability,Inherit,Inherited,2713,"ROOT::Math::Cartesian3D<double>::ScalarRho() const; voidScale(ROOT::Math::Cartesian3D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetX(ROOT::Math::Cartesian3D<double>::Scalar xx); voidSetXYZ(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetY(ROOT::Math::Cartesian3D<double>::Scalar yy); voidSetZ(ROOT::Math::Cartesian3D<double>::Scalar zz); ROOT::Math::Cartesian3D<double>::ScalarTheta() const; ROOT::Math::Cartesian3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cartesian3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cartesian3D<double>::ScalarZ() const; doublez() const. Data Members; private:. Double32_tfXx coordinate; Double32_tfYy coordinate; Double32_tfZz coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cartesian3D & operator=(const ROOT::Math::Cartesian3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; }. void SetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz). Set internal data based on 3 Scalar numbers. { fX=xx; fY=yy; fZ=zz; }. void GetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar& xx, ROOT::Math::Cartesian3D<double>::Scalar& yy, ROOT::Math::Cartesian3D<double>::Scalar& zz) const. get internal data into 3 Scalar numbers. {xx=fX; yy=fY; zz=fZ;}. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar Mag2() const; { return fX*",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cartesian3D_double_.html:2676,Modifiability,Inherit,Inheritance,2676,"rR() const; ROOT::Math::Cartesian3D<double>::ScalarRho() const; voidScale(ROOT::Math::Cartesian3D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetX(ROOT::Math::Cartesian3D<double>::Scalar xx); voidSetXYZ(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetY(ROOT::Math::Cartesian3D<double>::Scalar yy); voidSetZ(ROOT::Math::Cartesian3D<double>::Scalar zz); ROOT::Math::Cartesian3D<double>::ScalarTheta() const; ROOT::Math::Cartesian3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cartesian3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cartesian3D<double>::ScalarZ() const; doublez() const. Data Members; private:. doublefXx coordinate; doublefYy coordinate; doublefZz coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cartesian3D & operator=(const ROOT::Math::Cartesian3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; }. void SetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz). Set internal data based on 3 Scalar numbers. { fX=xx; fY=yy; fZ=zz; }. void GetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar& xx, ROOT::Math::Cartesian3D<double>::Scalar& yy, ROOT::Math::Cartesian3D<double>::Scalar& zz) const. get internal data into 3 Scalar numbers. {xx=fX; yy=fY; zz=fZ;}. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar Mag2() const; { return fX*",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian3D_double_.html
https://root.cern/root/html604/ROOT__Math__Cartesian3D_double_.html:2689,Modifiability,Inherit,Inherited,2689,"rR() const; ROOT::Math::Cartesian3D<double>::ScalarRho() const; voidScale(ROOT::Math::Cartesian3D<double>::Scalar a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetX(ROOT::Math::Cartesian3D<double>::Scalar xx); voidSetXYZ(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz); voidSetY(ROOT::Math::Cartesian3D<double>::Scalar yy); voidSetZ(ROOT::Math::Cartesian3D<double>::Scalar zz); ROOT::Math::Cartesian3D<double>::ScalarTheta() const; ROOT::Math::Cartesian3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cartesian3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cartesian3D<double>::ScalarZ() const; doublez() const. Data Members; private:. doublefXx coordinate; doublefYy coordinate; doublefZz coordinate. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cartesian3D & operator=(const ROOT::Math::Cartesian3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers. { fX=src[0]; fY=src[1]; fZ=src[2]; }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; }. void SetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar xx, ROOT::Math::Cartesian3D<double>::Scalar yy, ROOT::Math::Cartesian3D<double>::Scalar zz). Set internal data based on 3 Scalar numbers. { fX=xx; fY=yy; fZ=zz; }. void GetCoordinates(ROOT::Math::Cartesian3D<double>::Scalar& xx, ROOT::Math::Cartesian3D<double>::Scalar& yy, ROOT::Math::Cartesian3D<double>::Scalar& zz) const. get internal data into 3 Scalar numbers. {xx=fX; yy=fY; zz=fZ;}. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar Mag2() const; { return fX*",MatchSource.WIKI,root/html604/ROOT__Math__Cartesian3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cartesian3D_double_.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:2632,Availability,error,error,2632,"LChebSeries*fSeries. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevApprox(const ROOT::Math::IGenFunction& f, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on functions of type IGenFunction. ChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the i",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:2644,Availability,error,error,2644,"s. Function documentation; ChebyshevApprox(const ROOT::Math::IGenFunction& f, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on functions of type IGenFunction. ChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the us",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:2742,Availability,error,error,2742,"IGenFunction& f, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on functions of type IGenFunction. ChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initial",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:3050,Availability,error,error,3050,". Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions re",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:3062,Availability,error,error,3062,"structor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:3160,Availability,error,error,3160,"structor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:3589,Deployability,integrat,integration,3589,"structor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:3589,Integrability,integrat,integration,3589,"structor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. double operator()(double x, size_t n) const. Evaluate the series at a given point, to (at most) the given order n. std::pair<double, double> EvalErr(double x, size_t n) const. evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned. ChebyshevApprox * Deriv(). Compute the derivative of the series and return a pointer to a new Chebyshev series with the; derivatives coefficients. The returned pointer must be managed by the user. TO DO: implement copying to return by value. ChebyshevApprox * Integral(). Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user. TO DO: implement copying to return by value. void Initialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). Initialize series passing function and range. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:1624,Modifiability,Inherit,Inheritance,1624,"ds); public:. virtual~ChebyshevApprox(); ROOT::Math::ChebyshevApproxChebyshevApprox(const ROOT::Math::IGenFunction& f, double a, double b, size_t n); ROOT::Math::ChebyshevApproxChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n); ROOT::Math::ChebyshevApprox*Deriv(); pair<double,double>EvalErr(double x) const; pair<double,double>EvalErr(double x, size_t n) const; ROOT::Math::ChebyshevApprox*Integral(); doubleoperator()(double x) const; doubleoperator()(double x, size_t n) const. protected:. voidInitialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). private:. ROOT::Math::ChebyshevApproxChebyshevApprox(size_t n); ROOT::Math::ChebyshevApproxChebyshevApprox(const ROOT::Math::ChebyshevApprox&); ROOT::Math::ChebyshevApprox&operator=(const ROOT::Math::ChebyshevApprox&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunctionpointer to function; size_tfOrder; ROOT::Math::GSLChebSeries*fSeries. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevApprox(const ROOT::Math::IGenFunction& f, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on functions of type IGenFunction. ChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html:1637,Modifiability,Inherit,Inherited,1637,"ds); public:. virtual~ChebyshevApprox(); ROOT::Math::ChebyshevApproxChebyshevApprox(const ROOT::Math::IGenFunction& f, double a, double b, size_t n); ROOT::Math::ChebyshevApproxChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n); ROOT::Math::ChebyshevApprox*Deriv(); pair<double,double>EvalErr(double x) const; pair<double,double>EvalErr(double x, size_t n) const; ROOT::Math::ChebyshevApprox*Integral(); doubleoperator()(double x) const; doubleoperator()(double x, size_t n) const. protected:. voidInitialize(ROOT::Math::GSLFuncPointer f, void* params, double a, double b). private:. ROOT::Math::ChebyshevApproxChebyshevApprox(size_t n); ROOT::Math::ChebyshevApproxChebyshevApprox(const ROOT::Math::ChebyshevApprox&); ROOT::Math::ChebyshevApprox&operator=(const ROOT::Math::ChebyshevApprox&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunctionpointer to function; size_tfOrder; ROOT::Math::GSLChebSeries*fSeries. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevApprox(const ROOT::Math::IGenFunction& f, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on functions of type IGenFunction. ChebyshevApprox(ROOT::Math::GSLFuncPointer f, void* p, double a, double b, size_t n). Construct a Chebyshev series approximation to a Function f in range [a,b];; constructor based on free functions with gsl_function type signature. virtual ~ChebyshevApprox(); destructor. ChebyshevApprox(size_t n). construct a Chebyshev series or order n; The series must be initialized from a function. ChebyshevApprox(const ROOT::Math::ChebyshevApprox& ); usually copying is non trivial, so we make this unaccessible. double operator()(double x) const. Evaluate the series at a given point x. std::pair<double, double> EvalErr(double x) const. Evaluate the series at a given point x estimating both the series result and its absolute error.; The error ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevApprox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevApprox.html
https://root.cern/root/html604/ROOT__Math__ChebyshevPol.html:936,Modifiability,Inherit,Inheritance,936,". ROOT::Math::ChebyshevPol. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ChebyshevPol. class ROOT::Math::ChebyshevPol. Header file declaring functions for the evaluation of the Chebyshev; polynomials and the ChebyshevPol class which can be used for; creating a TF1. Function Members (Methods); public:. ~ChebyshevPol(); ROOT::Math::ChebyshevPolChebyshevPol(unsigned int n); ROOT::Math::ChebyshevPolChebyshevPol(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPolChebyshevPol(ROOT::Math::ChebyshevPol&&); doubleoperator()(const double* x, const double* coeff); ROOT::Math::ChebyshevPol&operator=(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPol&operator=(ROOT::Math::ChebyshevPol&&). Data Members; private:. unsigned intfOrder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevPol(unsigned int n); {}. double operator()(const double* x, const double* coeff). » Author: L. Moneta, 11/2012 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevPol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevPol.html
https://root.cern/root/html604/ROOT__Math__ChebyshevPol.html:949,Modifiability,Inherit,Inherited,949,". ROOT::Math::ChebyshevPol. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::ChebyshevPol. class ROOT::Math::ChebyshevPol. Header file declaring functions for the evaluation of the Chebyshev; polynomials and the ChebyshevPol class which can be used for; creating a TF1. Function Members (Methods); public:. ~ChebyshevPol(); ROOT::Math::ChebyshevPolChebyshevPol(unsigned int n); ROOT::Math::ChebyshevPolChebyshevPol(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPolChebyshevPol(ROOT::Math::ChebyshevPol&&); doubleoperator()(const double* x, const double* coeff); ROOT::Math::ChebyshevPol&operator=(const ROOT::Math::ChebyshevPol&); ROOT::Math::ChebyshevPol&operator=(ROOT::Math::ChebyshevPol&&). Data Members; private:. unsigned intfOrder. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ChebyshevPol(unsigned int n); {}. double operator()(const double* x, const double* coeff). » Author: L. Moneta, 11/2012 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__ChebyshevPol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__ChebyshevPol.html
https://root.cern/root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html:2824,Modifiability,Inherit,Inheritance,2824,"nst; ROOT::Math::Cylindrical3D<double>::ScalarR() const; ROOT::Math::Cylindrical3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::Cylindrical3D<double>::Scalar x, ROOT::Math::Cylindrical3D<double>::Scalar y, ROOT::Math::Cylindrical3D<double>::Scalar z); voidSetZ(double zz); ROOT::Math::Cylindrical3D<double>::ScalarTheta() const; ROOT::Math::Cylindrical3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cylindrical3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cylindrical3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Cylindrical3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfPhi; Double32_tfRho; Double32_tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cylindrical3D & operator=(const ROOT::Math::Cylindrical3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers ( rho, z , phi). { fRho=src[0]; fZ=src[1]; fPhi=src[2]; Restrict(); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers ( rho, z , phi). { dest[0] = fRho; dest[1] = fZ; dest[2] = fPhi; }. void SetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi). Set internal data based on 3 Scalar numbers ( rho, z , phi). { fRho=rho; fZ=zz; fPhi=phi; Restrict(); }. void GetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar& rho, ROOT::Math::Cylindrical3D<double>::Scalar& zz, ROOT::Math::Cylindrical3D<double>::Scalar& phi) const. get internal data into 3 Scalar numbers ( rho, z , phi). {rho=fRho; zz=fZ; phi=fPhi;}. Scal",MatchSource.WIKI,root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html:2837,Modifiability,Inherit,Inherited,2837,"nst; ROOT::Math::Cylindrical3D<double>::ScalarR() const; ROOT::Math::Cylindrical3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::Cylindrical3D<double>::Scalar x, ROOT::Math::Cylindrical3D<double>::Scalar y, ROOT::Math::Cylindrical3D<double>::Scalar z); voidSetZ(double zz); ROOT::Math::Cylindrical3D<double>::ScalarTheta() const; ROOT::Math::Cylindrical3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cylindrical3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cylindrical3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Cylindrical3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfPhi; Double32_tfRho; Double32_tfZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cylindrical3D & operator=(const ROOT::Math::Cylindrical3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers ( rho, z , phi). { fRho=src[0]; fZ=src[1]; fPhi=src[2]; Restrict(); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers ( rho, z , phi). { dest[0] = fRho; dest[1] = fZ; dest[2] = fPhi; }. void SetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi). Set internal data based on 3 Scalar numbers ( rho, z , phi). { fRho=rho; fZ=zz; fPhi=phi; Restrict(); }. void GetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar& rho, ROOT::Math::Cylindrical3D<double>::Scalar& zz, ROOT::Math::Cylindrical3D<double>::Scalar& phi) const. get internal data into 3 Scalar numbers ( rho, z , phi). {rho=fRho; zz=fZ; phi=fPhi;}. Scal",MatchSource.WIKI,root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html:3914,Security,access,accessors,3914,"ical3D & operator=(const ROOT::Math::Cylindrical3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers ( rho, z , phi). { fRho=src[0]; fZ=src[1]; fPhi=src[2]; Restrict(); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers ( rho, z , phi). { dest[0] = fRho; dest[1] = fZ; dest[2] = fPhi; }. void SetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi). Set internal data based on 3 Scalar numbers ( rho, z , phi). { fRho=rho; fZ=zz; fPhi=phi; Restrict(); }. void GetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar& rho, ROOT::Math::Cylindrical3D<double>::Scalar& zz, ROOT::Math::Cylindrical3D<double>::Scalar& phi) const. get internal data into 3 Scalar numbers ( rho, z , phi). {rho=fRho; zz=fZ; phi=fPhi;}. Scalar pi(); { return M_PI; }. void Restrict(). Scalar Rho() const; accessors. { return fRho; }. Scalar Z() const; { return fZ; }. Scalar Phi() const; { return fPhi; }. Scalar X() const; { return fRho*std::cos(fPhi); }. Scalar Y() const; { return fRho*std::sin(fPhi); }. Scalar Mag2() const; { return fRho*fRho + fZ*fZ; }. Scalar R() const; { return std::sqrt( Mag2()); }. Scalar Perp2() const; { return fRho*fRho; }. Scalar Theta() const; { return (fRho==0 && fZ==0 ) ? 0 : atan2(fRho,fZ); }. Scalar Eta() const; pseudorapidity - use same implementation as in Cartesian3D. void SetRho(double rho); setters (only for data members). set the rho coordinate value keeping z and phi constant. void SetZ(double zz). set the z coordinate value keeping rho and phi constant. void SetPhi(double phi). set the phi coordinate value keeping rho and z constant. void SetXYZ(ROOT::Math::Cylindrical3D<double>::Scalar x, ROOT::Math::Cylindrical3D<double>::Scalar y, ROOT::Math::Cylindrical3D<double>::Scalar z). set all values using cartesian coordinates. void Scale(double a).",MatchSource.WIKI,root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cylindrical3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__Cylindrical3D_double_.html:2800,Modifiability,Inherit,Inheritance,2800,"alarPhi() const; ROOT::Math::Cylindrical3D<double>::ScalarR() const; ROOT::Math::Cylindrical3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::Cylindrical3D<double>::Scalar x, ROOT::Math::Cylindrical3D<double>::Scalar y, ROOT::Math::Cylindrical3D<double>::Scalar z); voidSetZ(double zz); ROOT::Math::Cylindrical3D<double>::ScalarTheta() const; ROOT::Math::Cylindrical3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cylindrical3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cylindrical3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Cylindrical3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefPhi; doublefRho; doublefZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cylindrical3D & operator=(const ROOT::Math::Cylindrical3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers ( rho, z , phi). { fRho=src[0]; fZ=src[1]; fPhi=src[2]; Restrict(); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers ( rho, z , phi). { dest[0] = fRho; dest[1] = fZ; dest[2] = fPhi; }. void SetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi). Set internal data based on 3 Scalar numbers ( rho, z , phi). { fRho=rho; fZ=zz; fPhi=phi; Restrict(); }. void GetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar& rho, ROOT::Math::Cylindrical3D<double>::Scalar& zz, ROOT::Math::Cylindrical3D<double>::Scalar& phi) const. get internal data into 3 Scalar numbers ( rho, z , phi). {rho=fRho; zz=fZ; phi=fPhi;}. Scal",MatchSource.WIKI,root/html604/ROOT__Math__Cylindrical3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cylindrical3D_double_.html
https://root.cern/root/html604/ROOT__Math__Cylindrical3D_double_.html:2813,Modifiability,Inherit,Inherited,2813,"alarPhi() const; ROOT::Math::Cylindrical3D<double>::ScalarR() const; ROOT::Math::Cylindrical3D<double>::ScalarRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::Cylindrical3D<double>::Scalar x, ROOT::Math::Cylindrical3D<double>::Scalar y, ROOT::Math::Cylindrical3D<double>::Scalar z); voidSetZ(double zz); ROOT::Math::Cylindrical3D<double>::ScalarTheta() const; ROOT::Math::Cylindrical3D<double>::ScalarX() const; doublex() const; ROOT::Math::Cylindrical3D<double>::ScalarY() const; doubley() const; ROOT::Math::Cylindrical3D<double>::ScalarZ() const; doublez() const. private:. static ROOT::Math::Cylindrical3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefPhi; doublefRho; doublefZ. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Cylindrical3D & operator=(const ROOT::Math::Cylindrical3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers ( rho, z , phi). { fRho=src[0]; fZ=src[1]; fPhi=src[2]; Restrict(); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers ( rho, z , phi). { dest[0] = fRho; dest[1] = fZ; dest[2] = fPhi; }. void SetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi). Set internal data based on 3 Scalar numbers ( rho, z , phi). { fRho=rho; fZ=zz; fPhi=phi; Restrict(); }. void GetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar& rho, ROOT::Math::Cylindrical3D<double>::Scalar& zz, ROOT::Math::Cylindrical3D<double>::Scalar& phi) const. get internal data into 3 Scalar numbers ( rho, z , phi). {rho=fRho; zz=fZ; phi=fPhi;}. Scal",MatchSource.WIKI,root/html604/ROOT__Math__Cylindrical3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cylindrical3D_double_.html
https://root.cern/root/html604/ROOT__Math__Cylindrical3D_double_.html:3890,Security,access,accessors,3890,"ical3D & operator=(const ROOT::Math::Cylindrical3D<double>& v). assignment operator. void SetCoordinates(const Scalar[] src). Set internal data based on an array of 3 Scalar numbers ( rho, z , phi). { fRho=src[0]; fZ=src[1]; fPhi=src[2]; Restrict(); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 3 Scalar numbers ( rho, z , phi). { dest[0] = fRho; dest[1] = fZ; dest[2] = fPhi; }. void SetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar rho, ROOT::Math::Cylindrical3D<double>::Scalar zz, ROOT::Math::Cylindrical3D<double>::Scalar phi). Set internal data based on 3 Scalar numbers ( rho, z , phi). { fRho=rho; fZ=zz; fPhi=phi; Restrict(); }. void GetCoordinates(ROOT::Math::Cylindrical3D<double>::Scalar& rho, ROOT::Math::Cylindrical3D<double>::Scalar& zz, ROOT::Math::Cylindrical3D<double>::Scalar& phi) const. get internal data into 3 Scalar numbers ( rho, z , phi). {rho=fRho; zz=fZ; phi=fPhi;}. Scalar pi(); { return M_PI; }. void Restrict(). Scalar Rho() const; accessors. { return fRho; }. Scalar Z() const; { return fZ; }. Scalar Phi() const; { return fPhi; }. Scalar X() const; { return fRho*std::cos(fPhi); }. Scalar Y() const; { return fRho*std::sin(fPhi); }. Scalar Mag2() const; { return fRho*fRho + fZ*fZ; }. Scalar R() const; { return std::sqrt( Mag2()); }. Scalar Perp2() const; { return fRho*fRho; }. Scalar Theta() const; { return (fRho==0 && fZ==0 ) ? 0 : atan2(fRho,fZ); }. Scalar Eta() const; pseudorapidity - use same implementation as in Cartesian3D. void SetRho(double rho); setters (only for data members). set the rho coordinate value keeping z and phi constant. void SetZ(double zz). set the z coordinate value keeping rho and phi constant. void SetPhi(double phi). set the phi coordinate value keeping rho and z constant. void SetXYZ(ROOT::Math::Cylindrical3D<double>::Scalar x, ROOT::Math::Cylindrical3D<double>::Scalar y, ROOT::Math::Cylindrical3D<double>::Scalar z). set all values using cartesian coordinates. void Scale(double a).",MatchSource.WIKI,root/html604/ROOT__Math__Cylindrical3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Cylindrical3D_double_.html
https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_Double32_t_.html:2377,Modifiability,Inherit,Inheritance,2377,"<double>& v); ROOT::Math::CylindricalEta3D<double>CylindricalEta3D<double>(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); doubleEta() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar& rho, ROOT::Math::CylindricalEta3D<double>::Scalar& eta, ROOT::Math::CylindricalEta3D<double>::Scalar& phi) const; doubleMag2() const; voidNegate(); booloperator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; ROOT::Math::CylindricalEta3D<double>&operator=(const ROOT::Math::CylindricalEta3D<double>& v); ROOT::Math::CylindricalEta3D<double>&operator=<ROOT::Math::CylindricalEta3D<double> >(const ROOT::Math::CylindricalEta3D<double>& c); booloperator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const; doublePerp2() const; doublePhi() const; doubleR() const; doubleRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); voidSetEta(double eta); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar x, ROOT::Math::CylindricalEta3D<double>::Scalar y, ROOT::Math::CylindricalEta3D<double>::Scalar z); doubleTheta() const; doubleX() const; doublex() const; doubleY() const; doubley() const; doubleZ() const; doublez() const. private:. static ROOT::Math::CylindricalEta3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfEta; Double32_tfPhi; Double32_tfRho. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__CylindricalEta3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_Double32_t_.html:2390,Modifiability,Inherit,Inherited,2390,"<double>& v); ROOT::Math::CylindricalEta3D<double>CylindricalEta3D<double>(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); doubleEta() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar& rho, ROOT::Math::CylindricalEta3D<double>::Scalar& eta, ROOT::Math::CylindricalEta3D<double>::Scalar& phi) const; doubleMag2() const; voidNegate(); booloperator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; ROOT::Math::CylindricalEta3D<double>&operator=(const ROOT::Math::CylindricalEta3D<double>& v); ROOT::Math::CylindricalEta3D<double>&operator=<ROOT::Math::CylindricalEta3D<double> >(const ROOT::Math::CylindricalEta3D<double>& c); booloperator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const; doublePerp2() const; doublePhi() const; doubleR() const; doubleRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); voidSetEta(double eta); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar x, ROOT::Math::CylindricalEta3D<double>::Scalar y, ROOT::Math::CylindricalEta3D<double>::Scalar z); doubleTheta() const; doubleX() const; doublex() const; doubleY() const; doubley() const; doubleZ() const; doublez() const. private:. static ROOT::Math::CylindricalEta3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. Double32_tfEta; Double32_tfPhi; Double32_tfRho. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__CylindricalEta3D_Double32_t_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_Double32_t_.html
https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_double_.html:2353,Modifiability,Inherit,Inheritance,2353,"ndricalEta3D<double>& v); ROOT::Math::CylindricalEta3D<double>CylindricalEta3D<double>(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); doubleEta() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar& rho, ROOT::Math::CylindricalEta3D<double>::Scalar& eta, ROOT::Math::CylindricalEta3D<double>::Scalar& phi) const; doubleMag2() const; voidNegate(); booloperator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; ROOT::Math::CylindricalEta3D<double>&operator=(const ROOT::Math::CylindricalEta3D<double>& v); ROOT::Math::CylindricalEta3D<double>&operator=<ROOT::Math::CylindricalEta3D<double> >(const ROOT::Math::CylindricalEta3D<double>& c); booloperator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const; doublePerp2() const; doublePhi() const; doubleR() const; doubleRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); voidSetEta(double eta); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar x, ROOT::Math::CylindricalEta3D<double>::Scalar y, ROOT::Math::CylindricalEta3D<double>::Scalar z); doubleTheta() const; doubleX() const; doublex() const; doubleY() const; doubley() const; doubleZ() const; doublez() const. private:. static ROOT::Math::CylindricalEta3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefEta; doublefPhi; doublefRho. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__CylindricalEta3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_double_.html
https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_double_.html:2366,Modifiability,Inherit,Inherited,2366,"ndricalEta3D<double>& v); ROOT::Math::CylindricalEta3D<double>CylindricalEta3D<double>(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); doubleEta() const; voidGetCoordinates(Scalar[] dest) const; voidGetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar& rho, ROOT::Math::CylindricalEta3D<double>::Scalar& eta, ROOT::Math::CylindricalEta3D<double>::Scalar& phi) const; doubleMag2() const; voidNegate(); booloperator!=(const ROOT::Math::CylindricalEta3D<double>& rhs) const; ROOT::Math::CylindricalEta3D<double>&operator=(const ROOT::Math::CylindricalEta3D<double>& v); ROOT::Math::CylindricalEta3D<double>&operator=<ROOT::Math::CylindricalEta3D<double> >(const ROOT::Math::CylindricalEta3D<double>& c); booloperator==(const ROOT::Math::CylindricalEta3D<double>& rhs) const; doublePerp2() const; doublePhi() const; doubleR() const; doubleRho() const; voidScale(double a); voidSetCoordinates(const Scalar[] src); voidSetCoordinates(ROOT::Math::CylindricalEta3D<double>::Scalar rho, ROOT::Math::CylindricalEta3D<double>::Scalar eta, ROOT::Math::CylindricalEta3D<double>::Scalar phi); voidSetEta(double eta); voidSetPhi(double phi); voidSetRho(double rho); voidSetXYZ(ROOT::Math::CylindricalEta3D<double>::Scalar x, ROOT::Math::CylindricalEta3D<double>::Scalar y, ROOT::Math::CylindricalEta3D<double>::Scalar z); doubleTheta() const; doubleX() const; doublex() const; doubleY() const; doubley() const; doubleZ() const; doublez() const. private:. static ROOT::Math::CylindricalEta3D<double>::Scalarpi(); voidRestrict(). Data Members; private:. doublefEta; doublefPhi; doublefRho. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__CylindricalEta3D_double_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__CylindricalEta3D_double_.html
https://root.cern/root/html604/ROOT__Math__DefaultCoordinateSystemTag.html:999,Modifiability,Inherit,Inheritance,999,. ROOT::Math::DefaultCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::DefaultCoordinateSystemTag. class ROOT::Math::DefaultCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~DefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(ROOT::Math::DefaultCoordinateSystemTag&&); ROOT::Math::DefaultCoordinateSystemTag&operator=(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTag&operator=(ROOT::Math::DefaultCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__DefaultCoordinateSystemTag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DefaultCoordinateSystemTag.html
https://root.cern/root/html604/ROOT__Math__DefaultCoordinateSystemTag.html:1012,Modifiability,Inherit,Inherited,1012,. ROOT::Math::DefaultCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::DefaultCoordinateSystemTag. class ROOT::Math::DefaultCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~DefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag(ROOT::Math::DefaultCoordinateSystemTag&&); ROOT::Math::DefaultCoordinateSystemTag&operator=(const ROOT::Math::DefaultCoordinateSystemTag&); ROOT::Math::DefaultCoordinateSystemTag&operator=(ROOT::Math::DefaultCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__DefaultCoordinateSystemTag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DefaultCoordinateSystemTag.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4231,Availability,Error,Error,4231,"valCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:6089,Availability,error,error,6089,"double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:6222,Availability,Error,Error,6222,"double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:6273,Availability,error,error,6273,"double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calculation. double Result() const. return the result of the last derivative calculation. double Error() const. return the estimate of the absolute error of the last derivative calculation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3305,Energy Efficiency,adapt,adaptive,3305,"afterwards with Derivator::SetFunction. explicit Derivator(const IGenFunction &f). Construct using a ROOT::Math::IGenFunction interface. explicit Derivator(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3474,Energy Efficiency,adapt,adaptive,3474,"erivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3644,Energy Efficiency,adapt,adaptive,3644,"he object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive cen",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3889,Energy Efficiency,adapt,adaptive,3889,"nctions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm wit",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4419,Energy Efficiency,adapt,adaptive,4419,"nst. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimensio",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4633,Energy Efficiency,adapt,adaptive,4633,"a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0,",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4848,Energy Efficiency,adapt,adaptive,4848,"s the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const ",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:5138,Energy Efficiency,adapt,adaptive,5138," methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calcul",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:2425,Integrability,interface,interface,2425,"rd(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleEvalCentral(double x, double h = 1.0E-8) const; static doubleEvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleEvalForward(double x, double h = 1.0E-8) const; static doubleEvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleResult() const; voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0); intStatus() const. private:. ROOT::Math::DerivatorDerivator(const ROOT::Math::Derivator&); ROOT::Math::Derivator&operator=(const ROOT::Math::Derivator&). Data Members; private:. ROOT::Math::GSLDerivator*fDerivator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Derivator(). Empty Construct for a Derivator class; Need to set the function afterwards with Derivator::SetFunction. explicit Derivator(const IGenFunction &f). Construct using a ROOT::Math::IGenFunction interface. explicit Derivator(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:2145,Modifiability,Inherit,Inheritance,2145,"par = 0, double h = 1.0E-8); static doubleEval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8); doubleEvalBackward(double x, double h = 1.0E-8) const; static doubleEvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleEvalCentral(double x, double h = 1.0E-8) const; static doubleEvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleEvalForward(double x, double h = 1.0E-8) const; static doubleEvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleResult() const; voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0); intStatus() const. private:. ROOT::Math::DerivatorDerivator(const ROOT::Math::Derivator&); ROOT::Math::Derivator&operator=(const ROOT::Math::Derivator&). Data Members; private:. ROOT::Math::GSLDerivator*fDerivator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Derivator(). Empty Construct for a Derivator class; Need to set the function afterwards with Derivator::SetFunction. explicit Derivator(const IGenFunction &f). Construct using a ROOT::Math::IGenFunction interface. explicit Derivator(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:2158,Modifiability,Inherit,Inherited,2158,"par = 0, double h = 1.0E-8); static doubleEval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8); doubleEvalBackward(double x, double h = 1.0E-8) const; static doubleEvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleEvalCentral(double x, double h = 1.0E-8) const; static doubleEvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleEvalForward(double x, double h = 1.0E-8) const; static doubleEvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); doubleResult() const; voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0); intStatus() const. private:. ROOT::Math::DerivatorDerivator(const ROOT::Math::Derivator&); ROOT::Math::Derivator&operator=(const ROOT::Math::Derivator&). Data Members; private:. ROOT::Math::GSLDerivator*fDerivator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Derivator(). Empty Construct for a Derivator class; Need to set the function afterwards with Derivator::SetFunction. explicit Derivator(const IGenFunction &f). Construct using a ROOT::Math::IGenFunction interface. explicit Derivator(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3305,Modifiability,adapt,adaptive,3305,"afterwards with Derivator::SetFunction. explicit Derivator(const IGenFunction &f). Construct using a ROOT::Math::IGenFunction interface. explicit Derivator(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3474,Modifiability,adapt,adaptive,3474,"erivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3644,Modifiability,adapt,adaptive,3644,"he object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive cen",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:3889,Modifiability,adapt,adaptive,3889,"nctions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm wit",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4419,Modifiability,adapt,adaptive,4419,"nst. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimensio",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4633,Modifiability,adapt,adaptive,4633,"a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0,",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:4848,Modifiability,adapt,adaptive,4848,"s the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const ",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__Derivator.html:5138,Modifiability,adapt,adaptive,5138," methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IMultiGenFunction& f, const double* x, unsigned int icoord = 0, double h = 1.0E-8); Derivatives for multi-dimension functions. Evaluate the partial derivative of a multi-dim function; with respect coordinate x_icoord at the point x[]. double Eval(ROOT::Math::IParamFunction& f, double x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for one-dim parameteric function; at the point ( x,p[]) with respect the parameter p_ipar. double Eval(ROOT::Math::IParamMultiFunction& f, const double* x, const double* p, unsigned int ipar = 0, double h = 1.0E-8). Evaluate the derivative with respect a parameter for a multi-dim parameteric function; at the point ( x[],p[]) with respect the parameter p_ipar. int Status() const. return the error status of the last derivative calcul",MatchSource.WIKI,root/html604/ROOT__Math__Derivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Derivator.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:8002,Modifiability,Inherit,Inheritance,8002,"eSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a p",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:8015,Modifiability,Inherit,Inherited,8015,"eSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a p",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:8551,Security,access,access,8551,"cementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartes",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9854,Security,access,access,9854,"ouble>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Mag2() const; ----- Other fundamental properties -----. Magnitute squared ( r^2 in spherical coordinate). { return fCoordinates.Mag2();}. DisplacementVector2D Unit() const. return unit vector parallel to this. DisplacementVector2D<CoordSystem, Tag>& SetX(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ------ Setting individual elements present in coordinate system ------. Change X - Cartesian2D coordinates only. Displaceme",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html:7986,Modifiability,Inherit,Inheritance,7986,"inateSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a p",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html:7999,Modifiability,Inherit,Inherited,7999,"inateSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a p",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html:8535,Security,access,access,8535,"splacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartes",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html:9838,Security,access,access,9838,"ouble>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Mag2() const; ----- Other fundamental properties -----. Magnitute squared ( r^2 in spherical coordinate). { return fCoordinates.Mag2();}. DisplacementVector2D Unit() const. return unit vector parallel to this. DisplacementVector2D<CoordSystem, Tag>& SetX(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ------ Setting individual elements present in coordinate system ------. Change X - Cartesian2D coordinates only. Displaceme",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:7750,Modifiability,Inherit,Inheritance,7750,"le>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. voi",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:7763,Modifiability,Inherit,Inherited,7763,"le>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. voi",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:8291,Security,access,access,8291,"onst; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:9570,Security,access,access,9570,":Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Mag2() const; ----- Other fundamental properties -----. Magnitute squared ( r^2 in spherical coordinate). { return fCoordinates.Mag2();}. DisplacementVector2D Unit() const. return unit vector parallel to this. DisplacementVector2D<CoordSystem, Tag>& SetX(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ------ Setting individual elements present in coordinate system ------. Change X - Cartesian2D coordinates only. DisplacementVe",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:7734,Modifiability,Inherit,Inheritance,7734,"double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. voi",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:7747,Modifiability,Inherit,Inherited,7747,"double>,ROOT::Math::DefaultCoordinateSystemTag>&SetY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. voi",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:8275,Security,access,access,8275,"() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Polar2D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=( const ForeignVector & v). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:9554,Security,access,access,9554,":Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Mag2() const; ----- Other fundamental properties -----. Magnitute squared ( r^2 in spherical coordinate). { return fCoordinates.Mag2();}. DisplacementVector2D Unit() const. return unit vector parallel to this. DisplacementVector2D<CoordSystem, Tag>& SetX(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ------ Setting individual elements present in coordinate system ------. Change X - Cartesian2D coordinates only. DisplacementVe",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:13077,Modifiability,Inherit,Inheritance,13077,"3D<double>,ROOT::Math::DefaultCoordinateSystemTag>DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator+=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:13090,Modifiability,Inherit,Inherited,13090,"3D<double>,ROOT::Math::DefaultCoordinateSystemTag>DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator+=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:13748,Security,access,access,13748,"th::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::D",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:15513,Security,access,access,15513,"his; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:10620,Modifiability,Inherit,Inheritance,10620,"nit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROO",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:10633,Modifiability,Inherit,Inherited,10633,"nit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROO",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:11288,Security,access,access,11288,"DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::Globa",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:13045,Security,access,access,13045,"rn *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:10537,Modifiability,Inherit,Inheritance,10537,"emTag>Unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:10550,Modifiability,Inherit,Inherited,10550,"emTag>Unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:11202,Security,access,access,11202,"ath::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoor",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:12951,Security,access,access,12951," return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::LocalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:13061,Modifiability,Inherit,Inheritance,13061,"sian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator+=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:13074,Modifiability,Inherit,Inherited,13074,"sian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator+=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&); ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:13732,Security,access,access,13732,"::Math::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::D",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:15497,Security,access,access,15497,"his; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:10873,Modifiability,Inherit,Inheritance,10873,"::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVec",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:10886,Modifiability,Inherit,Inherited,10886,"::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVec",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:11550,Security,access,access,11550,"r3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROO",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:13331,Security,access,access,13331,"id GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:10857,Modifiability,Inherit,Inheritance,10857,"Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVec",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:10870,Modifiability,Inherit,Inherited,10870,"Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVec",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:11534,Security,access,access,11534,"ector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cylindrical3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROO",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:13315,Security,access,access,13315,"id GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:11128,Modifiability,Inherit,Inheritance,11128,"OOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displa",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:11141,Modifiability,Inherit,Inherited,11141,"OOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displa",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:11814,Security,access,access,11814,"lindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEt",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:13619,Security,access,access,13619,"es(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:11045,Modifiability,Inherit,Inheritance,11045,"tor3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displacem",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:11058,Modifiability,Inherit,Inherited,11058,"tor3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displacem",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:11728,Security,access,access,11728,"h::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:13525,Security,access,access,13525,"dinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:10962,Modifiability,Inherit,Inheritance,10962,"mentVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displacement",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:10975,Modifiability,Inherit,Inherited,10975,"mentVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displacement",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:11642,Security,access,access,11642,"::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<doub",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:13431,Security,access,access,13431,"tCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:11112,Modifiability,Inherit,Inheritance,11112,"3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displa",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:11125,Modifiability,Inherit,Inherited,11125,"3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::Displa",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:11798,Security,access,access,11798,"::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEt",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:13603,Security,access,access,13603,"es(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:10363,Modifiability,Inherit,Inheritance,10363,"aultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:10376,Modifiability,Inherit,Inherited,10376,"aultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:11022,Security,access,access,11022,"const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSyst",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:12755,Security,access,access,12755,"(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:10347,Modifiability,Inherit,Inheritance,10347,":DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:10360,Modifiability,Inherit,Inherited,10360,":DefaultCoordinateSystemTag>Unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>unit() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarX() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarx() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:11006,Security,access,access,11006,"y() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Polar3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSyst",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:12739,Security,access,access,12739,"(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(Scalar[] dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DisplacementVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:571,Availability,avail,available,571,". ROOT::Math::DistSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::DistSampler. class ROOT::Math::DistSampler. Interface class for generic sampling of a distribution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:1436,Availability,error,error,1436,"ibution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::M",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:1531,Availability,error,errors,1531,"ibution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::M",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:5080,Availability,error,error,5080,"sampler; To be implemented by the derived classes who needs it; Returns zero by default. { return 0; }. void SetRange(double xmin, double xmax, int icoord = 0); set range in a given dimension. void SetRange(const double* xmin, const double* xmax); set range for all dimensions. void SetRange(const ROOT::Fit::DataRange& range); set range using DataRange class. void SetMode(double ); set the mode of the distribution (could be useful to some methods); implemented by derived classes if needed. {}. void SetArea(double ); set the normalization area of distribution; implemented by derived classes if needed. {}. const ROOT::Math::IMultiGenFunction & ParentPdf() const; get the parent distribution function (must be called after setting the function). double Sample1D(). sample one event in one dimension; better implementation could be provided by the derived classes. Sample(double* x). const double * Sample(). sample one event and rerturning array x with coordinates. bool SampleBin(double prob, double& value, double* error = 0). sample one bin given an estimated of the pdf in the bin; (this can be function value at the center or its integral in the bin; divided by the bin width); By default do not do random sample, just return the function values; Typically Poisson statistics will be used. bool SampleBins(unsigned int n, const double* prob, double* values, double* errors = 0). sample a set of bins given a vector of probabilities; Typically multinomial statistics will be used and the sum of the probabilities; will be equal to the total number of events to be generated; For sampling the bins indipendently, SampleBin should be used. bool Generate(unsigned int nevt, ROOT::Fit::UnBinData& data). generate a un-binned data sets (fill the given data set); if dataset has already data append to it. bool Generate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true). generate a bin data set .; A range must have been set before (otherwise inf is returned); and t",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:5434,Availability,error,errors,5434,"g DataRange class. void SetMode(double ); set the mode of the distribution (could be useful to some methods); implemented by derived classes if needed. {}. void SetArea(double ); set the normalization area of distribution; implemented by derived classes if needed. {}. const ROOT::Math::IMultiGenFunction & ParentPdf() const; get the parent distribution function (must be called after setting the function). double Sample1D(). sample one event in one dimension; better implementation could be provided by the derived classes. Sample(double* x). const double * Sample(). sample one event and rerturning array x with coordinates. bool SampleBin(double prob, double& value, double* error = 0). sample one bin given an estimated of the pdf in the bin; (this can be function value at the center or its integral in the bin; divided by the bin width); By default do not do random sample, just return the function values; Typically Poisson statistics will be used. bool SampleBins(unsigned int n, const double* prob, double* values, double* errors = 0). sample a set of bins given a vector of probabilities; Typically multinomial statistics will be used and the sum of the probabilities; will be equal to the total number of events to be generated; For sampling the bins indipendently, SampleBin should be used. bool Generate(unsigned int nevt, ROOT::Fit::UnBinData& data). generate a un-binned data sets (fill the given data set); if dataset has already data append to it. bool Generate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true). generate a bin data set .; A range must have been set before (otherwise inf is returned); and the bins are equidinstant in the previously defined range; bin center values must be present in given data set; If the sampler is implemented by a random one, the entries; will be binned according to the Poisson distribution; It is assumed the distribution is normalized, otherwise the nevt must be scaled; accordingly. The expected value/bin ",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:294,Integrability,Interface,Interface,294,". ROOT::Math::DistSampler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::DistSampler. class ROOT::Math::DistSampler. Interface class for generic sampling of a distribution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:892,Modifiability,extend,extend,892,"ibution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::M",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:1008,Modifiability,extend,extend,1008,"ibution,; i.e. generating random numbers according to arbitrary distributions. @ingroup Random. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~DistSampler(); ROOT::Math::DistSamplerDistSampler(); ROOT::Math::DistSamplerDistSampler(const ROOT::Math::DistSampler&); virtual boolGenerate(unsigned int nevt, ROOT::Fit::UnBinData& data); virtual boolGenerate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true); boolGenerate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true); virtual TRandom*GetRandom(); virtual boolInit(const char* = """"); virtual boolInit(const ROOT::Math::DistSamplerOptions& opt); unsigned intNDim() const; ROOT::Math::DistSampler&operator=(const ROOT::Math::DistSampler&); const ROOT::Math::IMultiGenFunction&ParentPdf() const; const double*Sample(); virtual boolSample(double* x); virtual doubleSample1D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::M",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:2501,Modifiability,Inherit,Inheritance,2501,"ble* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::Math::IMultiGenFunction*fFuncinternal function (ND); boolfOwnFuncflag to indicate if the function is owned; ROOT::Fit::DataRange*fRangedata range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DistSampler(); default constructor. {}. virtual ~DistSampler(); virtual destructor. void SetFunction(Function & func, unsigned int dim); set the parent function distribution to use for sampling (generic case). DoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); need to clone to avoid temporary. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). unsigned int NDim() const; return the dimension of the parent distribution (and the data). { return fData.size(); }. bool Init(const char* = """"). initialize the generators with the given algorithm; Implemented by derived classes who needs it; (like UnuranSampler); If nothing is specified use default algorithm; from DistSamplerOptions::SetDefaultAlgorithm. { return true;}. bool Init(const ROOT::Math::DistSamplerOptions& opt). initialize the generators with the given option; which my include the a",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:2514,Modifiability,Inherit,Inherited,2514,"ble* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::Math::IMultiGenFunction*fFuncinternal function (ND); boolfOwnFuncflag to indicate if the function is owned; ROOT::Fit::DataRange*fRangedata range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DistSampler(); default constructor. {}. virtual ~DistSampler(); virtual destructor. void SetFunction(Function & func, unsigned int dim); set the parent function distribution to use for sampling (generic case). DoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); need to clone to avoid temporary. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). unsigned int NDim() const; return the dimension of the parent distribution (and the data). { return fData.size(); }. bool Init(const char* = """"). initialize the generators with the given algorithm; Implemented by derived classes who needs it; (like UnuranSampler); If nothing is specified use default algorithm; from DistSamplerOptions::SetDefaultAlgorithm. { return true;}. bool Init(const ROOT::Math::DistSamplerOptions& opt). initialize the generators with the given option; which my include the a",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:5949,Modifiability,extend,extend,5949,"ed classes. Sample(double* x). const double * Sample(). sample one event and rerturning array x with coordinates. bool SampleBin(double prob, double& value, double* error = 0). sample one bin given an estimated of the pdf in the bin; (this can be function value at the center or its integral in the bin; divided by the bin width); By default do not do random sample, just return the function values; Typically Poisson statistics will be used. bool SampleBins(unsigned int n, const double* prob, double* values, double* errors = 0). sample a set of bins given a vector of probabilities; Typically multinomial statistics will be used and the sum of the probabilities; will be equal to the total number of events to be generated; For sampling the bins indipendently, SampleBin should be used. bool Generate(unsigned int nevt, ROOT::Fit::UnBinData& data). generate a un-binned data sets (fill the given data set); if dataset has already data append to it. bool Generate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true). generate a bin data set .; A range must have been set before (otherwise inf is returned); and the bins are equidinstant in the previously defined range; bin center values must be present in given data set; If the sampler is implemented by a random one, the entries; will be binned according to the Poisson distribution; It is assumed the distribution is normalized, otherwise the nevt must be scaled; accordingly. The expected value/bin nexp = f(x_i) * binArea/ nevt; Extend control if use a fixed (i.e. multinomial statistics) or floating total number of events. bool Generate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true). same as before but passing the range in case of 1 dim data. bool IsInitialized(); check if generator have been initialized correctly and one can start generating. const ROOT::Fit::DataRange & PdfRange() const; return the data range of the Pdf . Must be called after set",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:6433,Modifiability,Extend,Extend,6433,"ot do random sample, just return the function values; Typically Poisson statistics will be used. bool SampleBins(unsigned int n, const double* prob, double* values, double* errors = 0). sample a set of bins given a vector of probabilities; Typically multinomial statistics will be used and the sum of the probabilities; will be equal to the total number of events to be generated; For sampling the bins indipendently, SampleBin should be used. bool Generate(unsigned int nevt, ROOT::Fit::UnBinData& data). generate a un-binned data sets (fill the given data set); if dataset has already data append to it. bool Generate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true). generate a bin data set .; A range must have been set before (otherwise inf is returned); and the bins are equidinstant in the previously defined range; bin center values must be present in given data set; If the sampler is implemented by a random one, the entries; will be binned according to the Poisson distribution; It is assumed the distribution is normalized, otherwise the nevt must be scaled; accordingly. The expected value/bin nexp = f(x_i) * binArea/ nevt; Extend control if use a fixed (i.e. multinomial statistics) or floating total number of events. bool Generate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true). same as before but passing the range in case of 1 dim data. bool IsInitialized(); check if generator have been initialized correctly and one can start generating. const ROOT::Fit::DataRange & PdfRange() const; return the data range of the Pdf . Must be called after setting the function. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:6630,Modifiability,extend,extend,6630,"ot do random sample, just return the function values; Typically Poisson statistics will be used. bool SampleBins(unsigned int n, const double* prob, double* values, double* errors = 0). sample a set of bins given a vector of probabilities; Typically multinomial statistics will be used and the sum of the probabilities; will be equal to the total number of events to be generated; For sampling the bins indipendently, SampleBin should be used. bool Generate(unsigned int nevt, ROOT::Fit::UnBinData& data). generate a un-binned data sets (fill the given data set); if dataset has already data append to it. bool Generate(unsigned int nevt, const int* nbins, ROOT::Fit::BinData& data, bool extend = true). generate a bin data set .; A range must have been set before (otherwise inf is returned); and the bins are equidinstant in the previously defined range; bin center values must be present in given data set; If the sampler is implemented by a random one, the entries; will be binned according to the Poisson distribution; It is assumed the distribution is normalized, otherwise the nevt must be scaled; accordingly. The expected value/bin nexp = f(x_i) * binArea/ nevt; Extend control if use a fixed (i.e. multinomial statistics) or floating total number of events. bool Generate(unsigned int nevt, int nbins, double xmin, double xmax, ROOT::Fit::BinData& data, bool extend = true). same as before but passing the range in case of 1 dim data. bool IsInitialized(); check if generator have been initialized correctly and one can start generating. const ROOT::Fit::DataRange & PdfRange() const; return the data range of the Pdf . Must be called after setting the function. » Author: L. Moneta Fri Sep 22 15:06:47 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:2304,Performance,cache,cached,2304,"D(); virtual boolSampleBin(double prob, double& value, double* error = 0); virtual boolSampleBins(unsigned int n, const double* prob, double* values, double* errors = 0); virtual voidSetArea(double); virtual voidSetFunction(const ROOT::Math::IGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); voidSetFunction<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& func, unsigned int dim); virtual voidSetMode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::Math::IMultiGenFunction*fFuncinternal function (ND); boolfOwnFuncflag to indicate if the function is owned; ROOT::Fit::DataRange*fRangedata range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DistSampler(); default constructor. {}. virtual ~DistSampler(); virtual destructor. void SetFunction(Function & func, unsigned int dim); set the parent function distribution to use for sampling (generic case). DoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); need to clone to avoid temporary. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). unsigned int NDim() const; return the dimension of the parent distribution (and the data). { return fData.size(); }. bool Init(const char* = """"). initialize the generators with the given algorithm; Implemented by derived classes who needs it; (like UnuranSampler); If nothing is specified use default algorithm; from DistSamplerOptions::SetDefault",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSampler.html:2874,Safety,avoid,avoid,2874,"Mode(double); virtual voidSetRandom(TRandom*); voidSetRange(const ROOT::Fit::DataRange& range); voidSetRange(const double* xmin, const double* xmax); voidSetRange(double xmin, double xmax, int icoord = 0); virtual voidSetSeed(unsigned int). protected:. virtual voidDoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); boolIsInitialized(); const ROOT::Fit::DataRange&PdfRange() const. Data Members; private:. vector<double>fDatainternal array used to cached the sample data; const ROOT::Math::IMultiGenFunction*fFuncinternal function (ND); boolfOwnFuncflag to indicate if the function is owned; ROOT::Fit::DataRange*fRangedata range. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; DistSampler(); default constructor. {}. virtual ~DistSampler(); virtual destructor. void SetFunction(Function & func, unsigned int dim); set the parent function distribution to use for sampling (generic case). DoSetFunction(const ROOT::Math::IMultiGenFunction& func, bool copy); need to clone to avoid temporary. void SetFunction(const ROOT::Math::IGenFunction& func); set the parent function distribution to use for random sampling (one dim case). unsigned int NDim() const; return the dimension of the parent distribution (and the data). { return fData.size(); }. bool Init(const char* = """"). initialize the generators with the given algorithm; Implemented by derived classes who needs it; (like UnuranSampler); If nothing is specified use default algorithm; from DistSamplerOptions::SetDefaultAlgorithm. { return true;}. bool Init(const ROOT::Math::DistSamplerOptions& opt). initialize the generators with the given option; which my include the algorithm but also more if; the method is re-impelmented by derived class; The default implementation calls the above method; passing just the algorithm name. void SetRandom(TRandom* ). Set the random engine to be used; To be implemented by the derived classes who provides; random sampling. {}. void SetSeed(unsi",MatchSource.WIKI,root/html604/ROOT__Math__DistSampler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSampler.html
https://root.cern/root/html604/ROOT__Math__DistSamplerOptions.html:1764,Modifiability,Inherit,Inheritance,1764,":DistSamplerOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); ROOT::Math::DistSamplerOptions&operator=(const ROOT::Math::DistSamplerOptions& opt); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name, ostream& os = std::cout); intPrintLevel() const; const string&Sampler() const; voidSetAlgorithm(const char* type); static voidSetDefaultAlgorithm1D(const char* algo); static voidSetDefaultAlgorithmND(const char* algo); static voidSetDefaultPrintLevel(int level); static voidSetDefaultSampler(const char* type); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetPrintLevel(int level); voidSetSampler(const char* type). Data Members; private:. stringfAlgoTypeDistSampler algorithmic specification (for Unuran only); ROOT::Math::IOptions*fExtraOptionsextra options; intfLeveldebug print level; stringfSamplerTypeDistSampler type (Unuran, Foam, etc...)xs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultSampler(const char* type); static methods for setting and retrieving the default options. void SetDefaultAlgorithm1D(const char* algo). void SetDefaultAlgorithmND(const char* algo). void SetDefaultPrintLevel(int level). const std::string & DefaultSampler(). const std::string & DefaultAlgorithm1D(). const std::string & DefaultAlgorithmND(). int DefaultPrintLevel(). ROOT::Math::IOptions & Default(const char* name); retrieve extra options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. DistSamplerOptions(int dim = 0); constructor using the default options; pass optionally a pointer to the additional options; otherwise look if they exist for this default minimizer; and in that case they are copied in the constructed instance; ",MatchSource.WIKI,root/html604/ROOT__Math__DistSamplerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSamplerOptions.html
https://root.cern/root/html604/ROOT__Math__DistSamplerOptions.html:1777,Modifiability,Inherit,Inherited,1777,":DistSamplerOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; static ROOT::Math::IOptions*FindDefault(const char* name); ROOT::Math::DistSamplerOptions&operator=(const ROOT::Math::DistSamplerOptions& opt); voidPrint(ostream& os = std::cout) const; static voidPrintDefault(const char* name, ostream& os = std::cout); intPrintLevel() const; const string&Sampler() const; voidSetAlgorithm(const char* type); static voidSetDefaultAlgorithm1D(const char* algo); static voidSetDefaultAlgorithmND(const char* algo); static voidSetDefaultPrintLevel(int level); static voidSetDefaultSampler(const char* type); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetPrintLevel(int level); voidSetSampler(const char* type). Data Members; private:. stringfAlgoTypeDistSampler algorithmic specification (for Unuran only); ROOT::Math::IOptions*fExtraOptionsextra options; intfLeveldebug print level; stringfSamplerTypeDistSampler type (Unuran, Foam, etc...)xs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetDefaultSampler(const char* type); static methods for setting and retrieving the default options. void SetDefaultAlgorithm1D(const char* algo). void SetDefaultAlgorithmND(const char* algo). void SetDefaultPrintLevel(int level). const std::string & DefaultSampler(). const std::string & DefaultAlgorithm1D(). const std::string & DefaultAlgorithmND(). int DefaultPrintLevel(). ROOT::Math::IOptions & Default(const char* name); retrieve extra options - if not existing create a IOptions. ROOT::Math::IOptions * FindDefault(const char* name); find extra options - return 0 if not existing. void PrintDefault(const char* name, ostream& os = std::cout); print all the default options for the name given. DistSamplerOptions(int dim = 0); constructor using the default options; pass optionally a pointer to the additional options; otherwise look if they exist for this default minimizer; and in that case they are copied in the constructed instance; ",MatchSource.WIKI,root/html604/ROOT__Math__DistSamplerOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__DistSamplerOptions.html
https://root.cern/root/html604/ROOT__Math__EulerAngles.html:2894,Modifiability,Inherit,Inheritance,2894,"CoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::Rotation3D& r) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::AxisAngle& a) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::EulerAngles& e) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::Quaternion& q) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::RotationX& rx) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::RotationY& ry) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::EulerAngles&operator=(const ROOT::Math::EulerAngles&); ROOT::Math::EulerAngles&operator=(ROOT::Math::EulerAngles&&); booloperator==(const ROOT::Math::EulerAngles& rhs) const; ROOT::Math::EulerAngles::ScalarPhi() const; ROOT::Math::EulerAngles::ScalarPsi() const; voidRectify(); voidSetComponents(ROOT::Math::EulerAngles::Scalar phi, ROOT::Math::EulerAngles::Scalar theta, ROOT::Math::EulerAngles::Scalar psi); voidSetPhi(ROOT::Math::EulerAngles::Scalar phi); voidSetPsi(ROOT::Math::EulerAngles::Scalar psi); voidSetTheta(ROOT::Math::EulerAngles::Scalar theta); ROOT::Math::EulerAngles::ScalarTheta() const. private:. static doublePi(). Data Members; private:. doublefPhiZ rotation angle (first) defined in [-PI,PI]; doublefPsiZ rotation angle (third) defined in [-PI,PI]; doublefThetaX rotation angle (second) defined only [0,PI]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__EulerAngles.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__EulerAngles.html
https://root.cern/root/html604/ROOT__Math__EulerAngles.html:2907,Modifiability,Inherit,Inherited,2907,"CoordinateSystemTag>& v) const; ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>operator()<ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag> >(const ROOT::Math::DisplacementVector3D<Cartesian3D<double>,DefaultCoordinateSystemTag>& v) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::Rotation3D& r) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::AxisAngle& a) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::EulerAngles& e) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::Quaternion& q) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::RotationX& rx) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::RotationY& ry) const; ROOT::Math::EulerAnglesoperator*(const ROOT::Math::RotationZ& rz) const; ROOT::Math::EulerAngles&operator=(const ROOT::Math::EulerAngles&); ROOT::Math::EulerAngles&operator=(ROOT::Math::EulerAngles&&); booloperator==(const ROOT::Math::EulerAngles& rhs) const; ROOT::Math::EulerAngles::ScalarPhi() const; ROOT::Math::EulerAngles::ScalarPsi() const; voidRectify(); voidSetComponents(ROOT::Math::EulerAngles::Scalar phi, ROOT::Math::EulerAngles::Scalar theta, ROOT::Math::EulerAngles::Scalar psi); voidSetPhi(ROOT::Math::EulerAngles::Scalar phi); voidSetPsi(ROOT::Math::EulerAngles::Scalar psi); voidSetTheta(ROOT::Math::EulerAngles::Scalar theta); ROOT::Math::EulerAngles::ScalarTheta() const. private:. static doublePi(). Data Members; private:. doublefPhiZ rotation angle (first) defined in [-PI,PI]; doublefPsiZ rotation angle (third) defined in [-PI,PI]; doublefThetaX rotation angle (second) defined only [0,PI]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__EulerAngles.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__EulerAngles.html
https://root.cern/root/html604/ROOT__Math__Factory.html:335,Integrability,interface,interfaces,335,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::FactoryFactory(ROOT::Math::Factory&&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(ROOT::Math::Factory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Factory.html
https://root.cern/root/html604/ROOT__Math__Factory.html:382,Modifiability,Plugin,Plugin,382,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::FactoryFactory(ROOT::Math::Factory&&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(ROOT::Math::Factory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Factory.html
https://root.cern/root/html604/ROOT__Math__Factory.html:902,Modifiability,Inherit,Inheritance,902,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::FactoryFactory(ROOT::Math::Factory&&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(ROOT::Math::Factory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Factory.html
https://root.cern/root/html604/ROOT__Math__Factory.html:915,Modifiability,Inherit,Inherited,915,". ROOT::Math::Factory. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Factory. class ROOT::Math::Factory. Factory class holding static functions to create the interfaces like ROOT::Math::Minimizer; via the Plugin Manager. Function Members (Methods); public:. ~Factory(); static ROOT::Math::DistSampler*CreateDistSampler(const string& samplerType = """"); static ROOT::Math::Minimizer*CreateMinimizer(const string& minimizerType = """", const string& algoType = """"); ROOT::Math::FactoryFactory(); ROOT::Math::FactoryFactory(const ROOT::Math::Factory&); ROOT::Math::FactoryFactory(ROOT::Math::Factory&&); ROOT::Math::Factory&operator=(const ROOT::Math::Factory&); ROOT::Math::Factory&operator=(ROOT::Math::Factory&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ROOT::Math::Minimizer * CreateMinimizer(const string& minimizerType = """", const string& algoType = """"). static method to create the corrisponding Minimizer given the string; Supported Minimizers types are:; Minuit (TMinuit), Minuit2, GSLMultiMin, GSLMultiFit, GSLSimAn, Linear, Fumili, Genetic; If no name is given use default values defined in MinimizerOptions. ROOT::Math::DistSampler * CreateDistSampler(const string& samplerType = """"). static method to create the distribution sampler class given a string specifying the type; Supported sampler types are:; Unuran, Foam; If no name is given use default values defined in DistSamplerOptions. » Author: L. Moneta Fri Dec 22 14:43:33 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Factory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Factory.html
https://root.cern/root/html604/ROOT__Math__Functor.html:409,Availability,avail,available,409,". ROOT::Math::Functor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor. class ROOT::Math::Functor: public ROOT::Math::IBaseFunctionMultiDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~Functor(); virtual ROOT::Math::Functor::ImplBase*Clone() const; ROOT::Math::FunctorFunctor(); ROOT::Math::FunctorFunctor(const ROOT::Math::Functor& rhs); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::Functor&operator=(const ROOT::Math::Functor& rhs). private:. virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::Functor::Impl>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. Functor(). Default constructor. {}. Functor(const PtrObj& p, MemFn memFn, unsigned int dim ). construct from a pointer to member function (multi-dim type). {}. virtual ~Functor(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generat",MatchSource.WIKI,root/html604/ROOT__Math__Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Functor.html
https://root.cern/root/html604/ROOT__Math__Functor.html:1317,Modifiability,Inherit,Inheritance,1317,"ewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor. class ROOT::Math::Functor: public ROOT::Math::IBaseFunctionMultiDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~Functor(); virtual ROOT::Math::Functor::ImplBase*Clone() const; ROOT::Math::FunctorFunctor(); ROOT::Math::FunctorFunctor(const ROOT::Math::Functor& rhs); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::Functor&operator=(const ROOT::Math::Functor& rhs). private:. virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::Functor::Impl>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. Functor(). Default constructor. {}. Functor(const PtrObj& p, MemFn memFn, unsigned int dim ). construct from a pointer to member function (multi-dim type). {}. virtual ~Functor(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Functor.html
https://root.cern/root/html604/ROOT__Math__Functor.html:1330,Modifiability,Inherit,Inherited,1330,"ewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor. class ROOT::Math::Functor: public ROOT::Math::IBaseFunctionMultiDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~Functor(); virtual ROOT::Math::Functor::ImplBase*Clone() const; ROOT::Math::FunctorFunctor(); ROOT::Math::FunctorFunctor(const ROOT::Math::Functor& rhs); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::Functor&operator=(const ROOT::Math::Functor& rhs). private:. virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::Functor::Impl>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. Functor(). Default constructor. {}. Functor(const PtrObj& p, MemFn memFn, unsigned int dim ). construct from a pointer to member function (multi-dim type). {}. virtual ~Functor(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Functor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Functor.html
https://root.cern/root/html604/ROOT__Math__Functor1D.html:413,Availability,avail,available,413,". ROOT::Math::Functor1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::Functor1D. class ROOT::Math::Functor1D: public ROOT::Math::IBaseFunctionOneDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~Functor1D(); virtual ROOT::Math::Functor1D::ImplBase*Clone() const; ROOT::Math::Functor1DFunctor1D(); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D& f); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D& rhs); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::Functor1D&operator=(const ROOT::Math::Functor1D& rhs). private:. virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::Functor1D::Impl>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. Functor1D(). Default constructor. {}. Functor1D(const Func & f). construct from a callable object with the right signature; implementing operator() (double x). {}. Functor1D(const PtrObj& p, MemFn memFn). construct from a pointer to member function (1D type). {}. virtual ~Functor1D(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, C",MatchSource.WIKI,root/html604/ROOT__Math__Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Functor1D.html
https://root.cern/root/html604/ROOT__Math__Functor1D.html:1415,Modifiability,Inherit,Inheritance,1415,":Math::Functor1D. class ROOT::Math::Functor1D: public ROOT::Math::IBaseFunctionOneDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~Functor1D(); virtual ROOT::Math::Functor1D::ImplBase*Clone() const; ROOT::Math::Functor1DFunctor1D(); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D& f); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D& rhs); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::Functor1D&operator=(const ROOT::Math::Functor1D& rhs). private:. virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::Functor1D::Impl>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. Functor1D(). Default constructor. {}. Functor1D(const Func & f). construct from a callable object with the right signature; implementing operator() (double x). {}. Functor1D(const PtrObj& p, MemFn memFn). construct from a pointer to member function (1D type). {}. virtual ~Functor1D(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Functor1D.html
https://root.cern/root/html604/ROOT__Math__Functor1D.html:1428,Modifiability,Inherit,Inherited,1428,":Math::Functor1D. class ROOT::Math::Functor1D: public ROOT::Math::IBaseFunctionOneDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~Functor1D(); virtual ROOT::Math::Functor1D::ImplBase*Clone() const; ROOT::Math::Functor1DFunctor1D(); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D& f); ROOT::Math::Functor1DFunctor1D(const ROOT::Math::Functor1D& rhs); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::Functor1D&operator=(const ROOT::Math::Functor1D& rhs). private:. virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::Functor1D::Impl>fImplpointer to base functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. Functor1D(). Default constructor. {}. Functor1D(const Func & f). construct from a callable object with the right signature; implementing operator() (double x). {}. Functor1D(const PtrObj& p, MemFn memFn). construct from a pointer to member function (1D type). {}. virtual ~Functor1D(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__Functor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Functor1D.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:2213,Availability,error,error,2213,"or&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:2243,Availability,error,error,2243,"gratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. .",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3138,Availability,Error,Error,3138,"oubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3340,Availability,Error,Error,3340,"ltResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero.",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3391,Availability,Error,Error,3391,"ltResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero.",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:4320,Availability,error,error,4320,"culation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:;",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:4433,Availability,error,error,4433," last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. do",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:4514,Availability,error,error,4514," last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. do",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:4691,Availability,error,error,4691," converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate va",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:4761,Availability,error,error,4761," converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate va",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:4823,Availability,error,error,4823," converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate va",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:5061,Availability,error,error,5061,"with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integra",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:5199,Availability,Error,Error,5199,"ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation th",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:385,Deployability,integrat,integration,385,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:440,Deployability,integrat,integration,440,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:531,Deployability,Integrat,Integration,531,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:1230,Deployability,Integrat,IntegratorOneDimOptionsOptions,1230,"VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublef",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:1440,Deployability,Integrat,IntegratorOneDimOptions,1440,"VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublef",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:1559,Deployability,Integrat,IntegrationOneDim,1559,"VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublef",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3483,Deployability,integrat,integration,3483,"st called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; a",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6154,Deployability,integrat,integration,6154,"ccuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6594,Deployability,integrat,integration,6594,"pecified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the docum",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6784,Deployability,integrat,integration,6784,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:7106,Deployability,Integrat,IntegratorOneDimOptions,7106,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:7231,Deployability,Integrat,Integration,7231,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:385,Integrability,integrat,integration,385,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:440,Integrability,integrat,integration,440,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:531,Integrability,Integrat,Integration,531,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:1230,Integrability,Integrat,IntegratorOneDimOptionsOptions,1230,"VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublef",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:1440,Integrability,Integrat,IntegratorOneDimOptions,1440,"VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublef",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:1559,Integrability,Integrat,IntegrationOneDim,1559,"VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublef",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3102,Integrability,Interface,Interface,3102,"oubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3483,Integrability,integrat,integration,3483,"st called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; a",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3594,Integrability,Interface,Interface,3594,"l. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:3678,Integrability,rout,routine,3678,"GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface. Returns Integral of function between a and b.; Based on original CERNLIB routine DGAUSS by Sigfried Kolbig; converted to C++ by Rene Brun. This function computes, to an attempted specified accuracy, the value; of the integral. Method:; For any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:5021,Integrability,rout,routine,5021,"with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integra",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:5067,Integrability,message,message,5067,"with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; The user provides absolute and relative error bounds (epsrel and epsabs) and the; algorithm will stop when the estimated error is less than the epsabs OR is less; than |I| * epsrel.; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the relative error may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integra",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6154,Integrability,integrat,integration,6154,"ccuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. double Integral(); Returns Integral of function on an infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6594,Integrability,integrat,integration,6594,"pecified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the docum",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:6784,Integrability,integrat,integration,6784,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:7106,Integrability,Integrat,IntegratorOneDimOptions,7106,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:7231,Integrability,Integrat,Integration,7231,"thmetic expression, this function has the approximate value; of the integral I. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralUp(double a); Returns Integral of function on an upper semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - A: lower end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. double IntegralLow(double b); Returns Integral of function on a lower semi-infinite interval.; This function computes, to an attempted specified accuracy, the value of the integral:. Usage:; In any arithmetic expression, this function has the approximate value; of the integral I.; - B: upper end-point of integration interval. The integral is mapped onto [0,1] using a transformation then integral computation is surrogated to DoIntegral. void SetFunction(const ROOT::Math::IGenFunction& ); Set integration function (flag control if function must be copied inside).; \@param f Function to be used in the calculations. double Integral(const vector<double>& pts); This method is not implemented. . double IntegralCauchy(double a, double b, double c); This method is not implemented. . void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Derived class (like GaussLegendreIntegrator) can re-implement this method to modify to use; an improved algorithm. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:2578,Modifiability,Inherit,Inheritance,2578,"tegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface.",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:2591,Modifiability,Inherit,Inherited,2591,"tegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This method is not implemented. . { fEpsAbs = eps; }. double Result() const; Returns the result of the last Integral calculation. . double Error() const; Return the estimate of the absolute Error of the last Integral calculation. . int Status() const; return the status of the last integration - 0 in case of success . double Integral(double a, double b); Implementing VirtualIntegratorOneDim Interface.",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html:365,Performance,perform,performing,365,". ROOT::Math::GaussIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussIntegrator. class ROOT::Math::GaussIntegrator: public ROOT::Math::VirtualIntegratorOneDim. User class for performing function integration. It will use the Gauss Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussIntegrator(); voidAbsValue(bool flag); virtual doubleError() const; ROOT::Math::GaussIntegratorGaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorGaussIntegrator(double absTol = 0, double relTol = 0); virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::GaussIntegrator&operator=(const ROOT::Math::GaussIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim:",MatchSource.WIKI,root/html604/ROOT__Math__GaussIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:738,Availability,Error,Error,738,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:2991,Availability,error,error,2991,"irtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative er",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:3050,Availability,error,error,3050,"ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:3966,Availability,error,error,3966,"ath::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of Gaus",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:4185,Availability,Error,Error,4185,"eROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points thi",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:401,Deployability,integrat,integration,401,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:465,Deployability,integrat,integration,465,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:556,Deployability,Integrat,Integration,556,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:1831,Deployability,Integrat,IntegratorOneDimOptionsOptions,1831," ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:2125,Deployability,Integrat,IntegratorOneDimOptions,2125," ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:2269,Deployability,Integrat,IntegrationOneDim,2269," ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:3923,Deployability,integrat,integration,3923,"tion* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed f",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:4719,Deployability,Integrat,IntegratorOneDimOptions,4719,"nction documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:4844,Deployability,Integrat,Integration,4844,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:401,Integrability,integrat,integration,401,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:465,Integrability,integrat,integration,465,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:556,Integrability,Integrat,Integration,556,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:1831,Integrability,Integrat,IntegratorOneDimOptionsOptions,1831," ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:2125,Integrability,Integrat,IntegratorOneDimOptions,2125," ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:2269,Integrability,Integrat,IntegrationOneDim,2269," ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussIntegrator::SetFunction(const ROOT::Math::IGenFunction&); voidSetNumberPoints(int num); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double); virtual intROOT::Math::GaussIntegrator::Status() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:3923,Integrability,integrat,integration,3923,"tion* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed f",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:4719,Integrability,Integrat,IntegratorOneDimOptions,4719,"nction documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the document",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:4844,Integrability,Integrat,Integration,4844,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:5067,Integrability,interface,interface,5067,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:5162,Integrability,rout,routine,5162,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:3670,Modifiability,Inherit,Inheritance,3670,"ntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOpt",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:3683,Modifiability,Inherit,Inherited,3683,"ntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. voidCalcGaussLegendreSamplingPoints(); virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doubleROOT::Math::GaussIntegrator::fEpsAbsAbsolute error.; doubleROOT::Math::GaussIntegrator::fEpsRelRelative error.; const ROOT::Math::IGenFunction*ROOT::Math::GaussIntegrator::fFunctionPointer to function used.; doubleROOT::Math::GaussIntegrator::fLastErrorError from the last stimation.; doubleROOT::Math::GaussIntegrator::fLastResultResult from the last stimation.; intfNumNumber of points used in the stimation of the integral.; boolROOT::Math::GaussIntegrator::fUsedOnceBool value to check if the function was at least called once.; double*fWWeights of the points used.; double*fXAbscisa of the points used.; static boolROOT::Math::GaussIntegrator::fgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOpt",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:381,Performance,perform,performing,381,". ROOT::Math::GaussLegendreIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GaussLegendreIntegrator. class ROOT::Math::GaussLegendreIntegrator: public ROOT::Math::GaussIntegrator. User class for performing function integration. It will use the Gauss-Legendre Method for function integration in a given interval.; This class is implemented from TF1::Integral(). @ingroup Integration. Function Members (Methods); public:. virtual~GaussLegendreIntegrator(); voidROOT::Math::GaussIntegrator::AbsValue(bool flag); virtual doubleROOT::Math::GaussIntegrator::Error() const; ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(const ROOT::Math::GaussIntegrator&); ROOT::Math::GaussIntegratorROOT::Math::GaussIntegrator::GaussIntegrator(double absTol = 0, double relTol = 0); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(const ROOT::Math::GaussLegendreIntegrator&); ROOT::Math::GaussLegendreIntegratorGaussLegendreIntegrator(int num = 10, double eps = 9.9999999999999998E-13); intGetNumberPoints() const; voidGetWeightVectors(double* x, double* w) const; virtual doubleROOT::Math::GaussIntegrator::Integral(); virtual doubleROOT::Math::GaussIntegrator::Integral(const vector<double>& pts); virtual doubleROOT::Math::GaussIntegrator::Integral(double a, double b); virtual doubleROOT::Math::GaussIntegrator::IntegralCauchy(double a, double b, double c); virtual doubleROOT::Math::GaussIntegrator::IntegralLow(double b); virtual doubleROOT::Math::GaussIntegrator::IntegralUp(double a); virtual intNEval() const; ROOT::Math::GaussLegendreIntegrator&operator=(const ROOT::Math::GaussLegendreIntegrator&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::GaussIntegrator::Result() const; virtual voidSetAbsTolerance(double); virtual voidROOT::Math::GaussInteg",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:5051,Safety,unsafe,unsafe,5051,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GaussLegendreIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html
https://root.cern/root/html604/ROOT__Math__GenAlgoOptions.html:4623,Integrability,interface,interface,4623,":less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > > >(const map<string,double>& opts, ostream& os); static voidPrint<std::map<std::basic_string<char>, int, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, int> > > >(const map<string,int>& opts, ostream& os); static voidPrint<std::map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > > > >(const map<string,string>& opts, ostream& os). Data Members; private:. map<string,int>fIntOptsmap of the integer options; map<string,string>fNamOptsmap of the named options; map<string,double>fRealOptsmap of the real options. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GenAlgoOptions(); {}. virtual ~GenAlgoOptions(). IOptions * Clone() const; use default copy constructor and assignment operator; generic methods for retrivieng options ; methods implementing the IOptions interface. return new GenAlgoOptions(const ROOT::Math::GenAlgoOptions& ). bool GetRealValue(const char* name, double& val) const; t.b.d need probably to implement in a .cxx file for CINT. bool GetIntValue(const char* name, int& val) const. bool GetNamedValue(const char* name, string& val) const. void SetRealValue(const char* name, double val); method wich need to be re-implemented by the derived classes. void SetIntValue(const char* name, int val). void SetNamedValue(const char* name, const char* val). void Print(ostream& os = std::cout) const; print options. IOptions * FindDefault(const char* algoname); static methods to retrieve the default options; find the option given a name; return 0 if the option is not found. IOptions & Default(const char* algoname); retrieve options given the name; if option is not found create a new GenAlgoOption for the given name. void PrintAllDefault(ostream& os = std::cout); print al",MatchSource.WIKI,root/html604/ROOT__Math__GenAlgoOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GenAlgoOptions.html
https://root.cern/root/html604/ROOT__Math__GenAlgoOptions.html:4342,Modifiability,Inherit,Inheritance,4342,"basic_string<char> > > > >(const string& name, map<string,string>& opts, const map<string,string>::mapped_type& value); static voidPrint<std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > > >(const map<string,double>& opts, ostream& os); static voidPrint<std::map<std::basic_string<char>, int, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, int> > > >(const map<string,int>& opts, ostream& os); static voidPrint<std::map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > > > >(const map<string,string>& opts, ostream& os). Data Members; private:. map<string,int>fIntOptsmap of the integer options; map<string,string>fNamOptsmap of the named options; map<string,double>fRealOptsmap of the real options. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GenAlgoOptions(); {}. virtual ~GenAlgoOptions(). IOptions * Clone() const; use default copy constructor and assignment operator; generic methods for retrivieng options ; methods implementing the IOptions interface. return new GenAlgoOptions(const ROOT::Math::GenAlgoOptions& ). bool GetRealValue(const char* name, double& val) const; t.b.d need probably to implement in a .cxx file for CINT. bool GetIntValue(const char* name, int& val) const. bool GetNamedValue(const char* name, string& val) const. void SetRealValue(const char* name, double val); method wich need to be re-implemented by the derived classes. void SetIntValue(const char* name, int val). void SetNamedValue(const char* name, const char* val). void Print(ostream& os = std::cout) const; print options. IOptions * FindDefault(const char* algoname); static methods to retrieve the default options; find the option given a name; return 0 if the option is not found. IOptions & Default",MatchSource.WIKI,root/html604/ROOT__Math__GenAlgoOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GenAlgoOptions.html
https://root.cern/root/html604/ROOT__Math__GenAlgoOptions.html:4355,Modifiability,Inherit,Inherited,4355,"basic_string<char> > > > >(const string& name, map<string,string>& opts, const map<string,string>::mapped_type& value); static voidPrint<std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > > >(const map<string,double>& opts, ostream& os); static voidPrint<std::map<std::basic_string<char>, int, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, int> > > >(const map<string,int>& opts, ostream& os); static voidPrint<std::map<std::basic_string<char>, std::basic_string<char>, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > > > >(const map<string,string>& opts, ostream& os). Data Members; private:. map<string,int>fIntOptsmap of the integer options; map<string,string>fNamOptsmap of the named options; map<string,double>fRealOptsmap of the real options. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GenAlgoOptions(); {}. virtual ~GenAlgoOptions(). IOptions * Clone() const; use default copy constructor and assignment operator; generic methods for retrivieng options ; methods implementing the IOptions interface. return new GenAlgoOptions(const ROOT::Math::GenAlgoOptions& ). bool GetRealValue(const char* name, double& val) const; t.b.d need probably to implement in a .cxx file for CINT. bool GetIntValue(const char* name, int& val) const. bool GetNamedValue(const char* name, string& val) const. void SetRealValue(const char* name, double val); method wich need to be re-implemented by the derived classes. void SetIntValue(const char* name, int val). void SetNamedValue(const char* name, const char* val). void Print(ostream& os = std::cout) const; print options. IOptions * FindDefault(const char* algoname); static methods to retrieve the default options; find the option given a name; return 0 if the option is not found. IOptions & Default",MatchSource.WIKI,root/html604/ROOT__Math__GenAlgoOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GenAlgoOptions.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:843,Availability,Error,ErrorDef,843," virtual~GeneticMinimizer(); virtual voidClear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); ROOT::Math::GeneticMinimizerGeneticMinimizer(int i = 0); ROOT::Math::GeneticMinimizerGeneticMinimizer(const ROOT::Math::GeneticMinimizer&); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); const ROOT::Math::GeneticMinimizerP",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:882,Availability,Error,Errors,882," virtual~GeneticMinimizer(); virtual voidClear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int i, unsigned int j) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::Minimizer::FixVariable(unsigned int ivar); ROOT::Math::GeneticMinimizerGeneticMinimizer(int i = 0); ROOT::Math::GeneticMinimizerGeneticMinimizer(const ROOT::Math::GeneticMinimizer&); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& pars) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; virtual boolROOT::Math::Minimizer::Hesse(); virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); const ROOT::Math::GeneticMinimizerP",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:4772,Availability,Toler,Tolerance,4772,"T::Math::IMultiGenFunction& func); virtual boolSetLimitedVariable(unsigned int, const string&, double, double, double, double); virtual boolROOT::Math::Minimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); virtual voidSetOptions(const ROOT::Math::MinimizerOptions& opt); voidSetParameters(const ROOT::Math::GeneticMinimizerParameters& params); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidSetRandomSeed(int seed); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::Minimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::Minimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::Minimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:5418,Availability,error,errors,5418,"rLimit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the M",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:6626,Availability,Error,Errors,6626,"oublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double * MinGradient() const; { return 0; }. bool ProvidesError() const; { return false; }. const double * Errors() const; { return 0; }. double Edm() const; { return 0; }. double CovMatrix(unsigned int i, unsigned int j) const; { return 0; }. GeneticMinimizer(int i = 0); GeneticMinimizer (int = 0);. void SetRandomSeed(int seed); { fParameters.fSeed = seed; }. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:2586,Deployability,Release,ReleaseVariable,2586,"(); virtual boolROOT::Math::Minimizer::IsFixedVariable(unsigned int ivar) const; boolROOT::Math::Minimizer::IsValidError() const; unsigned intROOT::Math::Minimizer::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); const ROOT::Math::GeneticMinimizerParameters&MinimizerParameters() const; virtual doubleMinValue() const; virtual unsigned intNCalls() const; virtual unsigned intNDim() const; virtual unsigned intNFree() const; virtual unsigned intROOT::Math::Minimizer::NIterations() const; ROOT::Math::GeneticMinimizer&operator=(const ROOT::Math::GeneticMinimizer&); virtual ROOT::Math::MinimizerOptionsOptions() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual boolProvidesError() const; virtual boolROOT::Math::Minimizer::ReleaseVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0); voidROOT::Math::Minimizer::SetDefaultOptions(); voidROOT::Math::Minimizer::SetErrorDef(double up); virtual boolSetFixedVariable(unsigned int ivar, const string& name, double val); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); virtual boolSetLimitedVariable(unsigned int, const string&, double, double, double, double); virtual boolROOT::Math::Minimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); virtual voidSetOptions(const ROOT::Math::MinimizerOptions& opt); voidSetParameters(const ROOT::Math::GeneticMinimizerParameters& params); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::S",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:4825,Modifiability,Variab,VariableIndex,4825,"T::Math::IMultiGenFunction& func); virtual boolSetLimitedVariable(unsigned int, const string&, double, double, double, double); virtual boolROOT::Math::Minimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); virtual voidSetOptions(const ROOT::Math::MinimizerOptions& opt); voidSetParameters(const ROOT::Math::GeneticMinimizerParameters& params); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidSetRandomSeed(int seed); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::Minimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::Minimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::Minimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:4903,Modifiability,Variab,VariableName,4903,"T::Math::IMultiGenFunction& func); virtual boolSetLimitedVariable(unsigned int, const string&, double, double, double, double); virtual boolROOT::Math::Minimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); virtual voidSetOptions(const ROOT::Math::MinimizerOptions& opt); voidSetParameters(const ROOT::Math::GeneticMinimizerParameters& params); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidSetRandomSeed(int seed); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::Minimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::Minimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::Minimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:5499,Modifiability,Inherit,Inheritance,5499,"Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:5512,Modifiability,Inherit,Inherited,5512,"Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:5907,Modifiability,variab,variable,5907,"; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double * MinGradient() const; { return 0; }. bool ProvidesError() const; { return false; }. const double * Errors() const; { return 0; }. double Edm() const; { return 0; }. double CovMatrix(unsigned int i, unsigned int j) const; { return 0; }. GeneticMinimizer(int i = 0); GeneticMinimizer (int = 0);. void SetRandomSeed(int seed); { fParameters.",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:6024,Modifiability,variab,variable,6024," voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double * MinGradient() const; { return 0; }. bool ProvidesError() const; { return false; }. const double * Errors() const; { return 0; }. double Edm() const; { return 0; }. double CovMatrix(unsigned int i, unsigned int j) const; { return 0; }. GeneticMinimizer(int i = 0); GeneticMinimizer (int = 0);. void SetRandomSeed(int seed); { fParameters.fSeed = seed; }. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 17:34; This page has been automatically ",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:5435,Security,validat,validated,5435,"rLimit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the M",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html:5631,Usability,Clear,Clear,5631,"Values(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the MinimizerOptions class. void SetOptions(const ROOT::Math::MinimizerOptions& opt). bool Minimize(). double MinValue() const. const double * X() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. const double * MinGradient() const; { return 0; }. bool ProvidesError() const; { return false; }. const double * Errors",MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizer.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizerParameters.html:1070,Modifiability,Inherit,Inheritance,1070,. ROOT::Math::GeneticMinimizerParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENETIC; » ROOT::Math::GeneticMinimizerParameters. class ROOT::Math::GeneticMinimizerParameters. Function Members (Methods); public:. ~GeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(ROOT::Math::GeneticMinimizerParameters&&); ROOT::Math::GeneticMinimizerParameters&operator=(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParameters&operator=(ROOT::Math::GeneticMinimizerParameters&&). Data Members; public:. Double_tfConvCrit; Int_tfCycles; Int_tfNsteps; Int_tfPopSize; Double_tfSC_factor; Int_tfSC_rate; Int_tfSC_steps; Int_tfSeed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizerParameters(); constructor of parameters with default values (use 100 is max iterations is not defined). GeneticMinimizerParameters(); constructor with default value. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizerParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizerParameters.html
https://root.cern/root/html604/ROOT__Math__GeneticMinimizerParameters.html:1083,Modifiability,Inherit,Inherited,1083,. ROOT::Math::GeneticMinimizerParameters. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENETIC; » ROOT::Math::GeneticMinimizerParameters. class ROOT::Math::GeneticMinimizerParameters. Function Members (Methods); public:. ~GeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParametersGeneticMinimizerParameters(ROOT::Math::GeneticMinimizerParameters&&); ROOT::Math::GeneticMinimizerParameters&operator=(const ROOT::Math::GeneticMinimizerParameters&); ROOT::Math::GeneticMinimizerParameters&operator=(ROOT::Math::GeneticMinimizerParameters&&). Data Members; public:. Double_tfConvCrit; Int_tfCycles; Int_tfNsteps; Int_tfPopSize; Double_tfSC_factor; Int_tfSC_rate; Int_tfSC_steps; Int_tfSeed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizerParameters(); constructor of parameters with default values (use 100 is max iterations is not defined). GeneticMinimizerParameters(); constructor with default value. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__GeneticMinimizerParameters.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GeneticMinimizerParameters.html
https://root.cern/root/html604/ROOT__Math__GlobalCoordinateSystemTag.html:983,Modifiability,Inherit,Inheritance,983,. ROOT::Math::GlobalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::GlobalCoordinateSystemTag. class ROOT::Math::GlobalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~GlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(ROOT::Math::GlobalCoordinateSystemTag&&); ROOT::Math::GlobalCoordinateSystemTag&operator=(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTag&operator=(ROOT::Math::GlobalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__GlobalCoordinateSystemTag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GlobalCoordinateSystemTag.html
https://root.cern/root/html604/ROOT__Math__GlobalCoordinateSystemTag.html:996,Modifiability,Inherit,Inherited,996,. ROOT::Math::GlobalCoordinateSystemTag. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » GENVECTOR; » ROOT::Math::GlobalCoordinateSystemTag. class ROOT::Math::GlobalCoordinateSystemTag. DefaultCoordinateSystemTag; Default tag for identifying any coordinate system. @ingroup GenVector. Function Members (Methods); public:. ~GlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTagGlobalCoordinateSystemTag(ROOT::Math::GlobalCoordinateSystemTag&&); ROOT::Math::GlobalCoordinateSystemTag&operator=(const ROOT::Math::GlobalCoordinateSystemTag&); ROOT::Math::GlobalCoordinateSystemTag&operator=(ROOT::Math::GlobalCoordinateSystemTag&&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__GlobalCoordinateSystemTag.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GlobalCoordinateSystemTag.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:4857,Integrability,interface,interface,4857,"OOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:3897,Modifiability,Inherit,Inheritance,3897,"OOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax); voidSetParameters(); voidSetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. static ROOT::Math::GoFTest::ETestTypekAD; static ROOT::Math::GoFTest::ETestTypekAD2s; static ROOT::Math::GoFTest::EUserDistributionkCDF; static ROOT::Math::GoFTest::EDistributionkExponential; static ROOT::Math::GoFTest::EDistributionkGaussian; static ROOT::Math::GoFTest::ETestTypekKS; static ROOT::Math::GoFTest::ETestTypekKS2s; static ROOT::Math::GoFTest::EDistributionkLogNormal; static ROOT::Math::GoFTest::EUserDistributionkPDF; static ROOT::Math::GoFTest::EDistributionkUndefined; static ROOT::Math::GoFTest::EDistributionkUserDefined. private:. auto_ptr<ROOT::Math::IGenFunction>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dis",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:3910,Modifiability,Inherit,Inherited,3910,"OOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax); voidSetParameters(); voidSetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. static ROOT::Math::GoFTest::ETestTypekAD; static ROOT::Math::GoFTest::ETestTypekAD2s; static ROOT::Math::GoFTest::EUserDistributionkCDF; static ROOT::Math::GoFTest::EDistributionkExponential; static ROOT::Math::GoFTest::EDistributionkGaussian; static ROOT::Math::GoFTest::ETestTypekKS; static ROOT::Math::GoFTest::ETestTypekKS2s; static ROOT::Math::GoFTest::EDistributionkLogNormal; static ROOT::Math::GoFTest::EUserDistributionkPDF; static ROOT::Math::GoFTest::EDistributionkUndefined; static ROOT::Math::GoFTest::EDistributionkUserDefined. private:. auto_ptr<ROOT::Math::IGenFunction>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dis",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:469,Testability,test,testStat,469," virtual~GoFTest(); Double_tAndersonDarling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistrib",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:619,Testability,test,testStat,619," virtual~GoFTest(); Double_tAndersonDarling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistrib",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:745,Testability,test,testStat,745," virtual~GoFTest(); Double_tAndersonDarling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistrib",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:1343,Testability,test,testStat,1343,"ndersonDarling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xm",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:1479,Testability,test,testStat,1479,"arling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0).",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:1546,Testability,test,test,1546,"arling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0).",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:1639,Testability,test,test,1639,"arling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0).",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:1673,Testability,test,testStat,1673,"arling2SamplesTest(const Char_t* option = ""p"") const; voidAndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const; static voidAndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Double_tAndersonDarlingTest(const Char_t* option = ""p"") const; voidAndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const; ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); ROOT::Math::GoFTestGoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); ROOT::Math::GoFTestGoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Double_tKolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const; Double_tKolmogorovSmirnovTest(const Char_t* option = ""p"") const; voidKolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const; Double_toperator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; voidoperator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; static Double_tPValueADKSamples(UInt_t nsamples, Double_t A2); voidSetDistribution(ROOT::Math::GoFTest::EDistribution dist); voidSetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserDistribution<const ROOT::Math::IBaseFunctionOneDim>(ROOT::Math::const IBaseFunctionOneDim& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); voidSetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0).",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:4115,Testability,test,tests,4115,"ctor<const Double_t*> samples, const vector<UInt_t> samplesSizes). Data Members; public:. static ROOT::Math::GoFTest::ETestTypekAD; static ROOT::Math::GoFTest::ETestTypekAD2s; static ROOT::Math::GoFTest::EUserDistributionkCDF; static ROOT::Math::GoFTest::EDistributionkExponential; static ROOT::Math::GoFTest::EDistributionkGaussian; static ROOT::Math::GoFTest::ETestTypekKS; static ROOT::Math::GoFTest::ETestTypekKS2s; static ROOT::Math::GoFTest::EDistributionkLogNormal; static ROOT::Math::GoFTest::EUserDistributionkPDF; static ROOT::Math::GoFTest::EDistributionkUndefined; static ROOT::Math::GoFTest::EDistributionkUserDefined. private:. auto_ptr<ROOT::Math::IGenFunction>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributio",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:4269,Testability,test,tests,4269,"atic ROOT::Math::GoFTest::EUserDistributionkCDF; static ROOT::Math::GoFTest::EDistributionkExponential; static ROOT::Math::GoFTest::EDistributionkGaussian; static ROOT::Math::GoFTest::ETestTypekKS; static ROOT::Math::GoFTest::ETestTypekKS2s; static ROOT::Math::GoFTest::EDistributionkLogNormal; static ROOT::Math::GoFTest::EUserDistributionkPDF; static ROOT::Math::GoFTest::EDistributionkUndefined; static ROOT::Math::GoFTest::EDistributionkUserDefined. private:. auto_ptr<ROOT::Math::IGenFunction>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax ",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:4541,Testability,test,tests,4541,"tTypekKS2s; static ROOT::Math::GoFTest::EDistributionkLogNormal; static ROOT::Math::GoFTest::EUserDistributionkPDF; static ROOT::Math::GoFTest::EDistributionkUndefined; static ROOT::Math::GoFTest::EDistributionkUserDefined. private:. auto_ptr<ROOT::Math::IGenFunction>fCDF; vector<Double_t>fCombinedSamples; ROOT::Math::GoFTest::EDistributionfDist; Double_tfMean; vector<vector<Double_t> >fSamples; Double_tfSigma; Bool_tfTestSampleFromH0. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GoFTest(UInt_t sample1Size, const Double_t* sample1, UInt_t sample2Size, const Double_t* sample2); Constructor for using only with 2-samples tests. GoFTest(UInt_t sampleSize, const Double_t* sample, ROOT::Math::GoFTest::EDistribution dist = kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulati",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:5299,Testability,test,tests,5299,"kUndefined); Constructor for using only with 1-sample tests with a specified distribution. GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:5482,Testability,test,tests,5482,"FTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Templated constructor for using only with 1-sample tests with a user specified distribution. Instantiate(const Double_t* sample, UInt_t sampleSize). GoFTest(UInt_t sampleSize, const Double_t* sample, const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and describe",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:5761,Testability,Test,Test,5761,"st = kPDF, Double_t xmin = 1, Double_t xmax = 0); Specialization using IGenFunction interface. SetUserDistribution(const ROOT::Math::IGenFunction& dist, ROOT::Math::GoFTest::EUserDistribution userDist = kPDF, Double_t xmin = 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTe",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:5980,Testability,Test,Tests,5980,"= 1, Double_t xmax = 0). SetDistributionFunction(const ROOT::Math::IGenFunction& cdf, Bool_t isPDF, Double_t xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/softw",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:6146,Testability,test,testStat,6146,"xmin, Double_t xmax). void SetUserPDF(const ROOT::Math::IGenFunction& pdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a probability density function for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:6258,Testability,Test,Test,6258,"unction for 1-sample tests. void SetUserCDF(const ROOT::Math::IGenFunction& cdf, Double_t xmin = 1, Double_t xmax = 0); Sets the user input distribution as a cumulative distribution function for 1-sample tests; The CDF must return zero. void SetDistribution(ROOT::Math::GoFTest::EDistribution dist); Sets the distribution for the predefined distribution types. virtual ~GoFTest(). Double_t AndersonDarling2SamplesTest(const Char_t* option = ""p"") const. The Anderson-Darling K-Sample Test algorithm is described and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") co",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:6804,Testability,test,testStat,6804,"ribed and taken from; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm; and described and taken from; (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Dou",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:6929,Testability,Test,Test,6929,"tephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented); */ void AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* op",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7199,Testability,test,testStat,7199,";. Double_t AndersonDarlingTest(const Char_t* option = ""p"") const. The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7315,Testability,Test,Test,7315,"ist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm; and described and taken from (2); Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02.; and described and taken from (3); Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarli",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7710,Testability,test,testStat,7710,"ls of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124.; */ void AndersonDarlingTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t Ga",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7775,Testability,test,test,7775,"ue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValue",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7809,Testability,test,testStat,7809,"ue, Double_t& testStat) const;. Double_t KolmogorovSmirnov2SamplesTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 2-Samples Test algorithm is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValue",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7906,Testability,test,test,7906,"tl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:7995,Testability,Test,Test,7995,"tl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8044,Testability,test,test,8044,"tl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8082,Testability,test,test,8082,"tl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm; and described and taken from; http://root.cern.ch/root/html/TMath.html#TMath:KolmogorovTest; */ void KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8195,Testability,Test,Test,8195,"t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in genera",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8250,Testability,test,test,8250,"t& pvalue, Double_t& testStat) const;. Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in genera",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8443,Testability,test,testStat,8443,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8492,Testability,test,test,8492,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8594,Testability,Log,LogNormalCDF,8594,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GoFTest.html:8871,Testability,Log,LogSample,8871,"Double_t KolmogorovSmirnovTest(const Char_t* option = ""p"") const. The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at; http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm; and described and taken from (4); Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge Univerdity Press; */ void KolmogorovSmirnovTest(Double_t& pvalue, Double_t& testStat) const;. void operator()(ROOT::Math::GoFTest::ETestType test, Double_t& pvalue, Double_t& testStat) const; The class's unary functions. Double_t operator()(ROOT::Math::GoFTest::ETestType test = kAD, const Char_t* option = ""p"") const; Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value; specific to the test type. Double_t PValueADKSamples(UInt_t nsamples, Double_t A2); Computation of the K-Sample Anderson-Darling Test's p-value as described in (1); given a normalized test statistic. The first variant described in the paper is used. void AndersonDarling2SamplesTest(const ROOT::Fit::BinData& data1, const ROOT::Fit::BinData& data2, Double_t& pvalue, Double_t& testStat); Compute The 2-Sample Anderson Darling test for binned data. GoFTest(). GoFTest operator=(ROOT::Math::GoFTest& gof). void SetCDF(). Double_t LogNormalCDF(Double_t x) const. Double_t GaussianCDF(Double_t x) const. Double_t ExponentialCDF(Double_t x) const. Double_t GetSigmaN(const vector<UInt_t>& ns, UInt_t N). Double_t InterpolatePValues(int nsamples, Double_t A2). Double_t PValueAD1Sample(Double_t A2) const. void LogSample(). void SetSamples(vector<const Double_t*> samples, const vector<UInt_t> samplesSizes). void SetParameters(). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GoFTest.html
https://root.cern/root/html604/ROOT__Math__GradFunctor.html:425,Availability,avail,available,425,". ROOT::Math::GradFunctor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GradFunctor. class ROOT::Math::GradFunctor: public ROOT::Math::IGradientFunctionMultiDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~GradFunctor(); virtual ROOT::Math::GradFunctor::ImplBase*Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidROOT::Math::IGradientFunctionMultiDim::FdF(const double* x, double& f, double* df) const; ROOT::Math::GradFunctorGradFunctor(); ROOT::Math::GradFunctorGradFunctor(const ROOT::Math::GradFunctor& rhs); virtual voidROOT::Math::IGradientFunctionMultiDim::Gradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::GradFunctor&operator=(const ROOT::Math::GradFunctor& rhs). private:. virtual doubleDoDerivative(const double",MatchSource.WIKI,root/html604/ROOT__Math__GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GradFunctor.html
https://root.cern/root/html604/ROOT__Math__GradFunctor.html:2199,Modifiability,Inherit,Inheritance,2199,"h::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::GradFunctor&operator=(const ROOT::Math::GradFunctor& rhs). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::GradFunctor::Impl>fImplpointer to base grad functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. double DoDerivative(double x). GradFunctor(). Default constructor. {}. GradFunctor( const Func & f, unsigned int dim ). construct from a callable object of multi-dimension; implementing operator()(const double *x) and; Derivative(const double * x,icoord). {}. virtual ~GradFunctor(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GradFunctor.html
https://root.cern/root/html604/ROOT__Math__GradFunctor.html:2212,Modifiability,Inherit,Inherited,2212,"h::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimROOT::Math::IGradientFunctionMultiDim::IGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intNDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::GradFunctor&operator=(const ROOT::Math::GradFunctor& rhs). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const. Data Members; private:. auto_ptr<ROOT::Math::GradFunctor::Impl>fImplpointer to base grad functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). unsigned int NDim() const; constructor for multi-dimensional functions. double DoEval(const double* x) const. double DoDerivative(double x). GradFunctor(). Default constructor. {}. GradFunctor( const Func & f, unsigned int dim ). construct from a callable object of multi-dimension; implementing operator()(const double *x) and; Derivative(const double * x,icoord). {}. virtual ~GradFunctor(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GradFunctor.html
https://root.cern/root/html604/ROOT__Math__GradFunctor1D.html:429,Availability,avail,available,429,". ROOT::Math::GradFunctor1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::GradFunctor1D. class ROOT::Math::GradFunctor1D: public ROOT::Math::IGradientFunctionOneDim. LM 7/2/2014: no needed this : make template ctor of Functor1D and GradFunctor1D not; available to CINT s. #if defined(__MAKECINT__) || defined(G__DICTIONARY); needed since CINT initialize it with TRootIOCtor; class TRootIOCtor;. Function Members (Methods); public:. virtual~GradFunctor1D(); virtual ROOT::Math::GradFunctor1D::ImplBase*Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidROOT::Math::IGradientFunctionOneDim::FdF(double x, double& f, double& df) const; ROOT::Math::GradFunctor1DGradFunctor1D(); ROOT::Math::GradFunctor1DGradFunctor1D(const ROOT::Math::GradFunctor1D& f); ROOT::Math::GradFunctor1DGradFunctor1D(const ROOT::Math::GradFunctor1D& rhs); voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimROOT::Math::IGradientFunctionOneDim::IGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimROOT::Math::IGradientFunctionOneDim::IGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::GradFunctor1D&opera",MatchSource.WIKI,root/html604/ROOT__Math__GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GradFunctor1D.html
https://root.cern/root/html604/ROOT__Math__GradFunctor1D.html:2263,Modifiability,Inherit,Inheritance,2263,"th::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimROOT::Math::IGradientFunctionOneDim::IGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimROOT::Math::IGradientFunctionOneDim::IGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::GradFunctor1D&operator=(const ROOT::Math::GradFunctor1D& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::GradFunctor1D::Impl>fImplpointer to base gradient functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. double DoDerivative(double x) const. GradFunctor1D(). Default constructor. {}. GradFunctor1D(const Func & f). construct from an object with the right signature; implementing both operator() (double x) and Derivative(double x). {}. GradFunctor1D(const PtrObj& p, MemFn memFn, GradMemFn gradFn). construct from a pointer to class and two pointers to member functions, one for; the function evaluation and the other for the derivative.; The member functions must take a double as argument and return a double. {}. virtual ~GradFunctor1D(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root/html604/ROOT__Math__GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GradFunctor1D.html
https://root.cern/root/html604/ROOT__Math__GradFunctor1D.html:2276,Modifiability,Inherit,Inherited,2276,"th::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimROOT::Math::IGradientFunctionOneDim::IGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimROOT::Math::IGradientFunctionOneDim::IGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::GradFunctor1D&operator=(const ROOT::Math::GradFunctor1D& rhs). private:. virtual doubleDoDerivative(double x) const; virtual doubleDoEval(double x) const. Data Members; private:. auto_ptr<ROOT::Math::GradFunctor1D::Impl>fImplpointer to base gradient functor handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunc * Clone() const; clone of the function handler (use copy-ctor). double DoEval(double x) const. double DoDerivative(double x) const. GradFunctor1D(). Default constructor. {}. GradFunctor1D(const Func & f). construct from an object with the right signature; implementing both operator() (double x) and Derivative(double x). {}. GradFunctor1D(const PtrObj& p, MemFn memFn, GradMemFn gradFn). construct from a pointer to class and two pointers to member functions, one for; the function evaluation and the other for the derivative.; The member functions must take a double as argument and return a double. {}. virtual ~GradFunctor1D(). Destructor (no operations). {}. » Author: L. Moneta Mon Nov 13 15:58:13 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root/html604/ROOT__Math__GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GradFunctor1D.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5402,Availability,Error,Error,5402,"egratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol d",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5440,Availability,Error,Error,5440,"egratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol d",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5890,Availability,Error,Error,5890,"ervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Int",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5928,Availability,Error,Error,5928,"ervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Int",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6447,Availability,Error,Error,6447,"Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6485,Availability,Error,Error,6485,"Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6989,Availability,Error,Error,6989,"r of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @p",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7027,Availability,Error,Error,7027,"r of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @p",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:12994,Availability,Error,Error,12994,"on function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validi",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13045,Availability,Error,Error,13045,"f the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13116,Availability,Error,Error,13116,"of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically gene",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13401,Availability,Error,Error,13401,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13476,Availability,Error,Error,13476,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:375,Deployability,integrat,integration,375,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:442,Deployability,integrat,integration,442,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:542,Deployability,integrat,integration,542,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:625,Deployability,integrat,integration,625,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:667,Deployability,integrat,integration,667,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:746,Deployability,integrat,integration,746,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:785,Deployability,Integrat,Integration,785,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:872,Deployability,integrat,integration,872,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:990,Deployability,integrat,integration,990,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1043,Deployability,integrat,integration,1043,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1091,Deployability,Integrat,Integration,1091,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1158,Deployability,integrat,integration,1158,"ATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1565,Deployability,integrat,integration,1565,"ortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1665,Deployability,Integrat,Integration,1665,"d. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1708,Deployability,Integrat,Integration,1708,"e ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math:",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1824,Deployability,Integrat,IntegrationOneDim,1824,"type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); d",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:2091,Deployability,Integrat,Integration,2091,"n also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, do",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:2271,Deployability,Integrat,Integration,2271,"ransformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b);",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:2313,Deployability,Integrat,Integration,2313,"ransformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b);",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:3610,Deployability,Integrat,IntegratorOneDimOptionsOptions,3610,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:3885,Deployability,Integrat,Integration,3885,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:3948,Deployability,Integrat,IntegratorOneDimOptions,3948,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:4076,Deployability,Integrat,IntegrationOneDim,4076,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:4945,Deployability,Integrat,Integration,4945,"T::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5008,Deployability,Integrat,Integration,5008,"T::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5325,Deployability,Integrat,Integrator,5325,"or(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5358,Deployability,integrat,integration,5358,"or(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5524,Deployability,Integrat,Integration,5524,"tegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-int",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5666,Deployability,Integrat,Integrator,5666,"::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5702,Deployability,integrat,integration,5702,":GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5777,Deployability,integrat,integration,5777,"&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (nee",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5828,Deployability,Integrat,Integration,5828,"ervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Int",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6000,Deployability,Integrat,Integration,6000,"Type; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6030,Deployability,Integrat,Integration,6030,"Type; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6150,Deployability,Integrat,Integrator,6150,"ries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(con",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6182,Deployability,integrat,integration,6182,"egrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disa",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6233,Deployability,Integrat,Integration,6233,"99999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLInteg",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6326,Deployability,Integrat,Integration,6326,"f GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template met",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6383,Deployability,Integrat,Integration,6383,"Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6642,Deployability,Integrat,Integrator,6642,"relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set fu",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6678,Deployability,integrat,integration,6678,"ule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunct",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6830,Deployability,integrat,integration,6830,"he Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integratio",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6881,Deployability,Integrat,Integration,6881,"r of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @p",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7375,Deployability,integrat,integration,7375,"ined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f ove",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7406,Deployability,integrat,integration,7406,"ion; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a sing",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7816,Deployability,integrat,integration,7816,"stead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7936,Deployability,integrat,integration,7936,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7986,Deployability,integrat,integration,7986,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:8136,Deployability,integrat,integration,8136,"); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:8741,Deployability,integrat,integration,8741," f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration fun",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9078,Deployability,integrat,integration,9078,"& f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using ca",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9198,Deployability,integrat,integration,9198,"he function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLInte",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9383,Deployability,integrat,integration,9383,"usly defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinit",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9503,Deployability,integrat,integration,9503,"b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(doubl",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9669,Deployability,integrat,integration,9669," principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @p",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9927,Deployability,integrat,integration,9927,"uble IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Inte",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10215,Deployability,integrat,integration,10215,"aram a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both t",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10265,Deployability,integrat,integration,10265,"aram a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both t",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10652,Deployability,integrat,integration,10652,"egral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10895,Deployability,integrat,integration,10895," first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is t",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11303,Deployability,integrat,integration,11303,"). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11713,Deployability,integrat,integration,11713,"aluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double I",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11988,Deployability,integrat,integration,11988,"GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:12090,Deployability,integrat,integration,12090,"GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:12140,Deployability,integrat,integration,12140,"GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13519,Deployability,Integrat,Integration,13519,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13550,Deployability,integrat,integration,13550,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13628,Deployability,Integrat,Integration,13628,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13666,Deployability,integrat,integration,13666,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13722,Deployability,integrat,integrations,13722,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13770,Deployability,Integrat,IntegratorOneDimOptions,13770,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13818,Deployability,Integrat,IntegrationOneDim,13818,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:599,Energy Efficiency,adapt,adaptive,599,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:616,Energy Efficiency,adapt,adaptive,616,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:863,Energy Efficiency,adapt,adaptive,863,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:903,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,903,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1024,Energy Efficiency,ADAPT,ADAPTIVE,1024,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1235,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,1235,"ATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1321,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,1321,"lass for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1491,Energy Efficiency,ADAPT,ADAPTIVE,1491," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5340,Energy Efficiency,Adapt,Adaptive,5340,"or(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5693,Energy Efficiency,Adapt,Adaptive,5693,":GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6316,Energy Efficiency,ADAPT,ADAPTIVE,6316,"f GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template met",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6669,Energy Efficiency,Adapt,Adaptive,6669,"ule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunct",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11899,Energy Efficiency,efficient,efficient,11899,"ouble Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11927,Energy Efficiency,adapt,adapter,11927,"ouble Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13708,Energy Efficiency,ADAPT,ADAPTIVE,13708,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:375,Integrability,integrat,integration,375,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:442,Integrability,integrat,integration,442,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:542,Integrability,integrat,integration,542,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:625,Integrability,integrat,integration,625,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:667,Integrability,integrat,integration,667,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:746,Integrability,integrat,integration,746,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:785,Integrability,Integrat,Integration,785,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:872,Integrability,integrat,integration,872,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:990,Integrability,integrat,integration,990,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1043,Integrability,integrat,integration,1043,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1091,Integrability,Integrat,Integration,1091,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1158,Integrability,integrat,integration,1158,"ATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1565,Integrability,integrat,integration,1565,"ortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1665,Integrability,Integrat,Integration,1665,"d. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1708,Integrability,Integrat,Integration,1708,"e ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math:",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1824,Integrability,Integrat,IntegrationOneDim,1824,"type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); d",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:2091,Integrability,Integrat,Integration,2091,"n also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, do",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:2271,Integrability,Integrat,Integration,2271,"ransformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b);",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:2313,Integrability,Integrat,Integration,2313,"ransformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); virtual doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b);",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:3610,Integrability,Integrat,IntegratorOneDimOptionsOptions,3610,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:3885,Integrability,Integrat,Integration,3885,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:3948,Integrability,Integrat,IntegratorOneDimOptions,3948,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:4076,Integrability,Integrat,IntegrationOneDim,4076,"ral(const ROOT::Math::IGenFunction& f); virtual doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); virtual doubleIntegral(double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts); doubleIntegral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c); virtual doubleIntegralLow(double b); doubleIntegralLow(const ROOT::Math::IGenFunction& f, double b); doubleIntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b); virtual doubleIntegralUp(double a); doubleIntegralUp(const ROOT::Math::IGenFunction& f, double a); doubleIntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a); virtual intNEval() const; virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IGenFunction& f); voidSetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:4945,Integrability,Integrat,Integration,4945,"T::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5008,Integrability,Integrat,Integration,5008,"T::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5325,Integrability,Integrat,Integrator,5325,"or(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5358,Integrability,integrat,integration,5358,"or(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5524,Integrability,Integrat,Integration,5524,"tegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-int",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5666,Integrability,Integrat,Integrator,5666,"::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5702,Integrability,integrat,integration,5702,":GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5777,Integrability,integrat,integration,5777,"&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (nee",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5828,Integrability,Integrat,Integration,5828,"ervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Int",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6000,Integrability,Integrat,Integration,6000,"Type; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6030,Integrability,Integrat,Integration,6030,"Type; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6150,Integrability,Integrat,Integrator,6150,"ries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(con",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6182,Integrability,integrat,integration,6182,"egrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disa",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6233,Integrability,Integrat,Integration,6233,"99999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLInteg",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6326,Integrability,Integrat,Integration,6326,"f GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template met",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6383,Integrability,Integrat,Integration,6383,"Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6642,Integrability,Integrat,Integrator,6642,"relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set fu",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6678,Integrability,integrat,integration,6678,"ule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunct",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6830,Integrability,integrat,integration,6830,"he Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integratio",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6881,Integrability,Integrat,Integration,6881,"r of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @p",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7375,Integrability,integrat,integration,7375,"ined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f ove",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7406,Integrability,integrat,integration,7406,"ion; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a sing",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7816,Integrability,integrat,integration,7816,"stead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7897,Integrability,interface,interface,7897,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7936,Integrability,integrat,integration,7936,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:7986,Integrability,integrat,integration,7986,"e Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:8136,Integrability,integrat,integration,8136,"); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:8217,Integrability,interface,interface,8217," GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value o",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:8741,Integrability,integrat,integration,8741," f, double a, double b); methods using IGenFunction. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration fun",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:8822,Integrability,interface,interface,8822,"unction type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const IGenFunction & f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9078,Integrability,integrat,integration,9078,"& f). evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using ca",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9159,Integrability,interface,interface,9159,"he function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLInte",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9198,Integrability,integrat,integration,9198,"he function type must implement the mathlib::IGenFunction interface. double IntegralCauchy(double a, double b, double c). evaluate the Cauchy principal value of the integral of a previously defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLInte",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9383,Integrability,integrat,integration,9383,"usly defined function f over; the defined interval (a,b) with a singularity at c; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinit",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9464,Integrability,interface,interface,9464,"b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(doubl",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9503,Integrability,integrat,integration,9503,"b lower interval value; @param c singular value of f. double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(doubl",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9669,Integrability,integrat,integration,9669," principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @p",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9750,Integrability,interface,interface,9750,"pe must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f. double IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite inte",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:9927,Integrability,integrat,integration,9927,"uble IntegralUp(const ROOT::Math::IGenFunction& f, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Inte",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10215,Integrability,integrat,integration,10215,"aram a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both t",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10265,Integrability,integrat,integration,10265,"aram a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both t",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10652,Integrability,integrat,integration,10652,"egral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10895,Integrability,integrat,integration,10895," first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is t",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11303,Integrability,integrat,integration,11303,"). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11713,Integrability,integrat,integration,11713,"aluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double I",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11927,Integrability,adapter,adapter,11927,"ouble Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11988,Integrability,integrat,integration,11988,"GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:12090,Integrability,integrat,integration,12090,"GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:12140,Integrability,integrat,integration,12140,"GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13519,Integrability,Integrat,Integration,13519,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13550,Integrability,integrat,integration,13550,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13628,Integrability,Integrat,Integration,13628,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13666,Integrability,integrat,integration,13666,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13722,Integrability,integrat,integrations,13722,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13770,Integrability,Integrat,IntegratorOneDimOptions,13770,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13818,Integrability,Integrat,IntegrationOneDim,13818,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:599,Modifiability,adapt,adaptive,599,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:616,Modifiability,adapt,adaptive,616,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:863,Modifiability,adapt,adaptive,863,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:903,Modifiability,ADAPT,ADAPTIVESINGULAR,903,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1024,Modifiability,ADAPT,ADAPTIVE,1024,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1235,Modifiability,ADAPT,ADAPTIVESINGULAR,1235,"ATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1321,Modifiability,ADAPT,ADAPTIVESINGULAR,1321,"lass for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1491,Modifiability,ADAPT,ADAPTIVE,1491," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5094,Modifiability,Inherit,Inheritance,5094,"ntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000)",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5107,Modifiability,Inherit,Inherited,5107,"ntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000)",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5340,Modifiability,Adapt,Adaptive,5340,"or(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:5693,Modifiability,Adapt,Adaptive,5693,":GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::Integration::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6316,Modifiability,ADAPT,ADAPTIVE,6316,"f GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template met",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6669,Modifiability,Adapt,Adaptive,6669,"ule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunct",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:6753,Modifiability,plug-in,plug-in,6753,"ule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLFuncPointer f, void* p = 0). Set function from a GSL pointer function type. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); methods using IGenFunct",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:11927,Modifiability,adapt,adapter,11927,"ouble Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(ROOT::Math::GSLFuncPointer f, void* p, double a, double b); evaluate using free function pointer (same GSL signature). signature for function pointers used by GSL. typedef double ( * GSLFuncPointer ) ( double, void * );. evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(ROOT::Math::GSLFuncPointer f, void* p). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:13708,Modifiability,ADAPT,ADAPTIVE,13708,"on f over the infinite interval (-inf,+inf) passing a free function pointer. double IntegralUp(ROOT::Math::GSLFuncPointer f, void* p, double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer. double IntegralLow(ROOT::Math::GSLFuncPointer f, void* p, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer. double Integral(ROOT::Math::GSLFuncPointer f, void* p, const vector<double>& pts). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer. double Result() const. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetIntegrationRule(ROOT::Math::Integration::GKRule ). set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. IntegrationOneDim::Type GetType() const; get type name. { return fType; }. const char * GetTypeName() const. return the name. bool CheckFunction(); internal method to check validity of GSL function pointer. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:354,Performance,perform,performing,354,". ROOT::Math::GSLIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.999999999",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:1380,Performance,perform,performances,1380," algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSL",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html:10042,Performance,cache,cached,10042,"n f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. double IntegralLow(const ROOT::Math::IGenFunction& f, double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval. double Integral(double a, double b). evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. double Integral(double a, double b); evaluate using cached function. evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(). evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. double IntegralUp(double a). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval. double IntegralLow(double b). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval. double Integral( const std::vector<double> & pts). evaluate the Integral over the defined interval (a,b) us",MatchSource.WIKI,root/html604/ROOT__Math__GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4098,Availability,Error,Error,4098,". ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigme",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4136,Availability,Error,Error,4136,". ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigme",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4590,Availability,Error,Error,4590,"bers; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4628,Availability,Error,Error,4628,"bers; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6090,Availability,Error,Error,6090,"r, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6141,Availability,Error,Error,6141,"d SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importan",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6212,Availability,Error,Error,6212,"d* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6529,Availability,Error,Error,6529," type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6604,Availability,Error,Error,6604,"lue of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParamete",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:7615,Availability,error,error,7615,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:383,Deployability,integrat,integration,383,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:450,Deployability,integrat,integration,450,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:550,Deployability,integrat,integration,550,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:616,Deployability,integrat,integration,616,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:657,Deployability,integrat,integration,657,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:1716,Deployability,Integrat,IntegratorMultiDimOptionsOptions,1716," virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:2143,Deployability,Integrat,IntegratorMultiDimOptions,2143,"MCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0); voidSetGenerator(ROOT::Math::GSLRngWrapper* r); voidSetMode(ROOT::Math::MCIntegration::Mode mode); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetParameters(const ROOT::Math::VegasParameters& p); voidSetParameters(const ROOT::Math::MiserParameters& p); virtual voidSetRelTolerance(double relTolerance); voidSetType(ROOT::Math::MCIntegration::Type type); voidSetTypeName(const char* typeName); doubleSigma(); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:2492,Deployability,Integrat,IntegrationMultiDim,2492,"MCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0); voidSetGenerator(ROOT::Math::GSLRngWrapper* r); voidSetMode(ROOT::Math::MCIntegration::Mode mode); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetParameters(const ROOT::Math::VegasParameters& p); voidSetParameters(const ROOT::Math::MiserParameters& p); virtual voidSetRelTolerance(double relTolerance); voidSetType(ROOT::Math::MCIntegration::Type type); voidSetTypeName(const char* typeName); doubleSigma(); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:3927,Deployability,integrat,integration,3927,":VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); tem",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:3965,Deployability,integrat,integration,3965,"gratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. met",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4291,Deployability,Integrat,IntegratorMultiDimOptions,4291," private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integr",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4463,Deployability,integrat,integration,4463,":Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4501,Deployability,integrat,integration,4501,"bers; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4986,Deployability,integrat,integration,4986,"possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integr",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5017,Deployability,integrat,integration,5017,"gration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5485,Deployability,integrat,integration,5485," default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for cont",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5605,Deployability,integrat,integration,5605,"rror; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desi",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5655,Deployability,integrat,integration,5655,"rror; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desi",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5976,Deployability,integrat,integration,5976,"the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetM",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6645,Deployability,Integrat,IntegratorMultiDimOptions,6645,"alue of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last ite",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6686,Deployability,integrat,integration,6686,"l(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6841,Deployability,integrat,integration,6841,"onst GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (ne",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6905,Deployability,integrat,integration,6905,"uble* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:7020,Deployability,integrat,integration,7020,lation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer,MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:8223,Deployability,integrat,integration,8223,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:383,Integrability,integrat,integration,383,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:450,Integrability,integrat,integration,450,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:550,Integrability,integrat,integration,550,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:616,Integrability,integrat,integration,616,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:657,Integrability,integrat,integration,657,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:813,Integrability,interface,interface,813,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:1716,Integrability,Integrat,IntegratorMultiDimOptionsOptions,1716," virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:2143,Integrability,Integrat,IntegratorMultiDimOptions,2143,"MCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0); voidSetGenerator(ROOT::Math::GSLRngWrapper* r); voidSetMode(ROOT::Math::MCIntegration::Mode mode); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetParameters(const ROOT::Math::VegasParameters& p); voidSetParameters(const ROOT::Math::MiserParameters& p); virtual voidSetRelTolerance(double relTolerance); voidSetType(ROOT::Math::MCIntegration::Type type); voidSetTypeName(const char* typeName); doubleSigma(); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:2492,Integrability,Integrat,IntegrationMultiDim,2492,"MCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0); voidSetGenerator(ROOT::Math::GSLRngWrapper* r); voidSetMode(ROOT::Math::MCIntegration::Mode mode); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetParameters(const ROOT::Math::VegasParameters& p); voidSetParameters(const ROOT::Math::MiserParameters& p); virtual voidSetRelTolerance(double relTolerance); voidSetType(ROOT::Math::MCIntegration::Type type); voidSetTypeName(const char* typeName); doubleSigma(); virtual intStatus() const; virtual ROOT::Math::IntegrationMultiDim::TypeROOT::Math::VirtualIntegratorMultiDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&).",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:3927,Integrability,integrat,integration,3927,":VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); tem",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:3965,Integrability,integrat,integration,3965,"gratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. met",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4291,Integrability,Integrat,IntegratorMultiDimOptions,4291," private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integr",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4463,Integrability,integrat,integration,4463,":Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4501,Integrability,integrat,integration,4501,"bers; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4986,Integrability,integrat,integration,4986,"possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integr",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5017,Integrability,integrat,integration,5017,"gration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5485,Integrability,integrat,integration,5485," default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for cont",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5566,Integrability,interface,interface,5566,"rror; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desi",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5605,Integrability,integrat,integration,5605,"rror; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desi",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5655,Integrability,integrat,integration,5655,"rror; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desi",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:5976,Integrability,integrat,integration,5976,"the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetM",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6645,Integrability,Integrat,IntegratorMultiDimOptions,6645,"alue of the integration interval. double Integral(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last ite",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6686,Integrability,integrat,integration,6686,"l(const double* a, const double* b). evaluate the integral using the previously defined function. double Result() const; to be added later; double Integral(const GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6841,Integrability,integrat,integration,6841,"onst GSLMonteFuncPointer & f);; double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (ne",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:6905,Integrability,integrat,integration,6905,"uble* a, double* b);. return the type of the integration used. MCIntegration::Type MCType() const;. return the Result of the last Integral calculation. double Error() const. return the estimate of the absolute Error of the last Integral calculation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:7020,Integrability,integrat,integration,7020,lation. int Status() const. return the Error Status of the last Integral calculation. int NEval() const. return number of function evaluations in calculating the integral; (This is an fixed by the user). { return fCalls; }. void SetRelTolerance(double relTolerance); setter for control Parameters (getters are not needed so far ). set the desired relative Error. void SetAbsTolerance(double absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer,MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:8223,Integrability,integrat,integration,8223,"ble absTolerance). set the desired absolute Error. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt). set the integration options. void SetGenerator(ROOT::Math::GSLRngWrapper* r). set random number generator. void SetType(ROOT::Math::MCIntegration::Type type). set integration method. void SetTypeName(const char* typeName). set integration method using a name instead of an enumeration. void SetMode(ROOT::Math::MCIntegration::Mode mode). set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance smapling. void SetParameters(const VegasParameters &p). set default parameters for VEGAS method. void SetParameters(const MiserParameters &p). set default parameters for MISER method. double Sigma(). set parameters for PLAIN method. void SetPParameters(const PlainParameters &p);. returns the error sigma from the last iteration of the Vegas algorithm. double ChiSqr(). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm. MCIntegration::Type GetType() const. return the type; (need to be called GetType to avois a conflict with typedef). { return fType; }. const char * GetTypeName() const. return the name. ROOT::Math::IOptions * ExtraOptions() const. get the specific options (for Vegas or Miser); in term of string- name. bool CheckFunction(); internal method to check validity of GSL function pointer. void DoInitialize(); set internally the type of integration method. » Author: Magdalena Slawinska 08/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:897,Modifiability,plugin,plugin,897,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:913,Modifiability,plugin,plugin,913,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:3554,Modifiability,Inherit,Inheritance,3554,"h::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:3567,Modifiability,Inherit,Inherited,3567,"h::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(); ROOT::Math::VirtualIntegratorMultiDimROOT::Math::VirtualIntegratorMultiDim::VirtualIntegratorMultiDim(const ROOT::Math::VirtualIntegratorMultiDim&). protected:. boolCheckFunction(); voidDoInitialize(). private:. ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const ROOT::Math::GSLMCIntegrator&); ROOT::Math::GSLMCIntegrator&operator=(const ROOT::Math::GSLMCIntegrator&). Data Members; private:. doublefAbsTol; unsigned intfCalls; unsigned intfDim; doublefError; ROOT::Math::GSLMonteFunctionWrapper*fFunction; doublefRelTol; doublefResult; ROOT::Math::GSLRngWrapper*fRng; intfStatus; ROOT::Math::MCIntegration::TypefType; ROOT::Math::GSLMCIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:4541,Modifiability,plug-in,plug-in,4541,"bers; Includes; Libraries. Function documentation; GSLMCIntegrator(MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0 ); constructors; /**; constructor of GSL MCIntegrator using all the default options; *; GSLMCIntegrator( );; constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from teh static method of ROOT::Math::IntegratorMultiDimOptions. GSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls. virtual ~GSLMCIntegrator(). destructor. GSLMCIntegrator(const ROOT::Math::GSLMCIntegrator& ); disable copy ctrs. GSLMCIntegrator & operator=(const ROOT::Math::GSLMCIntegrator& ). void SetFunction(const ROOT::Math::IMultiGenFunction& f); template methods for generic functors. method to set the a generic integration function. @param f integration function. The function type must implement the assigment operator, <em> double operator() ( double x ) </em>. void SetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0). double Integral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); methods using GSLMonteFuncPointer. evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @par",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html:362,Performance,perform,performing,362,". ROOT::Math::GSLMCIntegrator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMCIntegrator. class ROOT::Math::GSLMCIntegrator: public ROOT::Math::VirtualIntegratorMultiDim. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""). @ingroup MCIntegration. Function Members (Methods); public:. virtual~GSLMCIntegrator(); doubleChiSqr(); virtual doubleError() const; ROOT::Math::IOptions*ExtraOptions() const; ROOT::Math::MCIntegration::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLMCIntegratorGSLMCIntegrator(ROOT::Math::MCIntegration::Type type = MCIntegration::kVEGAS, double absTol = 0, double relTol = 0, unsigned int calls = 0); ROOT::Math::GSLMCIntegratorGSLMCIntegrator(const char* type, double absTol, double relTol, unsigned int calls); virtual doubleIntegral(const double* a, const double* b); doubleIntegral(const ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer& f, unsigned int dim, double* a, double* b, void* p = 0); virtual intNEval() const; virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTolerance); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetFunction(ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer f, unsigned int dim, void* p = 0)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMCIntegrator.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:1572,Availability,Error,ErrorDef,1572," virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:1611,Availability,Error,Errors,1611," virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:5962,Availability,Toler,Tolerance,5962,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:7077,Availability,error,errors,7077,"nction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLMinimizerGSLMinimizer(const ROOT::Math::GSLMinimizer&); ROOT::Math::GSLMinimizer&operator=(const ROOT::Math::GSLMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from t",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:7228,Availability,Toler,Tolerance,7228,"er::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLMinimizerGSLMinimizer(const ROOT::Math::GSLMinimizer&); ROOT::Math::GSLMinimizer&operator=(const ROOT::Math::GSLMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool Pr",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8236,Availability,error,error,8236,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8246,Availability,error,error,8246,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8294,Availability,Error,Errors,8294,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8317,Availability,error,errors,8317,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8524,Availability,error,errors,8524,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:3600,Deployability,Release,ReleaseVariable,3600,"er::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); virtual doubleROOT::Math::BasicMinimizer::MinValue() const; virtual unsigned intNCalls() const; virtual unsigned intROOT::Math::BasicMinimizer::NDim() const; virtual unsigned intROOT::Math::BasicMinimizer::NFree() const; virtual unsigned intROOT::Math::Minimizer::NIterations() const; virtual unsigned intROOT::Math::BasicMinimizer::NPar() const; const ROOT::Math::IMultiGenFunction*ROOT::Math::BasicMinimizer::ObjFunction() const; virtual ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::Options() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; voidROOT::Math::BasicMinimizer::PrintResult() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual boolProvidesError() const; virtual boolROOT::Math::BasicMinimizer::ReleaseVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0); voidROOT::Math::Minimizer::SetDefaultOptions(); voidROOT::Math::Minimizer::SetErrorDef(double up); virtual boolROOT::Math::BasicMinimizer::SetFixedVariable(unsigned int, const string&, double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGradFunction& func); virtual boolROOT::Math::BasicMinimizer::SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double, double); virtual boolROOT::Math::BasicMinimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidR",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:397,Integrability,interface,interface,397,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::BasicMinimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:674,Integrability,interface,interface,674,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::BasicMinimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:724,Modifiability,plugin,plugin,724,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::BasicMinimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:740,Modifiability,plugin,plugin,740,". ROOT::Math::GSLMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer. class ROOT::Math::GSLMinimizer: public ROOT::Math::BasicMinimizer. GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The varius minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:6116,Modifiability,Variab,VariableIndex,6116,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:6199,Modifiability,Variab,VariableName,6199,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:7253,Modifiability,Inherit,Inheritance,7253,"nimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLMinimizerGSLMinimizer(const ROOT::Math::GSLMinimizer&); ROOT::Math::GSLMinimizer&operator=(const ROOT::Math::GSLMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:7266,Modifiability,Inherit,Inherited,7266,"nimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLMinimizerGSLMinimizer(const ROOT::Math::GSLMinimizer&); ROOT::Math::GSLMinimizer&operator=(const ROOT::Math::GSLMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8438,Modifiability,variab,variable,8438,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:8496,Modifiability,variab,variables,8496,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:7930,Performance,perform,perform,7930,"; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. bool ProvidesError() const; minimizer provides error and error matrix. { return false; }. const double * Errors() const; return errors at the minimum. double CovMatrix(unsigned int , unsigned int ) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. { return 0; }. » Author: L. Moneta Wed Oct 18 11:48:00 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:7094,Security,validat,validated,7094,"nction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLMinimizerGSLMinimizer(const ROOT::Math::GSLMinimizer&); ROOT::Math::GSLMinimizer&operator=(const ROOT::Math::GSLMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLMultiMinimizer*fGSLMultiMin; doublefLSToleranceLine Search Tolerance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMinimizer(ROOT::Math::EGSLMinimizerType type = ROOT::Math::kConjugateFR). Default constructor. GSLMinimizer(const char* type). Constructor with a string giving name of algorithm. virtual ~GSLMinimizer(). Destructor. GSLMinimizer(const ROOT::Math::GSLMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set the function to minimize. { BasicMinimizer::SetFunction(func);}. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from t",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html:1172,Usability,Clear,Clear,1172," virtual~GSLMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::Ge",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:2995,Availability,error,error,2995,"h::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:3700,Availability,toler,tolerance,3700,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:3873,Availability,error,error,3873,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:3936,Availability,error,error,3936,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:2492,Energy Efficiency,allocate,allocated,2492,"ion(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:2217,Modifiability,Inherit,Inheritance,2217,"OOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the m",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:2230,Modifiability,Inherit,Inherited,2230,"OOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the m",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:2920,Performance,Perform,Perform,2920,"h::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:4187,Testability,Test,TestInterval,4187,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:4256,Testability,Test,Test,4256,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:4295,Testability,test,test,4295,"et, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html:739,Usability,simpl,simplest,739,". ROOT::Math::GSLMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMinimizer1D. class ROOT::Math::GSLMinimizer1D: public ROOT::Math::IMinimizer1D. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, whic is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D. Function Members (Methods); public:. virtual~GSLMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::GSLMinimizer1DGSLMinimizer1D(ROOT::Math::Minim1D::Type type = Minim1D::kBRENT); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(); ROOT::Math::IMinimizer1DROOT::Math::IMinimizer1D::IMinimizer1D(const ROOT::Math::IMinimizer1D&); intIterate(); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunctio",MatchSource.WIKI,root/html604/ROOT__Math__GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:713,Availability,avail,available,713,". ROOT::Math::GSLMultiRootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMultiRootFinder. class ROOT::Math::GSLMultiRootFinder. Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <it>""HybridSJ""</it>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <it>""HybridJ""</it>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <it>""Newton""</it>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <it>""GNewton""</it>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:1118,Availability,avail,available,1118,"s description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMultiRootFinder. class ROOT::Math::GSLMultiRootFinder. Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <it>""HybridSJ""</it>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <it>""HybridJ""</it>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <it>""Newton""</it>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <it>""GNewton""</it>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridS</tt> with name <it>""HybridS""</it>: same as HybridSJ but using; finate differ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:6568,Availability,toler,tolerance,6568,"onst ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn) which is part of the system of; specifying the begin and end of the iterator.; If using a derivative type algorithm the function must implement the; ROOT::Math::IMultiGradFunction interface; Return the current number of function in the list and 0 if failed to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFuncti",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7235,Availability,toler,tolerance,7235,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7279,Availability,toler,tolerance,7279,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7215,Deployability,configurat,configurations,7215,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:943,Integrability,interface,interface,943,". ROOT::Math::GSLMultiRootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMultiRootFinder. class ROOT::Math::GSLMultiRootFinder. Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <it>""HybridSJ""</it>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <it>""HybridJ""</it>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <it>""Newton""</it>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <it>""GNewton""</it>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:1102,Integrability,interface,interface,1102,". ROOT::Math::GSLMultiRootFinder. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLMultiRootFinder. class ROOT::Math::GSLMultiRootFinder. Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <it>""HybridSJ""</it>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <it>""HybridJ""</it>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <it>""Newton""</it>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <it>""GNewton""</it>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:5851,Integrability,interface,interface,5851,"tFinder(EDerivType type); create a multi-root finder based on an algorithm requiring function derivative. GSLMultiRootFinder(const char* name = 0). create a multi-root finder using a string.; The names are those defined in the GSL manuals; after having remived the GSL prefix (gsl_multiroot_fsolver).; Default algorithm is ""hybrids"" (without derivative). virtual ~GSLMultiRootFinder(); destructor. GSLMultiRootFinder(const GSLMultiRootFinder &); usually copying is non trivial, so we make this unaccessible. void SetType(EType type); set the type for an algorithm without derivatives. void SetType(EDerivType type); set the type of algorithm using derivatives. void SetType(const char* name); set the type using a string. int AddFunction(const ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn) which is part of the system of; specifying the begin and end of the iterator.; If using a derivative type algorithm the function must implement the; ROOT::Math::IMultiGradFunction interface; Return the current number of function in the list and 0 if failed to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Ret",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:6940,Integrability,message,messages,6940,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:4644,Modifiability,Inherit,Inheritance,4644,"ame). private:. ROOT::Math::GSLMultiRootFinderGSLMultiRootFinder(const ROOT::Math::GSLMultiRootFinder&); ROOT::Math::GSLMultiRootFinder&operator=(const ROOT::Math::GSLMultiRootFinder&). Data Members; public:. static ROOT::Math::GSLMultiRootFinder::ETypekBroyden; static ROOT::Math::GSLMultiRootFinder::ETypekDNewton; static ROOT::Math::GSLMultiRootFinder::EDerivTypekGNewton; static ROOT::Math::GSLMultiRootFinder::ETypekHybrid; static ROOT::Math::GSLMultiRootFinder::EDerivTypekHybridJ; static ROOT::Math::GSLMultiRootFinder::ETypekHybridS; static ROOT::Math::GSLMultiRootFinder::EDerivTypekHybridSJ; static ROOT::Math::GSLMultiRootFinder::EDerivTypekNewton. private:. vector<ROOT::Math::IMultiGenFunction*>fFunctions! transient Vector of the functions; intfItercurrent numer of iterations; intfPrintLevelprint level; ROOT::Math::GSLMultiRootBaseSolver*fSolver; intfStatuscurrent status; intfTypetype of algorithm; boolfUseDerivAlgoalgorithm using derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMultiRootFinder(EType type); create a multi-root finder based on an algorithm not requiring function derivative. GSLMultiRootFinder(EDerivType type); create a multi-root finder based on an algorithm requiring function derivative. GSLMultiRootFinder(const char* name = 0). create a multi-root finder using a string.; The names are those defined in the GSL manuals; after having remived the GSL prefix (gsl_multiroot_fsolver).; Default algorithm is ""hybrids"" (without derivative). virtual ~GSLMultiRootFinder(); destructor. GSLMultiRootFinder(const GSLMultiRootFinder &); usually copying is non trivial, so we make this unaccessible. void SetType(EType type); set the type for an algorithm without derivatives. void SetType(EDerivType type); set the type of algorithm using derivatives. void SetType(const char* name); set the type using a string. int AddFunction(const ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:4657,Modifiability,Inherit,Inherited,4657,"ame). private:. ROOT::Math::GSLMultiRootFinderGSLMultiRootFinder(const ROOT::Math::GSLMultiRootFinder&); ROOT::Math::GSLMultiRootFinder&operator=(const ROOT::Math::GSLMultiRootFinder&). Data Members; public:. static ROOT::Math::GSLMultiRootFinder::ETypekBroyden; static ROOT::Math::GSLMultiRootFinder::ETypekDNewton; static ROOT::Math::GSLMultiRootFinder::EDerivTypekGNewton; static ROOT::Math::GSLMultiRootFinder::ETypekHybrid; static ROOT::Math::GSLMultiRootFinder::EDerivTypekHybridJ; static ROOT::Math::GSLMultiRootFinder::ETypekHybridS; static ROOT::Math::GSLMultiRootFinder::EDerivTypekHybridSJ; static ROOT::Math::GSLMultiRootFinder::EDerivTypekNewton. private:. vector<ROOT::Math::IMultiGenFunction*>fFunctions! transient Vector of the functions; intfItercurrent numer of iterations; intfPrintLevelprint level; ROOT::Math::GSLMultiRootBaseSolver*fSolver; intfStatuscurrent status; intfTypetype of algorithm; boolfUseDerivAlgoalgorithm using derivative. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLMultiRootFinder(EType type); create a multi-root finder based on an algorithm not requiring function derivative. GSLMultiRootFinder(EDerivType type); create a multi-root finder based on an algorithm requiring function derivative. GSLMultiRootFinder(const char* name = 0). create a multi-root finder using a string.; The names are those defined in the GSL manuals; after having remived the GSL prefix (gsl_multiroot_fsolver).; Default algorithm is ""hybrids"" (without derivative). virtual ~GSLMultiRootFinder(); destructor. GSLMultiRootFinder(const GSLMultiRootFinder &); usually copying is non trivial, so we make this unaccessible. void SetType(EType type); set the type for an algorithm without derivatives. void SetType(EDerivType type); set the type of algorithm using derivatives. void SetType(const char* name); set the type using a string. int AddFunction(const ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn)",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7215,Modifiability,config,configurations,7215,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:6121,Usability,Clear,Clear,6121,"root_fsolver).; Default algorithm is ""hybrids"" (without derivative). virtual ~GSLMultiRootFinder(); destructor. GSLMultiRootFinder(const GSLMultiRootFinder &); usually copying is non trivial, so we make this unaccessible. void SetType(EType type); set the type for an algorithm without derivatives. void SetType(EDerivType type); set the type of algorithm using derivatives. void SetType(const char* name); set the type using a string. int AddFunction(const ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn) which is part of the system of; specifying the begin and end of the iterator.; If using a derivative type algorithm the function must implement the; ROOT::Math::IMultiGradFunction interface; Return the current number of function in the list and 0 if failed to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:6130,Usability,clear,clear,6130,"root_fsolver).; Default algorithm is ""hybrids"" (without derivative). virtual ~GSLMultiRootFinder(); destructor. GSLMultiRootFinder(const GSLMultiRootFinder &); usually copying is non trivial, so we make this unaccessible. void SetType(EType type); set the type for an algorithm without derivatives. void SetType(EDerivType type); set the type of algorithm using derivatives. void SetType(const char* name); set the type using a string. int AddFunction(const ROOT::Math::IMultiGenFunction& func). add (set) a single function fi(x1,...xn) which is part of the system of; specifying the begin and end of the iterator.; If using a derivative type algorithm the function must implement the; ROOT::Math::IMultiGradFunction interface; Return the current number of function in the list and 0 if failed to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7576,Usability,Clear,ClearFunctions,7576,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html:7594,Usability,clear,clear,7594,"d to add the function. unsigned int Dim() const. return the number of sunctions set in the class.; The number must be equal to the dimension of the functions. { return fFunctions.size(); }. void Clear(); clear list of functions. const double * X() const; return the root X values solving the system. const double * FVal() const; return the function values f(X) solving the system; i.e. they must be close to zero at the solution. const double * Dx() const; return the last step size. bool Solve(const double* x, int maxIter = 0, double absTol = 0, double relTol = 0). Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault... int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const; Return the algorithm name. void SetPrintLevel(int level). set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration. { fPrintLevel = level; }. int PrintLevel() const; return the print level. { return fPrintLevel; }. void SetDefaultTolerance(double abstol, double reltol = 0); -- static methods to set configurations; set tolerance (absolute and relative); relative tolerance is only use to verify the convergence; do it is a minor parameter. void SetDefaultMaxIterations(int maxiter); set maximum number of iterations. void PrintState(ostream& os = std::cout); print iteration state. std::pair<bool,int> GetType(const char* name); return type given a name. void ClearFunctions(); clear list of functions. » Author: L. Moneta 03/2011 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLMultiRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:1389,Availability,Error,ErrorDef,1389," virtual~GSLNLSMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradF",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:1428,Availability,Error,Errors,1428," virtual~GSLNLSMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradF",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:5680,Availability,Toler,Tolerance,5680,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:6810,Availability,error,errors,6810,"th::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLNLSMinimizerGSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer&); ROOT::Math::GSLNLSMinimizer&operator=(const ROOT::Math::GSLNLSMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. const ROOT::Math::FitMethodFunction*fChi2Funcpointer to Least square function; vector<double>fCovMatrixcov matrix (stored as cov[ i * dim + j]; doublefEdmedm value; vector<double>fErrors; ROOT::Math::GSLMultiFit*fGSLMultiFitpointer to GSL multi fit solver; doublefLSToleranceLine Search Tolerance; unsigned intfNFreedimension of the internal function to be minimized; vector<ROOT::Math::LSResidualFunc>fResiduals! transient Vector of the residual functions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccess",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:7174,Availability,Toler,Tolerance,7174,"; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLNLSMinimizerGSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer&); ROOT::Math::GSLNLSMinimizer&operator=(const ROOT::Math::GSLNLSMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. const ROOT::Math::FitMethodFunction*fChi2Funcpointer to Least square function; vector<double>fCovMatrixcov matrix (stored as cov[ i * dim + j]; doublefEdmedm value; vector<double>fErrors; ROOT::Math::GSLMultiFit*fGSLMultiFitpointer to GSL multi fit solver; doublefLSToleranceLine Search Tolerance; unsigned intfNFreedimension of the internal function to be minimized; vector<ROOT::Math::LSResidualFunc>fResiduals! transient Vector of the residual functions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointe",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8514,Availability,error,error,8514,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8524,Availability,error,error,8524,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8571,Availability,Error,Errors,8571,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8594,Availability,error,errors,8594,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8938,Availability,error,errors,8938,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:3318,Deployability,Release,ReleaseVariable,3318,"er::MaxFunctionCalls() const; unsigned intROOT::Math::Minimizer::MaxIterations() const; virtual const double*MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); virtual doubleROOT::Math::BasicMinimizer::MinValue() const; virtual unsigned intNCalls() const; virtual unsigned intROOT::Math::BasicMinimizer::NDim() const; virtual unsigned intROOT::Math::BasicMinimizer::NFree() const; virtual unsigned intROOT::Math::Minimizer::NIterations() const; virtual unsigned intROOT::Math::BasicMinimizer::NPar() const; const ROOT::Math::IMultiGenFunction*ROOT::Math::BasicMinimizer::ObjFunction() const; virtual ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::Options() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; voidROOT::Math::BasicMinimizer::PrintResult() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual boolProvidesError() const; virtual boolROOT::Math::BasicMinimizer::ReleaseVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0); voidROOT::Math::Minimizer::SetDefaultOptions(); voidROOT::Math::Minimizer::SetErrorDef(double up); virtual boolROOT::Math::BasicMinimizer::SetFixedVariable(unsigned int, const string&, double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& func); virtual voidSetFunction(const ROOT::Math::IMultiGradFunction& func); virtual boolROOT::Math::BasicMinimizer::SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double, double); virtual boolROOT::Math::BasicMinimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidR",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:642,Integrability,wrap,wraps,642,". ROOT::Math::GSLNLSMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLNLSMinimizer. class ROOT::Math::GSLNLSMinimizer: public ROOT::Math::BasicMinimizer. LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivates which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLNLSMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradF",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:684,Integrability,interface,interface,684,". ROOT::Math::GSLNLSMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLNLSMinimizer. class ROOT::Math::GSLNLSMinimizer: public ROOT::Math::BasicMinimizer. LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivates which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLNLSMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradF",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:5834,Modifiability,Variab,VariableIndex,5834,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:5917,Modifiability,Variab,VariableName,5917,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:7410,Modifiability,Inherit,Inheritance,7410," ROOT::Math::GSLNLSMinimizerGSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer&); ROOT::Math::GSLNLSMinimizer&operator=(const ROOT::Math::GSLNLSMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. const ROOT::Math::FitMethodFunction*fChi2Funcpointer to Least square function; vector<double>fCovMatrixcov matrix (stored as cov[ i * dim + j]; doublefEdmedm value; vector<double>fErrors; ROOT::Math::GSLMultiFit*fGSLMultiFitpointer to GSL multi fit solver; doublefLSToleranceLine Search Tolerance; unsigned intfNFreedimension of the internal function to be minimized; vector<ROOT::Math::LSResidualFunc>fResiduals! transient Vector of the residual functions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the tot",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:7423,Modifiability,Inherit,Inherited,7423," ROOT::Math::GSLNLSMinimizerGSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer&); ROOT::Math::GSLNLSMinimizer&operator=(const ROOT::Math::GSLNLSMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. const ROOT::Math::FitMethodFunction*fChi2Funcpointer to Least square function; vector<double>fCovMatrixcov matrix (stored as cov[ i * dim + j]; doublefEdmedm value; vector<double>fErrors; ROOT::Math::GSLMultiFit*fGSLMultiFitpointer to GSL multi fit solver; doublefLSToleranceLine Search Tolerance; unsigned intfNFreedimension of the internal function to be minimized; vector<ROOT::Math::LSResidualFunc>fResiduals! transient Vector of the residual functions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the tot",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8348,Modifiability,variab,variables,8348,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8852,Modifiability,variab,variable,8852,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:8910,Modifiability,variab,variables,8910,"unctions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:7995,Performance,perform,perform,7995," matrix (stored as cov[ i * dim + j]; doublefEdmedm value; vector<double>fErrors; ROOT::Math::GSLMultiFit*fGSLMultiFitpointer to GSL multi fit solver; doublefLSToleranceLine Search Tolerance; unsigned intfNFreedimension of the internal function to be minimized; vector<ROOT::Math::LSResidualFunc>fResiduals! transient Vector of the residual functions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set gradient the function to minimize. bool Minimize(); method to perform the minimization. double Edm() const; return expected distance reached from the minimum. const double * MinGradient() const; return pointer to gradient values at the minimum. unsigned int NCalls() const; number of function calls to reach the minimum. { return (fChi2Func) ? fChi2Func->NCalls() : 0; }. bool ProvidesError() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total; virtual unsigned int NFree() const { return fNFree; }; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.size() > 0) ? &fErrors.front() : 0; }. double CovMatrix(unsigned int , unsigned int ) const; {; static std::vector<double> err;; err.resize(fDim);; return &err.front();; }; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance m",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:400,Security,access,accessing,400,". ROOT::Math::GSLNLSMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLNLSMinimizer. class ROOT::Math::GSLNLSMinimizer: public ROOT::Math::BasicMinimizer. LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivates which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLNLSMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradF",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:6827,Security,validat,validated,6827,"th::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLNLSMinimizerGSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer&); ROOT::Math::GSLNLSMinimizer&operator=(const ROOT::Math::GSLNLSMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. const ROOT::Math::FitMethodFunction*fChi2Funcpointer to Least square function; vector<double>fCovMatrixcov matrix (stored as cov[ i * dim + j]; doublefEdmedm value; vector<double>fErrors; ROOT::Math::GSLMultiFit*fGSLMultiFitpointer to GSL multi fit solver; doublefLSToleranceLine Search Tolerance; unsigned intfNFreedimension of the internal function to be minimized; vector<ROOT::Math::LSResidualFunc>fResiduals! transient Vector of the residual functions; unsigned intfSizenumber of fit points (residuals). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; operator=(const ROOT::Math::GSLNLSMinimizer& rhs). GSLNLSMinimizer(int type = 0). Default constructor. ~GSLNLSMinimizer(). Destructor (no operations). GSLNLSMinimizer(const ROOT::Math::GSLNLSMinimizer& ); usually copying is non trivial, so we make this unaccess",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html:1012,Usability,Clear,Clear,1012," virtual~GSLNLSMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleCovMatrix(unsigned int, unsigned int) const; virtual intCovMatrixStatus() const; virtual doubleEdm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradF",MatchSource.WIKI,root/html604/ROOT__Math__GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLNLSMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLQRngNiederreiter2.html:2079,Modifiability,Inherit,Inheritance,2079,"iter2(); boolROOT::Math::GSLQuasiRandomEngine::GenerateArray(double* begin, double* end) const; ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(); ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(ROOT::Math::GSLQRngNiederreiter2&&); ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(const ROOT::Math::GSLQRngNiederreiter2&); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(ROOT::Math::GSLQRngWrapper* rng); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(const ROOT::Math::GSLQuasiRandomEngine& eng); voidROOT::Math::GSLQuasiRandomEngine::Initialize(unsigned int dimension); stringROOT::Math::GSLQuasiRandomEngine::Name() const; unsigned intROOT::Math::GSLQuasiRandomEngine::NDim() const; doubleROOT::Math::GSLQuasiRandomEngine::operator()() const; boolROOT::Math::GSLQuasiRandomEngine::operator()(double* x) const; ROOT::Math::GSLQRngNiederreiter2&operator=(const ROOT::Math::GSLQRngNiederreiter2&); ROOT::Math::GSLQRngNiederreiter2&operator=(ROOT::Math::GSLQRngNiederreiter2&&); unsigned intROOT::Math::GSLQuasiRandomEngine::Size() const; boolROOT::Math::GSLQuasiRandomEngine::Skip(unsigned int n) const; voidROOT::Math::GSLQuasiRandomEngine::Terminate(). protected:. voidROOT::Math::GSLQuasiRandomEngine::SetType(ROOT::Math::GSLQRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLQuasiRandomEngine & operator=(const GSLQuasiRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLQRngNiederreiter2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLQRngNiederreiter2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLQRngNiederreiter2.html
https://root.cern/root/html604/ROOT__Math__GSLQRngNiederreiter2.html:2092,Modifiability,Inherit,Inherited,2092,"iter2(); boolROOT::Math::GSLQuasiRandomEngine::GenerateArray(double* begin, double* end) const; ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(); ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(ROOT::Math::GSLQRngNiederreiter2&&); ROOT::Math::GSLQRngNiederreiter2GSLQRngNiederreiter2(const ROOT::Math::GSLQRngNiederreiter2&); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(ROOT::Math::GSLQRngWrapper* rng); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(const ROOT::Math::GSLQuasiRandomEngine& eng); voidROOT::Math::GSLQuasiRandomEngine::Initialize(unsigned int dimension); stringROOT::Math::GSLQuasiRandomEngine::Name() const; unsigned intROOT::Math::GSLQuasiRandomEngine::NDim() const; doubleROOT::Math::GSLQuasiRandomEngine::operator()() const; boolROOT::Math::GSLQuasiRandomEngine::operator()(double* x) const; ROOT::Math::GSLQRngNiederreiter2&operator=(const ROOT::Math::GSLQRngNiederreiter2&); ROOT::Math::GSLQRngNiederreiter2&operator=(ROOT::Math::GSLQRngNiederreiter2&&); unsigned intROOT::Math::GSLQuasiRandomEngine::Size() const; boolROOT::Math::GSLQuasiRandomEngine::Skip(unsigned int n) const; voidROOT::Math::GSLQuasiRandomEngine::Terminate(). protected:. voidROOT::Math::GSLQuasiRandomEngine::SetType(ROOT::Math::GSLQRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLQuasiRandomEngine & operator=(const GSLQuasiRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLQRngNiederreiter2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLQRngNiederreiter2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLQRngNiederreiter2.html
https://root.cern/root/html604/ROOT__Math__GSLQRngSobol.html:1951,Modifiability,Inherit,Inheritance,1951,"the class ROOT::Math::QuasiRandom. @ingroup Random. Function Members (Methods); public:. virtual~GSLQRngSobol(); boolROOT::Math::GSLQuasiRandomEngine::GenerateArray(double* begin, double* end) const; ROOT::Math::GSLQRngSobolGSLQRngSobol(); ROOT::Math::GSLQRngSobolGSLQRngSobol(ROOT::Math::GSLQRngSobol&&); ROOT::Math::GSLQRngSobolGSLQRngSobol(const ROOT::Math::GSLQRngSobol&); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(ROOT::Math::GSLQRngWrapper* rng); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(const ROOT::Math::GSLQuasiRandomEngine& eng); voidROOT::Math::GSLQuasiRandomEngine::Initialize(unsigned int dimension); stringROOT::Math::GSLQuasiRandomEngine::Name() const; unsigned intROOT::Math::GSLQuasiRandomEngine::NDim() const; doubleROOT::Math::GSLQuasiRandomEngine::operator()() const; boolROOT::Math::GSLQuasiRandomEngine::operator()(double* x) const; ROOT::Math::GSLQRngSobol&operator=(const ROOT::Math::GSLQRngSobol&); ROOT::Math::GSLQRngSobol&operator=(ROOT::Math::GSLQRngSobol&&); unsigned intROOT::Math::GSLQuasiRandomEngine::Size() const; boolROOT::Math::GSLQuasiRandomEngine::Skip(unsigned int n) const; voidROOT::Math::GSLQuasiRandomEngine::Terminate(). protected:. voidROOT::Math::GSLQuasiRandomEngine::SetType(ROOT::Math::GSLQRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLQuasiRandomEngine & operator=(const GSLQuasiRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLQRngSobol(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLQRngSobol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLQRngSobol.html
https://root.cern/root/html604/ROOT__Math__GSLQRngSobol.html:1964,Modifiability,Inherit,Inherited,1964,"the class ROOT::Math::QuasiRandom. @ingroup Random. Function Members (Methods); public:. virtual~GSLQRngSobol(); boolROOT::Math::GSLQuasiRandomEngine::GenerateArray(double* begin, double* end) const; ROOT::Math::GSLQRngSobolGSLQRngSobol(); ROOT::Math::GSLQRngSobolGSLQRngSobol(ROOT::Math::GSLQRngSobol&&); ROOT::Math::GSLQRngSobolGSLQRngSobol(const ROOT::Math::GSLQRngSobol&); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(ROOT::Math::GSLQRngWrapper* rng); ROOT::Math::GSLQuasiRandomEngineROOT::Math::GSLQuasiRandomEngine::GSLQuasiRandomEngine(const ROOT::Math::GSLQuasiRandomEngine& eng); voidROOT::Math::GSLQuasiRandomEngine::Initialize(unsigned int dimension); stringROOT::Math::GSLQuasiRandomEngine::Name() const; unsigned intROOT::Math::GSLQuasiRandomEngine::NDim() const; doubleROOT::Math::GSLQuasiRandomEngine::operator()() const; boolROOT::Math::GSLQuasiRandomEngine::operator()(double* x) const; ROOT::Math::GSLQRngSobol&operator=(const ROOT::Math::GSLQRngSobol&); ROOT::Math::GSLQRngSobol&operator=(ROOT::Math::GSLQRngSobol&&); unsigned intROOT::Math::GSLQuasiRandomEngine::Size() const; boolROOT::Math::GSLQuasiRandomEngine::Skip(unsigned int n) const; voidROOT::Math::GSLQuasiRandomEngine::Terminate(). protected:. voidROOT::Math::GSLQuasiRandomEngine::SetType(ROOT::Math::GSLQRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLQuasiRandomEngine & operator=(const GSLQuasiRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLQRngSobol(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLQRngSobol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLQRngSobol.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:595,Availability,avail,available,595,". ROOT::Math::GSLRandomEngine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRandomEngine. class ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRandomEngine(); unsigned intBinomial(double p, unsigned int n) const; doubleCauchy(double a) const; doubleChiSquare(double nu) const; voidDir2D(double& x, double& y) const; voidDir3D(double& x, double& y, double& z) const; doubleExponential(double mu) const; doubleFDist(double nu1, double nu2) const; doubleGamma(double a, double b) const; doubleGaussian(double sigma) const; voidGaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleGaussianRatio(double sigma) const; doubleGaussianTail(double a, double sigma) const; doubleGaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineGSLRandomEngine(); ROOT::Math::GSLRandomEngineGSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineGSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); voidInitialize(); doubleLandau() const; doubleLogNormal(double zeta, double sigma) const; vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p) const; stringName() const; unsigned intNegativeBinomial(double",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:3691,Availability,avail,available,3691,"tion; GSLRandomEngine(). default constructor. No creation of rng is done.; If then Initialize() is called an engine is created; based on default GSL type (MT). GSLRandomEngine( GSLRngWrapper * rng). create from an existing rng.; User manage the rng pointer which is then deleted olny by calling Terminate(). GSLRandomEngine(const GSLRandomEngine & eng). Copy constructor : clone the contained GSL generator. GSLRandomEngine & operator=(const ROOT::Math::GSLRandomEngine& eng). Assignment operator : make a deep copy of the contained GSL generator. void Initialize(). initialize the generator; If no rng is present the default one based on Mersenne and Twister is created. void Terminate(). delete pointer to contained rng. virtual ~GSLRandomEngine(). call Terminate(). double operator()() const. Generate a random number between ]0,1]; 0 is excluded and 1 is included. unsigned int RndmInt(unsigned int max) const. Generate an integer number between [0,max-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned. void RandomArray(double* begin, double* end) const. Generate an array of random numbers.; The iterators points to the random numbers. std::string Name() const. return name of generator. unsigned int Size() const. return the state size of generator. void SetSeed(unsigned int seed) const. set the random generator seed. double Gaussian(double sigma) const; @name Random Distributions; Implemented using the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL Random number Distributions</A>. @{. Gaussian distribution - default method is Box-Muller (polar method). double GaussianZig(double sigma) const. Gaussian distribution - Ziggurat method. double GaussianRatio(double sigma) const. Gaussian distribution - Ratio method. double GaussianTail(double a, double sigma) const. Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, doub",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:3724,Availability,error,error,3724,"tion; GSLRandomEngine(). default constructor. No creation of rng is done.; If then Initialize() is called an engine is created; based on default GSL type (MT). GSLRandomEngine( GSLRngWrapper * rng). create from an existing rng.; User manage the rng pointer which is then deleted olny by calling Terminate(). GSLRandomEngine(const GSLRandomEngine & eng). Copy constructor : clone the contained GSL generator. GSLRandomEngine & operator=(const ROOT::Math::GSLRandomEngine& eng). Assignment operator : make a deep copy of the contained GSL generator. void Initialize(). initialize the generator; If no rng is present the default one based on Mersenne and Twister is created. void Terminate(). delete pointer to contained rng. virtual ~GSLRandomEngine(). call Terminate(). double operator()() const. Generate a random number between ]0,1]; 0 is excluded and 1 is included. unsigned int RndmInt(unsigned int max) const. Generate an integer number between [0,max-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned. void RandomArray(double* begin, double* end) const. Generate an array of random numbers.; The iterators points to the random numbers. std::string Name() const. return name of generator. unsigned int Size() const. return the state size of generator. void SetSeed(unsigned int seed) const. set the random generator seed. double Gaussian(double sigma) const; @name Random Distributions; Implemented using the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL Random number Distributions</A>. @{. Gaussian distribution - default method is Box-Muller (polar method). double GaussianZig(double sigma) const. Gaussian distribution - Ziggurat method. double GaussianRatio(double sigma) const. Gaussian distribution - Ratio method. double GaussianTail(double a, double sigma) const. Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, doub",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:2567,Integrability,wrap,wrapper,2567,"st; doubleGaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineGSLRandomEngine(); ROOT::Math::GSLRandomEngineGSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineGSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); voidInitialize(); doubleLandau() const; doubleLogNormal(double zeta, double sigma) const; vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p) const; stringName() const; unsigned intNegativeBinomial(double p, double n) const; doubleoperator()() const; ROOT::Math::GSLRandomEngine&operator=(const ROOT::Math::GSLRandomEngine& eng); unsigned intPoisson(double mu) const; voidRandomArray(double* begin, double* end) const; unsigned intRndmInt(unsigned int max) const; voidSetSeed(unsigned int seed) const; unsigned intSize() const; doubletDist(double nu) const; voidTerminate(). protected:. voidSetType(ROOT::Math::GSLRngWrapper* r). Data Members; private:. unsigned intfCurTimecurrent time used to seed the generator; ROOT::Math::GSLRngWrapper*fRngpointer to GSL generator wrapper (managed by the class). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine(). default constructor. No creation of rng is done.; If then Initialize() is called an engine is created; based on default GSL type (MT). GSLRandomEngine( GSLRngWrapper * rng). create from an existing rng.; User manage the rng pointer which is then deleted olny by calling Terminate(). GSLRandomEngine(const GSLRandomEngine & eng). Copy constructor : clone the contained GSL generator. GSLRandomEngine & operator=(const ROOT::Math::GSLRandomEngine& eng). Assignment operator : make a deep copy of the contained GSL generator. void Initialize(). initialize the generator; If no rng is present the default one based on Mersenne and Twister is created. void Terminate(). delete pointer to contained rng. virtual ~GSLRandomEngine(). call Terminate(). double operator()() const. Generate a random number between ]0,1]; 0 is",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:3730,Integrability,message,message,3730,"tion; GSLRandomEngine(). default constructor. No creation of rng is done.; If then Initialize() is called an engine is created; based on default GSL type (MT). GSLRandomEngine( GSLRngWrapper * rng). create from an existing rng.; User manage the rng pointer which is then deleted olny by calling Terminate(). GSLRandomEngine(const GSLRandomEngine & eng). Copy constructor : clone the contained GSL generator. GSLRandomEngine & operator=(const ROOT::Math::GSLRandomEngine& eng). Assignment operator : make a deep copy of the contained GSL generator. void Initialize(). initialize the generator; If no rng is present the default one based on Mersenne and Twister is created. void Terminate(). delete pointer to contained rng. virtual ~GSLRandomEngine(). call Terminate(). double operator()() const. Generate a random number between ]0,1]; 0 is excluded and 1 is included. unsigned int RndmInt(unsigned int max) const. Generate an integer number between [0,max-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned. void RandomArray(double* begin, double* end) const. Generate an array of random numbers.; The iterators points to the random numbers. std::string Name() const. return name of generator. unsigned int Size() const. return the state size of generator. void SetSeed(unsigned int seed) const. set the random generator seed. double Gaussian(double sigma) const; @name Random Distributions; Implemented using the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL Random number Distributions</A>. @{. Gaussian distribution - default method is Box-Muller (polar method). double GaussianZig(double sigma) const. Gaussian distribution - Ziggurat method. double GaussianRatio(double sigma) const. Gaussian distribution - Ratio method. double GaussianTail(double a, double sigma) const. Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, doub",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:2613,Modifiability,Inherit,Inheritance,2613,"neGSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineGSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); voidInitialize(); doubleLandau() const; doubleLogNormal(double zeta, double sigma) const; vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p) const; stringName() const; unsigned intNegativeBinomial(double p, double n) const; doubleoperator()() const; ROOT::Math::GSLRandomEngine&operator=(const ROOT::Math::GSLRandomEngine& eng); unsigned intPoisson(double mu) const; voidRandomArray(double* begin, double* end) const; unsigned intRndmInt(unsigned int max) const; voidSetSeed(unsigned int seed) const; unsigned intSize() const; doubletDist(double nu) const; voidTerminate(). protected:. voidSetType(ROOT::Math::GSLRngWrapper* r). Data Members; private:. unsigned intfCurTimecurrent time used to seed the generator; ROOT::Math::GSLRngWrapper*fRngpointer to GSL generator wrapper (managed by the class). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine(). default constructor. No creation of rng is done.; If then Initialize() is called an engine is created; based on default GSL type (MT). GSLRandomEngine( GSLRngWrapper * rng). create from an existing rng.; User manage the rng pointer which is then deleted olny by calling Terminate(). GSLRandomEngine(const GSLRandomEngine & eng). Copy constructor : clone the contained GSL generator. GSLRandomEngine & operator=(const ROOT::Math::GSLRandomEngine& eng). Assignment operator : make a deep copy of the contained GSL generator. void Initialize(). initialize the generator; If no rng is present the default one based on Mersenne and Twister is created. void Terminate(). delete pointer to contained rng. virtual ~GSLRandomEngine(). call Terminate(). double operator()() const. Generate a random number between ]0,1]; 0 is excluded and 1 is included. unsigned int RndmInt(unsigned int max) const. Generate an integer number between [0,ma",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:2626,Modifiability,Inherit,Inherited,2626,"neGSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineGSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); voidInitialize(); doubleLandau() const; doubleLogNormal(double zeta, double sigma) const; vector<unsigned int>Multinomial(unsigned int ntot, const vector<double>& p) const; stringName() const; unsigned intNegativeBinomial(double p, double n) const; doubleoperator()() const; ROOT::Math::GSLRandomEngine&operator=(const ROOT::Math::GSLRandomEngine& eng); unsigned intPoisson(double mu) const; voidRandomArray(double* begin, double* end) const; unsigned intRndmInt(unsigned int max) const; voidSetSeed(unsigned int seed) const; unsigned intSize() const; doubletDist(double nu) const; voidTerminate(). protected:. voidSetType(ROOT::Math::GSLRngWrapper* r). Data Members; private:. unsigned intfCurTimecurrent time used to seed the generator; ROOT::Math::GSLRngWrapper*fRngpointer to GSL generator wrapper (managed by the class). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine(). default constructor. No creation of rng is done.; If then Initialize() is called an engine is created; based on default GSL type (MT). GSLRandomEngine( GSLRngWrapper * rng). create from an existing rng.; User manage the rng pointer which is then deleted olny by calling Terminate(). GSLRandomEngine(const GSLRandomEngine & eng). Copy constructor : clone the contained GSL generator. GSLRandomEngine & operator=(const ROOT::Math::GSLRandomEngine& eng). Assignment operator : make a deep copy of the contained GSL generator. void Initialize(). initialize the generator; If no rng is present the default one based on Mersenne and Twister is created. void Terminate(). delete pointer to contained rng. virtual ~GSLRandomEngine(). call Terminate(). double operator()() const. Generate a random number between ]0,1]; 0 is excluded and 1 is included. unsigned int RndmInt(unsigned int max) const. Generate an integer number between [0,ma",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:4985,Testability,Log,LogNormal,4985,"ize of generator. void SetSeed(unsigned int seed) const. set the random generator seed. double Gaussian(double sigma) const; @name Random Distributions; Implemented using the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL Random number Distributions</A>. @{. Gaussian distribution - default method is Box-Muller (polar method). double GaussianZig(double sigma) const. Gaussian distribution - Ziggurat method. double GaussianRatio(double sigma) const. Gaussian distribution - Ratio method. double GaussianTail(double a, double sigma) const. Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const. Bivariate Gaussian distribution with correlation. double Exponential(double mu) const. Exponential distribution. double Cauchy(double a) const. Cauchy distribution. double Landau() const. Landau distribution. double Gamma(double a, double b) const. Gamma distribution. double LogNormal(double zeta, double sigma) const. Log Normal distribution. double ChiSquare(double nu) const. Chi square distribution. double FDist(double nu1, double nu2) const. F distrbution. double tDist(double nu) const. t student distribution. void Dir2D(double& x, double& y) const. generate random numbers in a 2D circle of radious 1. void Dir3D(double& x, double& y, double& z) const. generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu) const. Poisson distribution. unsigned int Binomial(double p, unsigned int n) const. Binomial distribution. unsigned int NegativeBinomial(double p, double n) const. Negative Binomial distribution. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p) const. Multinomial distribution. void SetType(ROOT::Math::GSLRngWrapper* r); @}; internal method used by the derived class to set the type of generators. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/m",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html:5029,Testability,Log,Log,5029,"d int seed) const. set the random generator seed. double Gaussian(double sigma) const; @name Random Distributions; Implemented using the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL Random number Distributions</A>. @{. Gaussian distribution - default method is Box-Muller (polar method). double GaussianZig(double sigma) const. Gaussian distribution - Ziggurat method. double GaussianRatio(double sigma) const. Gaussian distribution - Ratio method. double GaussianTail(double a, double sigma) const. Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const. Bivariate Gaussian distribution with correlation. double Exponential(double mu) const. Exponential distribution. double Cauchy(double a) const. Cauchy distribution. double Landau() const. Landau distribution. double Gamma(double a, double b) const. Gamma distribution. double LogNormal(double zeta, double sigma) const. Log Normal distribution. double ChiSquare(double nu) const. Chi square distribution. double FDist(double nu1, double nu2) const. F distrbution. double tDist(double nu) const. t student distribution. void Dir2D(double& x, double& y) const. generate random numbers in a 2D circle of radious 1. void Dir3D(double& x, double& y, double& z) const. generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu) const. Poisson distribution. unsigned int Binomial(double p, unsigned int n) const. Binomial distribution. unsigned int NegativeBinomial(double p, double n) const. Negative Binomial distribution. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p) const. Multinomial distribution. void SetType(ROOT::Math::GSLRngWrapper* r); @}; internal method used by the derived class to set the type of generators. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09",MatchSource.WIKI,root/html604/ROOT__Math__GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRandomEngine.html
https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html:619,Availability,avail,available,619,". ROOT::Math::GSLRngGFSR4. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngGFSR4. class ROOT::Math::GSLRngGFSR4: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngGFSR4(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html
https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html:3579,Modifiability,Inherit,Inheritance,3579,"ath::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(ROOT::Math::GSLRngGFSR4&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngGFSR4&operator=(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4&operator=(ROOT::Math::GSLRngGFSR4&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngGFSR4(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html
https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html:3592,Modifiability,Inherit,Inherited,3592,"ath::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(ROOT::Math::GSLRngGFSR4&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngGFSR4&operator=(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4&operator=(ROOT::Math::GSLRngGFSR4&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngGFSR4(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html
https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html:2559,Testability,Log,LogNormal,2559," double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(ROOT::Math::GSLRngGFSR4&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngGFSR4&operator=(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4&operator=(ROOT::Math::GSLRngGFSR4&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngGFSR4.html
https://root.cern/root/html604/ROOT__Math__GSLRngMT.html:610,Availability,avail,available,610,". ROOT::Math::GSLRngMT. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngMT. class ROOT::Math::GSLRngMT: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngMT(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomE",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngMT.html
https://root.cern/root/html604/ROOT__Math__GSLRngMT.html:3531,Modifiability,Inherit,Inheritance,3531,"SLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngMTGSLRngMT(); ROOT::Math::GSLRngMTGSLRngMT(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMTGSLRngMT(ROOT::Math::GSLRngMT&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngMT&operator=(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMT&operator=(ROOT::Math::GSLRngMT&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngMT(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngMT.html
https://root.cern/root/html604/ROOT__Math__GSLRngMT.html:3544,Modifiability,Inherit,Inherited,3544,"SLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngMTGSLRngMT(); ROOT::Math::GSLRngMTGSLRngMT(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMTGSLRngMT(ROOT::Math::GSLRngMT&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngMT&operator=(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMT&operator=(ROOT::Math::GSLRngMT&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngMT(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngMT.html
https://root.cern/root/html604/ROOT__Math__GSLRngMT.html:2523,Testability,Log,LogNormal,2523,"::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngMTGSLRngMT(); ROOT::Math::GSLRngMTGSLRngMT(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMTGSLRngMT(ROOT::Math::GSLRngMT&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngMT&operator=(const ROOT::Math::GSLRngMT&); ROOT::Math::GSLRngMT&operator=(ROOT::Math::GSLRngMT&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngMT.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html:622,Availability,avail,available,622,". ROOT::Math::GSLRngRanLux. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngRanLux. class ROOT::Math::GSLRngRanLux: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngRanLux(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html:3595,Modifiability,Inherit,Inheritance,3595,"apper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxGSLRngRanLux(); ROOT::Math::GSLRngRanLuxGSLRngRanLux(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLuxGSLRngRanLux(ROOT::Math::GSLRngRanLux&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLux&operator=(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLux&operator=(ROOT::Math::GSLRngRanLux&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLux(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html:3608,Modifiability,Inherit,Inherited,3608,"apper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxGSLRngRanLux(); ROOT::Math::GSLRngRanLuxGSLRngRanLux(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLuxGSLRngRanLux(ROOT::Math::GSLRngRanLux&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLux&operator=(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLux&operator=(ROOT::Math::GSLRngRanLux&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLux(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html:2571,Testability,Log,LogNormal,2571," const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxGSLRngRanLux(); ROOT::Math::GSLRngRanLuxGSLRngRanLux(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLuxGSLRngRanLux(ROOT::Math::GSLRngRanLux&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLux&operator=(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLux&operator=(ROOT::Math::GSLRngRanLux&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLux.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html:628,Availability,avail,available,628,". ROOT::Math::GSLRngRanLuxD1. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngRanLuxD1. class ROOT::Math::GSLRngRanLuxD1: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngRanLuxD1(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngi",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html:3627,Modifiability,Inherit,Inheritance,3627,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(ROOT::Math::GSLRngRanLuxD1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD1&operator=(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1&operator=(ROOT::Math::GSLRngRanLuxD1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxD1(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html:3640,Modifiability,Inherit,Inherited,3640,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(ROOT::Math::GSLRngRanLuxD1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD1&operator=(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1&operator=(ROOT::Math::GSLRngRanLuxD1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxD1(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html:2595,Testability,Log,LogNormal,2595,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1GSLRngRanLuxD1(ROOT::Math::GSLRngRanLuxD1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD1&operator=(const ROOT::Math::GSLRngRanLuxD1&); ROOT::Math::GSLRngRanLuxD1&operator=(ROOT::Math::GSLRngRanLuxD1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html:628,Availability,avail,available,628,". ROOT::Math::GSLRngRanLuxD2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngRanLuxD2. class ROOT::Math::GSLRngRanLuxD2: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngRanLuxD2(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngi",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html:3627,Modifiability,Inherit,Inheritance,3627,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(ROOT::Math::GSLRngRanLuxD2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD2&operator=(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2&operator=(ROOT::Math::GSLRngRanLuxD2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxD2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html:3640,Modifiability,Inherit,Inherited,3640,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(ROOT::Math::GSLRngRanLuxD2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD2&operator=(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2&operator=(ROOT::Math::GSLRngRanLuxD2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxD2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html:2595,Testability,Log,LogNormal,2595,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2GSLRngRanLuxD2(ROOT::Math::GSLRngRanLuxD2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxD2&operator=(const ROOT::Math::GSLRngRanLuxD2&); ROOT::Math::GSLRngRanLuxD2&operator=(ROOT::Math::GSLRngRanLuxD2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxD2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html:628,Availability,avail,available,628,". ROOT::Math::GSLRngRanLuxS1. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngRanLuxS1. class ROOT::Math::GSLRngRanLuxS1: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngRanLuxS1(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngi",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html:3627,Modifiability,Inherit,Inheritance,3627,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(ROOT::Math::GSLRngRanLuxS1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS1&operator=(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1&operator=(ROOT::Math::GSLRngRanLuxS1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxS1(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html:3640,Modifiability,Inherit,Inherited,3640,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(ROOT::Math::GSLRngRanLuxS1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS1&operator=(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1&operator=(ROOT::Math::GSLRngRanLuxS1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxS1(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html:2595,Testability,Log,LogNormal,2595,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1GSLRngRanLuxS1(ROOT::Math::GSLRngRanLuxS1&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS1&operator=(const ROOT::Math::GSLRngRanLuxS1&); ROOT::Math::GSLRngRanLuxS1&operator=(ROOT::Math::GSLRngRanLuxS1&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS1.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html:628,Availability,avail,available,628,". ROOT::Math::GSLRngRanLuxS2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngRanLuxS2. class ROOT::Math::GSLRngRanLuxS2: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngRanLuxS2(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngi",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html:3627,Modifiability,Inherit,Inheritance,3627,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(ROOT::Math::GSLRngRanLuxS2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS2&operator=(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2&operator=(ROOT::Math::GSLRngRanLuxS2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxS2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html:3640,Modifiability,Inherit,Inherited,3640,"SLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(ROOT::Math::GSLRngRanLuxS2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS2&operator=(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2&operator=(ROOT::Math::GSLRngRanLuxS2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngRanLuxS2(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html
https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html:2595,Testability,Log,LogNormal,2595,"::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2GSLRngRanLuxS2(ROOT::Math::GSLRngRanLuxS2&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLuxS2&operator=(const ROOT::Math::GSLRngRanLuxS2&); ROOT::Math::GSLRngRanLuxS2&operator=(ROOT::Math::GSLRngRanLuxS2&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngRanLuxS2.html
https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html:616,Availability,avail,available,616,". ROOT::Math::GSLRngTaus. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLRngTaus. class ROOT::Math::GSLRngTaus: public ROOT::Math::GSLRandomEngine. GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random. Function Members (Methods); public:. virtual~GSLRngTaus(); unsigned intROOT::Math::GSLRandomEngine::Binomial(double p, unsigned int n) const; doubleROOT::Math::GSLRandomEngine::Cauchy(double a) const; doubleROOT::Math::GSLRandomEngine::ChiSquare(double nu) const; voidROOT::Math::GSLRandomEngine::Dir2D(double& x, double& y) const; voidROOT::Math::GSLRandomEngine::Dir3D(double& x, double& y, double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GS",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html
https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html:3563,Modifiability,Inherit,Inheritance,3563,"ngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngTausGSLRngTaus(); ROOT::Math::GSLRngTausGSLRngTaus(const ROOT::Math::GSLRngTaus&); ROOT::Math::GSLRngTausGSLRngTaus(ROOT::Math::GSLRngTaus&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngTaus&operator=(const ROOT::Math::GSLRngTaus&); ROOT::Math::GSLRngTaus&operator=(ROOT::Math::GSLRngTaus&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngTaus(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html
https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html:3576,Modifiability,Inherit,Inherited,3576,"ngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngTausGSLRngTaus(); ROOT::Math::GSLRngTausGSLRngTaus(const ROOT::Math::GSLRngTaus&); ROOT::Math::GSLRngTausGSLRngTaus(ROOT::Math::GSLRngTaus&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngTaus&operator=(const ROOT::Math::GSLRngTaus&); ROOT::Math::GSLRngTaus&operator=(ROOT::Math::GSLRngTaus&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate(). protected:. voidROOT::Math::GSLRandomEngine::SetType(ROOT::Math::GSLRngWrapper* r). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRandomEngine & operator=(const GSLRandomEngine & eng). Assignment operator : make a deep copy of the contained GSL generator. GSLRngTaus(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html
https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html:2547,Testability,Log,LogNormal,2547,"(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngTausGSLRngTaus(); ROOT::Math::GSLRngTausGSLRngTaus(const ROOT::Math::GSLRngTaus&); ROOT::Math::GSLRngTausGSLRngTaus(ROOT::Math::GSLRngTaus&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngTaus&operator=(const ROOT::Math::GSLRngTaus&); ROOT::Math::GSLRngTaus&operator=(ROOT::Math::GSLRngTaus&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root/html604/ROOT__Math__GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRngTaus.html
https://root.cern/root/html604/ROOT__Math__GSLRootFinder.html:2786,Availability,error,error,2786,"tIterate(); virtual intIterations() const; virtual const char*Name() const; virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. protected:. voidFreeSolver(); voidSetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::GSLRootFinderGSLRootFinder(const ROOT::Math::GSLRootFinder&); ROOT::Math::GSLRootFinder&operator=(const ROOT::Math::GSLRootFinder&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; intfIter; doublefRoot; ROOT::Math::GSLRootFSolver*fS; intfStatus; boolfValidInterval; doublefXlow; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRootFinder(). virtual ~GSLRootFinder(). GSLRootFinder(const ROOT::Math::GSLRootFinder& ); usually copying is non trivial, so we make this unaccessible. bool SetFunction( const IGradFunction & , double ). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterate(); iterate to find ROOTS return GSL_CONTINUE if iteration was successful or another error. double Root() const. bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); double XLower() const;; double XUpper() const;; Find the root. int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const. void SetSolver(ROOT::Math::GSLRootFSolver* s). void FreeSolver(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLRootFinder.html:2328,Modifiability,Inherit,Inheritance,2328,":IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. protected:. voidFreeSolver(); voidSetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::GSLRootFinderGSLRootFinder(const ROOT::Math::GSLRootFinder&); ROOT::Math::GSLRootFinder&operator=(const ROOT::Math::GSLRootFinder&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; intfIter; doublefRoot; ROOT::Math::GSLRootFSolver*fS; intfStatus; boolfValidInterval; doublefXlow; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRootFinder(). virtual ~GSLRootFinder(). GSLRootFinder(const ROOT::Math::GSLRootFinder& ); usually copying is non trivial, so we make this unaccessible. bool SetFunction( const IGradFunction & , double ). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterate(); iterate to find ROOTS return GSL_CONTINUE if iteration was successful or another error. double Root() const. bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); double XLower() const;; double XUpper() const;; Find the root. int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const. void SetSolver(ROOT::Math::GSLRootFSolver* s). void FreeSolver(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This pa",MatchSource.WIKI,root/html604/ROOT__Math__GSLRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLRootFinder.html:2341,Modifiability,Inherit,Inherited,2341,":IRootFinderMethod(); ROOT::Math::IRootFinderMethodROOT::Math::IRootFinderMethod::IRootFinderMethod(const ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); boolSetFunction(ROOT::Math::GSLRootFinder::GSLFuncPointer f, void* params, double xlow, double xup); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. protected:. voidFreeSolver(); voidSetSolver(ROOT::Math::GSLRootFSolver* s). private:. ROOT::Math::GSLRootFinderGSLRootFinder(const ROOT::Math::GSLRootFinder&); ROOT::Math::GSLRootFinder&operator=(const ROOT::Math::GSLRootFinder&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; intfIter; doublefRoot; ROOT::Math::GSLRootFSolver*fS; intfStatus; boolfValidInterval; doublefXlow; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRootFinder(). virtual ~GSLRootFinder(). GSLRootFinder(const ROOT::Math::GSLRootFinder& ); usually copying is non trivial, so we make this unaccessible. bool SetFunction( const IGradFunction & , double ). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterate(); iterate to find ROOTS return GSL_CONTINUE if iteration was successful or another error. double Root() const. bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); double XLower() const;; double XUpper() const;; Find the root. int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const. void SetSolver(ROOT::Math::GSLRootFSolver* s). void FreeSolver(). » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This pa",MatchSource.WIKI,root/html604/ROOT__Math__GSLRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRootFinder.html
https://root.cern/root/html604/ROOT__Math__GSLRootFinderDeriv.html:2449,Modifiability,Inherit,Inheritance,2449,"t ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. protected:. voidFreeSolver(); voidSetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::GSLRootFinderDerivGSLRootFinderDeriv(const ROOT::Math::GSLRootFinderDeriv&); ROOT::Math::GSLRootFinderDeriv&operator=(const ROOT::Math::GSLRootFinderDeriv&). Data Members; private:. ROOT::Math::GSLFunctionDerivWrapper*fFunction; intfIter; doublefPrevRoot; doublefRoot; ROOT::Math::GSLRootFdFSolver*fS; intfStatus; boolfValidPoint. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRootFinderDeriv(). virtual ~GSLRootFinderDeriv(). GSLRootFinderDeriv(const ROOT::Math::GSLRootFinderDeriv& ); usually copying is non trivial, so we make this unaccessible. bool SetFunction( const IGenFunction & , double , double ). bool SetFunction(const ROOT::Math::IGradFunction& f, double xstart). int Iterate(); iterate (return GSL_SUCCESS in case of successful iteration). double Root() const. bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Find the root (return false if failed). int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const. void SetSolver(ROOT::Math::GSLRootFdFSolver* s). void FreeSolver(). » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root/html604/ROOT__Math__GSLRootFinderDeriv.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRootFinderDeriv.html
https://root.cern/root/html604/ROOT__Math__GSLRootFinderDeriv.html:2462,Modifiability,Inherit,Inherited,2462,"t ROOT::Math::IRootFinderMethod&); virtual intIterate(); virtual intIterations() const; virtual const char*Name() const; virtual doubleRoot() const; virtual boolSetFunction(const ROOT::Math::IGradFunction& f, double xstart); boolSetFunction(ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer f, ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer df, ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer fdf, void* p, double Root); virtual boolSolve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); virtual intStatus() const. protected:. voidFreeSolver(); voidSetSolver(ROOT::Math::GSLRootFdFSolver* s). private:. ROOT::Math::GSLRootFinderDerivGSLRootFinderDeriv(const ROOT::Math::GSLRootFinderDeriv&); ROOT::Math::GSLRootFinderDeriv&operator=(const ROOT::Math::GSLRootFinderDeriv&). Data Members; private:. ROOT::Math::GSLFunctionDerivWrapper*fFunction; intfIter; doublefPrevRoot; doublefRoot; ROOT::Math::GSLRootFdFSolver*fS; intfStatus; boolfValidPoint. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLRootFinderDeriv(). virtual ~GSLRootFinderDeriv(). GSLRootFinderDeriv(const ROOT::Math::GSLRootFinderDeriv& ); usually copying is non trivial, so we make this unaccessible. bool SetFunction( const IGenFunction & , double , double ). bool SetFunction(const ROOT::Math::IGradFunction& f, double xstart). int Iterate(); iterate (return GSL_SUCCESS in case of successful iteration). double Root() const. bool Solve(int maxIter = 100, double absTol = 1.0E-8, double relTol = 1.0E-10); Find the root (return false if failed). int Iterations() const; Return number of iterations. int Status() const; Return the status of last root finding. { return fStatus; }. const char * Name() const. void SetSolver(ROOT::Math::GSLRootFdFSolver* s). void FreeSolver(). » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please s",MatchSource.WIKI,root/html604/ROOT__Math__GSLRootFinderDeriv.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLRootFinderDeriv.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:3348,Deployability,configurat,configuration,3348,"ithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }. const std::vector<double> & X() const; { return fX; }. double Scale(unsigned int i) const; { return fScale[i]; }. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:2875,Energy Efficiency,Energy,Energy,2875,"tion; GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x). construct from an interface of a multi-dimensional function. GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale). construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }.",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:2904,Energy Efficiency,energy,energy,2904,"st double* x). construct from an interface of a multi-dimensional function. GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale). construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }. const std::vector<double> & X() const; { return fX; }. double Sc",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:3600,Energy Efficiency,energy,energy,3600,"ithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }. const std::vector<double> & X() const; { return fX; }. double Scale(unsigned int i) const; { return fScale[i]; }. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:330,Integrability,Interface,Interface,330,". ROOT::Math::GSLSimAnFunc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnFunc. class ROOT::Math::GSLSimAnFunc. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnFunc(); virtual ROOT::Math::GSLSimAnFunc*Clone() const; virtual doubleDistance(const ROOT::Math::GSLSimAnFunc& func) const; virtual doubleEnergy() const; virtual ROOT::Math::GSLSimAnFunc&FastCopy(const ROOT::Math::GSLSimAnFunc& f); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::GSLSimAnFunc&); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale); unsigned intNDim() const; ROOT::Math::GSLSimAnFunc&operator=(const ROOT::Math::GSLSimAnFunc&); virtual voidPrint(); doubleScale(unsigned int i) const; voidSetX(const double* x); voidSetX(unsigned int i, double x); virtual voidStep(const ROOT::Math::GSLRandomEngine& r, double maxstep); const vector<double>&X() const; doubleX(unsigned int i) const. protected:. ROOT::Math::GSLSimAnFuncGSLSimAnFunc(). Data Members; private:. const ROOT::Math::IMultiGenFunction*fFunc; vector<double>fScale; vector<double>fX. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x). construct from an interface of a multi-dime",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:1976,Integrability,interface,interface,1976,"Func& f); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::GSLSimAnFunc&); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale); unsigned intNDim() const; ROOT::Math::GSLSimAnFunc&operator=(const ROOT::Math::GSLSimAnFunc&); virtual voidPrint(); doubleScale(unsigned int i) const; voidSetX(const double* x); voidSetX(unsigned int i, double x); virtual voidStep(const ROOT::Math::GSLRandomEngine& r, double maxstep); const vector<double>&X() const; doubleX(unsigned int i) const. protected:. ROOT::Math::GSLSimAnFuncGSLSimAnFunc(). Data Members; private:. const ROOT::Math::IMultiGenFunction*fFunc; vector<double>fScale; vector<double>fX. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x). construct from an interface of a multi-dimensional function. GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale). construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:2132,Integrability,interface,interface,2132,":IMultiGenFunction& func, const double* x, const double* scale); unsigned intNDim() const; ROOT::Math::GSLSimAnFunc&operator=(const ROOT::Math::GSLSimAnFunc&); virtual voidPrint(); doubleScale(unsigned int i) const; voidSetX(const double* x); voidSetX(unsigned int i, double x); virtual voidStep(const ROOT::Math::GSLRandomEngine& r, double maxstep); const vector<double>&X() const; doubleX(unsigned int i) const. protected:. ROOT::Math::GSLSimAnFuncGSLSimAnFunc(). Data Members; private:. const ROOT::Math::IMultiGenFunction*fFunc; vector<double>fScale; vector<double>fX. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x). construct from an interface of a multi-dimensional function. GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale). construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modi",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:1807,Modifiability,Inherit,Inheritance,1807,"bleDistance(const ROOT::Math::GSLSimAnFunc& func) const; virtual doubleEnergy() const; virtual ROOT::Math::GSLSimAnFunc&FastCopy(const ROOT::Math::GSLSimAnFunc& f); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::GSLSimAnFunc&); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale); unsigned intNDim() const; ROOT::Math::GSLSimAnFunc&operator=(const ROOT::Math::GSLSimAnFunc&); virtual voidPrint(); doubleScale(unsigned int i) const; voidSetX(const double* x); voidSetX(unsigned int i, double x); virtual voidStep(const ROOT::Math::GSLRandomEngine& r, double maxstep); const vector<double>&X() const; doubleX(unsigned int i) const. protected:. ROOT::Math::GSLSimAnFuncGSLSimAnFunc(). Data Members; private:. const ROOT::Math::IMultiGenFunction*fFunc; vector<double>fScale; vector<double>fX. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x). construct from an interface of a multi-dimensional function. GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale). construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:1820,Modifiability,Inherit,Inherited,1820,"bleDistance(const ROOT::Math::GSLSimAnFunc& func) const; virtual doubleEnergy() const; virtual ROOT::Math::GSLSimAnFunc&FastCopy(const ROOT::Math::GSLSimAnFunc& f); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::GSLSimAnFunc&); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x); ROOT::Math::GSLSimAnFuncGSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale); unsigned intNDim() const; ROOT::Math::GSLSimAnFunc&operator=(const ROOT::Math::GSLSimAnFunc&); virtual voidPrint(); doubleScale(unsigned int i) const; voidSetX(const double* x); voidSetX(unsigned int i, double x); virtual voidStep(const ROOT::Math::GSLRandomEngine& r, double maxstep); const vector<double>&X() const; doubleX(unsigned int i) const. protected:. ROOT::Math::GSLSimAnFuncGSLSimAnFunc(). Data Members; private:. const ROOT::Math::IMultiGenFunction*fFunc; vector<double>fScale; vector<double>fX. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x). construct from an interface of a multi-dimensional function. GSLSimAnFunc(const ROOT::Math::IMultiGenFunction& func, const double* x, const double* scale). construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:3348,Modifiability,config,configuration,3348,"ithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }. const std::vector<double> & X() const; { return fX; }. double Scale(unsigned int i) const; { return fScale[i]; }. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:1320,Availability,Error,ErrorDef,1320," virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:1382,Availability,Error,Errors,1382," virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:5740,Availability,Toler,Tolerance,5740,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:6880,Availability,error,errors,6880," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:3322,Deployability,Release,ReleaseVariable,3322,"::Math::Minimizer::MaxIterations() const; virtual const double*ROOT::Math::Minimizer::MinGradient() const; virtual boolMinimize(); ROOT::Math::MinimizerROOT::Math::Minimizer::Minimizer(); virtual doubleROOT::Math::BasicMinimizer::MinValue() const; virtual unsigned intNCalls() const; virtual unsigned intROOT::Math::BasicMinimizer::NDim() const; virtual unsigned intROOT::Math::BasicMinimizer::NFree() const; virtual unsigned intROOT::Math::Minimizer::NIterations() const; virtual unsigned intROOT::Math::BasicMinimizer::NPar() const; const ROOT::Math::IMultiGenFunction*ROOT::Math::BasicMinimizer::ObjFunction() const; virtual ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::Options() const; doubleROOT::Math::Minimizer::Precision() const; intROOT::Math::Minimizer::PrintLevel() const; voidROOT::Math::BasicMinimizer::PrintResult() const; virtual voidROOT::Math::Minimizer::PrintResults(); virtual boolROOT::Math::Minimizer::ProvidesError() const; virtual boolROOT::Math::BasicMinimizer::ReleaseVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::Scan(unsigned int ivar, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0); voidROOT::Math::Minimizer::SetDefaultOptions(); voidROOT::Math::Minimizer::SetErrorDef(double up); virtual boolROOT::Math::BasicMinimizer::SetFixedVariable(unsigned int, const string&, double); virtual voidROOT::Math::BasicMinimizer::SetFunction(const ROOT::Math::IMultiGenFunction& func); virtual voidROOT::Math::BasicMinimizer::SetFunction(const ROOT::Math::IMultiGradFunction& func); virtual boolROOT::Math::BasicMinimizer::SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double, double); virtual boolROOT::Math::BasicMinimizer::SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::Se",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:571,Integrability,interface,interface,571,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::BasicMinimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:588,Modifiability,plug-in,plug-in,588,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::BasicMinimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:655,Modifiability,plug-in,plug-in,655,". ROOT::Math::GSLSimAnMinimizer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnMinimizer. class ROOT::Math::GSLSimAnMinimizer: public ROOT::Math::BasicMinimizer. GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager. @ingroup MultiMin. Function Members (Methods); public:. virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:5894,Modifiability,Variab,VariableIndex,5894,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:5977,Modifiability,Variab,VariableName,5977,"tedVariable(unsigned int ivar, const string& name, double val, double step, double lower); voidROOT::Math::Minimizer::SetMaxFunctionCalls(unsigned int maxfcn); voidROOT::Math::Minimizer::SetMaxIterations(unsigned int maxiter); voidROOT::Math::Minimizer::SetOptions(const ROOT::Math::MinimizerOptions& opt); voidROOT::Math::Minimizer::SetPrecision(double prec); voidROOT::Math::Minimizer::SetPrintLevel(int level); voidROOT::Math::Minimizer::SetStrategy(int strategyLevel); voidROOT::Math::Minimizer::SetTolerance(double tol); virtual boolROOT::Math::BasicMinimizer::SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); voidROOT::Math::Minimizer::SetValidError(bool on); virtual boolROOT::Math::BasicMinimizer::SetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolROOT::Math::Minimizer::SetVariableInitialRange(unsigned int, double, double); virtual boolROOT::Math::BasicMinimizer::SetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableLowerLimit(unsigned int ivar, double lower); virtual boolROOT::Math::BasicMinimizer::SetVariableStepSize(unsigned int ivar, double step); virtual boolROOT::Math::BasicMinimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::BasicMinimizer::SetVariableValue(unsigned int ivar, double val); virtual boolROOT::Math::BasicMinimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; virtual const double*ROOT::Math::BasicMinimizer::StepSizes() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; const ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const.",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:7007,Modifiability,Inherit,Inheritance,7007," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:7020,Modifiability,Inherit,Inherited,7020," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:7365,Performance,perform,perform,7365," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:6897,Security,validat,validated,6897," ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html:864,Usability,Clear,Clear,864," virtual~GSLSimAnMinimizer(); ROOT::Math::BasicMinimizerROOT::Math::BasicMinimizer::BasicMinimizer(); virtual voidROOT::Math::Minimizer::Clear(); virtual boolROOT::Math::Minimizer::Contour(unsigned int ivar, unsigned int jvar, unsigned int& npoints, double* xi, double* xj); virtual doubleROOT::Math::Minimizer::Correlation(unsigned int i, unsigned int j) const; virtual doubleROOT::Math::Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; virtual intROOT::Math::Minimizer::CovMatrixStatus() const; virtual doubleROOT::Math::Minimizer::Edm() const; doubleROOT::Math::Minimizer::ErrorDef() const; virtual const double*ROOT::Math::Minimizer::Errors() const; virtual boolROOT::Math::BasicMinimizer::FixVariable(unsigned int ivar); virtual boolROOT::Math::Minimizer::GetCovMatrix(double* covMat) const; virtual boolROOT::Math::Minimizer::GetHessianMatrix(double* hMat) const; virtual boolROOT::Math::Minimizer::GetMinosError(unsigned int ivar, double& errLow, double& errUp, int option = 0); virtual boolROOT::Math::BasicMinimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings& varObj) const; virtual doubleROOT::Math::Minimizer::GlobalCC(unsigned int ivar) const; const ROOT::Math::IMultiGradFunction*ROOT::Math::BasicMinimizer::GradObjFun",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnMinimizer.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnnealing.html:339,Integrability,Interface,Interface,339,". ROOT::Math::GSLSimAnnealing. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnnealing. class ROOT::Math::GSLSimAnnealing. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnnealing(); ROOT::Math::GSLSimAnnealingGSLSimAnnealing(); ROOT::Math::GSLSimAnParams&Params(); const ROOT::Math::GSLSimAnParams&Params() const; intSolve(ROOT::Math::GSLSimAnFunc& func, bool debug = false); intSolve(const ROOT::Math::IMultiGenFunction& func, const double* x0, const double* scale, double* xmin, bool debug = false). private:. ROOT::Math::GSLSimAnnealingGSLSimAnnealing(const ROOT::Math::GSLSimAnnealing&); ROOT::Math::GSLSimAnnealing&operator=(const ROOT::Math::GSLSimAnnealing& rhs). Data Members; private:. ROOT::Math::GSLSimAnParamsfParamsparameters for GSLSimAnnealig. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnnealing(). Default constructor. ~GSLSimAnnealing(). Destructor (no operations). {}. GSLSimAnnealing(const ROOT::Math::GSLSimAnnealing& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. int Solve(const ROOT::Math::IMultiGenFunction& func, const double* x0, const double* scale, double* xmin, bool debug = false). solve the simulated annealing given a multi-dim function, the initial vector parameters; and a vector containing the scaling factors for the parameters. int Solve(ROOT::Math::GSLSimAnFunc& func, boo",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnnealing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnnealing.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnnealing.html:1369,Modifiability,Inherit,Inheritance,1369," simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnnealing(); ROOT::Math::GSLSimAnnealingGSLSimAnnealing(); ROOT::Math::GSLSimAnParams&Params(); const ROOT::Math::GSLSimAnParams&Params() const; intSolve(ROOT::Math::GSLSimAnFunc& func, bool debug = false); intSolve(const ROOT::Math::IMultiGenFunction& func, const double* x0, const double* scale, double* xmin, bool debug = false). private:. ROOT::Math::GSLSimAnnealingGSLSimAnnealing(const ROOT::Math::GSLSimAnnealing&); ROOT::Math::GSLSimAnnealing&operator=(const ROOT::Math::GSLSimAnnealing& rhs). Data Members; private:. ROOT::Math::GSLSimAnParamsfParamsparameters for GSLSimAnnealig. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnnealing(). Default constructor. ~GSLSimAnnealing(). Destructor (no operations). {}. GSLSimAnnealing(const ROOT::Math::GSLSimAnnealing& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. int Solve(const ROOT::Math::IMultiGenFunction& func, const double* x0, const double* scale, double* xmin, bool debug = false). solve the simulated annealing given a multi-dim function, the initial vector parameters; and a vector containing the scaling factors for the parameters. int Solve(ROOT::Math::GSLSimAnFunc& func, bool debug = false). solve the simulated annealing given a GSLSimAnFunc object; The object will contain the initial state at the beginning and the final minimum state at the end. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. Fo",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnnealing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnnealing.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnnealing.html:1382,Modifiability,Inherit,Inherited,1382," simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnnealing(); ROOT::Math::GSLSimAnnealingGSLSimAnnealing(); ROOT::Math::GSLSimAnParams&Params(); const ROOT::Math::GSLSimAnParams&Params() const; intSolve(ROOT::Math::GSLSimAnFunc& func, bool debug = false); intSolve(const ROOT::Math::IMultiGenFunction& func, const double* x0, const double* scale, double* xmin, bool debug = false). private:. ROOT::Math::GSLSimAnnealingGSLSimAnnealing(const ROOT::Math::GSLSimAnnealing&); ROOT::Math::GSLSimAnnealing&operator=(const ROOT::Math::GSLSimAnnealing& rhs). Data Members; private:. ROOT::Math::GSLSimAnParamsfParamsparameters for GSLSimAnnealig. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnnealing(). Default constructor. ~GSLSimAnnealing(). Destructor (no operations). {}. GSLSimAnnealing(const ROOT::Math::GSLSimAnnealing& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. int Solve(const ROOT::Math::IMultiGenFunction& func, const double* x0, const double* scale, double* xmin, bool debug = false). solve the simulated annealing given a multi-dim function, the initial vector parameters; and a vector containing the scaling factors for the parameters. int Solve(ROOT::Math::GSLSimAnFunc& func, bool debug = false). solve the simulated annealing given a GSLSimAnFunc object; The object will contain the initial state at the beginning and the final minimum state at the end. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. Fo",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnnealing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnnealing.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html:336,Integrability,Interface,Interface,336,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParamsGSLSimAnParams(ROOT::Math::GSLSimAnParams&&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(ROOT::Math::GSLSimAnParams&&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnParams.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html:1351,Modifiability,Inherit,Inheritance,1351,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParamsGSLSimAnParams(ROOT::Math::GSLSimAnParams&&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(ROOT::Math::GSLSimAnParams&&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnParams.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html
https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html:1364,Modifiability,Inherit,Inherited,1364,". ROOT::Math::GSLSimAnParams. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLSimAnParams. class ROOT::Math::GSLSimAnParams. GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin. Function Members (Methods); public:. ~GSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(); ROOT::Math::GSLSimAnParamsGSLSimAnParams(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParamsGSLSimAnParams(ROOT::Math::GSLSimAnParams&&); ROOT::Math::GSLSimAnParams&operator=(const ROOT::Math::GSLSimAnParams&); ROOT::Math::GSLSimAnParams&operator=(ROOT::Math::GSLSimAnParams&&). Data Members; public:. intiters_fixed_Tnumber of iterations at each temperature; doublek; doublemu; intn_triesnumber of points to try for each step; doublestep_sizemax step size used in random walk; doublet_initial; doublet_min. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnParams(); constructor with some default values. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__GSLSimAnParams.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnParams.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html:1064,Availability,avail,available,1064,"Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionMultiDim. class ROOT::Math::IBaseFunctionMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDoEval(const double* x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim(); {}. virtual ~IBaseFunctionMultiDim(). virtual destructor. {}. IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. unsigned int NDim() const. Retrieve the dimension of the function. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html:385,Integrability,Interface,Interface,385,". ROOT::Math::IBaseFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionMultiDim. class ROOT::Math::IBaseFunctionMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDoEval(const double* x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim(); {}. virtual ~IBaseFunctionMultiDim(). virtual destructor. {}. IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. unsigned int NDim() const. Retrieve the dimension of the function. double operator()(const double* x) const. Evaluate the function at a",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html:616,Integrability,interface,interface,616,". ROOT::Math::IBaseFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionMultiDim. class ROOT::Math::IBaseFunctionMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDoEval(const double* x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim(); {}. virtual ~IBaseFunctionMultiDim(). virtual destructor. {}. IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. unsigned int NDim() const. Retrieve the dimension of the function. double operator()(const double* x) const. Evaluate the function at a",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html:693,Integrability,interface,interface,693,". ROOT::Math::IBaseFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionMultiDim. class ROOT::Math::IBaseFunctionMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDoEval(const double* x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim(); {}. virtual ~IBaseFunctionMultiDim(). virtual destructor. {}. IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. unsigned int NDim() const. Retrieve the dimension of the function. double operator()(const double* x) const. Evaluate the function at a",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html:1575,Modifiability,Inherit,Inheritance,1575,"bstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDoEval(const double* x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim(); {}. virtual ~IBaseFunctionMultiDim(). virtual destructor. {}. IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. unsigned int NDim() const. Retrieve the dimension of the function. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html:1588,Modifiability,Inherit,Inherited,1588,"bstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimIBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDoEval(const double* x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim(); {}. virtual ~IBaseFunctionMultiDim(). virtual destructor. {}. IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. unsigned int NDim() const. Retrieve the dimension of the function. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html:1058,Availability,avail,available,1058,"OOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionOneDim. class ROOT::Math::IBaseFunctionOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleoperator()(double x) const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionOneDim&operator=(const ROOT::Math::IBaseFunctionOneDim&). private:. virtual doubleDoEval(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). double operator()(double x) const. Template method to eveluate the function using the begin of an iterator; User is",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html:379,Integrability,Interface,Interface,379,". ROOT::Math::IBaseFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionOneDim. class ROOT::Math::IBaseFunctionOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleoperator()(double x) const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionOneDim&operator=(const ROOT::Math::IBaseFunctionOneDim&). private:. virtual doubleDoEval(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). double operator()(double x) const. Template method to eveluate th",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html:610,Integrability,interface,interface,610,". ROOT::Math::IBaseFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionOneDim. class ROOT::Math::IBaseFunctionOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleoperator()(double x) const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionOneDim&operator=(const ROOT::Math::IBaseFunctionOneDim&). private:. virtual doubleDoEval(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). double operator()(double x) const. Template method to eveluate th",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html:687,Integrability,interface,interface,687,". ROOT::Math::IBaseFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseFunctionOneDim. class ROOT::Math::IBaseFunctionOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleoperator()(double x) const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionOneDim&operator=(const ROOT::Math::IBaseFunctionOneDim&). private:. virtual doubleDoEval(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). double operator()(double x) const. Template method to eveluate th",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html:1544,Modifiability,Inherit,Inheritance,1544,"ic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleoperator()(double x) const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionOneDim&operator=(const ROOT::Math::IBaseFunctionOneDim&). private:. virtual doubleDoEval(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). double operator()(double x) const. Template method to eveluate the function using the begin of an iterator; User is responsible to provide correct size for the iterator. IBaseFunctionOneDim(); {}. virtual ~IBaseFunctionOneDim(). virtual destructor. {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html:1557,Modifiability,Inherit,Inherited,1557,"ic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*Clone() const; ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimIBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); doubleoperator()(double x) const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionOneDim&operator=(const ROOT::Math::IBaseFunctionOneDim&). private:. virtual doubleDoEval(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IBaseFunctionMultiDim * Clone() const. Clone a function.; Each derived class must implement their version of the Clone method. double operator()(const double* x) const. Evaluate the function at a point x[].; Use the pure virtual private method DoEval which must be implemented by the sub-classes. return DoEval(x). double operator()(double x) const. Template method to eveluate the function using the begin of an iterator; User is responsible to provide correct size for the iterator. IBaseFunctionOneDim(); {}. virtual ~IBaseFunctionOneDim(). virtual destructor. {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:773,Availability,avail,available,773,". ROOT::Math::IBaseParam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:356,Integrability,interface,interface,356,". ROOT::Math::IBaseParam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:1179,Modifiability,Inherit,Inheritance,1179,"ions:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:1192,Modifiability,Inherit,Inherited,1192,"ions:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:455,Safety,avoid,avoid,455,". ROOT::Math::IBaseParam. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:1764,Safety,avoid,avoid,1764,"ions:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IBaseParam.html:1354,Security,Access,Access,1354,"ions:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); ROOT::Math::IBaseParamIBaseParam(); ROOT::Math::IBaseParamIBaseParam(const ROOT::Math::IBaseParam&); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IBaseParam.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:1156,Availability,avail,available,1156,"Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionMultiDim. class ROOT::Math::IGradientFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual uns",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:2643,Energy Efficiency,efficient,efficient,2643,"d = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:2899,Energy Efficiency,efficient,efficient,2899,"d = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:477,Integrability,Interface,Interface,477,". ROOT::Math::IGradientFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionMultiDim. class ROOT::Math::IGradientFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::I",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:708,Integrability,interface,interface,708,". ROOT::Math::IGradientFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionMultiDim. class ROOT::Math::IGradientFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::I",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:785,Integrability,interface,interface,785,". ROOT::Math::IGradientFunctionMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionMultiDim. class ROOT::Math::IGradientFunctionMultiDim: public ROOT::Math::IBaseFunctionMultiDim, public ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::I",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:2392,Modifiability,Inherit,Inheritance,2392,"d = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:2405,Modifiability,Inherit,Inherited,2405,"d = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:2739,Performance,Optimiz,Optimized,2739,"d = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html:2990,Performance,perform,performances,2990,"d = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(); ROOT::Math::IGradientFunctionMultiDimIGradientFunctionMultiDim(const ROOT::Math::IGradientFunctionMultiDim&); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(); ROOT::Math::IGradientMultiDimROOT::Math::IGradientMultiDim::IGradientMultiDim(const ROOT::Math::IGradientMultiDim&); virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:1146,Availability,avail,available,1146,"eader . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleRO",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:2663,Energy Efficiency,efficient,efficient,2663,"tors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionOneDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:467,Integrability,Interface,Interface,467,". ROOT::Math::IGradientFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:698,Integrability,interface,interface,698,". ROOT::Math::IGradientFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:775,Integrability,interface,interface,775,". ROOT::Math::IGradientFunctionOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientFunctionOneDim. class ROOT::Math::IGradientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:2377,Modifiability,Inherit,Inheritance,2377,"tors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionOneDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:2390,Modifiability,Inherit,Inherited,2390,"tors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionOneDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:2503,Performance,Optimiz,Optimized,2503,"tors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionOneDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html:2754,Performance,perform,performances,2754,"tors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(); ROOT::Math::IBaseFunctionOneDimROOT::Math::IBaseFunctionOneDim::IBaseFunctionOneDim(const ROOT::Math::IBaseFunctionOneDim&); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(); ROOT::Math::IGradientFunctionOneDimIGradientFunctionOneDim(const ROOT::Math::IGradientFunctionOneDim&); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(); ROOT::Math::IGradientOneDimROOT::Math::IGradientOneDim::IGradientOneDim(const ROOT::Math::IGradientOneDim&); doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionOneDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientFunctionOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:1052,Availability,avail,available,1052,":; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientMultiDim. class ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial d",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:1918,Energy Efficiency,efficient,efficient,1918,"ust implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:2342,Energy Efficiency,efficient,efficient,2342,"ust implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:373,Integrability,Interface,Interface,373,". ROOT::Math::IGradientMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientMultiDim. class ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:604,Integrability,interface,interface,604,". ROOT::Math::IGradientMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientMultiDim. class ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:681,Integrability,interface,interface,681,". ROOT::Math::IGradientMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientMultiDim. class ROOT::Math::IGradientMultiDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:1614,Modifiability,Inherit,Inheritance,1614," the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatic",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:1627,Modifiability,Inherit,Inherited,1627," the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatic",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:2182,Performance,Optimiz,Optimized,2182,"ust implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html:2433,Performance,perform,performances,2433,"ust implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientMultiDim(); doubleDerivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; ROOT::Math::IGradientMultiDimIGradientMultiDim(); ROOT::Math::IGradientMultiDimIGradientMultiDim(const ROOT::Math::IGradientMultiDim&); ROOT::Math::IGradientMultiDim&operator=(const ROOT::Math::IGradientMultiDim&). private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IGradientMultiDim(); virual destructor. {}. void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double* x, unsigned int icoord = 0) const. Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientMultiDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:1046,Availability,avail,available,1046,"inks:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientOneDim. class ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoD",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:1858,Energy Efficiency,efficient,efficient,1858,"uation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is oft",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2277,Energy Efficiency,efficient,efficient,2277,"uble& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2861,Energy Efficiency,efficient,efficient,2861,"const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:367,Integrability,Interface,Interface,367,". ROOT::Math::IGradientOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientOneDim. class ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respec",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:598,Integrability,interface,interface,598,". ROOT::Math::IGradientOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientOneDim. class ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respec",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:675,Integrability,interface,interface,675,". ROOT::Math::IGradientOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IGradientOneDim. class ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respec",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:1610,Modifiability,Inherit,Inheritance,1610,"he pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private metho",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:1623,Modifiability,Inherit,Inherited,1623,"he pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientOneDim(); doubleDerivative(double x) const; doubleDerivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private metho",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2117,Performance,Optimiz,Optimized,2117," double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidFdF(const double* x, double& f, double* df) const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2368,Performance,perform,performances,2368,"const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2701,Performance,Optimiz,Optimized,2701,"const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html:2952,Performance,perform,performances,2952,"const; voidGradient(const double* x, double* g) const; ROOT::Math::IGradientOneDimIGradientOneDim(); ROOT::Math::IGradientOneDimIGradientOneDim(const ROOT::Math::IGradientOneDim&); ROOT::Math::IGradientOneDim&operator=(const ROOT::Math::IGradientOneDim&). private:. virtual doubleDoDerivative(double x) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* g) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. double Derivative(const double * x, unsigned int icoord = 0). Return the partial derivative with respect to the passed coordinate. return DoDerivative(x, icoord). void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientOneDim(); virtual destructor. {}. double Derivative(double x) const. Return the derivative of the function at a point x; Use the private method DoDerivative. void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IGradientOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IGradientOneDim.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:519,Availability,avail,available,519,". ROOT::Math::IMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IMinimizer1D. class ROOT::Math::IMinimizer1D. Interface class for numerical methods for one-dimensional minimization. @ingroup Min1D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::IMinimizer1DIMinimizer1D(); ROOT::Math::IMinimizer1DIMinimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Ret",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:1936,Availability,toler,tolerance,1936,"Minimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Return true if iterations converged successfully; * \@param maxIter maximum number of iteration; * \@param absTol desired absolute error in the minimum position; * \@param absTol desired relative error in the minimum position. int Iterations() const. * Return number of iteration used to find minimum. const char * Name() const. * Return name of minimization algorithm. int Status() const; Returns the status of the previous estimate . » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:2129,Availability,error,error,2129,"Minimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Return true if iterations converged successfully; * \@param maxIter maximum number of iteration; * \@param absTol desired absolute error in the minimum position; * \@param absTol desired relative error in the minimum position. int Iterations() const. * Return number of iteration used to find minimum. const char * Name() const. * Return name of minimization algorithm. int Status() const; Returns the status of the previous estimate . » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:2194,Availability,error,error,2194,"Minimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Return true if iterations converged successfully; * \@param maxIter maximum number of iteration; * \@param absTol desired absolute error in the minimum position; * \@param absTol desired relative error in the minimum position. int Iterations() const. * Return number of iteration used to find minimum. const char * Name() const. * Return name of minimization algorithm. int Status() const; Returns the status of the previous estimate . » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:297,Integrability,Interface,Interface,297,". ROOT::Math::IMinimizer1D. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IMinimizer1D. class ROOT::Math::IMinimizer1D. Interface class for numerical methods for one-dimensional minimization. @ingroup Min1D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::IMinimizer1DIMinimizer1D(); ROOT::Math::IMinimizer1DIMinimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Ret",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:1120,Modifiability,Inherit,Inheritance,1120," class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IMinimizer1D. class ROOT::Math::IMinimizer1D. Interface class for numerical methods for one-dimensional minimization. @ingroup Min1D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::IMinimizer1DIMinimizer1D(); ROOT::Math::IMinimizer1DIMinimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Return true if iterations converged successfully; * \@param maxIter maximum number of iteration; * \@param absTol desired absolute error in the mini",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html:1133,Modifiability,Inherit,Inherited,1133," class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IMinimizer1D. class ROOT::Math::IMinimizer1D. Interface class for numerical methods for one-dimensional minimization. @ingroup Min1D. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IMinimizer1D(); virtual doubleFValLower() const; virtual doubleFValMinimum() const; virtual doubleFValUpper() const; ROOT::Math::IMinimizer1DIMinimizer1D(); ROOT::Math::IMinimizer1DIMinimizer1D(const ROOT::Math::IMinimizer1D&); virtual intIterations() const; virtual boolMinimize(int maxIter, double absTol, double relTol); virtual const char*Name() const; ROOT::Math::IMinimizer1D&operator=(const ROOT::Math::IMinimizer1D&); virtual intStatus() const; virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMinimizer1D(); {}. virtual ~IMinimizer1D(); {}. double XMinimum() const. * Return current estimate of the position of the minimum. double XLower() const. * Return current lower bound of the minimization interval. double XUpper() const. * Return current upper bound of the minimization interval. double FValMinimum() const. * Return function value at current estimate of the minimum. double FValLower() const. * Return function value at current lower bound of the minimization interval. double FValUpper() const. * Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). * Find minimum position iterating until convergence specified by the absolute and relative tolerance or; * the maximum number of iteration is reached; * Return true if iterations converged successfully; * \@param maxIter maximum number of iteration; * \@param absTol desired absolute error in the mini",MatchSource.WIKI,root/html604/ROOT__Math__IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IMinimizer1D.html
https://root.cern/root/html604/ROOT__Math__Integration.html:14,Deployability,Integrat,Integration,14,. ROOT::Math::Integration. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Integration. namespace ROOT::Math::Integration. Function Members (Methods). Data Members. Class Charts; Function documentation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Integration.html
https://root.cern/root/html604/ROOT__Math__Integration.html:254,Deployability,Integrat,Integration,254,. ROOT::Math::Integration. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Integration. namespace ROOT::Math::Integration. Function Members (Methods). Data Members. Class Charts; Function documentation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Integration.html
https://root.cern/root/html604/ROOT__Math__Integration.html:289,Deployability,Integrat,Integration,289,. ROOT::Math::Integration. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Integration. namespace ROOT::Math::Integration. Function Members (Methods). Data Members. Class Charts; Function documentation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Integration.html
https://root.cern/root/html604/ROOT__Math__Integration.html:14,Integrability,Integrat,Integration,14,. ROOT::Math::Integration. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Integration. namespace ROOT::Math::Integration. Function Members (Methods). Data Members. Class Charts; Function documentation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Integration.html
https://root.cern/root/html604/ROOT__Math__Integration.html:254,Integrability,Integrat,Integration,254,. ROOT::Math::Integration. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Integration. namespace ROOT::Math::Integration. Function Members (Methods). Data Members. Class Charts; Function documentation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Integration.html
https://root.cern/root/html604/ROOT__Math__Integration.html:289,Integrability,Integrat,Integration,289,. ROOT::Math::Integration. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::Integration. namespace ROOT::Math::Integration. Function Members (Methods). Data Members. Class Charts; Function documentation. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root/html604/ROOT__Math__Integration.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__Integration.html
https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html:14,Deployability,Integrat,IntegrationMultiDim,14,". ROOT::Math::IntegrationMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationMultiDim. namespace ROOT::Math::IntegrationMultiDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html:262,Deployability,Integrat,IntegrationMultiDim,262,". ROOT::Math::IntegrationMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationMultiDim. namespace ROOT::Math::IntegrationMultiDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html:305,Deployability,Integrat,IntegrationMultiDim,305,". ROOT::Math::IntegrationMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationMultiDim. namespace ROOT::Math::IntegrationMultiDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html:14,Integrability,Integrat,IntegrationMultiDim,14,". ROOT::Math::IntegrationMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationMultiDim. namespace ROOT::Math::IntegrationMultiDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html:262,Integrability,Integrat,IntegrationMultiDim,262,". ROOT::Math::IntegrationMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationMultiDim. namespace ROOT::Math::IntegrationMultiDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html:305,Integrability,Integrat,IntegrationMultiDim,305,". ROOT::Math::IntegrationMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationMultiDim. namespace ROOT::Math::IntegrationMultiDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html:14,Deployability,Integrat,IntegrationOneDim,14,". ROOT::Math::IntegrationOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationOneDim. namespace ROOT::Math::IntegrationOneDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html:260,Deployability,Integrat,IntegrationOneDim,260,". ROOT::Math::IntegrationOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationOneDim. namespace ROOT::Math::IntegrationOneDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html:301,Deployability,Integrat,IntegrationOneDim,301,". ROOT::Math::IntegrationOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationOneDim. namespace ROOT::Math::IntegrationOneDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html:14,Integrability,Integrat,IntegrationOneDim,14,". ROOT::Math::IntegrationOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationOneDim. namespace ROOT::Math::IntegrationOneDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html:260,Integrability,Integrat,IntegrationOneDim,260,". ROOT::Math::IntegrationOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationOneDim. namespace ROOT::Math::IntegrationOneDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html
https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html:301,Integrability,Integrat,IntegrationOneDim,301,". ROOT::Math::IntegrationOneDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegrationOneDim. namespace ROOT::Math::IntegrationOneDim. Function Members (Methods). Data Members. Class Charts; Function documentation. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegrationOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegrationOneDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2801,Availability,Error,Error,2801,"ed:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integratio",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2839,Availability,Error,Error,2839,"ed:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integratio",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3454,Availability,Error,Error,3454,"im::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; de",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3492,Availability,Error,Error,3492,"im::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; de",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4049,Availability,Error,Error,4049,"= IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fInteg",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4087,Availability,Error,Error,4087,"= IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fInteg",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5121,Availability,Error,Error,5121,"y only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5155,Availability,error,error,5155,"y only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5207,Availability,Error,Error,5207,"; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string.",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5250,Availability,Error,Error,5250,"d int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); stati",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5524,Availability,toler,tolerance,5524,"e, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall).",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5645,Availability,toler,tolerance,5645,"ntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:14,Deployability,Integrat,IntegratorMultiDim,14,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:257,Deployability,Integrat,IntegratorMultiDim,257,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:295,Deployability,Integrat,IntegratorMultiDim,295,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:358,Deployability,integrat,integration,358,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:414,Deployability,integrat,integration,414,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:582,Deployability,integrat,integration,582,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:655,Deployability,Integrat,Integration,655,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:713,Deployability,Integrat,IntegratorMultiDim,713,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:844,Deployability,Integrat,IntegrationMultiDim,844,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:891,Deployability,Integrat,IntegrationMultiDim,891,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1107,Deployability,Integrat,IntegratorMultiDimIntegratorMultiDim,1107,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1156,Deployability,Integrat,IntegrationMultiDim,1156,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1189,Deployability,Integrat,IntegrationMultiDim,1189,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1295,Deployability,Integrat,IntegratorMultiDimIntegratorMultiDim,1295,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1384,Deployability,Integrat,IntegrationMultiDim,1384,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1417,Deployability,Integrat,IntegrationMultiDim,1417,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1543,Deployability,Integrat,IntegratorMultiDimOptionsOptions,1543,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1733,Deployability,Integrat,IntegratorMultiDimOptions,1733,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1900,Deployability,Integrat,IntegrationMultiDim,1900,"Dim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no param",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2005,Deployability,Integrat,IntegratorMultiDimIntegratorMultiDim,2005,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2060,Deployability,Integrat,IntegratorMultiDim,2060,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2094,Deployability,Integrat,IntegratorMultiDim,2094,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2141,Deployability,Integrat,IntegratorMultiDim,2141,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2336,Deployability,integrat,integrator,2336,"call = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2450,Deployability,Integrat,IntegratorMultiDim,2450,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2481,Deployability,Integrat,IntegrationMultiDim,2481,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2514,Deployability,Integrat,IntegrationMultiDim,2514,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2649,Deployability,Integrat,Integrator,2649,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2690,Deployability,integrat,integration,2690,"enFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constru",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2722,Deployability,integrat,integration,2722,"gratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2955,Deployability,Integrat,IntegratorMultiDimOptions,2955,"bsTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim fu",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2991,Deployability,Integrat,IntegratorMultiDim,2991,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3062,Deployability,Integrat,IntegrationMultiDim,3062,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3095,Deployability,Integrat,IntegrationMultiDim,3095,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3230,Deployability,Integrat,Integrator,3230,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3290,Deployability,integrat,integration,3290,"torMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiD",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3319,Deployability,integrat,integration,3319," Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double r",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3375,Deployability,integrat,integration,3375," Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double r",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3555,Deployability,integrat,integratioon,3555,"im::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; de",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3640,Deployability,Integrat,IntegratorMultiDim,3640," @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this;",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3751,Deployability,Integrat,Integrator,3751," @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this;",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3819,Deployability,integrat,integration,3819,"m relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously g",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3848,Deployability,integrat,integration,3848,"sed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* x",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3970,Deployability,integrat,integration,3970,"sed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* x",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4150,Deployability,integrat,integratioon,4150,"= IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fInteg",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4217,Deployability,Integrat,IntegratorMultiDim,4217,"By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4268,Deployability,Integrat,IntegrationMultiDim,4268,"By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4301,Deployability,Integrat,IntegrationMultiDim,4301,"By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4509,Deployability,Integrat,IntegratorMultiDim,4509,"ioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrat",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4546,Deployability,Integrat,IntegratorMultiDim,4546,"ioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrat",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4623,Deployability,Integrat,IntegratorMultiDim,4623,"e template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fInteg",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:4672,Deployability,Integrat,IntegratorMultiDim,4672,"e template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fInteg",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5043,Deployability,integrat,integration,5043,"bsTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fI",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5143,Deployability,integrat,integration,5143,"y only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5750,Deployability,Integrat,IntegratorMultiDimOptions,5750,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:5917,Deployability,integrat,integrator,5917,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:6002,Deployability,integrat,integrator,6002,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:6049,Deployability,Integrat,Integrator,6049,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:6084,Deployability,Integrat,IntegrationMultiDim,6084,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:6223,Deployability,Integrat,IntegrationMultiDim,6223,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:6363,Deployability,Integrat,IntegrationMultiDim,6363,"IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. double Result() const; return result of last integration. { return fIntegrator == 0 ? 0 : fIntegrator->Result(); }. double Error() const; return integration error. { return fIntegrator == 0 ? 0 : fIntegrator->Error(); }. int Status() const; return the Error Status of the last Integral calculation. { return fIntegrator == 0 ? -1 : fIntegrator->Status(); }. void SetRelTolerance(double relTol); return number of function evaluations in calculating the integral; unsigned int NEval() const { return fNEval; }; set the relative tolerance. { if (fIntegrator) fIntegrator->SetRelTolerance(relTol); }. void SetAbsTolerance(double absTol); set absolute tolerance. { if (fIntegrator) fIntegrator->SetAbsTolerance(absTol); }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. { if (fIntegrator) fIntegrator->SetOptions(opt); }. VirtualIntegratorMultiDim * GetIntegrator(); return a pointer to integrator object. { return fIntegrator; }. std::string Name() const; return name of integrator. { return (fIntegrator) ? Options().Integrator() : std::string(""""); }. IntegrationMultiDim::Type GetType(const char* name); static function to get the enumeration from a string. std::string GetName(ROOT::Math::IntegrationMultiDim::Type ); static function to get a string from the enumeration. VirtualIntegratorMultiDim * CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:387,Energy Efficiency,adapt,adaptive,387,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:501,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,501,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2681,Energy Efficiency,Adapt,Adaptive,2681,"enFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constru",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2740,Energy Efficiency,adapt,adaptive,2740,"gratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3281,Energy Efficiency,adapt,adaptive,3281,"torMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiD",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3393,Energy Efficiency,adapt,adaptive,3393," Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double r",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3810,Energy Efficiency,adapt,adaptive,3810,"m relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously g",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3988,Energy Efficiency,adapt,adaptive,3988,"sed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. double Integral(const ROOT::Math::IMultiGenFunction& f, const double* x",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:14,Integrability,Integrat,IntegratorMultiDim,14,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:257,Integrability,Integrat,IntegratorMultiDim,257,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:295,Integrability,Integrat,IntegratorMultiDim,295,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:358,Integrability,integrat,integration,358,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:414,Integrability,integrat,integration,414,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:582,Integrability,integrat,integration,582,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:655,Integrability,Integrat,Integration,655,". ROOT::Math::IntegratorMultiDim. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IntegratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Ma",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:713,Integrability,Integrat,IntegratorMultiDim,713,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:844,Integrability,Integrat,IntegrationMultiDim,844,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:891,Integrability,Integrat,IntegrationMultiDim,891,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1107,Integrability,Integrat,IntegratorMultiDimIntegratorMultiDim,1107,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1156,Integrability,Integrat,IntegrationMultiDim,1156,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1189,Integrability,Integrat,IntegrationMultiDim,1189,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1295,Integrability,Integrat,IntegratorMultiDimIntegratorMultiDim,1295,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1384,Integrability,Integrat,IntegrationMultiDim,1384,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1417,Integrability,Integrat,IntegrationMultiDim,1417,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1543,Integrability,Integrat,IntegratorMultiDimOptionsOptions,1543,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1733,Integrability,Integrat,IntegratorMultiDimOptions,1733,"ratorMultiDim. class ROOT::Math::IntegratorMultiDim. User class for performing multidimensional integration. By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik; implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the; plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorMultiDim(); doubleError() const; ROOT::Math::VirtualIntegratorMultiDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationMultiDim::Type); static ROOT::Math::IntegrationMultiDim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:1900,Integrability,Integrat,IntegrationMultiDim,1900,"Dim::TypeGetType(const char* name); doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no param",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2005,Integrability,Integrat,IntegratorMultiDimIntegratorMultiDim,2005,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2060,Integrability,Integrat,IntegratorMultiDim,2060,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2094,Integrability,Integrat,IntegratorMultiDim,2094,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2141,Integrability,Integrat,IntegratorMultiDim,2141,"st double* xmax); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMult",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2336,Integrability,integrat,integrator,2336,"call = 0); ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); stringName() const; ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default ",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2450,Integrability,Integrat,IntegratorMultiDim,2450,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2481,Integrability,Integrat,IntegrationMultiDim,2481,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2514,Integrability,Integrat,IntegrationMultiDim,2514,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2649,Integrability,Integrat,Integrator,2649,":IntegratorMultiDimOptionsOptions() const; doubleResult() const; voidSetAbsTolerance(double absTol); voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2690,Integrability,integrat,integration,2690,"enFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constru",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2722,Integrability,integrat,integration,2722,"gratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2955,Integrability,Integrat,IntegratorMultiDimOptions,2955,"bsTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim fu",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:2991,Integrability,Integrat,IntegratorMultiDim,2991,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3062,Integrability,Integrat,IntegrationMultiDim,3062,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html:3095,Integrability,Integrat,IntegrationMultiDim,3095,"nst ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function",MatchSource.WIKI,root/html604/ROOT__Math__IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorMultiDim.html
