id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html534/TXMLParser.html:11412,Availability,error,error,11412,"the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:11442,Availability,error,error,11442,"the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:11483,Availability,error,error,11483,"the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetValidateWarning() const; { return fValidateWarning; }. » Author: Jose Lo 12/4/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/xmlparser:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10446,Deployability,release,release,10446,"eap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on erro",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:361,Integrability,interface,interfaces,361,". TXMLParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLParser. class TXMLParser: public TObject, public TQObject. TXMLParser. TXMLParser is an abstract class which interfaces with Libxml2.; Libxml2 is the XML C parser and toolkit developed for the Gnome; project. The libxml library provides two interfaces to the parser, a DOM; style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are; a SAX interface and DOM interface of libxml. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TXMLParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:493,Integrability,interface,interfaces,493,". TXMLParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLParser. class TXMLParser: public TObject, public TQObject. TXMLParser. TXMLParser is an abstract class which interfaces with Libxml2.; Libxml2 is the XML C parser and toolkit developed for the Gnome; project. The libxml library provides two interfaces to the parser, a DOM; style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are; a SAX interface and DOM interface of libxml. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TXMLParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:537,Integrability,interface,interface,537,". TXMLParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLParser. class TXMLParser: public TObject, public TQObject. TXMLParser. TXMLParser is an abstract class which interfaces with Libxml2.; Libxml2 is the XML C parser and toolkit developed for the Gnome; project. The libxml library provides two interfaces to the parser, a DOM; style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are; a SAX interface and DOM interface of libxml. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TXMLParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:575,Integrability,interface,interface,575,". TXMLParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLParser. class TXMLParser: public TObject, public TQObject. TXMLParser. TXMLParser is an abstract class which interfaces with Libxml2.; Libxml2 is the XML C parser and toolkit developed for the Gnome; project. The libxml library provides two interfaces to the parser, a DOM; style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are; a SAX interface and DOM interface of libxml. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TXMLParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:660,Integrability,interface,interface,660,". TXMLParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLParser. class TXMLParser: public TObject, public TQObject. TXMLParser. TXMLParser is an abstract class which interfaces with Libxml2.; Libxml2 is the XML C parser and toolkit developed for the Gnome; project. The libxml library provides two interfaces to the parser, a DOM; style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are; a SAX interface and DOM interface of libxml. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TXMLParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:678,Integrability,interface,interface,678,". TXMLParser. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLParser. class TXMLParser: public TObject, public TQObject. TXMLParser. TXMLParser is an abstract class which interfaces with Libxml2.; Libxml2 is the XML C parser and toolkit developed for the Gnome; project. The libxml library provides two interfaces to the parser, a DOM; style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are; a SAX interface and DOM interface of libxml. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TXMLParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:9062,Integrability,message,message,9062,"oidStopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInitializeContext(); voidTObject::MakeZombie(); virtual voidOnValidateError(const TString& message); virtual voidOnValidateWarning(const TString& message); virtual voidReleaseUnderlying(); virtual voidSetParseCode(Int_t code). private:. TXMLParser&operator=(const TXMLParser&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_t",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:9117,Integrability,message,message,9117,"oidStopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInitializeContext(); voidTObject::MakeZombie(); virtual voidOnValidateError(const TString& message); virtual voidOnValidateWarning(const TString& message); virtual voidReleaseUnderlying(); virtual voidSetParseCode(Int_t code). private:. TXMLParser&operator=(const TXMLParser&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_t",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10513,Integrability,message,message,10513,"ed:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& )",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10657,Integrability,message,message,10657,"ignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const cha",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10844,Integrability,message,message,10844,"ool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStop",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:11006,Integrability,message,messages,11006,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:9941,Security,validat,validate,9941,"const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidInitializeContext(); voidTObject::MakeZombie(); virtual voidOnValidateError(const TString& message); virtual voidOnValidateWarning(const TString& message); virtual voidReleaseUnderlying(); virtual voidSetParseCode(Int_t code). private:. TXMLParser&operator=(const TXMLParser&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns t",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10294,Security,validat,validate,10294,"::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occu",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10970,Security,validat,validation,10970,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLParser.html:10982,Usability,clear,clear,10982,"idateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occured while parsing file; -5: Document is not well-formed. void SetStopOnError(Bool_t stop = kTRUE); Set parser stops in case of error:; stop = true, stops on error; stop = false, continue parsing on error... TXMLParser& operator=(const TXMLParser& ). Bool_t GetValidate() const; { return fValidate; }. Bool_t GetReplaceEntities() const; { return fReplaceEntities; }. Int_t ParseFile(const char* filename). Int_t ParseBuffer(const char* contents, Int_t len). Int_t GetParseCode() const; { return fParseCode; }. Bool_t GetStopOnError() const; { return fStopError; }. const char * GetValidateError() const; { return fValidateError; }. const char * GetVa",MatchSource.WIKI,root/html534/TXMLParser.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLParser.html
https://root.cern/root/html534/TXMLPlayer.html:2640,Availability,avail,available,2640," - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read; object from xml file:. TXmlFile file(""test.xml""); // open xml file; file.ls(); // show list of keys in file; TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; file.Close();. To write object to file:. TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; TExample* ex1 = new TExample;; outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; outfile.Close();. Complete example for generating and using of external ",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:4870,Availability,error,error,4870,,MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:4954,Availability,error,error,4954," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:602,Modifiability,inherit,inherited,602,". TXMLPlayer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLPlayer. class TXMLPlayer: public TObject. Class for xml code generation; It should be used for generation of xml steramers, which could be used outside root; environment. This means, that with help of such streamers user can read and write; objects from/to xml file, which later can be accepted by ROOT. At the moment supported only classes, which are not inherited from TObject; and which not contains any TObject members. To generate xml code:. 1. ROOT library with required classes should be created.; In general, without such library non of user objects can be stored and; retrived from any ROOT file. 2. Generate xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments f",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:2880,Modifiability,inherit,inheritance,2880,"ay of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read; object from xml file:. TXmlFile file(""test.xml""); // open xml file; file.ls(); // show list of keys in file; TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; file.Close();. To write object to file:. TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; TExample* ex1 = new TExample;; outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; outfile.Close();. Complete example for generating and using of external xml streamers can be taken from; http://www-linux.gsi.de/~linev/xmlreader.tar.gz. Any bug reports and requests for additional functionality are welcome. Sergey Linev, S.Linev@gsi.de. Function Members (Methods); ",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:951,Performance,load,load,951,". TXMLPlayer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLPlayer. class TXMLPlayer: public TObject. Class for xml code generation; It should be used for generation of xml steramers, which could be used outside root; environment. This means, that with help of such streamers user can read and write; objects from/to xml file, which later can be accepted by ROOT. At the moment supported only classes, which are not inherited from TObject; and which not contains any TObject members. To generate xml code:. 1. ROOT library with required classes should be created.; In general, without such library non of user objects can be stored and; retrived from any ROOT file. 2. Generate xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments f",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:1006,Performance,load,load,1006," Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XML; » TXMLPlayer. class TXMLPlayer: public TObject. Class for xml code generation; It should be used for generation of xml steramers, which could be used outside root; environment. This means, that with help of such streamers user can read and write; objects from/to xml file, which later can be accepted by ROOT. At the moment supported only classes, which are not inherited from TObject; and which not contains any TObject members. To generate xml code:. 1. ROOT library with required classes should be created.; In general, without such library non of user objects can be stored and; retrived from any ROOT file. 2. Generate xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl conta",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:2222,Security,access,accessed,2222,"reamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:3042,Security,access,access,3042," (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read; object from xml file:. TXmlFile file(""test.xml""); // open xml file; file.ls(); // show list of keys in file; TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; file.Close();. To write object to file:. TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; TExample* ex1 = new TExample;; outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; outfile.Close();. Complete example for generating and using of external xml streamers can be taken from; http://www-linux.gsi.de/~linev/xmlreader.tar.gz. Any bug reports and requests for additional functionality are welcome. Sergey Linev, S.Linev@gsi.de. Function Members (Methods); public:. TXMLPlayer(); TXMLPlayer(const TXMLPlayer&); virtual~TXMLPlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); ",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:10715,Security,access,access,10715,"on; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void WriteSTLarg(ostream& fs, const char* accname, int argtyp, Bool_t isargptr, TClass* argcl); Produce code to write argument of stl container to xml file. Bool_t ProduceSTLstreamer(ostream& fs, TClass* cl, TStreamerSTL* el, Bool_t isWriting); Produce code of ",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:3243,Testability,test,test,3243,"ember name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated streamers resolve inheritance tree for given class. This allows to have; array (or vector) of object pointers on some basic class, while objects of derived; class(es) are used. To access data from xml files, user should use TXmlFile class, which is different from; ROOT TXMLFile, but provides very similar functionality. For example, to read; object from xml file:. TXmlFile file(""test.xml""); // open xml file; file.ls(); // show list of keys in file; TExample* ex1 = (TExample*) file.Get(""ex1"", TExample_streamer); // get object; file.Close();. To write object to file:. TXmlFile outfile(""test2.xml"", ""recreate""); // create xml file; TExample* ex1 = new TExample;; outfile.Write(ex1, ""ex1"", TExample_streamer); // write object to file; outfile.Close();. Complete example for generating and using of external xml streamers can be taken from; http://www-linux.gsi.de/~linev/xmlreader.tar.gz. Any bug reports and requests for additional functionality are welcome. Sergey Linev, S.Linev@gsi.de. Function Members (Methods); public:. TXMLPlayer(); TXMLPlayer(const TXMLPlayer&); virtual~TXMLPlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObjec",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:1632,Usability,simpl,simple,1632," xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated st",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:1683,Usability,simpl,simple,1683," xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated st",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:1739,Usability,simpl,simple,1739," xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated st",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:2024,Usability,simpl,simple,2024," xml streamers by root script like:. void generate() {; gSystem->Load(""libRXML.so""); // load ROOT xml library; gSystem->Load(""libuser.so""); // load user ROOT library. TList lst;; lst.Add(TClass::GetClass(""TUserClass1""));; lst.Add(TClass::GetClass(""TUserClass2""));. TXMLPlayer player;; player.ProduceCode(&lst, ""streamers""); // create xml streamers; }. 3. Copy ""streamers.h"", ""streamers.cxx"", ""TXmlFile.h"", ""TXmlFile.cxx"" files; to user project and compile them. TXmlFile class implementation can be taken; from http://www-linux.gsi.de/~linev/xmlfile.tar.gz. TXMLPlayer class generates one function per class, which called class streamer.; Name of such function for class TExample will be TExample_streamer. Following data members for streamed classes are supported:; - simple data types (int, double, float); - array of simple types (int[5], double[5][6]); - dynamic array of simple types (int* with comment field // [fSize]); - const char*; - object of any nonROOT class; - pointer on object; - array of objects; - array of pointers on objects; - stl string; - stl vector, list, deque, set, multiset, map, multimap; - allowed arguments for stl containers are: simple data types, string, object, pointer on object; Any other data member can not be (yet) read from xml file and write to xml file. If data member of class is private or protected, it can not be accessed via; member name. Two alternative way is supported. First, if for class member fValue; exists function GetValue(), it will be used to get value from the class, and if; exists SetValue(), it will be used to set apropriate data member. Names of setter; and getter methods can be specified in comments filed like:. int fValue; // *OPTION={GetMethod=""GetV"";SetMethod=""SetV""}. If getter or setter methods does not available, address to data member will be; calculated as predefined offeset to object start address. In that case generated code; should be used only on the same platform (OS + compiler), where it was generated. Generated st",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:10336,Usability,simpl,simple,10336,"[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl,",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:10431,Usability,simpl,simple,10431,":. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void Writ",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLPlayer.html:10586,Usability,simpl,simple,10586,"XmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void WriteSTLarg(ostream& fs, const char* accname, int argtyp, Bool_t isargptr, TClass* argcl); Produce code to write argument of ",MatchSource.WIKI,root/html534/TXMLPlayer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLPlayer.html
https://root.cern/root/html534/TXMLSetup.html:3896,Availability,error,error,3896,"rom string. TXMLSetup(const TXMLSetup& src); copy sonstructor of TXMLSetup class. ~TXMLSetup(); TXMLSetup class destructor. TString GetSetupAsString(); return setup values as string. Bool_t IsValidXmlSetup(const char* setupstr); checks if string is valid setup. Bool_t ReadSetupFromStr(const char* setupstr); get values from string. void PrintSetup(); show setup values. const char* XmlConvertClassName(const char* name); convert class name to exclude any special symbols like ':', '<' '>' ',' and spaces. const char* XmlClassNameSpaceRef(const TClass* cl); produce string which used as reference in class namespace definition. const char* XmlGetElementName(const TStreamerElement* el); return converted name for TStreamerElement. const char* GetElItemName(TStreamerElement* el); get item name for given element. TClass* XmlDefineClass(const char* xmlClassName); define class for the converted class name, where; special symbols were replaced by '_'. Int_t AtoI(const char* sbuf, Int_t def = 0, const char* errinfo = 0); converts string to integer.; if error, returns default value. EXMLLayout GetXmlLayout() const; { return fXmlLayout; }. Bool_t IsStoreStreamerInfos() const; { return fStoreStreamerInfos; }. Bool_t IsUseDtd() const; { return fUseDtd; }. Bool_t IsUseNamespaces() const; { return fUseNamespaces; }. void SetXmlLayout(TXMLSetup::EXMLLayout layout); { fXmlLayout = layout; }. void SetStoreStreamerInfos(Bool_t iConvert = kTRUE); { fStoreStreamerInfos = iConvert; }. void SetUsedDtd(Bool_t use = kTRUE); { fUseDtd = use; }. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); { fUseNamespaces = iUseNamespaces; }. Int_t GetNextRefCounter(); { return fRefCounter++; }. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXMLSetup.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXMLSetup.html
https://root.cern/root/html534/TXNetFile.html:698,Availability,toler,tolerance,698,". TXNetFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtu",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:4234,Availability,error,error,4234,"ateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; virtual TFile::EAsyncOpenStatusGetAsyncOpenStatus(); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; virtual ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:4318,Availability,error,error,4318,"t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTFile::DrawMap(const char* keys = ""*"", Option_t* option = """")MENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTFile::FillBuffer(char*& buffer); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; virtual TFile::EAsyncOpenStatusGetAsyncOpenStatus(); Int_tTFile::GetBestBuffer() const; virtual Int_tTDirectoryFile::GetBufferSize() const; virtual Long64_tTFile::GetBytesRead() const; virtual Long64_tTFile::GetBytesReadExtra() cons",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:27353,Availability,error,error,27353,"1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note:",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:27578,Availability,error,errors,27578,".]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t B",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:27769,Availability,error,errors,27769,"ile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. vo",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:27900,Availability,error,errors,27900,", TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile:",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:28329,Availability,failure,failure,28329,"l version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:28671,Availability,error,errors,28671,"File implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:1037,Integrability,message,messages,1037,". TXNetFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtu",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:1119,Integrability,message,messages,1119,"members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:1207,Integrability,message,message,1207,"members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:22230,Integrability,protocol,protocol,22230,e if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Int_tTNetFile::fNetoptinitial network options (used for ReOpen()); Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tTNetFile::fProtocolrootd protocol level; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TSocket*TNetFile::fSocketconnection to rootd server; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TStringTNetFile::fUserremote user name; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writabl,MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:25129,Integrability,protocol,protocol,25129,"for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options fiel",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:27312,Integrability,protocol,protocol,27312,"e-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, T",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:1390,Modifiability,config,configurable,1390,"d to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* mot",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:25141,Modifiability,extend,extended,25141,"for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options fiel",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:25699,Modifiability,variab,variable,25699,"st char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:26313,Modifiability,variab,variables,26313,"]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol vers",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:29646,Modifiability,variab,variables,29646," by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:567,Performance,load,load,567,". TXNetFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtu",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:12688,Performance,cache,cacheDir,12688,"ecover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetCache(); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTNetFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetO",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:12815,Performance,cache,cache,12815,"Open(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetCache(); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTNetFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::Set",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:12934,Performance,cache,cache,12934,"rtual voidResetCache(); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTNetFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache, TObject* tree = 0, TFile::ECacheAction action = kDisconnect); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:18088,Performance,cache,cachesz,18088,"roofinfdir); voidTObject::MakeZombie(); voidTNetFile::PrintError(const char* where, Int_t err); Int_tTFile::ReadBufferViaCache(char* buf, Int_t len); Int_tTNetFile::Recv(Int_t& status, EMessageTypes& kind); voidTDirectory::RegisterContext(TDirectory::TContext* ctxt); virtual Int_tTFile::SysRead(Int_t fd, void* buf, Int_t len); virtual Long64_tTFile::SysSeek(Int_t fd, Long64_t offset, Int_t whence); virtual Int_tTFile::SysSync(Int_t fd); virtual Int_tTFile::SysWrite(Int_t fd, const void* buf, Int_t len); voidTDirectory::UnregisterContext(TDirectory::TContext* ctxt); Int_tTFile::WriteBufferViaCache(const char* buf, Int_t len). private:. TXNetFile(const TXNetFile&); voidCreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); static voidFormUrl(TUrl uut, TString& uu); static Int_tGetRootdProtocol(TSocket* s); virtual voidInit(Bool_t create); Bool_tOpen(Option_t* option, Bool_t parallelopen); TXNetFile&operator=(const TXNetFile&); Int_tParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); static voidSetEnv(); voidSynchronizeCacheSize(); virtual Int_tSysClose(Int_t fd); virtual Int_tSysOpen(const char* pathname, Int_t flags, UInt_t mode); virtual Int_tSysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime). Data Members; public:. enum TFile::EAsyncOpenStatus { kAOSNotAsync; kAOSFailure; kAOSInProgress; kAOSSuccess; };; enum TFile::EOpenTimeOut { kInstantTimeout; kEternalTimeout; };; enum TFile::ECacheAction { kDisconnect; kDoNotDisconnect; };; enum TFile::EStatusBits { kRecovered; kHasReferences; kDevNull; kWriteError; kBinaryFile; kRedirected; };; enum TFile::ERelativeTo { kBeg; kCur; kEnd; };; enum TFile::[unnamed] { kStartBigFile; };; enum TFile::EFileType { kDefault; kLocal; kNet; kWeb; kFile; kMerge; };; enum TDirectoryFile::[unnamed] { kCloseDirectory; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsRefe",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:19953,Performance,cache,cache,19953,,MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:20015,Performance,cache,cache,20015,,MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:20087,Performance,cache,cache,20087,,MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:21979,Performance,cache,cache,21979,"ue if this is a pure archive file; Bool_tTFile::fIsRootFile!True is this is a ROOT file, raw file otherwise; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Int_tTNetFile::fNetoptinitial network options (used for ReOpen()); Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tTNetFile::fProtocolrootd protocol level; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TSocket*TNetFile::fSocketconnection to rootd server; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirec",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:22308,Performance,cache,cache,22308,r of the directory; Bool_tTFile::fMustFlush!True if the file buffers must be flushed; Int_tTFile::fNProcessIDsNumber of TProcessID written to this file; TStringTNamed::fNameobject identifier; Int_tTFile::fNbytesFreeNumber of bytes for free segments structure; Int_tTFile::fNbytesInfoNumber of bytes for StreamerInfo record; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; Int_tTNetFile::fNetoptinitial network options (used for ReOpen()); Bool_tTFile::fNoAnchorInName!True if we don't want to force the anchor to be appended to the file name; Long64_tTFile::fOffset!Seek offset cache; TList*TFile::fOpenPhases!Time info about open phases; TStringTFile::fOptionFile options; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; TObjArray*TFile::fProcessIDs!Array of pointers to TProcessIDs; Int_tTNetFile::fProtocolrootd protocol level; Int_tTFile::fReadCallsNumber of read calls ( not counting the cache calls ); TStringTFile::fRealNameEffective real file name (not original url); Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TSocket*TNetFile::fSocketconnection to rootd server; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TStringTNetFile::fUserremote user name; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirec,MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:23781,Performance,cache,cache,23781,"eekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TSocket*TNetFile::fSocketconnection to rootd server; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TStringTNetFile::fUserremote user name; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size.",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:23811,Performance,cache,cached,23811,"eekDirLocation of directory on file; Long64_tTFile::fSeekFreeLocation on disk of free segments structure; Long64_tTFile::fSeekInfoLocation on disk of StreamerInfo record; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TSocket*TNetFile::fSocketconnection to rootd server; Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TStringTNetFile::fUserremote user name; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size.",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:25208,Performance,load,load,25208,"for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options fiel",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:26397,Performance,cache,cache,26397,"nnection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real cr",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:26471,Performance,cache,cachesz,26471,"; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:26612,Performance,cache,cache,26612,"ion of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t le",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:26828,Performance,concurren,concurrently,26828,"; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:26977,Performance,cache,cachesz,26977,"nizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:27105,Performance,cache,cache,27105,"nizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut, TString& uu); Form url for rootd socket. Int_t ParseOptions(const char* opts, Int_t& cachesz, Int_t& readaheadsz, Int_t& rmpolicy, Int_t& mxredir, Int_t& rastrategy, Int_t& readtrimblksz); Parse input options for cache parameters. void CreateXClient(const char* url, Option_t* option, Int_t netopt, Bool_t parallelopen); The real creation work is done here. Int_t GetRootdProtocol(TSocket* s); Find out the remote rootd protocol version.; Returns -1 in case of error. Bool_t Open(Option_t* option, Bool_t parallelopen); The real creation work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:28495,Performance,latency,latency,28495," work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClo",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:29702,Performance,cache,cache,29702," by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:29771,Performance,cache,cache,29771," by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see parent's method for more details). Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Override TNetFile::SysOpen (see parent's method for more details). void SetEnv(); Set the relevant environment variables. void SynchronizeCacheSize(); Synchronize the cache size; Alternative purging policy. void ResetCache(); Reset the cache. Int_t GetBytesToPrefetch() const; Max number of bytes to prefetch. void Print(Option_t* option = """") const; Print the local statistics. TXNetFile(const TXNetFile& ); attempts to Init() for this object only; Methods. TXNetFile& operator=(const TXNetFile& ). TXNetFile(); {}. » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:746,Safety,timeout,timeouts,746,". TXNetFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtu",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:790,Safety,timeout,timeout,790,". TXNetFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NETX; » TXNetFile. class TXNetFile: public TNetFile. TXNetFile. Authors: Alvise Dorigo, Fabrizio Furano; INFN Padova, 2003; Interfaced to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtu",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:13891,Safety,timeout,timeout,13891,"dTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionAlgorithm(Int_t algorithm = 0); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTFile::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_t* option = "">""); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:28482,Safety,avoid,avoiding,28482," work is done here. Bool_t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile, If ReadBuffers; is supported by xrootd it will try to gt the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClo",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:25934,Security,access,access,25934,"st char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getting a valid access to the remote; server the client is connected to using GetAccessToSrv() method,; recognizing the remote server (if an old rootd the TNetFile's Create; method will be called). The options field of the URL can be used for the following purposes:; a. open a non-ROOT generic file; ""root://server1:port1[,server2:port2,...]/pathfile?filetype=raw""; b. re-check the environment variables; ""root://server1:port1[,server2:port2,...]/pathfile?checkenv""; c. set the cache size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?cachesz=20000000""; d. set the read-ahead size (in bytes); ""root://server1:port1[,server2:port2,...]/pathfile?readaheadsz=100000""; e. set the cache remove policy; ""root://server1:port1[,server2:port2,...]/pathfile?rmpolicy=1""; f. set the max number of redirections; ""root://server1:port1[,server2:port2,...]/pathfile?mxredir=2""; (multiple options can be set concurrently). ~TXNetFile(); Destructor. void FormUrl(TUrl uut",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:1302,Testability,log,log,1302,"d to the standalone client (XrdClient): G. Ganis, CERN. TXNetFile is an extension of TNetFile able to deal with new xrootd; server. Its new features are:; - Automatic server kind recognition (xrootd load balancer, xrootd; data server, old rootd); - Backward compatibility with old rootd server (acts as an old; TNetFile); - Fault tolerance for read/write operations (read/write timeouts; and retry); - Internal connection timeout (tunable indipendently from the OS; one) handled by threads; - handling of redirections from server; - Single TCP physical channel for multiple TXNetFile's instances; inside the same application; So, each TXNetFile object client must send messages containing; its ID (streamid). The server, of course, will respond with; messages containing the client's ID, in order to make the client; able to recognize its message by matching its streamid with that; one contained in the server's response.; - Tunable log verbosity level (0 = nothing, 3 = dump read/write; buffers too!); - Many parameters configurable via TEnv facility (see SetParm(); methods). Function Members (Methods); public:. TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectoryFile::Browse(TBrowser* b); virtual voidTDirectoryFile::Build(TFile* motherFile = 0, TDirectory* mot",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:1652,Testability,log,logicalurl,1652," TXNetFile(); TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); virtual~TXNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtu",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFile.html:24991,Testability,log,logicalurl,24991,"e::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. XrdClient*fClientHandle to the client object; void*fInitMtxProtects fInitDone, serializes the; Bool_tfIsRootdNature of remote file server; static TFileStager*fgFileStagerStager for IsStaged checks; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetFile(const char* url, Option_t* option = """", const char* fTitle = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE, const char* logicalurl = 0); Create a TXNetFile object. A TXNetFile object is the same as a TNetFile; (from which the former derives) except that the protocol is extended to; support dealing with new xrootd data server or xrootd load balancer; server. The ""url"" argument must be of the form. root://server1:port1[,server2:port2,...,serverN:portN]/pathfile,. Note that this means that multiple servers (>= 1) can be specified in; the url. The connection will try to connect to the first server:port; and if that does not succeed, it will try the second one, and so on; until it finds a server that will respond. See the TNetFile documentation for the description of the other arguments. The creation consists of internal variable settings (most important is; the client's domain), creation of a TXUrl array containing all specified; urls (a single url is serverX:portX/pathfile), trying to connect to the; servers calling Connect() method, getti",MatchSource.WIKI,root/html534/TXNetFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFile.html
https://root.cern/root/html534/TXNetFileStager.html:1408,Availability,error,error,1408," stager = """"); TXNetFileStager(const TXNetFileStager&); virtual~TXNetFileStager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TStringTFileStager::GetPathName(TObject* o); virtual TList*TFileStager::GetStaged(TCollection* pathlist); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_t",MatchSource.WIKI,root/html534/TXNetFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFileStager.html
https://root.cern/root/html534/TXNetFileStager.html:1492,Availability,error,error,1492,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TStringTFileStager::GetPathName(TObject* o); virtual TList*TFileStager::GetStaged(TCollection* pathlist); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgf",MatchSource.WIKI,root/html534/TXNetFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFileStager.html
https://root.cern/root/html534/TXNetFileStager.html:6221,Integrability,interface,interface,6221,"char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. static voidGetPrefix(const char* url, TString& pfx). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfPrefixprefix to prepend to requests; TXNetSystem*fSysteminstance of the admin interface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void GetPrefix(const char* url, TString& pfx). TXNetFileStager(const char* stager = """"). virtual ~TXNetFileStager(). Bool_t IsStaged(const char* path). Int_t Locate(const char* path, TString& endpath). Int_t LocateCollection(TFileCollection* fc, Bool_t addDummyUrl = kFALSE). Bool_t Matches(const char* s). Bool_t Stage(const char* path, Option_t* opt = 0). Bool_t Stage(TCollection* pathlist, Option_t* opt = 0). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. void Print(Option_t* option = """") const. » Author: A. Peters, G. Ganis 7/2/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXNetFileStager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetFileStager.html
https://root.cern/root/html534/TXNetSystem.html:3693,Availability,error,error,3693,"_tConsistentWith(const char* path, void* dirptr); virtual voidTNamed::Copy(TObject& named) const; virtual intTSystem::CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidTSystem::DispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual char*TSystem::DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tTSystem::DynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tTSystem::Exec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTSystem::Exit(int code, Bool_t mode = kTRUE); virtual voidTSystem::ExitLoop(); virtual Bool_tTSystem::ExpandPathName(TString& path); virtual char*TSystem::ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*TSystem::FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeTSystem::GetAclicMode() const; virtual Int_tTSystem::GetAclicProperties() const; voidTSystem::GetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*TSystem::GetBuildArch() const; virtual const char*TSyste",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:3777,Availability,error,error,3777,"named) const; virtual intTSystem::CopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidTSystem::DispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual char*TSystem::DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tTSystem::DynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tTSystem::Exec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTSystem::Exit(int code, Bool_t mode = kTRUE); virtual voidTSystem::ExitLoop(); virtual Bool_tTSystem::ExpandPathName(TString& path); virtual char*TSystem::ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*TSystem::FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeTSystem::GetAclicMode() const; virtual Int_tTSystem::GetAclicProperties() const; voidTSystem::GetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*TSystem::GetBuildArch() const; virtual const char*TSystem::GetBuildCompiler() const; virtual const char*TSystem::GetBuildCompilerVersion() c",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:13044,Availability,mask,mask,13044,"ct::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(const char* linkedLibs); virtual voidTSystem::SetMakeExe(const char* directives); virtual voidTSystem::SetMakeSharedLib(const char* directives); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual T",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:14715,Availability,mask,mask,14715,"meTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSystem::SetObjExt(const char* objExt); virtual voidTSystem::SetProgname(const char* name); virtual intTSystem::SetSockOpt(int sock, int kind, int val); virtual voidTSystem::SetSoExt(const char* soExt); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTSystem::ShowOutput(RedirectHandle_t* h); virtual Int_tTNamed::Sizeof() const; virtual voidTSystem::Sleep(UInt_t milliSec); virtual TStringTSystem::SplitAclicMode(const char* filename, TString& mode, TString& args, TString& io) const; virtual voidTSystem::StackTrace(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual intTSystem::Symlink(const char* from, const char* to); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSystem::Syslog(ELogLevel level, const char* mess); virtual const char*TSystem::TempDirectory() const; virtual FILE*TSystem::TempFileName(TString& base, const char* dir = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual intTSystem::Umask(Int_t mask); virtual const char*TSystem::UnixPathName(const char* unixpathname); virtual intUnlink(const char* path); virtual voidTSystem::Unload(const char* module); virtual voidTSystem::Unsetenv(const char* name); virtual voidTObject::UseCurrentStyle(); virtual intTSystem::Utime(const char* file, Long_t modtime, Long_t actime); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual char*TSystem::Which(const char* search, const char* file, EAccessMode mode = kFileExists); virtual const char*TSystem::WorkingDirectory(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:18843,Availability,mask,mask,18843,"directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files w",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:18890,Availability,mask,mask,18890,"directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files w",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:18971,Availability,mask,masks,18971,"directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files w",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:20843,Availability,failure,failure,20843,"s waiting. private:. TStringfDirCurrent directory; TStringfDirEntryLast dir entry ; XrdClientVector<XrdOucString>fDirListBuffer for directory content; Bool_tfDirListValidfDirList content valid ?; void*fDirpDirectory pointer; Bool_tfIsRootdNature of remote file server; Bool_tfIsXRootdNature of remote file server; TStringfUrlInitial url; static THashListfgAddrFQDNCross-table address<->FQDN; static THashListfgAdminHashList of existing XrdClientAdmin; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetSystem(Bool_t owner = kTRUE); Create system management class without connecting to server. TXNetSystem(const char* url, Bool_t owner = kTRUE); Create system management class and connect to server specified by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the o",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:21094,Availability,error,error,21094," remote file server; Bool_tfIsXRootdNature of remote file server; TStringfUrlInitial url; static THashListfgAddrFQDNCross-table address<->FQDN; static THashListfgAdminHashList of existing XrdClientAdmin; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetSystem(Bool_t owner = kTRUE); Create system management class without connecting to server. TXNetSystem(const char* url, Bool_t owner = kTRUE); Create system management class and connect to server specified by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of th",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:21675,Availability,avail,available,21675,"ed by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:22869,Availability,error,error,22869,"essPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » ",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:23081,Energy Efficiency,allocate,allocated,23081,"he file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:9874,Integrability,protocol,protocol,9874,"l Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual intTSystem::Link(const char* from, const char* to); virtual voidTSystem::ListLibraries(const char* regexp = """"); virtual voidTSystem::ListSymbols(const char* module, const char* re = """"); virtual intTSystem::Load(const char* module, const char* entry = """", Bool_t system = kFALSE); virtual Int_tLocate(const char* path, TString& endurl); virtual voidTNamed::ls(Option_t* option = """") const; virtual Int_tMakeDirectory(const char* dir); voidTObject::MayNotUse(const char* method) const; virtual intTSystem::mkdir(const char* name, Bool_t recursive = kFALSE); virtual Long_tTSystem::NextTimeOut(Bool_t mode); virtual Bool_tTObject::Notify(); virtual voidTSystem::NotifyApplicationCreated(); virtual TTimeTSystem::Now(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual intTSystem::OpenConnection(const char* server, int port, int tcpwindowsize = -1, const char* protocol = ""tcp""); virtual void*OpenDirectory(const char* dir); virtual voidTSystem::Openlog(const char* name, Int_t options, ELogFacility facility); virtual FILE*TSystem::OpenPipe(const char* command, const char* mode); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Bool_tPrepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Int_tPrepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); virtual const char*TSystem::PrependPathName(const char* dir, TString& name); virtual voidTNamed::Print(Option",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:20941,Integrability,protocol,protocol,20941,"ctor<XrdOucString>fDirListBuffer for directory content; Bool_tfDirListValidfDirList content valid ?; void*fDirpDirectory pointer; Bool_tfIsRootdNature of remote file server; Bool_tfIsXRootdNature of remote file server; TStringfUrlInitial url; static THashListfgAddrFQDNCross-table address<->FQDN; static THashListfgAdminHashList of existing XrdClientAdmin; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetSystem(Bool_t owner = kTRUE); Create system management class without connecting to server. TXNetSystem(const char* url, Bool_t owner = kTRUE); Create system management class and connect to server specified by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); ",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:17080,Modifiability,config,configure,17080,l); static XrdClientAdmin*GetClientAdmin(const char* url); virtual void*GetDirPtr() const; static TStringGetKey(const char* url); voidInitXrdClient(). Data Members; public:. enum TSystem::EAclicMode { kDefault; kDebug; kOpt; };; enum TSystem::EAclicProperties { kFlatBuildDir; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSystem::EAclicModeTSystem::fAclicModeWhether the compilation should be done debug or opt; Int_tTSystem::fAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tTSystem::fBeepDurationUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSu,MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:20920,Modifiability,variab,variables,20920,"ctor<XrdOucString>fDirListBuffer for directory content; Bool_tfDirListValidfDirList content valid ?; void*fDirpDirectory pointer; Bool_tfIsRootdNature of remote file server; Bool_tfIsXRootdNature of remote file server; TStringfUrlInitial url; static THashListfgAddrFQDNCross-table address<->FQDN; static THashListfgAdminHashList of existing XrdClientAdmin; static Bool_tfgInitDoneAvoid initializing more than once; static Bool_tfgRootdBCControl rootd backward compatibility. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXNetSystem(Bool_t owner = kTRUE); Create system management class without connecting to server. TXNetSystem(const char* url, Bool_t owner = kTRUE); Create system management class and connect to server specified by url. XrdClientAdmin * Connect(const char* url); Init a connection to the server.; Returns a pointer to the appropriate instance of XrdClientAdmin or 0; in case of failure. void InitXrdClient(); One-time initialization of some communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); ",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:17697,Performance,optimiz,optimized,17697,"ionUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSyste",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:18447,Performance,cache,cache,18447,"ionUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSyste",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:463,Safety,detect,detects,463,". TXNetSystem. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NETX; » TXNetSystem. class TXNetSystem: public TNetSystem. TXNetSystem. Authors: Frank Winklmeier, Fabrizio Furano; INFN Padova, 2005. TXNetSystem is an extension of TNetSystem able to deal with new; xrootd servers. The class detects the nature of the server and; redirects the calls to TNetSystem in case of a rootd server. Function Members (Methods); public:. TXNetSystem(Bool_t owner = kTRUE); TXNetSystem(const char* url, Bool_t owner = kTRUE); virtual~TXNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidTSystem::AddTimer(TTimer* t); virtual intTSystem::AnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intTSystem::AnnounceUdpService(int port, int backlog); virtual intTSystem::AnnounceUnixService(int port, int backlog); virtual intTSystem::AnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tTSystem::ChangeDirectory(const char* path); virtual intTSystem::Chmod(const c",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:12153,Safety,timeout,timeout,12153,"Raw(int sock, void* buffer, int length, int flag); virtual Int_tTSystem::RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*TSystem::RemoveFileHandler(TFileHandler* fh); voidTSystem::RemoveOnExit(TObject* obj); virtual TSignalHandler*TSystem::RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*TSystem::RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*TSystem::RemoveTimer(TTimer* t); virtual intTSystem::Rename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidTSystem::ResetErrno(); virtual voidTSystem::ResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidTSystem::ResetSignals(); virtual voidTSystem::ResetTimer(TTimer*); virtual voidTSystem::Run(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkd",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:12217,Safety,timeout,timeout,12217,"TSystem::RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*TSystem::RemoveFileHandler(TFileHandler* fh); voidTSystem::RemoveOnExit(TObject* obj); virtual TSignalHandler*TSystem::RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*TSystem::RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*TSystem::RemoveTimer(TTimer* t); virtual intTSystem::Rename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidTSystem::ResetErrno(); virtual voidTSystem::ResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidTSystem::ResetSignals(); virtual voidTSystem::ResetTimer(TTimer*); virtual voidTSystem::Run(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSystem::Select(TList* active, Long_t timeout); virtual Int_tTSystem::Select(TFileHandler* fh, Long_t timeout); virtual intTSystem::SendBuf(int sock, const void* buffer, int length); virtual intTSystem::SendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidTSystem::SetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSystem::SetDynamicPath(const char* pathname); virtual voidTSystem::Setenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tTSystem::SetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:23228,Safety,avoid,avoid,23228,").; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:17806,Security,access,access,17806,"ionUsed by Beep(); Int_tTSystem::fBeepFreqUsed by Beep(); TStringTSystem::fBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringTSystem::fBuildCompilerCompiler used to build this ROOT; TStringTSystem::fBuildCompilerVersionCompiler version used to build this ROOT; TStringTSystem::fBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringTSystem::fBuildNodeDetailed information where ROOT was built; TSeqCollection*TSystem::fCompiledList of shared libs from compiled macros to be deleted; Bool_tTSystem::fDoneTrue if eventloop should be finished; TSeqCollection*TSystem::fFileHandlerList of file handlers; TStringTSystem::fFlagsDebugFlags for debug compilation; TStringTSystem::fFlagsOptFlags for optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Bool_tTNetSystem::fIsLocalTRUE if the path points to this host; Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTNetSystem::fLocalPrefixif fIsLocal, prefix to be prepend locally; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSyste",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:21926,Security,access,access,21926,"communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(con",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:21960,Security,access,access,21960,"communication variables for xrootd protocol. void* OpenDirectory(const char* dir); Open a directory. Returns a non-zero pointer (with no special; purpose) in case of success, 0 in case of error. void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(con",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:22109,Security,access,access,22109,"void FreeDirectory(void* dirp); Free(Close) the directory referenced by dirp. Int_t MakeDirectory(const char* dir); Create a directory. Return 0 on success, -1 otherwise. const char* GetDirEntry(void* dirp); Get directory entry for directory referenced by dirp.; Returns 0 in case there are no more entries. Int_t GetPathInfo(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed.; NOTICE: Not all information is available with an xrootd server. Bool_t ConsistentWith(const char* path, void* dirptr); Check consistency of this helper with the one required; by 'path' or 'dirptr'. Bool_t AccessPathName(const char* path, EAccessMode mode); Returns FALSE if one can access a file using the specified access mode.; NB: for the time being mode is ignored for XROOTD (just checks existence; of the file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the cal",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXNetSystem.html:23658,Security,hash,hash,23658,").; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXNetSystem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXNetSystem.html
https://root.cern/root/html534/TXProofMgr.html:2202,Availability,error,error,2202,"amed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCp(const char* src, const char* dst = 0, const char* opts = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*TProofMgr::CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDetachSession(Int_t, Option_t* = """"); virtual voidDetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFind(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFile(const char* remote, const char* local, const char* opt = 0); virtual const char*TObject::GetIconName() const; static TList*TProofMgr::GetListOfManagers(); virtual const char*GetMssUrl(Bool_t = kFALSE); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const;",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:2286,Availability,error,error,2286,"nst; virtual Int_tCp(const char* src, const char* dst = 0, const char* opts = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*TProofMgr::CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDetachSession(Int_t, Option_t* = """"); virtual voidDetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFind(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFile(const char* remote, const char* local, const char* opt = 0); virtual const char*TObject::GetIconName() const; static TList*TProofMgr::GetListOfManagers(); virtual const char*GetMssUrl(Bool_t = kFALSE); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TProofDesc*TProofMgr::GetProofDesc(Int_t id); virtual TProofDesc*TProofMgr:",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:10094,Availability,error,error,10094,"dlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:11208,Availability,avail,available,11208,"the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. const char * GetMssUrl(Bool_t = kFALSE); Gets the URL to be prepended to paths when accessing the MSS associated; with the connected cluster, if any. The information is retrieved from; the cluster the first time or if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:11678,Availability,error,error,11678,"deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. const char * GetMssUrl(Bool_t = kFALSE); Gets the URL to be prepended to paths when accessing the MSS associated; with the connected cluster, if any. The information is retrieved from; the cluster the first time or if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:12330,Availability,error,error,12330,"Bool_t = kFALSE); Gets the URL to be prepended to paths when accessing the MSS associated; with the connected cluster, if any. The information is retrieved from; the cluster the first time or if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'resca",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:13728,Availability,failure,failure,13728,"ession; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what =",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14009,Availability,failure,failure,14009," only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14074,Availability,avail,available,14074,"nored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0)",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14571,Availability,error,error,14571,"adBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileStat_t& st, const char* where = 0); Run 'stat' on one of the nodes. TObjString * Exec(Int_t act",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:16388,Availability,error,errors,16388," where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileStat_t& st, const char* where = 0); Run 'stat' on one of the nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has be",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:16461,Availability,error,error,16461,"at, FileStat_t& st, const char* where = 0); Run 'stat' on one of the nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the doc",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:16732,Availability,error,error,16732,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:17048,Availability,error,error,17048,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:474,Energy Efficiency,monitor,monitor,474,". TXProofMgr. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFX; » TXProofMgr. class TXProofMgr: public TProofMgr, public TXHandler. TXProofMgr. The PROOF manager interacts with the PROOF server coordinator to; create or destroy a PROOF session, attach to or detach from; existing one, and to monitor any client activity on the cluster.; At most one manager instance per server is allowed. Function Members (Methods); public:. TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); virtual~TXProofMgr(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TProof*AttachSession(Int_t id, Bool_t gui = kFALSE); virtual TProof*AttachSession(TProofDesc* d, Bool_t gui = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProofMgr::Close(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCp(const char* src, const char* dst = 0, const char* opts = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*TProofMgr::CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDetachSession(Int_t, Option_t* = """"); virtual voidDetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") c",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14247,Integrability,message,message,14247,"rn = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14338,Integrability,message,message,14338," save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* w",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14382,Integrability,message,message,14382," save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* w",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14452,Integrability,message,message,14452,"ect (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileS",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:14483,Integrability,message,message,14483,"ect (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the message or the file from where to take; the message.; The second argument specifies the user to which to send the message: if; empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. void Grep(const char* what, const char* how = 0, const char* where = 0); Run 'grep' on the nodes. void Find(const char* what = ""~/"", const char* how = ""-type f"", const char* where = 0); Run 'find' on the nodes. void Ls(const char* what = ""~/"", const char* how = 0, const char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileS",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:9931,Modifiability,variab,variables,9931,"dObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalida",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:13294,Modifiability,sandbox,sandboxes,13294," TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:15906,Modifiability,sandbox,sandbox,15906,"n the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileStat_t& st, const char* where = 0); Run 'stat' on one of the nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Eit",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:16964,Modifiability,sandbox,sandbox,16964,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:17011,Modifiability,sandbox,sandbox,17011,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:9953,Security,authenticat,authentication,9953,"Key; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:11311,Security,access,accessing,11311,"d for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. const char * GetMssUrl(Bool_t = kFALSE); Gets the URL to be prepended to paths when accessing the MSS associated; with the connected cluster, if any. The information is retrieved from; the cluster the first time or if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:11528,Security,access,accessible,11528,"ssion(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. const char * GetMssUrl(Bool_t = kFALSE); Gets the URL to be prepended to paths when accessing the MSS associated; with the connected cluster, if any. The information is retrieved from; the cluster the first time or if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session a",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:15840,Security,authoriz,authorizations,15840,"nst char* where = 0); Run 'ls' on the nodes. void More(const char* what, const char* how = 0, const char* where = 0); Run 'more' on the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileStat_t& st, const char* where = 0); Run 'stat' on one of the nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Pri",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:642,Testability,log,loglevel,642," TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); virtual~TXProofMgr(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TProof*AttachSession(Int_t id, Bool_t gui = kFALSE); virtual TProof*AttachSession(TProofDesc* d, Bool_t gui = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProofMgr::Close(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCp(const char* src, const char* dst = 0, const char* opts = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*TProofMgr::CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDetachSession(Int_t, Option_t* = """"); virtual voidDetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") c",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:1429,Testability,log,loglevel,1429," TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); virtual~TXProofMgr(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TProof*AttachSession(Int_t id, Bool_t gui = kFALSE); virtual TProof*AttachSession(TProofDesc* d, Bool_t gui = kFALSE); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProofMgr::Close(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCp(const char* src, const char* dst = 0, const char* opts = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*TProofMgr::CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDetachSession(Int_t, Option_t* = """"); virtual voidDetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") c",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:8655,Testability,log,loglevel,8655,"b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTail(const char* what, const char* how = 0, const char* where = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TFileCollection*TProofMgr::UploadFiles(TList* src, const char* mss, const char* dest = 0); static TFileCollection*TProofMgr::UploadFiles(const char* txtfile, const char* mss, const char* dest = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidCpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); TObjString*Exec(Int_t action, const char* what, const char* how, const char* where); Int_tInit(Int_t loglevel = -1). Data Members; public:. enum TProofMgr::EServType { kProofd; kXProofd; kProofLite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for manager",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:9733,Testability,log,loglevel,9733," };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" force",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:9849,Testability,log,loglevel,9849,"dObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalida",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:12472,Testability,log,logs,12472," if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:12480,Testability,log,log,12480," if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:13003,Testability,log,logs,13003,"and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a com",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:13294,Testability,sandbox,sandboxes,13294," TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns a TProofLog object (to be deleted by the caller) on success,; 0 if something wrong happened. TObjString * ReadBuffer(const char* file, Long64_t ofs, Int_t len); Read, via the coordinator, 'len' bytes from offset 'ofs' of 'file'.; Returns a TObjString with the content or 0, in case of failure. TObjString * ReadBuffer(const char* file, const char* pattern); Read, via the coordinator, 'fin' filtered. If 'pattern' starts with '|',; it represents a command filtering the output. Elsewhere, it is a grep; pattern. Returns a TObjString with the content or 0 in case of failure. void ShowROOTVersions(); Display what ROOT versions are available on the cluster. Int_t SetROOTVersion(const char* tag); Set the default ROOT version to be used. Int_t SendMsgToUsers(const char* msg, const char* usr = 0); Send a message to connected users. Only superusers can do this.; The first argument specifies the",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:15906,Testability,sandbox,sandbox,15906,"n the nodes. Int_t Rm(const char* what, const char* how = 0, const char* where = 0); Run 'rm' on the nodes. The user is prompted before removal, unless 'how'; contains ""--force"" or a combination of single letter options including 'f',; e.g. ""-fv"". void Tail(const char* what, const char* how = 0, const char* where = 0); Run 'tail' on the nodes. Int_t Md5sum(const char* what, TString& sum, const char* where = 0); Run 'md5sum' on one of the nodes. Int_t Stat(const char* what, FileStat_t& st, const char* where = 0); Run 'stat' on one of the nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Eit",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:16964,Testability,sandbox,sandbox,16964,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofMgr.html:17011,Testability,sandbox,sandbox,17011,"e nodes. TObjString * Exec(Int_t action, const char* what, const char* how, const char* where); Execute 'action' (see EAdminExecType in 'XProofProtocol.h') at 'where'; (default master), with options 'how', on 'what'. The option specified by; 'how' are typically unix option for the relate commands. In addition to; the unix authorizations, the limitations are:. action = kRm limited to the sandbox (but basic dirs cannot be; removed) and on files owned by the user in the; allowed directories; action = kTail option '-f' is not supported and will be ignored. Int_t GetFile(const char* remote, const char* local, const char* opt = 0); Get file 'remote' into 'local' from the master.; If opt contains ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; If opt contains ""silent"" standard notificatons are not printed (errors and; warnings and prompts still are).; Return 0 on success, -1 on error. Int_t PutFile(const char* local, const char* remote, const char* opt = 0); Put file 'local'to 'remote' to the master; If opt is ""force"", the file, if it exists remotely, is copied in all cases,; otherwise a check is done on the MD5sum.; Return 0 on success, -1 on error. void CpProgress(const char* pfx, Long64_t bytes, Long64_t size, TStopwatch* watch, Bool_t cr = kFALSE); Print file copy progress. Int_t Cp(const char* src, const char* dst = 0, const char* opts = 0); Copy files in/out of the sandbox. Either 'src' or 'dst' must be in the; sandbox.; Return 0 on success, -1 on error. Bool_t IsValid() const; { return fSocket; }. TProof * AttachSession(Int_t id, Bool_t gui = kFALSE); { return TProofMgr::AttachSession(id, gui); }. » Author: G. Ganis, Nov 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofMgr.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofMgr.html
https://root.cern/root/html534/TXProofServ.html:4205,Availability,error,error,4205,"t::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDi",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:4289,Availability,error,error,4289,"Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:4433,Availability,error,error,4433,"onst char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*TProofServ::GetCacheLock(); const char*TProofServ::GetConfDir() const; const char*TProofServ::GetConfFile() const; Float_tTProofServ::GetCpuTime() const; const char*TProofServ::GetDataDir() const; const char*TProofServ::GetDataDirOpts() const; static TMap*TProofServ::GetDataSetNodeMap(TF",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:10821,Availability,error,error,10821,"s(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char* ord); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; vir",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:10942,Availability,error,error,10942,"l Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidReleaseWorker(const char* ord); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTProofServ::SendAsynMessage(const char",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:15926,Availability,error,error,15926,"iver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTProofServ::DeletePlayer(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofServ::Fork(); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; Int_tTProofServ::GetSessionStatus(); virtual voidTProofServ::HandleArchive(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleCache(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleCheckFile(TMessage* mess, TString* slb = 0); virtual Int_tTProofServ::HandleDataSets(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleFork(TMessage* mess); virtual Int_tTProofServ::HandleLibIncPath(TMessage* mess); virtual voidTProofServ::HandleProcess(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleQueryList(TMessage* mess); virtual voidTProofServ::HandleRemove(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleRetrieve(TMessage* mess, TString* slb = 0); virtual voidTProofServ::HandleSubmerger(TMessage* mess); virtual Int_tTProofServ::HandleWorkerLists(TMessage* mess); virtual voidTApplication::Help(const char* line); Bool_tTProofServ::IsIdle(); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); virtual voidTProofServ::MakePlayer(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual voidTProofServ::ProcessNext(TString* slb = 0); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh); Int_tTProofServ::SetupCommon(); Bool_tTProofServ::UnlinkDataDir(const char* path).",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:17160,Availability,avail,available,17160,"TProofServ::UnlinkDataDir(const char* path). private:. Int_tLockSession(const char* sessiontag, TProofLockPath** lck); virtual Int_tSetup(). Data Members; public:. enum TProofServ::EStatusBits { kHighMemory; };; enum TProofServ::EQueryAction { kQueryOK; kQueryModify; kQueryStop; kQueryEnqueued; };; enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TApplication::EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:17812,Availability,error,error,17812,"tion, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18046,Availability,alive,alive,18046,"_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void Rele",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18140,Availability,alive,alive,18140,"cation::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of la",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18266,Availability,error,error,18266,"tic TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: roo",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18506,Availability,error,error,18506,"inate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:19110,Deployability,release,release,19110,"inate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:19071,Integrability,message,message,19071,"inate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:4082,Safety,abort,abort,4082,"; voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); T",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18656,Safety,timeout,timeout,18656,"inate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18724,Safety,timeout,timeout,18724,"inate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18213,Testability,log,logo,18213,"rv::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TXSocketHandler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene ",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:7567,Usability,resume,resume,7567,"ofServ::GetOptions(Int_t* argc, char** argv); const char*TProofServ::GetOrdinal() const; const char*TProofServ::GetPackageDir() const; const char*TProofServ::GetPrefix() const; TProof*TProofServ::GetProof() const; Int_tTProofServ::GetProtocol() const; Int_tTProofServ::GetQuerySeqNum() const; Float_tTProofServ::GetRealTime() const; static Long_tTProofServ::GetResMemMax(); const char*TProofServ::GetService() const; const char*TProofServ::GetSessionDir() const; const char*TProofServ::GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*TProofServ::GetSocket() const; virtual const char*TObject::GetTitle() const; const char*TProofServ::GetTopSessionTag() const; Int_tTProofServ::GetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*TProofServ::GetUser() const; static Long_tTProofServ::GetVirtMemMax(); const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionGetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual Bool_tHandleError(const void* in = 0); virtual voidTProofServ::HandleException(Int_t sig); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual Bool_tHandleInput(const void* in = 0); virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidHandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual void",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXProofServ.html:18355,Usability,resume,resume,18355,"andler*fInputHandler; TXProofServInterruptHandler*fInterruptHandler; TStringfSockPath; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TXProofServ(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleUrgentData(); Handle high priority data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. TProofServ::EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); Get list of workers to be used from now on.; The list must be provided by the caller. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the input socket. void DisableTimeout(); Disable read timeout on the underlying socket. void EnableTimeout(); Enable read timeout on the underlying socket. void Terminate(Int_t status); Terminate the proof server. Int_t LockSession(const char* sessiontag, TProofLockPath** lck); Try locking query area of session tagged sessiontag.; The id of the locking file is returned in fid and must be; unlocked via UnlockQueryFile(fid). void ReleaseWorker(const char* ord); Send message to intermediate coordinator to release worker of last ordinal; ord. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically genera",MatchSource.WIKI,root/html534/TXProofServ.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXProofServ.html
https://root.cern/root/html534/TXSlave.html:1633,Availability,error,error,1633,"thod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TSlave::GetGroup() const; virtual const char*TObject::GetIconName() const; const char*TSlave::GetImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:1717,Availability,error,error,1717,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TSlave::GetGroup() const; virtual const char*TObject::GetIconName() const; const char*TSlave::GetImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort(",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9730,Availability,ping,ping,9730,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9749,Availability,error,error,9749,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9814,Availability,alive,alive,9814,"es. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle err",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9924,Availability,error,error,9924,"ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptH",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10183,Availability,error,error,10183," Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 1",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10544,Availability,recover,recovered,10544,"e fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10785,Availability,error,error,10785,"e fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:8149,Integrability,protocol,protocol,8149,"EStatusBits { kOutputRequested; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTSlave::fArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tTSlave::fBytesReadbytes read by slave (info is obtained from slave); Float_tTSlave::fCpuTimeCPU time spent executing commands (info obtained from slave); TStringTSlave::fGroupslave's group id; TStringTSlave::fImageslave's image name; TFileHandler*TSlave::fInputinput handler related to this slave; TStringTSlave::fMsdmass storage domain of slave; TStringTSlave::fNameslave's hostname; TStringTSlave::fOrdinalslave's ordinal number; Int_tTSlave::fParallelnumber of active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10142,Integrability,protocol,protocol,10142,"e TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last ",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10274,Integrability,message,message,10274,"s technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10364,Integrability,message,message,10364,"e fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:7913,Performance,perform,performance,7913,"EStatusBits { kOutputRequested; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTSlave::fArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tTSlave::fBytesReadbytes read by slave (info is obtained from slave); Float_tTSlave::fCpuTimeCPU time spent executing commands (info obtained from slave); TStringTSlave::fGroupslave's group id; TStringTSlave::fImageslave's image name; TFileHandler*TSlave::fInputinput handler related to this slave; TStringTSlave::fMsdmass storage domain of slave; TStringTSlave::fNameslave's hostname; TStringTSlave::fOrdinalslave's ordinal number; Int_tTSlave::fParallelnumber of active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:6726,Safety,abort,abort,6726," static voidTSlave::SetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidFlushSocket(); virtual voidInterrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tPing(); virtual TObjString*SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tSendGroupPriority(const char* grp, Int_t priority); virtual voidSetAlias(const char* alias); voidTSlave::SetSocket(TSocket* s); virtual voidTSlave::SetStatus(Int_t st); virtual voidStopProcess(Bool_t abort, Int_t timeout). private:. static Int_tGetProofdProtocol(TSocket* s); voidInit(const char* host, Int_t stype); voidParseBuffer(). Data Members; public:. enum TSlave::ESlaveType { kMaster; kSlave; };; enum TSlave::ESlaveStatus { kInvalid; kActive; kInactive; };; enum TSlave::EStatusBits { kOutputRequested; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTSlave::fArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tTSlave::fBytesReadbytes read by slave (info is obtained from slave); Float_tTSlave::fCpuTimeCPU time spent executing commands (info o",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:6739,Safety,timeout,timeout,6739," static voidTSlave::SetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidFlushSocket(); virtual voidInterrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tPing(); virtual TObjString*SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tSendGroupPriority(const char* grp, Int_t priority); virtual voidSetAlias(const char* alias); voidTSlave::SetSocket(TSocket* s); virtual voidTSlave::SetStatus(Int_t st); virtual voidStopProcess(Bool_t abort, Int_t timeout). private:. static Int_tGetProofdProtocol(TSocket* s); voidInit(const char* host, Int_t stype); voidParseBuffer(). Data Members; public:. enum TSlave::ESlaveType { kMaster; kSlave; };; enum TSlave::ESlaveStatus { kInvalid; kActive; kInactive; };; enum TSlave::EStatusBits { kOutputRequested; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTSlave::fArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tTSlave::fBytesReadbytes read by slave (info is obtained from slave); Float_tTSlave::fCpuTimeCPU time spent executing commands (info o",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9955,Safety,abort,abort,9955,"rd, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. voi",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9968,Safety,timeout,timeout,9968,"rd, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. voi",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:9988,Safety,abort,abort,9988,"rd, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. voi",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSlave.html:10544,Safety,recover,recovered,10544,"e fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. void FlushSocket(); Clean any input on the socket. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSlave.html
https://root.cern/root/html534/TXSocket.html:2048,Availability,error,error,2048,"e(Bool_t attach = kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFlush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() co",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:2132,Availability,error,error,2132," Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFlush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; Int_tGetInterrupt(Bool_t& forward); TTimeStampTSocket::GetLastUsage(); virtual ",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:4878,Availability,error,error,4878,"tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; Int_tGetXrdProofdVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; Bool_tIsAWait(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tIsInterrupt(); Bool_tTObject::IsOnHeap() const; Bool_tIsServProofd(); virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Bool_tPing(const char* ord = 0); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual UnsolRespProcResultProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*&",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11685,Availability,error,error,11685,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:15675,Availability,error,error,15675,"pt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12395,Energy Efficiency,monitor,monitoring,12395,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11018,Integrability,protocol,protocol,11018,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for ",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11129,Integrability,message,messages,11129,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11305,Integrability,message,messages,11305,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11618,Integrability,message,messages,11618,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12033,Integrability,message,messages,12033,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12133,Integrability,message,messages,12133,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12633,Integrability,message,message,12633," for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processing. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : -1); }. void SetLocation(const char* loc = """"). void InitEnvs(). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0). virtual ~TXSocket(). void Close(Option_t* opt = """"). Bool_t Create(Bool_t attach = kFALSE). void DisconnectSession(Int_t id, Option_t* opt = """"). void DoError(int level, const char* location, const char* fmt, va_list va) const. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { re",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12752,Integrability,message,message,12752,"rupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processing. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : -1); }. void SetLocation(const char* loc = """"). void InitEnvs(). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0). virtual ~TXSocket(). void Close(Option_t* opt = """"). Bool_t Create(Bool_t attach = kFALSE). void DisconnectSession(Int_t id, Option_t* opt = """"). void DoError(int level, const char* location, const char* fmt, va_list va) const. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersi",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:14074,Integrability,interface,interfaces,14074," loglevel = -1, TXHandler* handler = 0). virtual ~TXSocket(). void Close(Option_t* opt = """"). Bool_t Create(Bool_t attach = kFALSE). void DisconnectSession(Int_t id, Option_t* opt = """"). void DoError(int level, const char* location, const char* fmt, va_list va) const. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersion() const; { return fXrdProofdVersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. vo",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:14430,Integrability,interface,interfaces,14430,"nt_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersion() const; { return fXrdProofdVersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:14867,Integrability,message,message,14867,"n->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; T",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11080,Performance,queue,queue,11080,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11187,Performance,queue,queue,11187,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11240,Performance,queue,queue,11240,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11846,Performance,queue,queue,11846,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12769,Performance,queue,queue,12769,"rupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processing. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : -1); }. void SetLocation(const char* loc = """"). void InitEnvs(). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0). virtual ~TXSocket(). void Close(Option_t* opt = """"). Bool_t Create(Bool_t attach = kFALSE). void DisconnectSession(Int_t id, Option_t* opt = """"). void DoError(int level, const char* location, const char* fmt, va_list va) const. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersi",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:14989,Performance,queue,queue,14989,"tions o); { fSendOpt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:15226,Performance,queue,queue,15226,"pt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:6415,Safety,timeout,timeout,6415,"ed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Bool_tPing(const char* ord = 0); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual UnsolRespProcResultProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); voidRemoteTouch(); virtual voidRemoveClientID(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); TObjString*SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tSendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidSendUrgent(Int_t type, Int_t int1, Int_t int2); voidSetAWait(Bool_t w = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterr",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:15547,Safety,timeout,timeout,15547,"pt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:10793,Security,authenticat,authentication,10793,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for ",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:11162,Security,access,access,11162,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:484,Testability,log,logbuf,484," TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0); virtual~TXSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreate(Bool_t attach = kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:502,Testability,log,loglevel,502," TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0); virtual~TXSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Bool_tCreate(Bool_t attach = kFALSE); static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidCtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableTimeout(); voidDisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:12232,Testability,log,login,12232,"ds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWhether the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queu",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:13042,Testability,log,logbuf,13042,"ting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processing. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : -1); }. void SetLocation(const char* loc = """"). void InitEnvs(). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0). virtual ~TXSocket(). void Close(Option_t* opt = """"). Bool_t Create(Bool_t attach = kFALSE). void DisconnectSession(Int_t id, Option_t* opt = """"). void DoError(int level, const char* location, const char* fmt, va_list va) const. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersion() const; { return fXrdProofdVersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(I",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocket.html:13060,Testability,log,loglevel,13060,"ting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processing. Int_t GetLowSocket() const; Auxilliary. { return (fConn ? fConn->GetLowSocket() : -1); }. void SetLocation(const char* loc = """"). void InitEnvs(). TXSocket(const char* url, Char_t mode = 'M', Int_t psid = -1, Char_t ver = -1, const char* logbuf = 0, Int_t loglevel = -1, TXHandler* handler = 0). virtual ~TXSocket(). void Close(Option_t* opt = """"). Bool_t Create(Bool_t attach = kFALSE). void DisconnectSession(Int_t id, Option_t* opt = """"). void DoError(int level, const char* location, const char* fmt, va_list va) const. Int_t GetClientID() const; { return -1; }. Int_t GetClientIDSize() const; { return 1; }. Int_t GetLogConnID() const; { return (fConn ? fConn->GetLogConnID() : -1); }. Int_t GetOpenError() const; { return (fConn ? fConn->GetOpenError() : -1); }. Int_t GetServType() const; { return (fConn ? fConn->GetServType() : -1); }. Int_t GetSessionID() const; { return (fConn ? fConn->GetSessionID() : -1); }. Int_t GetXrdProofdVersion() const; { return fXrdProofdVersion; }. Bool_t IsValid() const; { return (fConn ? (fConn->IsValid()) : kFALSE); }. Bool_t IsServProofd(). void RemoveClientID(); { }. void SetClientID(Int_t ); { }. void SetSendOpt(ESendRecvOptions o); { fSendOpt = o; }. void SetSessionID(I",MatchSource.WIKI,root/html534/TXSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocket.html
https://root.cern/root/html534/TXSocketHandler.html:3897,Availability,error,error,3897,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); intTFileHandler::GetFd() const; virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TXSocketHandler*GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXSocketHandler.html:3981,Availability,error,error,3981,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); intTFileHandler::GetFd() const; virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static TXSocketHandler*GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXSocketHandler.html:7757,Availability,mask,mask,7757," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Bool_tReadNotify(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTFileHandler::Remove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTFileHandler::ResetReadyMask(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTFileHandler::SetFd(int fd); virtual voidTFileHandler::SetInterest(Int_t mask); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFileHandler::SetReadReady(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTFileHandler::SetWriteReady(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tTFileHandler::WriteNotify().",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXSocketHandler.html:9883,Availability,mask,mask,9883,"ss, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). private:. TXSocketHandler(TFileHandler* h, TSocket* s); voidSetHandler(TFileHandler* h, TSocket* s). Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t Re",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXSocketHandler.html:9977,Availability,mask,mask,9977,"ss, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(). private:. TXSocketHandler(TFileHandler* h, TSocket* s); voidSetHandler(TFileHandler* h, TSocket* s). Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t Re",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXSocketHandler.html:400,Energy Efficiency,monitor,monitored,400,". TXSocketHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOFX; » TXSocketHandler. class TXSocketHandler: public TFileHandler. TXSocketHandler. Input handler for xproofd sockets. These sockets cannot be directly; monitored on their descriptor, because the reading activity goes via; the reader thread. This class allows to handle this problem. Function Members (Methods); public:. virtual~TXSocketHandler(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidTFileHandler::Add(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidTSysEvtHandler::DeActivate(); virtual voidTSysEvtHandler::DeActivated()SIGNAL ",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXSocketHandler.html:10503,Energy Efficiency,monitor,monitor,10503,"ket* s); voidSetHandler(TFileHandler* h, TSocket* s). Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXSocketHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html
https://root.cern/root/html534/TXTRU.html:3413,Availability,error,error,3413,,MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXTRU.html:3497,Availability,error,error,3497,,MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXTRU.html:10650,Energy Efficiency,allocate,allocated,10650,":ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py). private:. voidDumpPoints(int npoints, float* pointbuff) const; voidDumpPolygons(int npolygons, int* polybuff, int buffsize) const; voidDumpSegments(int nsegments, int* segbuff) const. Data Members; public:. enum EXYChecked { kUncheckedXY; kMalformedXY; kConvexCCW; kConvexCW; kConcaveCCW; kConcaveCW; };; enum EZChecked { kUncheckedZ; kMalformedZ; kConvexIncZ; kConvexDecZ; kConcaveIncZ; kConcaveDecZ; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTShape::fNumberShape number; Int_tfNxynumber of x-y points in the cross section; Int_tfNxyAllocnumber of x-y points allocated; Int_tfNznumber of z planes; Int_tfNzAllocnumber of z planes allocated; TXTRU::EXYCheckedfPolygonShapeCCW vs. CW, convex vs. concave; Float_t*fScale[fNzAlloc] array of scale factors (for each z); Bool_tfSplitConcave; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_t*fX0[fNzAlloc] array of x offsets (for each z); Float_t*fXvtx[fNxyAlloc] array of x positions; Float_t*fY0[fNzAlloc] array of y offsets (for each z); Float_t*fYvtx[fNxyAlloc] array of y positions; Float_t*fZ[fNzAlloc] array of z planes; TXTRU::EZCheckedfZOrderingincreasing or decreasing. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXTRU(); TXTRU shape - default constructor. TXTRU(const char* name, const char* title, const char* material, Int_t nyx, Int_t nz); TXTRU shape - normal constructor",MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXTRU.html:10721,Energy Efficiency,allocate,allocated,10721,":ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py). private:. voidDumpPoints(int npoints, float* pointbuff) const; voidDumpPolygons(int npolygons, int* polybuff, int buffsize) const; voidDumpSegments(int nsegments, int* segbuff) const. Data Members; public:. enum EXYChecked { kUncheckedXY; kMalformedXY; kConvexCCW; kConvexCW; kConcaveCCW; kConcaveCW; };; enum EZChecked { kUncheckedZ; kMalformedZ; kConvexIncZ; kConvexDecZ; kConcaveIncZ; kConcaveDecZ; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTShape::fNumberShape number; Int_tfNxynumber of x-y points in the cross section; Int_tfNxyAllocnumber of x-y points allocated; Int_tfNznumber of z planes; Int_tfNzAllocnumber of z planes allocated; TXTRU::EXYCheckedfPolygonShapeCCW vs. CW, convex vs. concave; Float_t*fScale[fNzAlloc] array of scale factors (for each z); Bool_tfSplitConcave; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_t*fX0[fNzAlloc] array of x offsets (for each z); Float_t*fXvtx[fNxyAlloc] array of x positions; Float_t*fY0[fNzAlloc] array of y offsets (for each z); Float_t*fYvtx[fNxyAlloc] array of y positions; Float_t*fZ[fNzAlloc] array of z planes; TXTRU::EZCheckedfZOrderingincreasing or decreasing. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXTRU(); TXTRU shape - default constructor. TXTRU(const char* name, const char* title, const char* material, Int_t nyx, Int_t nz); TXTRU shape - normal constructor",MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXTRU.html:12649,Energy Efficiency,allocate,allocated,12649,"Nz positions must be entered via TXTRU::DefineSection. TXTRU(const TXTRU& xtru); TXTRU copy constructor. ~TXTRU(); TXTRU destructor deallocates arrays. TXTRU& operator=(const TXTRU& rhs); Deep assignment operator. void Copy(TObject& xtru) const; TXTRU Copy method. void DefineSection(Int_t secNum, Float_t z, Float_t scale = 1., Float_t x0 = 0., Float_t y0 = 0.); Set z section iz information; expand size of array if necessary. void DefineVertex(Int_t pointNum, Float_t x, Float_t y). Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance from point px,py to a TXTRU; by calculating the closest approach to each corner. Float_t GetOutlinePointX(Int_t pointNum) const. Float_t GetOutlinePointY(Int_t pointNum) const. Float_t GetSectionX0(Int_t secNum) const. Float_t GetSectionY0(Int_t secNum) const. Float_t GetSectionScale(Int_t secNum) const. Float_t GetSectionZ(Int_t secNum) const. void Print(Option_t* option = """") const; Dump the info of this TXTRU shape; Option: ""xy"" to get x-y information; ""z"" to get z information; ""alloc"" to show full allocated arrays (not just used values). void SetPoints(Double_t* points) const; Create TXTRU points in buffer; order as expected by other methods (counterclockwise xy, increasing z). void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void SplitConcavePolygon(Bool_t split = kTRUE); (Dis)Enable the splitting of concave polygon outlines into; multiple convex polygons. This would make for better rendering; in solid mode, but introduces extra, potentially confusing, lines; in wireframe mode.; *** Not yet implemented ***. void TruncateNxy(Int_t npts). void TruncateNz(Int_t npts). void CheckOrdering(); Determine ordering over which to process points, segments, surfaces; so that they render correctly. Generally this has to do; with getting outward normals in the hidden/solid surface case. void DumpPoints(int npoints, float* pointbuff) const; Dump the vertex points for visual inspection. void Du",MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXTRU.html:2042,Safety,avoid,avoid,2042,"; - Xvtx array [nxy] of X coordinates of vertices; - Yvtx array [nxy] of Y coordinates of vertices; - z array [nz] of z plane positions; - scale array [nz] of scale factors; - x0 array [nz] of x offsets; - y0 array [nz] of y offsets. Author: R. Hatcher 2000.04.21. All XTRU shapes are correctly rendered in wire mode but can encounter; difficulty when rendered as a solid with hidden surfaces. These; exceptions occur if the outline shape is not a convex polygon.; Both the X3D and OpenGL renderers expect polygons to be convex.; The OpenGL spec specifies that points defining a polygon using the; GL_POLYGON primitive may be rendered as the convex hull of that set. Solid rendering under X3D can also give unexpected artifacts if; the combination of x-y-z offsets and scales for the segments are; chosen in such a manner that they represent a concave shape when; sliced along a plane parallel to the z axis. Choosing sets of point that represent a malformed polygon is; not supported, but testing for such a condition is not implemented; and thus it is left to the user to avoid this mistake. . Function Members (Methods); public:. TXTRU(); TXTRU(const TXTRU& xtru); TXTRU(const char* name, const char* title, const char* material, Int_t nyx, Int_t nz); virtual~TXTRU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& xtru) const; virtual voidDefineSection(Int_t secNum, Float_t z, Float_t scale = 1., Float_t x0 = 0., Float_t y0 = 0.); virtual voidDefineVertex(Int_t pointNum, Float_t x, Float_t y); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t",MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXTRU.html:1958,Testability,test,testing,1958,"; - Xvtx array [nxy] of X coordinates of vertices; - Yvtx array [nxy] of Y coordinates of vertices; - z array [nz] of z plane positions; - scale array [nz] of scale factors; - x0 array [nz] of x offsets; - y0 array [nz] of y offsets. Author: R. Hatcher 2000.04.21. All XTRU shapes are correctly rendered in wire mode but can encounter; difficulty when rendered as a solid with hidden surfaces. These; exceptions occur if the outline shape is not a convex polygon.; Both the X3D and OpenGL renderers expect polygons to be convex.; The OpenGL spec specifies that points defining a polygon using the; GL_POLYGON primitive may be rendered as the convex hull of that set. Solid rendering under X3D can also give unexpected artifacts if; the combination of x-y-z offsets and scales for the segments are; chosen in such a manner that they represent a concave shape when; sliced along a plane parallel to the z axis. Choosing sets of point that represent a malformed polygon is; not supported, but testing for such a condition is not implemented; and thus it is left to the user to avoid this mistake. . Function Members (Methods); public:. TXTRU(); TXTRU(const TXTRU& xtru); TXTRU(const char* name, const char* title, const char* material, Int_t nyx, Int_t nz); virtual~TXTRU(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& xtru) const; virtual voidDefineSection(Int_t secNum, Float_t z, Float_t scale = 1., Float_t x0 = 0., Float_t y0 = 0.); virtual voidDefineVertex(Int_t pointNum, Float_t x, Float_t y); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t",MatchSource.WIKI,root/html534/TXTRU.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXTRU.html
https://root.cern/root/html534/TXUnixSocket.html:2151,Availability,error,error,2151,":CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidTXSocket::CtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTXSocket::DisableTimeout(); voidTXSocket::DisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTXSocket::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTXSocket::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTXSocket::Flush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAd",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TXUnixSocket.html:2235,Availability,error,error,2235,"* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); voidTXSocket::CtrlC(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTXSocket::DisableTimeout(); voidTXSocket::DisconnectSession(Int_t id, Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTXSocket::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTXSocket::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTXSocket::Flush(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; virtual Int_tGetClientID() const; virtual Int_tGetClientIDSize() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; Int_tTXSocket::GetInterrupt(Bool_t& forward); TTimeStampTSocket::GetL",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TXUnixSocket.html:5091,Availability,error,error,5091,":GetUrl() const; Int_tTXSocket::GetXrdProofdVersion() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; Bool_tTXSocket::IsAWait(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTXSocket::IsInterrupt(); Bool_tTObject::IsOnHeap() const; Bool_tTXSocket::IsServProofd(); virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTXSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); Bool_tTXSocket::Ping(const char* ord = 0); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual UnsolRespProcResultTXSocket::ProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual ",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TXUnixSocket.html:11528,Availability,failure,failure,11528,"ing this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. list<Int_t>fClientIDs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXUnixSocket(const char* u, Int_t psid = -1, Char_t ver = -1, TXHandler* handler = 0, int fd = -1); Constructor. Int_t Reconnect(); Try reconnection after failure. virtual ~TXUnixSocket(); { fSessionID = -1; }. Int_t GetClientID() const; { return (fClientIDs.size() > 0) ? fClientIDs.front() : -1; }. Int_t GetClientIDSize() const; { return fClientIDs.size(); }. void RemoveClientID(); { if (fClientIDs.size() > 1) fClientIDs.pop_front(); }. void SetClientID(Int_t cid); { fClientIDs.push_front(cid); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TXUnixSocket.html:11230,Integrability,protocol,protocol,11230,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. list<Int_t>fClientIDs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXUnixSocket(const char* u, Int_t psid = -1, Char_t ver = -1, TXHandler* handler = 0, int fd = -1); Constructor. Int_t Reconnect(); Try reconnection after failure. virtual ~TXUnixSocket(); { fSessionID = -1; }. Int_t Get",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TXUnixSocket.html:6708,Safety,timeout,timeout,6708,"tion = """"); Bool_tTXSocket::Ping(const char* ord = 0); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual UnsolRespProcResultTXSocket::ProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTXSocket::Recv(TMessage*& mess); virtual Int_tTXSocket::Recv(Int_t& status, Int_t& kind); virtual Int_tTXSocket::Recv(char* mess, Int_t max); virtual Int_tTXSocket::Recv(char* mess, Int_t max, Int_t& kind); virtual Int_tTXSocket::RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); voidTXSocket::RemoteTouch(); virtual voidRemoveClientID(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tTXSocket::Send(const TMessage& mess); virtual Int_tTXSocket::Send(Int_t kind); virtual Int_tTXSocket::Send(Int_t status, Int_t kind); virtual Int_tTXSocket::Send(const char* mess, Int_t kind = kMESS_STRING); TObjString*TXSocket::SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tTXSocket::SendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tTXSocket::SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidTXSocket::SendUrgent(Int_t type, Int_t int1, Int_t int2); voidTXSocket::SetAWait(Bool_t w = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t cid); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDra",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TXUnixSocket.html:11005,Security,authenticat,authentication,11005,"t { kRead; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. list<Int_t>fClientIDs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXUnixSocket(const char* u, Int_t psid = -1, Char_t ver = -1, TXHandler* handler = 0, int fd = -1); Constructor. Int_t Reconnect(); Try reconnection after failure. virtual ~TXUnixSocket(); { fSessionID = -1; }. Int_t Get",MatchSource.WIKI,root/html534/TXUnixSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TXUnixSocket.html
https://root.cern/root/html534/TZIPFile.html:3503,Availability,error,error,3503," TZIPFile(const char* archive, const char* member, TFile* file); virtual~TZIPFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TArchiveFile::GetArchiveName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TArchiveMember*TArchiveFile::GetMember() const; Long64_tTArchiveFile::GetMemberFilePosition() const; Int_tTArchiveFile::GetMemberIndex() const; const char*TArchiveFile::GetMemberName() const; TObjArray*TArchiveFile::GetMembers() const; virtual const char*TObject::GetName() const; Int_tTArchiveFile::GetNumberOfMembers() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::G",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:3587,Availability,error,error,3587," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TArchiveFile::GetArchiveName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TArchiveMember*TArchiveFile::GetMember() const; Long64_tTArchiveFile::GetMemberFilePosition() const; Int_tTArchiveFile::GetMemberIndex() const; const char*TArchiveFile::GetMemberName() const; TObjArray*TArchiveFile::GetMembers() const; virtual const char*TObject::GetName() const; Int_tTArchiveFile::GetNumberOfMembers() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObjec",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:11786,Availability,error,error,11786,"Zombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTArchiveFile::fArchiveNameArchive file name; TStringfCommentArchive comment; TArchiveMember*TArchiveFile::fCurMemberCurrent archive member; Long64_tfDirOffsetCentral directory offset (from the beginning of the archive); Long64_tfDirPosCentral directory position; Long64_tfDirSizeCentral directory size; TFile*TArchiveFile::fFileFile stream used to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the mem",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:11893,Availability,error,error,11893,"ameArchive file name; TStringfCommentArchive comment; TArchiveMember*TArchiveFile::fCurMemberCurrent archive member; Long64_tfDirOffsetCentral directory offset (from the beginning of the archive); Long64_tfDirPosCentral directory position; Long64_tfDirSizeCentral directory size; TFile*TArchiveFile::fFileFile stream used to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:12205,Availability,error,error,12205,"sed to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; ",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:12337,Availability,error,error,12337,"hiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array a",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:12590,Availability,error,error,12590,"e name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); ",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:12707,Availability,error,error,12707,"rchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty p",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:12900,Availability,error,error,12900,". Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:13204,Availability,error,error,13204,"e; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:2010,Energy Efficiency,efficient,efficient,2010,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPFile(); TZIPFile(const char* archive, const char* member, TFile* file); virtual~TZIPFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Del",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:976,Integrability,interface,interface,976,". TZIPFile. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TZIPFile. class TZIPFile: public TArchiveFile. TZIPFile. This class describes a ZIP archive file containing multiple; sub-files. Typically the sub-files are ROOT files. Notice that; the ROOT files should not be compressed when being added to the; ZIP file, since ROOT files are normally already compressed.; Such a ZIP file should be created like:. zip -n root multi file1.root file2.root. which creates a ZIP file multi.zip. A ZIP archive consists of files compressed with the popular ZLIB; compression algorithm. The archive format is used among others by; PKZip and Info-ZIP. The compression algorithm is also used by; GZIP and the PNG graphics standard. The format of the archives is; explained briefly below. This class provides an interface to read; such archives. A ZIP archive contains a prefix, series of archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory ",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:13013,Modifiability,extend,extended,13013,"luding the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the directory of the ZIP archive. Returns -1 in case of error,; 0 otherwise. Int_t ReadMemberHeader(TZIPMember* member); Read the member header of the ZIP archive. Sets the position where; the data starts in the member object. Returns -1 in case of error,; 0 otherwise. Int_t DecodeZip64ExtendedExtraField(TZIPMember* m, Bool_t global = kTRUE); Decode the Zip64 extended extra field. If global is true, decode the; extra field coming from the central directory, if false decode the; extra field coming from the local file header. Returns -1 in case of; error, -2 in case Zip64 extra block was not found and 0 in case of; success. Int_t SetCurrentMember(); Find the desired member in the member array and make it the; current member. Returns -1 in case member is not found, 0 otherwise. UInt_t Get(const void* buffer, Int_t bytes); Read a ""bytes"" long little-endian integer value from ""buffer"". ULong64_t Get64(const void* buffer, Int_t bytes); Read a 8 byte long little-endian integer value from ""buffer"". void Print(Option_t* option = """") const; Pretty print ZIP archive members. TZIPFile(const TZIPFile& ). TZIPFile& operator=(const TZIPFile& ). virtual ~TZIPFile(); { }. » Author: Fons Rademakers 30/6/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-03-15",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:2435,Security,access,accessed,2435,"eader followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPFile(); TZIPFile(const char* archive, const char* member, TFile* file); virtual~TZIPFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual v",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:11210,Security,access,access,11210,"EN_OFF; kENTRY_NAMELEN_LEN; kENTRY_EXTRALEN_OFF; kENTRY_EXTRALEN_LEN; kENTRY_HEADER_SIZE; kZIP64_EXTENDED_MAGIC_OFF; kZIP64_EXTENDED_MAGIC_LEN; kZIP64_EXTENDED_SIZE_OFF; kZIP64_EXTENDED_SIZE_LEN; kZIP64_EXTENDED_USIZE_OFF; kZIP64_EXTENDED_USIZE_LEN; kZIP64_EXTENTED_CSIZE_OFF; kZIP64_EXTENDED_CSIZE_LEN; kZIP64_EXTENDED_HDR_OFFSET_OFF; kZIP64_EXTENDED_HDR_OFFSET_LEN; kZIP64_EXTENDED_DISK_OFF; kZIP64_EXTENDED_DISK_LEN; kZIP64_EXTENDED_SIZE; kSTORED; kDEFLATED; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTArchiveFile::fArchiveNameArchive file name; TStringfCommentArchive comment; TArchiveMember*TArchiveFile::fCurMemberCurrent archive member; Long64_tfDirOffsetCentral directory offset (from the beginning of the archive); Long64_tfDirPosCentral directory position; Long64_tfDirSizeCentral directory size; TFile*TArchiveFile::fFileFile stream used to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most im",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPFile.html:11670,Security,access,access,11670,"s; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTArchiveFile::fArchiveNameArchive file name; TStringfCommentArchive comment; TArchiveMember*TArchiveFile::fCurMemberCurrent archive member; Long64_tfDirOffsetCentral directory offset (from the beginning of the archive); Long64_tfDirPosCentral directory position; Long64_tfDirSizeCentral directory size; TFile*TArchiveFile::fFileFile stream used to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most importantly, figure; out where the central directory begins. Returns -1 in case of error,; 0 otherwise. Long64_t ReadZip64EndLocator(Long64_t pos); Read Zip64 end of central directory locator. Returns -1 in case of error,; -2 in case end locator magic is not found (i.e. not a zip64 file) and; offset of Zip64 end of central directory record in case of success. Int_t ReadZip64EndRecord(Long64_t pos); Read Zip64 end of central directory record. Returns -1 in case of error; and 0 in case of success. Int_t ReadDirectory(); Read the ",MatchSource.WIKI,root/html534/TZIPFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPFile.html
https://root.cern/root/html534/TZIPMember.html:3519,Availability,error,error,3519,"ember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAttrExt() const; UInt_tGetAttrInt() const; const char*TArchiveMember::GetComment() const; Long64_tTArchiveMember::GetCompressedSize() const; UInt_tGetCRC32() const; Long64_tTArchiveMember::GetDecompressedSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTArchiveMember::GetFilePosition() const; void*GetGlobal() const; UInt_tGetGlobalLen() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; void*GetLocal() const; UInt_tGetLocalLen() const; UInt_tGetMethod() const; TDatimeTArchiveMember::GetModTime() const; virtual const char*TArchiveMember::G",MatchSource.WIKI,root/html534/TZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPMember.html
https://root.cern/root/html534/TZIPMember.html:3603,Availability,error,error,3603," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetAttrExt() const; UInt_tGetAttrInt() const; const char*TArchiveMember::GetComment() const; Long64_tTArchiveMember::GetCompressedSize() const; UInt_tGetCRC32() const; Long64_tTArchiveMember::GetDecompressedSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tTArchiveMember::GetFilePosition() const; void*GetGlobal() const; UInt_tGetGlobalLen() const; virtual const char*TObject::GetIconName() const; UInt_tGetLevel() const; void*GetLocal() const; UInt_tGetLocalLen() const; UInt_tGetMethod() const; TDatimeTArchiveMember::GetModTime() const; virtual const char*TArchiveMember::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; stati",MatchSource.WIKI,root/html534/TZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPMember.html
https://root.cern/root/html534/TZIPMember.html:2018,Energy Efficiency,efficient,efficient,2018,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPMember(); TZIPMember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObj",MatchSource.WIKI,root/html534/TZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPMember.html
https://root.cern/root/html534/TZIPMember.html:984,Integrability,interface,interface,984,". TZIPMember. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TZIPMember. class TZIPMember: public TArchiveMember. TZIPFile. This class describes a ZIP archive file containing multiple; sub-files. Typically the sub-files are ROOT files. Notice that; the ROOT files should not be compressed when being added to the; ZIP file, since ROOT files are normally already compressed.; Such a ZIP file should be created like:. zip -n root multi file1.root file2.root. which creates a ZIP file multi.zip. A ZIP archive consists of files compressed with the popular ZLIB; compression algorithm. The archive format is used among others by; PKZip and Info-ZIP. The compression algorithm is also used by; GZIP and the PNG graphics standard. The format of the archives is; explained briefly below. This class provides an interface to read; such archives. A ZIP archive contains a prefix, series of archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global di",MatchSource.WIKI,root/html534/TZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPMember.html
https://root.cern/root/html534/TZIPMember.html:2443,Security,access,accessed,2443,"eader followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPMember(); TZIPMember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root/html534/TZIPMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/TZIPMember.html
https://root.cern/root/html534/UserGroup_t.html:302,Integrability,interface,interface,302,". UserGroup_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » UserGroup_t. class UserGroup_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System. Function Members (Methods); public:. UserGroup_t(); UserGroup_t(const UserGroup_t&); ~UserGroup_t(); UserGroup_t&operator=(const UserGroup_t&). Data Members; public:. Int_tfGidgroup id; TStringfGroupgroup name; TStringfPasswdpassword; TStringfRealNameuser full name; TStringfShelluser preferred shell; Int_tfUiduser id; TStringfUseruser name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; UserGroup_t(); { }. TSystem& operator=(const UserGroup_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/UserGroup_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/UserGroup_t.html
https://root.cern/root/html534/WindowAttributes_t.html:1566,Availability,mask,mask,1566,". WindowAttributes_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » WindowAttributes_t. class WindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. WindowAttributes_t(); WindowAttributes_t(const WindowAttributes_t&); ~WindowAttributes_t(); WindowAttributes_t&operator=(const WindowAttributes_t&). Data Members; public:. Long_tfAllEventMasksset of events all people have interest in; ULong_tfBackingPixelvalue to be used when restoring planes; ULong_tfBackingPlanesplanes to be preserved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; Int_tfBorderWidthborder width of window; Int_tfClasskInputOutput, kInputOnly; Colormap_tfColormapcolor map to be associated with window; Int_tfDepthdepth of window; Long_tfDoNotPropagateMaskset of events that should not propagate; Int_tfHeightwidth and height of window; Bool_tfMapInstalledboolean, is color map currently installed; Int_tfMapStatekIsUnmapped, kIsUnviewable, kIsViewable; Bool_tfOverrideRedirectboolean value for override-redirect; Window_tfRootroot of screen containing window; Bool_tfSaveUnderboolean, should bits under be saved?; void*fScreenback pointer to correct screen; void*fVisualthe associated visual structure; Int_tfWidth; Int_tfWinGravityone of the window gravity values; Int_tfX; Int_tfYlocation of window; Long_tfYourEventMaskmy event mask. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:05:59 2015 » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/WindowAttributes_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/WindowAttributes_t.html
https://root.cern/root/html534/WindowAttributes_t.html:1122,Deployability,install,installed,1122,". WindowAttributes_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » WindowAttributes_t. class WindowAttributes_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. WindowAttributes_t(); WindowAttributes_t(const WindowAttributes_t&); ~WindowAttributes_t(); WindowAttributes_t&operator=(const WindowAttributes_t&). Data Members; public:. Long_tfAllEventMasksset of events all people have interest in; ULong_tfBackingPixelvalue to be used when restoring planes; ULong_tfBackingPlanesplanes to be preserved if possible; Int_tfBackingStorekNotUseful, kWhenMapped, kAlways; Int_tfBitGravityone of bit gravity values; Int_tfBorderWidthborder width of window; Int_tfClasskInputOutput, kInputOnly; Colormap_tfColormapcolor map to be associated with window; Int_tfDepthdepth of window; Long_tfDoNotPropagateMaskset of events that should not propagate; Int_tfHeightwidth and height of window; Bool_tfMapInstalledboolean, is color map currently installed; Int_tfMapStatekIsUnmapped, kIsUnviewable, kIsViewable; Bool_tfOverrideRedirectboolean value for override-redirect; Window_tfRootroot of screen containing window; Bool_tfSaveUnderboolean, should bits under be saved?; void*fScreenback pointer to correct screen; void*fVisualthe associated visual structure; Int_tfWidth; Int_tfWinGravityone of the window gravity values; Int_tfX; Int_tfYlocation of window; Long_tfYourEventMaskmy event mask. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Sep 8 17:05:59 2015 » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html534/WindowAttributes_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html534/WindowAttributes_t.html
https://root.cern/root/html602/ClassIndex.html:32363,Availability,error,error,32363,ule to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedBinding Your description goes here...; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expre,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34572,Availability,error,error,34572," TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooL",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34686,Availability,error,errors,34686,"torPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:77250,Availability,avail,available,77250,"A.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspec",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:91846,Availability,error,error,91846,"GeoTrap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of bu",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:91934,Availability,error,error,91934,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:91993,Availability,error,error,91993,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92126,Availability,error,error,92126,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:131463,Availability,error,error,131463,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24199,Deployability,integrat,integration,24199, from a TTreeFriend.; ROOT::THnBaseBrowsable Browser-helper for THnBase; ROOT::TImpProxy<Long64_t> ; ROOT::TImpProxy<ULong64_t> ; ROOT::TImpProxy<bool> ; ROOT::TImpProxy<char> ; ROOT::TImpProxy<double> ; ROOT::TImpProxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOpt,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25037,Deployability,integrat,integrators,25037, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26155,Deployability,integrat,integration,26155,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26222,Deployability,integrat,integration,26222,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26257,Deployability,integrat,integrator,26257,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26988,Deployability,integrat,integration,26988,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:33987,Deployability,integrat,integration,33987," in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper i",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34811,Deployability,integrat,integration,34811,"torPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34965,Deployability,integrat,integration,34965,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35025,Deployability,integrat,integration,35025,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35114,Deployability,integrat,integrator,35114,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35880,Deployability,integrat,integration,35880,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37538,Deployability,integrat,integration,37538,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37864,Deployability,configurat,configuration,37864,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37958,Deployability,configurat,configuration,37958,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:40446,Deployability,integrat,integration,40446,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:40526,Deployability,integrat,integration,40526,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41214,Deployability,configurat,configuration,41214,"ng scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for th",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41290,Deployability,configurat,configuration,41290,"ng scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for th",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41418,Deployability,configurat,configuration,41418,"ngine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic inter",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:45386,Deployability,configurat,configuration,45386,kelihood) function; RooStats::HistFactory::Sample ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:57167,Deployability,configurat,configuration,57167,"atrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary Interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnum Enum type class; TEnumConstant ; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size bo",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:61046,Deployability,update,update,61046," of accepted elements.; TEveElementListProjected Projected TEveElementList.; TEveElementObjectPtr TEveElement with external TObject as a holder of visualization data.; TEveEventManager Base class for event management and navigation.; TEveException Exception-type thrown by Eve classes.; TEveFrameBox Description of a 2D or 3D frame that can be used to visually group a set of objects.; TEveFrameBoxGL GL-renderer for TEveFrameBox class.; TEveGDoubleValuator Composite GUI element for selection of range (label, two number-entries and double-slider).; TEveGListTreeEditorFrame Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGedNameFrame Top name-frame used in EVE.; TEveGedNameTextButton Button for GED name-frame.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoShapeProjected ; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; T",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63581,Deployability,update,updates,63581,"ler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-tim",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63727,Deployability,configurat,configuration,63727,"or for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointSetArrayEditor Editor for TEvePointSetArray class.; TEvePointSetProjected Projected copy of a TEvePointSet.; TEvePolygonSetProjected Set of pro",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:100124,Deployability,configurat,configuration,100124,"earFitter; TLink Link: hypertext link to an object; TList Doubly linked list; TListIter Linked list iterator; TListOfDataMembers List of TDataMembers for a class; TListOfEnums ; TListOfEnumsWithLock ; TListOfEnumsWithLockIter ; TListOfFunctionTemplates List of TFunctions for a class; TListOfFunctions List of TFunctions for a class; TListOfFunctionsIter ; TLockFile Lock an object using a file; TLockGuard ; TLorentzRotation Lorentz transformations including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:130233,Deployability,toggle,toggle,130233," shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform command line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TTeXDump Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeReader A simple interface to read trees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:131646,Deployability,continuous,continuous,131646,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:131859,Deployability,continuous,continuous,131859,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26122,Energy Efficiency,adapt,adaptive,26122,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26213,Energy Efficiency,adapt,adaptive,26213,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:38714,Energy Efficiency,efficient,efficient,38714,menting numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:40872,Energy Efficiency,efficient,efficiently,40872,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41024,Energy Efficiency,efficient,efficiently,41024,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:71372,Energy Efficiency,adapt,adapting,71372,"tCgi fastcgi engine for THttpServer; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TFunctionTemplate Dictionary for function template; TG16ColorSelector 16 color cells; TGApplication GUI application singleton; TGButton Button widget abstract base class; TGBut",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:83435,Energy Efficiency,meter,meter,83435,"corder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:115357,Energy Efficiency,allocate,allocated,115357, marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for ,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116368,Energy Efficiency,monitor,monitoring,116368,dor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF que,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116418,Energy Efficiency,monitor,monitoring,116418,ng a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROO,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116469,Energy Efficiency,monitor,monitoring,116469,r for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle ,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:123858,Energy Efficiency,monitor,monitoring,123858,"play help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRootSniffer Sniffer of ROOT objects; TRootSnifferScanRec Scan record for objects sniffer; TRootSnifferStore structure for results store of objects sniffer; TRootSnifferStoreJson json results store of objects sniffer; TRootSnifferStoreXml xml results store of objects sniffer; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TS3HTTPRequest Create generic HTTP request for Amazon S3 and Google Storage services; TS3WebFile Read a ROOT file from a S3 server; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury information about column from SQL table; TSQLFile ROOT TFile interface to SQL database; TSQLMonitoringWriter Sending monitoring data to a SQL DB; TSQLObjectData Keeps the data requested from the SQL server for an object.; TSQLObjectDataPool XML object keeper class; TSQLObjectInfo Info (classname, version) about object in database; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket ; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307); TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted vers",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24199,Integrability,integrat,integration,24199, from a TTreeFriend.; ROOT::THnBaseBrowsable Browser-helper for THnBase; ROOT::TImpProxy<Long64_t> ; ROOT::TImpProxy<ULong64_t> ; ROOT::TImpProxy<bool> ; ROOT::TImpProxy<char> ; ROOT::TImpProxy<double> ; ROOT::TImpProxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOpt,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24839,Integrability,interface,interface,24839, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25002,Integrability,interface,interface,25002, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25037,Integrability,integrat,integrators,25037, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25505,Integrability,interface,interface,25505, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25641,Integrability,interface,interface,25641, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26155,Integrability,integrat,integration,26155,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26222,Integrability,integrat,integration,26222,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26235,Integrability,interface,interface,26235,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26257,Integrability,integrat,integrator,26257,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26988,Integrability,integrat,integration,26988,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:27332,Integrability,interface,interface,27332,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:29949,Integrability,wrap,wraps,29949,"nt> ; RooCFunction3PdfBinding<double,unsigned int,unsigned int,double> ; RooCFunction3Ref<double,double,double,bool> ; RooCFunction3Ref<double,double,double,double> ; RooCFunction3Ref<double,double,int,int> ; RooCFunction3Ref<double,unsigned int,double,double> ; RooCFunction3Ref<double,unsigned int,double,unsigned int> ; RooCFunction3Ref<double,unsigned int,unsigned int,double> ; RooCFunction4Binding<double,double,double,double,bool> ; RooCFunction4Binding<double,double,double,double,double> ; RooCFunction4Binding<double,double,double,double,int> ; RooCFunction4PdfBinding<double,double,double,double,bool> ; RooCFunction4PdfBinding<double,double,double,double,double> ; RooCFunction4PdfBinding<double,double,double,double,int> ; RooCFunction4Ref<double,double,double,double,bool> ; RooCFunction4Ref<double,double,double,double,double> ; RooCFunction4Ref<double,double,double,double,int> ; RooCacheManager<RooAbsCacheElement> ; RooCacheManager<vector<double> > ; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output; RooCachedReal P.d.f class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of R",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:30023,Integrability,wrap,wraps,30023,"ooCFunction3Ref<double,double,double,bool> ; RooCFunction3Ref<double,double,double,double> ; RooCFunction3Ref<double,double,int,int> ; RooCFunction3Ref<double,unsigned int,double,double> ; RooCFunction3Ref<double,unsigned int,double,unsigned int> ; RooCFunction3Ref<double,unsigned int,unsigned int,double> ; RooCFunction4Binding<double,double,double,double,bool> ; RooCFunction4Binding<double,double,double,double,double> ; RooCFunction4Binding<double,double,double,double,int> ; RooCFunction4PdfBinding<double,double,double,double,bool> ; RooCFunction4PdfBinding<double,double,double,double,double> ; RooCFunction4PdfBinding<double,double,double,double,int> ; RooCFunction4Ref<double,double,double,double,bool> ; RooCFunction4Ref<double,double,double,double,double> ; RooCFunction4Ref<double,double,double,double,int> ; RooCacheManager<RooAbsCacheElement> ; RooCacheManager<vector<double> > ; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output; RooCachedReal P.d.f class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter constraints; RooConvCoefVar Auxiliary clas",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:33987,Integrability,integrat,integration,33987," in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper i",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34811,Integrability,integrat,integration,34811,"torPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34965,Integrability,integrat,integration,34965,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35025,Integrability,integrat,integration,35025,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35114,Integrability,integrat,integrator,35114,"ting toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index lab",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35880,Integrability,integrat,integration,35880,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:36314,Integrability,rout,routines,36314,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:36344,Integrability,interface,interface,36344,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37538,Integrability,integrat,integration,37538,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:38106,Integrability,wrap,wrapper,38106,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:38505,Integrability,interface,interface,38505,menting numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:39232,Integrability,interface,interface,39232,on; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of R,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:40446,Integrability,integrat,integration,40446,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:40526,Integrability,integrat,integration,40526,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:40693,Integrability,interface,interface,40693,"tory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functio",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:42368,Integrability,interface,interface,42368,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::Hi",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:42454,Integrability,interface,interface,42454,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::Hi",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:47420,Integrability,interface,interface,47420," proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:48298,Integrability,interface,interface,48298,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:50087,Integrability,protocol,protocol,50087,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:51510,Integrability,interface,interface,51510,ray of longs; TArrayL64 Array of long64s; TArrayS Array of shorts; TArrow An arrow (line with a arrowhead); TArrowEditor GUI for editing arrow attributes; TAtomicCount ; TAtt3D 3D attributes; TAttAxis Axis attributes; TAttBBox Helper for management of bounding-box information; TAttBBox2D 2D bounding box attributes; TAttCanvas Canvas attributes; TAttFill Fill area attributes; TAttFillEditor GUI for editing fill attributes; TAttImage Image attributes; TAttLine Line attributes; TAttLineEditor GUI for editing line attributes; TAttMarker Marker attributes; TAttMarkerEditor GUI for editing marker attributes; TAttPad Pad attributes; TAttParticle Particle definition; TAttText Text attributes; TAttTextEditor GUI for editing text attributes; TAuthenticate Class providing remote authentication service; TAxis Axis class; TAxis3D 3-D ruler painting class; TAxisEditor axis editor; TBRIK TBRIK shape; TBackCompFitter Class providing backward compatibility for fitting by implementing the TVirtualFitter interface; TBase64 Base64 encoding/decoding; TBaseClass Description of a base class; TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:52218,Integrability,protocol,protocol,52218,ray of longs; TArrayL64 Array of long64s; TArrayS Array of shorts; TArrow An arrow (line with a arrowhead); TArrowEditor GUI for editing arrow attributes; TAtomicCount ; TAtt3D 3D attributes; TAttAxis Axis attributes; TAttBBox Helper for management of bounding-box information; TAttBBox2D 2D bounding box attributes; TAttCanvas Canvas attributes; TAttFill Fill area attributes; TAttFillEditor GUI for editing fill attributes; TAttImage Image attributes; TAttLine Line attributes; TAttLineEditor GUI for editing line attributes; TAttMarker Marker attributes; TAttMarkerEditor GUI for editing marker attributes; TAttPad Pad attributes; TAttParticle Particle definition; TAttText Text attributes; TAttTextEditor GUI for editing text attributes; TAuthenticate Class providing remote authentication service; TAxis Axis class; TAxis3D 3-D ruler painting class; TAxisEditor axis editor; TBRIK TBRIK shape; TBackCompFitter Class providing backward compatibility for fitting by implementing the TVirtualFitter interface; TBase64 Base64 encoding/decoding; TBaseClass Description of a base class; TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:52834,Integrability,interface,interface,52834,"to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.; TBufferJSON a specialized TBuffer to only write objects into JSON format; TBufferSQL Implementation of TBuffer to load and write to a SQL database; TBufferSQL2 a specialized TBuffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassT",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:53060,Integrability,protocol,protocol,53060,"bject; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.; TBufferJSON a specialized TBuffer to only write objects into JSON format; TBufferSQL Implementation of TBuffer to load and write to a SQL database; TBufferSQL2 a specialized TBuffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionProperty",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:53260,Integrability,interface,interface,53260,"Buffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorGradient Gradient fill.; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar butt",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:53558,Integrability,interface,interface,53558,"Buffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorGradient Gradient fill.; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar butt",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:61214,Integrability,wrap,wrapper,61214,"se class for event management and navigation.; TEveException Exception-type thrown by Eve classes.; TEveFrameBox Description of a 2D or 3D frame that can be used to visually group a set of objects.; TEveFrameBoxGL GL-renderer for TEveFrameBox class.; TEveGDoubleValuator Composite GUI element for selection of range (label, two number-entries and double-slider).; TEveGListTreeEditorFrame Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGedNameFrame Top name-frame used in EVE.; TEveGedNameTextButton Button for GED name-frame.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoShapeProjected ; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; TEveGridStepper Provide discrete position coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-edit",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63040,Integrability,wrap,wrapper,63040,on coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63150,Integrability,interface,interface,63150, class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from ,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63306,Integrability,depend,depending,63306,so used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attribut,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63635,Integrability,wrap,wrapper,63635,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointSetArrayEditor Editor for TEvePointSetArray class.; TEvePointSetProj",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:65824,Integrability,wrap,wrapping,65824,"lygonSetProjectedGL GL-renderer for TEvePolygonSetProjected class.; TEveProjectable Abstract base class for classes that can be transformed with non-linear projections.; TEveProjected Abstract base class for classes that hold results of a non-linear projection transformation.; TEveProjection Base for specific classes that implement non-linear projections.; TEveProjection::PreScaleEntry_t ; TEveProjectionAxes Class to draw scales in non-linear projections.; TEveProjectionAxesEditor GUI editor for TEveProjectionAxes.; TEveProjectionAxesGL GL renderer class for TEveProjectionAxes.; TEveProjectionManager Manager class for steering of projections and managing projected objects.; TEveProjectionManagerEditor Editor for TEveProjectionManager class.; TEveQuadSet Collection of 2D primitives (rectangles, hexagons, or lines); each primitive can be assigned a signal value and a TRef.; TEveQuadSetGL GL-renderer for TEveQuadSet class.; TEveRGBAPalette A generic, speed-optimised mapping from value to RGBA color supporting different wrapping and range truncation modes.; TEveRGBAPaletteEditor Editor for TEveRGBAPalette class.; TEveRGBAPaletteOverlay Draws TEveRGBAPalette as GL overlay.; TEveRGBAPaletteSubEditor Sub-editor for TEveRGBAPalette class.; TEveRPhiProjection XY non-linear projection.; TEveRecCascade Reconstructed Cascade (also used in VSD).; TEveRecKink Reconstructed kink (also used in VSD).; TEveRecTrackT<double> Template for reconstructed track (also used in VSD).; TEveRecTrackT<float> Template for reconstructed track (also used in VSD).; TEveRecV0 Reconstructed V0 (also used in VSD).; TEveRefBackPtr Base-class for reference-counted objects with reverse references to TEveElement objects.; TEveRefCnt Base-class for reference-counted objects.; TEveRhoZProjection Rho/Z non-linear projection.; TEveScalableStraightLineSet Straight-line-set with extra scaling.; TEveScene Reve representation of TGLScene.; TEveSceneInfo TEveUtil representation of TGLSceneInfo.; TEveSceneList List ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:66896,Integrability,interface,interface,66896,"APalette class.; TEveRGBAPaletteOverlay Draws TEveRGBAPalette as GL overlay.; TEveRGBAPaletteSubEditor Sub-editor for TEveRGBAPalette class.; TEveRPhiProjection XY non-linear projection.; TEveRecCascade Reconstructed Cascade (also used in VSD).; TEveRecKink Reconstructed kink (also used in VSD).; TEveRecTrackT<double> Template for reconstructed track (also used in VSD).; TEveRecTrackT<float> Template for reconstructed track (also used in VSD).; TEveRecV0 Reconstructed V0 (also used in VSD).; TEveRefBackPtr Base-class for reference-counted objects with reverse references to TEveElement objects.; TEveRefCnt Base-class for reference-counted objects.; TEveRhoZProjection Rho/Z non-linear projection.; TEveScalableStraightLineSet Straight-line-set with extra scaling.; TEveScene Reve representation of TGLScene.; TEveSceneInfo TEveUtil representation of TGLSceneInfo.; TEveSceneList List of Scenes providing common operations on TEveScene collections.; TEveSecondarySelectable Semi-abstract interface for classes supporting secondary-selection.; TEveSelection Container for selected and highlighted elements.; TEveSelectorToEventList TSelector that stores entry numbers of matching TTree entries into an event-list.; TEveShape Abstract base-class for 2D/3D shapes.; TEveShapeEditor GUI editor for TEveShape.; TEveStraightLineSet Set of straight lines with optional markers along the lines.; TEveStraightLineSetEditor Editor for TEveStraightLineSet class.; TEveStraightLineSetGL GL-renderer for TEveStraightLineSet class.; TEveStraightLineSetProjected Projected copy of a TEveStraightLineSet.; TEveText Class for visualisation of text with FTGL font.; TEveTextEditor GUI editor for TEveText.; TEveTextGL GL renderer class for TEveText.; TEveTrack Track with given vertex, momentum and optional referece-points (path-marks) along its path.; TEveTrackEditor Editor for TEveTrack class.; TEveTrackGL GL-renderer for TEveTrack class.; TEveTrackList A list of tracks supporting change of common attribute",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:70067,Integrability,interface,interface,70067,<double> ; TEveVector2T<float> ; TEveVector4T<double> ; TEveVector4T<float> ; TEveVectorT<double> ; TEveVectorT<float> ; TEveViewer Reve representation of TGLViewer.; TEveViewerList List of Viewers providing common operations on TEveViewer collections.; TEveViewerListEditor GUI editor for TEveViewerList.; TEveWindow Abstract base-class for eve-windows.; TEveWindowEditor GUI editor for TEveWindow.; TEveWindowFrame Eve-window containing any TGFrame.; TEveWindowManager Manager for EVE windows.; TEveWindowPack Eve-window containing a TGPack.; TEveWindowSlot An unoccupied eve-window slot.; TEveWindowTab Eve-window containing a TGTab.; TEventIter Event iterator used by TProofPlayer's; TEventIterObj Event iterator for objects; TEventIterTree Event iterator for Trees; TEventIterUnit Event iterator for objects; TEventList A list of selected entries in a TTree.; TExMap Map with external hash; TExMapIter TExMap iterator; TExec To execute a CINT command; TF1 The Parametric 1-D function; TF12 Projection of a TF2 along x or y; TF1Editor user interface for TF1 objects; TF2 The Parametric 2-D function; TF2GL GL renderer for TF2 and TF3.; TF3 The Parametric 3-D function; TFFTComplex ; TFFTComplexReal ; TFFTReal ; TFFTRealComplex ; TFITSHDU Class interfacing FITS HDUs; TFPBlock File prefetch block; TFTP File Transfer Protocol class using rootd; TFastCgi fastcgi engine for THttpServer; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:71097,Integrability,interface,interface,71097,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:71141,Integrability,interface,interface,71141,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:72080,Integrability,interface,interface,72080,"e native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TFunctionTemplate Dictionary for function template; TG16ColorSelector 16 color cells; TGApplication GUI application singleton; TGButton Button widget abstract base class; TGButtonGroup Organizes TGButtons in a group; TGCanvas A canvas with two scrollbars and a viewport; TGCheckButton A check button widget; TGClient Class making connection to display server; TGColorDialog Color selection dialog; TGColorFrame Frame for color cell; TGColorPalette Color palette widget; TGColorPick Color picker widget; TGColorPopup Color selector popup; TGColorSelect Color selection checkbutton; TGColumnLayout Column layout manager; TGComboBox Combo box widget; TGComboBoxPopup Combobox popup window; TGCommandPlugin Command (I/O redirection) plugin for the new ROOT Browser; TGCompositeFrame Base class for composite widgets (menubars, etc.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:76593,Integrability,wrap,wrapper,76593," a 3D box.; TGLBContainer Listbox container; TGLBEntry Basic listbox entry; TGLBoundingBox a 3D orientated bounding box; TGLBoxCut Cuts away part of a plot.; TGLBoxPainter Box painter; TGLCamera Camera abstract base class.; TGLCameraGuide Short description.; TGLCameraOverlay Show coorinates of current camera frustum.; TGLClip abstract clipping object; TGLClipBox clipping box; TGLClipPlane clipping plane; TGLClipSet A collection of supported clip-objects; TGLClipSetEditor GUI editor for TGLClipSet.; TGLClipSetSubEditor Sub-editor for TGLClipSet.; TGLColor Color in preferred GL format - RGBA.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlay",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:77009,Integrability,wrap,wrapper,77009,"cts; TGLClipSetEditor GUI editor for TGLClipSet.; TGLClipSetSubEditor Sub-editor for TGLClipSet.; TGLColor Color in preferred GL format - RGBA.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLPar",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:77302,Integrability,wrap,wrapper,77302,"er a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:77461,Integrability,rout,routines,77461,"mentation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPa",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:77718,Integrability,wrap,wraps,77718,"inter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGL",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:78274,Integrability,wrap,wrapper,78274,"f available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelect",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:78617,Integrability,wrap,wrapper,78617," Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:79122,Integrability,interface,interface,79122,"t Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter Painter to draw several TH3.; TGLTH3Slice TH3 slice; TGLText a GL text; TGLTransManip GL translation manipulator widget; TGLUtil Wrapper class for misc GL pieces; TGLUtil::TColorLocker Lock/unlock color in constructor/destructor.; TGLUtil::TDrawQualityModifier Set/restore draw quality in constructor/destructor.; TGLUtil::TDrawQualityScaler Multiply/restore draw quality in constructor/destructor.; TGLVContainer Listview container; TGLVEntry Item that goes into a TGListView container; TGLVector3 GL 3 component vector he",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:80105,Integrability,wrap,wrapper,80105,"illed via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter Painter to draw several TH3.; TGLTH3Slice TH3 slice; TGLText a GL text; TGLTransManip GL translation manipulator widget; TGLUtil Wrapper class for misc GL pieces; TGLUtil::TColorLocker Lock/unlock color in constructor/destructor.; TGLUtil::TDrawQualityModifier Set/restore draw quality in constructor/destructor.; TGLUtil::TDrawQualityScaler Multiply/restore draw quality in constructor/destructor.; TGLVContainer Listview container; TGLVEntry Item that goes into a TGListView container; TGLVector3 GL 3 component vector helper/wrapper class; TGLVertex3 GL 3 component vertex helper/wrapper class; TGLViewer Standard ROOT GL viewer.; TGLViewerBase GL Viewer base-class.; TGLViewerEditor GUI for editing TGLViewer attributes; TGLVoxelPainter Voxel painter; TGLWidget Window (widget) version of TGLPaintDevice; TGLabel A label GUI element; TGLayoutHints Class describing GUI layout hints; TGLayoutManager Layout manager abstract base class; TGLineLBEntry Line width listbox entry; TGLineStyleComboBox Line style combobox widget; TGLineWidthComboBox Line width combobox widget; TGListBox Listbox widget; TGListDetailsLayout Layout manager for TGListView details; TGListLayout Layout manager for TGListView widget; TGListTree Show items in a tree structured list; TGListTreeItem Abstract base-class for items that go into a TGListTree container.; TGListTreeItemStd Item that goes into a TGListTree container; TGListView List view widget (iconbox, small icons or tabular view); TGLongPosition Position object (x and y ar",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:80160,Integrability,wrap,wrapper,80160,"illed via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter Painter to draw several TH3.; TGLTH3Slice TH3 slice; TGLText a GL text; TGLTransManip GL translation manipulator widget; TGLUtil Wrapper class for misc GL pieces; TGLUtil::TColorLocker Lock/unlock color in constructor/destructor.; TGLUtil::TDrawQualityModifier Set/restore draw quality in constructor/destructor.; TGLUtil::TDrawQualityScaler Multiply/restore draw quality in constructor/destructor.; TGLVContainer Listview container; TGLVEntry Item that goes into a TGListView container; TGLVector3 GL 3 component vector helper/wrapper class; TGLVertex3 GL 3 component vertex helper/wrapper class; TGLViewer Standard ROOT GL viewer.; TGLViewerBase GL Viewer base-class.; TGLViewerEditor GUI for editing TGLViewer attributes; TGLVoxelPainter Voxel painter; TGLWidget Window (widget) version of TGLPaintDevice; TGLabel A label GUI element; TGLayoutHints Class describing GUI layout hints; TGLayoutManager Layout manager abstract base class; TGLineLBEntry Line width listbox entry; TGLineStyleComboBox Line style combobox widget; TGLineWidthComboBox Line width combobox widget; TGListBox Listbox widget; TGListDetailsLayout Layout manager for TGListView details; TGListLayout Layout manager for TGListView widget; TGListTree Show items in a tree structured list; TGListTreeItem Abstract base-class for items that go into a TGListTree container.; TGListTreeItemStd Item that goes into a TGListTree container; TGListView List view widget (iconbox, small icons or tabular view); TGLongPosition Position object (x and y ar",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:81786,Integrability,message,message,81786,"e width listbox entry; TGLineStyleComboBox Line style combobox widget; TGLineWidthComboBox Line width combobox widget; TGListBox Listbox widget; TGListDetailsLayout Layout manager for TGListView details; TGListLayout Layout manager for TGListView widget; TGListTree Show items in a tree structured list; TGListTreeItem Abstract base-class for items that go into a TGListTree container.; TGListTreeItemStd Item that goes into a TGListTree container; TGListView List view widget (iconbox, small icons or tabular view); TGLongPosition Position object (x and y are Long_t); TGMainFrame Top level window frame; TGMatrixLayout Matrix layout manager; TGMdiButtons MDI Buttons Frame; TGMdiContainer MDI container; TGMdiCornerWinResizer Corner Window Resizer; TGMdiDecorFrame MDI Decor Frame; TGMdiFrame MDI Frame; TGMdiFrameList MDI Frame list; TGMdiGeometry MDI Geometry; TGMdiHorizontalWinResizer Horizontal Window Resizer; TGMdiMainFrame MDI main frame; TGMdiMenuBar MDI menu bar; TGMdiTitleBar MDI Title Bar; TGMdiTitleIcon MDI Title Icon; TGMdiVerticalWinResizer Vertical Window Resizer; TGMdiWinResizer Window Resizer; TGMenuBar Menu bar class; TGMenuEntry Menu entry class; TGMenuTitle Menu title class; TGMimeTypes Pool of mime type objects; TGMsgBox A message dialog box; TGNumberEntry Entry field widget for several numeric formats; TGNumberEntryField A text entry field used by a TGNumberEntry; TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRa",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:83280,Integrability,interface,interface,83280,"t Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTabl",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:86428,Integrability,interface,interface,86428,"ticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92441,Integrability,interface,interface,92441,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92553,Integrability,interface,interface,92553,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92600,Integrability,interface,interface,92600,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92707,Integrability,interface,interface,92707,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92766,Integrability,interface,interface,92766,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:92816,Integrability,interface,interface,92816,"ap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC defining status of a Grid job; TGridJobStatusList ABC defining interface to a list of GRID jobs; TGridResult ABC defining interface to GRID result set; TGroupButton A user interface button in a group of buttons.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:94610,Integrability,interface,interface,94610,ograms (one char per channel); TH2D 2-Dim histograms (one double per channel); TH2Editor TH2 editor; TH2F 2-Dim histograms (one float per channel); TH2GL GL renderer for TH2.; TH2I 2-Dim histograms (one 32 bits integer per channel); TH2Poly 2-Dim histogram with polygon bins; TH2PolyBin 2-Dim polygon bins; TH2S 2-Dim histograms (one short per channel); TH3 3-Dim histogram base class; TH3C 3-Dim histograms (one char per channel); TH3D 3-Dim histograms (one double per channel); TH3F 3-Dim histograms (one float per channel); TH3GL GL renderer class for TH3.; TH3I 3-Dim histograms (one 32 bits integer per channel); TH3S 3-Dim histograms (one short per channel); THLimitsFinder Class to find best axis limits; THStack A collection of histograms; THYPE HYPE shape; THaarMatrixT<double> ; THaarMatrixT<float> ; THashList Doubly linked list with hashtable for lookup; THashTable A hash table; THashTableIter Hash table iterator; THbookBranch A branch for a THbookTree; THbookFile ROOT interface to Hbook/PAW files; THbookKey Hbook id descriptor; THbookTree A wrapper class supporting Hbook ntuples (CWN and RWN); THelix A Helix drawn as a PolyLine3D; THilbertMatrixT<double> ; THilbertMatrixT<float> ; THilbertMatrixTSym<double> ; THilbertMatrixTSym<float> ; THistPainter Helper class to draw histograms; THn Base class for multi-dimensional histogram; THnBase Common base for n-dimensional histogram; THnIter Iterator over bins of a THnBase.; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THnT,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:94684,Integrability,wrap,wrapper,94684,ograms (one char per channel); TH2D 2-Dim histograms (one double per channel); TH2Editor TH2 editor; TH2F 2-Dim histograms (one float per channel); TH2GL GL renderer for TH2.; TH2I 2-Dim histograms (one 32 bits integer per channel); TH2Poly 2-Dim histogram with polygon bins; TH2PolyBin 2-Dim polygon bins; TH2S 2-Dim histograms (one short per channel); TH3 3-Dim histogram base class; TH3C 3-Dim histograms (one char per channel); TH3D 3-Dim histograms (one double per channel); TH3F 3-Dim histograms (one float per channel); TH3GL GL renderer class for TH3.; TH3I 3-Dim histograms (one 32 bits integer per channel); TH3S 3-Dim histograms (one short per channel); THLimitsFinder Class to find best axis limits; THStack A collection of histograms; THYPE HYPE shape; THaarMatrixT<double> ; THaarMatrixT<float> ; THashList Doubly linked list with hashtable for lookup; THashTable A hash table; THashTableIter Hash table iterator; THbookBranch A branch for a THbookTree; THbookFile ROOT interface to Hbook/PAW files; THbookKey Hbook id descriptor; THbookTree A wrapper class supporting Hbook ntuples (CWN and RWN); THelix A Helix drawn as a PolyLine3D; THilbertMatrixT<double> ; THilbertMatrixT<float> ; THilbertMatrixTSym<double> ; THilbertMatrixTSym<float> ; THistPainter Helper class to draw histograms; THn Base class for multi-dimensional histogram; THnBase Common base for n-dimensional histogram; THnIter Iterator over bins of a THnBase.; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THnT,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:97054,Integrability,protocol,protocol,97054," THnT<float> multi-dimensional histogram with templated storage; THnT<int> multi-dimensional histogram with templated storage; THnT<long> multi-dimensional histogram with templated storage; THnT<short> multi-dimensional histogram with templated storage; THnT<unsigned int> multi-dimensional histogram with templated storage; THnT<unsigned long> multi-dimensional histogram with templated storage; THnT<unsigned short> multi-dimensional histogram with templated storage; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; THttpCallArg Arguments for single HTTP call; THttpEngine abstract class which should provide http-based protocol for server; THttpServer HTTP server for ROOT analysis; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> ; TKDTree<int,float> ; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:97563,Integrability,interface,interface,97563," THnT<float> multi-dimensional histogram with templated storage; THnT<int> multi-dimensional histogram with templated storage; THnT<long> multi-dimensional histogram with templated storage; THnT<short> multi-dimensional histogram with templated storage; THnT<unsigned int> multi-dimensional histogram with templated storage; THnT<unsigned long> multi-dimensional histogram with templated storage; THnT<unsigned short> multi-dimensional histogram with templated storage; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; THttpCallArg Arguments for single HTTP call; THttpEngine abstract class which should provide http-based protocol for server; THttpServer HTTP server for ROOT analysis; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> ; TKDTree<int,float> ; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:97624,Integrability,wrap,wrapper,97624," THnT<float> multi-dimensional histogram with templated storage; THnT<int> multi-dimensional histogram with templated storage; THnT<long> multi-dimensional histogram with templated storage; THnT<short> multi-dimensional histogram with templated storage; THnT<unsigned int> multi-dimensional histogram with templated storage; THnT<unsigned long> multi-dimensional histogram with templated storage; THnT<unsigned short> multi-dimensional histogram with templated storage; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; THttpCallArg Arguments for single HTTP call; THttpEngine abstract class which should provide http-based protocol for server; THttpServer HTTP server for ROOT analysis; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> ; TKDTree<int,float> ; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:98867,Integrability,rout,routines,98867,"scription of a logical record on file.; TKeyMapFile Utility class for browsing TMapFile objects.; TKeySQL a special TKey for SQL data base; TKeyXML a special TKey for XML files; TLatex The Latex-style text processor class; TLeaf Leaf: description of a Branch data type; TLeafB A TLeaf for an 8 bit Integer data type.; TLeafC A TLeaf for a variable length string.; TLeafD A TLeaf for a 64 bit floating point data type.; TLeafElement A TLeaf for a general object derived from TObject.; TLeafF A TLeaf for a 32 bit floating point data type.; TLeafI A TLeaf for an Integer data type.; TLeafL A TLeaf for a 64 bit Integer data type.; TLeafO A TLeaf for an 8 bit Integer data type.; TLeafObject A TLeaf for a general object derived from TObject.; TLeafS A TLeaf for a 16 bit Integer data type.; TLegend Legend of markers/lines/boxes to represent obj's; TLegendEntry Storage class for one entry of a TLegend; TLibraryDocInfo documentation for a library; TLimit Class to compute 95% CL limits; TLimitDataSource input for TLimit routines; TLine A line segment; TLineEditor GUI for editing Line attributes; TLinearFitter fit a set of data points with a linear combination of functions; TLinearGradient Linear gradient fill.; TLinearMinimizer Implementation of the Minimizer interface using TLinearFitter; TLink Link: hypertext link to an object; TList Doubly linked list; TListIter Linked list iterator; TListOfDataMembers List of TDataMembers for a class; TListOfEnums ; TListOfEnumsWithLock ; TListOfEnumsWithLockIter ; TListOfFunctionTemplates List of TFunctions for a class; TListOfFunctions List of TFunctions for a class; TListOfFunctionsIter ; TLockFile Lock an object using a file; TLockGuard ; TLorentzRotation Lorentz transformations including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ;",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:99111,Integrability,interface,interface,99111,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:102780,Integrability,interface,interface,102780,"ermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoa",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:103507,Integrability,interface,interface,103507,ility density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoamKernelGauss Gaussian PDEFoam kernel estimator; TMVA::PDEFoamKernelLinN next neighbor PDEFoam kernel estimator; TMVA::PDEFoamKernelTrivial trivial PDEFoam kernel estimator; TMVA::PDEFoamMultiTarget Tree of PDEFoamCells; TMVA::PDEFoamTarget Tree of PDEFoamCells; TMVA::PDEFoamTargetDensity Class for Target density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::QuickMVAProbEstimator Interface to different separation critiera used in training algorithms; TMVA::ROCCalc ; TMVA::Ranking Method-specific ranking for input variables; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera u,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:103762,Integrability,interface,interface,103762,mentation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoamKernelGauss Gaussian PDEFoam kernel estimator; TMVA::PDEFoamKernelLinN next neighbor PDEFoam kernel estimator; TMVA::PDEFoamKernelTrivial trivial PDEFoam kernel estimator; TMVA::PDEFoamMultiTarget Tree of PDEFoamCells; TMVA::PDEFoamTarget Tree of PDEFoamCells; TMVA::PDEFoamTargetDensity Class for Target density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::QuickMVAProbEstimator Interface to different separation critiera used in training algorithms; TMVA::ROCCalc ; TMVA::Ranking Method-specific ranking for input variables; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:104180,Integrability,wrap,wrapper,104180,rface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoamKernelGauss Gaussian PDEFoam kernel estimator; TMVA::PDEFoamKernelLinN next neighbor PDEFoam kernel estimator; TMVA::PDEFoamKernelTrivial trivial PDEFoam kernel estimator; TMVA::PDEFoamMultiTarget Tree of PDEFoamCells; TMVA::PDEFoamTarget Tree of PDEFoamCells; TMVA::PDEFoamTargetDensity Class for Target density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::QuickMVAProbEstimator Interface to different separation critiera used in training algorithms; TMVA::ROCCalc ; TMVA::Ranking Method-specific ranking for input variables; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the SdivSqrtSplusB as separation criterion; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitter using a Simulated Annealing Algorithm; TMVA::TActivation Interface for TNeuron activation function classes; TMVA::TActivationChooser Class for choosing activation functions; TM,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:108300,Integrability,interface,interface,108300,"rmBase Base class for variable transformations; TMVA::kNN::Event ; TMacro Class supporting a collection of lines with C++ code.; TMap A (key,value) map; TMapFile Memory mapped directory structure; TMapIter Map iterator; TMapRec ; TMarker Marker; TMarker3DBox A special 3-D marker designed for event display; TMaterial Materials used in the Geometry Shapes; TMath ; TMathText TeX mathematical formula; TMatrixDEigen Eigen-Vectors/Values of a Matrix; TMatrixDSymEigen Eigen-Vectors/Values of a Matrix; TMatrixT<double> ; TMatrixT<float> ; TMatrixTBase<double> ; TMatrixTBase<float> ; TMatrixTColumn<double> ; TMatrixTColumn<float> ; TMatrixTColumn_const<double> ; TMatrixTColumn_const<float> ; TMatrixTCramerInv ; TMatrixTDiag<double> ; TMatrixTDiag<float> ; TMatrixTDiag_const<double> ; TMatrixTDiag_const<float> ; TMatrixTFlat<double> ; TMatrixTFlat<float> ; TMatrixTFlat_const<double> ; TMatrixTFlat_const<float> ; TMatrixTLazy<double> ; TMatrixTLazy<float> ; TMatrixTRow<double> ; TMatrixTRow<float> ; TMatrixTRow_const<double> ; TMatrixTRow_const<float> ; TMatrixTSparse<double> ; TMatrixTSparse<float> ; TMatrixTSparseDiag<double> ; TMatrixTSparseDiag<float> ; TMatrixTSparseDiag_const<double> ; TMatrixTSparseDiag_const<float> ; TMatrixTSparseRow<double> ; TMatrixTSparseRow<float> ; TMatrixTSparseRow_const<double> ; TMatrixTSparseRow_const<float> ; TMatrixTSub<double> ; TMatrixTSub<float> ; TMatrixTSub_const<double> ; TMatrixTSub_const<float> ; TMatrixTSym<double> ; TMatrixTSym<float> ; TMatrixTSymCramerInv ; TMatrixTSymLazy<double> ; TMatrixTSymLazy<float> ; TMehrotraSolver Mehrotra Qp Solver class; TMemFile A ROOT file that reads/writes via HDFS; TMemStat a user interface class of MemStat; TMemStatShow class to visualize the results of TMemStat; TMemberInspector ABC for inspecting class data members; TMemberStreamer ; TMergerInfo Basic info on merger, i.e. worker serving as merger; TMessage Message buffer class; TMessageHandler Generic message handler; TMethod Dictionary for a c",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:108579,Integrability,message,message,108579,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:108775,Integrability,interface,interface,108775,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:108926,Integrability,interface,interface,108926,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:111133,Integrability,wrap,wrapper,111133," TNDArrayT<unsigned long> N-dimensional array; TNDArrayT<unsigned short> N-dimensional array; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNetXNGFile ROOT class definition; TNetXNGFileStager ! Interface to a 'XRD' staging; TNetXNGSystem ROOT class definition; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOptionListItem Element in the list of options.; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TOutputListSelectorDataMap Converter from output list to TSelector data members; TPARA PARA shape; TPBHandleDSType Streamable PBHandleDSType; TPBHistType Streamable PBHistType; TPBReadType Streamable PBReadType; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work packets for parallel processing; TPacketizerAdaptive Generate work packets for parallel processing; TPacketizerFile Generate work packets for parallel processing; TPacketizerMulti Generate work packets for paral",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:112270,Integrability,interface,interface,112270,Set TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOptionListItem Element in the list of options.; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TOutputListSelectorDataMap Converter from output list to TSelector data members; TPARA PARA shape; TPBHandleDSType Streamable PBHandleDSType; TPBHistType Streamable PBHistType; TPBReadType Streamable PBReadType; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work packets for parallel processing; TPacketizerAdaptive Generate work packets for parallel processing; TPacketizerFile Generate work packets for parallel processing; TPacketizerMulti Generate work packets for parallel processing; TPacketizerUnit Generate work packets for parallel processing; TPad A Graphics pad; TPadEditor editor of TPad objects; TPadPainter Abstract interface for painting in TPad; TPainter3dAlgorithms Hidden line removal package; TPair ; TPaletteAxis class used to display a color palette axis for 2-d plots; TPaletteEditor Base class for palette editor; TParallelCoord To display parallel coordinates plots.; TParallelCoordEditor GUI for editing the parallel coordinates plot attributes.; TParallelCoordRange A TParallelCoordRange is a range used for parallel coordinates plots.; TParallelCoordSelect A TParallelCoordSelect is a specialised TList to hold TParallelCoordRanges used by TParallelCoord.; TParallelCoordVar A Variable of a parallel coordinates plot.; TParallelMergingFile TFile specialization that will semi-automatically upload its content to a merging server.; TParameter<Long64_t> ; TParameter<bool> ; TParameter<double> ; TParameter<float> ; TParameter<int> ; TParameter<long> ; TPa,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116272,Integrability,interface,interface,116272, proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots;,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116321,Integrability,interface,interface,116321,PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:118521,Integrability,interface,interface,118521,list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TProtoClass Persistent TClass; TProtoClass::TProtoRealData Persistent version of TRealData; TPyArg Python morphing argument type; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQApplication creates ROOT environment with the Qt windowing system; TQCanvasImp ABC describing Qt GUI independent main window; TQCanvasMenu interface to Qt based context sensitive popup menus; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:118940,Integrability,interface,interface,118940,"mation for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQMimeTypes Pool of mime type objects; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQRootApplication creates Qt environment interface with the ROOT windowing system; TQRootCanvas interface to Qt eventloop to handle user input; TQRootDialog prompt for the arguments of an object's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQtApplication Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootGuiFactory Factory for Qt-based ROOT GUI components; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number genera",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:118995,Integrability,interface,interface,118995,"mation for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQMimeTypes Pool of mime type objects; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQRootApplication creates Qt environment interface with the ROOT windowing system; TQRootCanvas interface to Qt eventloop to handle user input; TQRootDialog prompt for the arguments of an object's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQtApplication Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootGuiFactory Factory for Qt-based ROOT GUI components; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number genera",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:121044,Integrability,interface,interface,121044,d ROOT GUI components; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twister; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing of window IDs mapping. Needed for replaying events.; TRecorder Class provides direct recorder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobust,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:121360,Integrability,interface,interface,121360,ternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number generator (periodicity = 10**9); TRandom1 Ranlux Random number generators with periodicity > 10**14; TRandom2 Random number generator with periodicity of 10**26; TRandom3 Random number generator: Mersenne Twister; TRealData Description of persistent data members; TRecCmdEvent Class stores information about 1 commandline event (= 1 command typed by user in commandline); TRecEvent Abstract class. Defines basic interface for storing information about ROOT events; TRecExtraEvent Class stores information about extra events; TRecGuiEvent Class stores information about 1 GUI event in ROOT; TRecWinPair Class used for storing of window IDs mapping. Needed for replaying events.; TRecorder Class provides direct recorder/replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBro,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:121690,Integrability,interface,interface,121690,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:122295,Integrability,interface,interface,122295,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:123802,Integrability,interface,interface,123802,"play help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRootSniffer Sniffer of ROOT objects; TRootSnifferScanRec Scan record for objects sniffer; TRootSnifferStore structure for results store of objects sniffer; TRootSnifferStoreJson json results store of objects sniffer; TRootSnifferStoreXml xml results store of objects sniffer; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TS3HTTPRequest Create generic HTTP request for Amazon S3 and Google Storage services; TS3WebFile Read a ROOT file from a S3 server; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury information about column from SQL table; TSQLFile ROOT TFile interface to SQL database; TSQLMonitoringWriter Sending monitoring data to a SQL DB; TSQLObjectData Keeps the data requested from the SQL server for an object.; TSQLObjectDataPool XML object keeper class; TSQLObjectInfo Info (classname, version) about object in database; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket ; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307); TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted vers",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:125634,Integrability,interface,interface,125634,"LObjectDataPool XML object keeper class; TSQLObjectInfo Info (classname, version) about object in database; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket ; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307); TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on workers; TSlaveLite PROOF lite worker server; TSlider A user interface slider.; TSliderBox The moving box of a TSlider; TSocket This class implements client sockets; TSortedList A sorted list; TSpectrum Peak Finder, background estimator, Deconvolution; TSpectrum2 Peak Finder, background estimator, Deconvolution for 2-D histograms; TSpectrum2Fit Spectrum2 Fitter using algorithm without matri",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:127160,Integrability,inject,injected,127160,"ctrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrum2Painter TSpectrum 3d graphics package; TSpectrum2Transform Spectrum2 Transformer, it calculates classic orthogonal 2D transforms; TSpectrum3 Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms; TSpectrumFit Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrumTransform Spectrum Transformer, it calculates classic orthogonal 1D transforms; TSpider Helper class to draw spider; TSpiderEditor GUI for editing the spider plot attributes.; TSpline Spline base class; TSpline3 Class to create third natural splines; TSpline5 Class to create quintic natural splines; TSplinePoly Spline polynomial terms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObje",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:128963,Integrability,interface,interface,128963," element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform command line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TTeXDump Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precisi",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:130902,Integrability,interface,interface,130902,; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeReader A simple interface to read trees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUpload,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:131586,Integrability,wrap,wrappers,131586,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132106,Integrability,interface,interface,132106,Tree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geome,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132274,Integrability,interface,interface,132274,or L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Inform,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132448,Integrability,interface,interface,132448,ystematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132504,Integrability,interface,interface,132504,ix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for pa,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132649,Integrability,interface,interface,132649,us distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualP,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132754,Integrability,interface,interface,132754,rapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132817,Integrability,interface,interface,132817,rapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:132874,Integrability,interface,interface,132874,rapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:133428,Integrability,interface,interface,133428,rapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:133610,Integrability,interface,interface,133610,rapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:133672,Integrability,interface,interface,133672,rapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUploadDataSetDlg New query dialog; TUri Represents an URI; TUrl Represents an URL; TVector2 A 2D physics vector; TVector3 A 3D physics vector; TVectorT<double> ; TVectorT<float> ; TView 3-D View abstract interface for 3-D views; TView3D 3-D View; TViewer3DPad A 3D Viewer painter for TPads; TViewerX3D Interface to the X3D viewer; TVirtualArray ; TVirtualAuth client auth interface; TVirtualBranchBrowsable Base class for helper objects used for browsing; TVirtualCollectionProxy ; TVirtualDragManager drag and drop manager; TVirtualFFT abstract interface for FFT calculations; TVirtualFitter Abstract interface for fitting; TVirtualGLManip Interface for GL manipulator; TVirtualGLPainter Interface for OpenGL painter; TVirtualGeoPainter Abstract interface for geometry painters; TVirtualGeoTrack virtual geometry tracks; TVirtualGraphPainter Abstract interface for histogram painters; TVirtualHistPainter Abstract interface for histogram painters; TVirtualIndex Abstract interface for Tree Index; TVirtualIsAProxy ; TVirtualMC Interface to Monte Carlo; TVirtualMCApplication Interface to MonteCarlo application; TVirtualMCDecayer Particle Decayer Base Class; TVirtualMCGeometry Interface to Monte Carlo geometry construction; TVirtualMCStack Interface to a particles stack; TVirtualMagField Abstract base field class; TVirtualMonitoringReader ABC for Reading Monitoring Information; TVirtualMonitoringWriter ABC for Sending Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:133930,Integrability,interface,interface,133930,"nding Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.; TVirtualPerfStats ABC for collecting PROOF statistics; TVirtualProofPlayer Abstract PROOF player; TVirtualStreamerInfo Abstract Interface describing Streamer information for one class; TVirtualTableInterface ; TVirtualTreePlayer Abstract interface for Tree players; TVirtualViewer3D Abstract interface to 3D viewers; TVirtualX ABC defining a generic interface to graphics system; TVolume Description of parameters to position a 3-D geometry object; TVolumePosition Description of parameters to position a 3-D geometry object; TVolumeView Special kind of TDataSet; TVolumeViewIter Volume view iterator; TWbox A window box (box with 3-D effects); TWebFile A ROOT file that reads via a http server; TWebSystem Directory handler for HTTP (TWebFiles); TX11GLManager X11-specific version of TGLManager; TXHandler Template class for handling of async events; TXMLAttr XML attribute pair; TXMLDocument XML document created by the DOM parser; TXMLEngine ROOT XML I/O parser, user by TXMLFile to read/write xml files; TXMLFile ROOT file in XML format; TXMLNode XML node under DOM tree; TXMLParser XML SAX parser; TXMLPlayer Generation of external xml streamers; TXMLSetup settings to be stored in XML files; TXNetFile TFile implementation to deal with new xrootd server.; TXNetFileStager Interface to a 'XRD' staging; TXNetSystem System management class for xrootd servers; TXProofMgr XrdProofd PROOF manager interface; TXProofServ XRD PROOF Server Application Interface; TXSlave Xrd PROOF slave server; TXSocket A high level connection class for PROOF; TXSocketHandler Input handler class for xproofd sockets; TXTRU TXTRU shape; TXUnixSoc",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:133984,Integrability,interface,interface,133984,"nding Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.; TVirtualPerfStats ABC for collecting PROOF statistics; TVirtualProofPlayer Abstract PROOF player; TVirtualStreamerInfo Abstract Interface describing Streamer information for one class; TVirtualTableInterface ; TVirtualTreePlayer Abstract interface for Tree players; TVirtualViewer3D Abstract interface to 3D viewers; TVirtualX ABC defining a generic interface to graphics system; TVolume Description of parameters to position a 3-D geometry object; TVolumePosition Description of parameters to position a 3-D geometry object; TVolumeView Special kind of TDataSet; TVolumeViewIter Volume view iterator; TWbox A window box (box with 3-D effects); TWebFile A ROOT file that reads via a http server; TWebSystem Directory handler for HTTP (TWebFiles); TX11GLManager X11-specific version of TGLManager; TXHandler Template class for handling of async events; TXMLAttr XML attribute pair; TXMLDocument XML document created by the DOM parser; TXMLEngine ROOT XML I/O parser, user by TXMLFile to read/write xml files; TXMLFile ROOT file in XML format; TXMLNode XML node under DOM tree; TXMLParser XML SAX parser; TXMLPlayer Generation of external xml streamers; TXMLSetup settings to be stored in XML files; TXNetFile TFile implementation to deal with new xrootd server.; TXNetFileStager Interface to a 'XRD' staging; TXNetSystem System management class for xrootd servers; TXProofMgr XrdProofd PROOF manager interface; TXProofServ XRD PROOF Server Application Interface; TXSlave Xrd PROOF slave server; TXSocket A high level connection class for PROOF; TXSocketHandler Input handler class for xproofd sockets; TXTRU TXTRU shape; TXUnixSoc",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:134042,Integrability,interface,interface,134042,"nding Monitoring Information; TVirtualMutex Virtual mutex lock class; TVirtualObject ; TVirtualPS Abstract interface to a PostScript driver; TVirtualPacketizer Generate work packets for parallel processing; TVirtualPad Abstract base class for Pads and Canvases; TVirtualPadEditor Abstract interface for graphics pad editor; TVirtualPadPainter Painter interface for pad.; TVirtualPerfStats ABC for collecting PROOF statistics; TVirtualProofPlayer Abstract PROOF player; TVirtualStreamerInfo Abstract Interface describing Streamer information for one class; TVirtualTableInterface ; TVirtualTreePlayer Abstract interface for Tree players; TVirtualViewer3D Abstract interface to 3D viewers; TVirtualX ABC defining a generic interface to graphics system; TVolume Description of parameters to position a 3-D geometry object; TVolumePosition Description of parameters to position a 3-D geometry object; TVolumeView Special kind of TDataSet; TVolumeViewIter Volume view iterator; TWbox A window box (box with 3-D effects); TWebFile A ROOT file that reads via a http server; TWebSystem Directory handler for HTTP (TWebFiles); TX11GLManager X11-specific version of TGLManager; TXHandler Template class for handling of async events; TXMLAttr XML attribute pair; TXMLDocument XML document created by the DOM parser; TXMLEngine ROOT XML I/O parser, user by TXMLFile to read/write xml files; TXMLFile ROOT file in XML format; TXMLNode XML node under DOM tree; TXMLParser XML SAX parser; TXMLPlayer Generation of external xml streamers; TXMLSetup settings to be stored in XML files; TXNetFile TFile implementation to deal with new xrootd server.; TXNetFileStager Interface to a 'XRD' staging; TXNetSystem System management class for xrootd servers; TXProofMgr XrdProofd PROOF manager interface; TXProofServ XRD PROOF Server Application Interface; TXSlave Xrd PROOF slave server; TXSocket A high level connection class for PROOF; TXSocketHandler Input handler class for xproofd sockets; TXTRU TXTRU shape; TXUnixSoc",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:135091,Integrability,interface,interface,135091,"amer information for one class; TVirtualTableInterface ; TVirtualTreePlayer Abstract interface for Tree players; TVirtualViewer3D Abstract interface to 3D viewers; TVirtualX ABC defining a generic interface to graphics system; TVolume Description of parameters to position a 3-D geometry object; TVolumePosition Description of parameters to position a 3-D geometry object; TVolumeView Special kind of TDataSet; TVolumeViewIter Volume view iterator; TWbox A window box (box with 3-D effects); TWebFile A ROOT file that reads via a http server; TWebSystem Directory handler for HTTP (TWebFiles); TX11GLManager X11-specific version of TGLManager; TXHandler Template class for handling of async events; TXMLAttr XML attribute pair; TXMLDocument XML document created by the DOM parser; TXMLEngine ROOT XML I/O parser, user by TXMLFile to read/write xml files; TXMLFile ROOT file in XML format; TXMLNode XML node under DOM tree; TXMLParser XML SAX parser; TXMLPlayer Generation of external xml streamers; TXMLSetup settings to be stored in XML files; TXNetFile TFile implementation to deal with new xrootd server.; TXNetFileStager Interface to a 'XRD' staging; TXNetSystem System management class for xrootd servers; TXProofMgr XrdProofd PROOF manager interface; TXProofServ XRD PROOF Server Application Interface; TXSlave Xrd PROOF slave server; TXSocket A high level connection class for PROOF; TXSocketHandler Input handler class for xproofd sockets; TXTRU TXTRU shape; TXUnixSocket Connection class for Xrd PROOF using UNIX sockets; TZIPFile A ZIP archive file; TZIPMember A ZIP archive member file; ToolBarData_t ; UserGroup_t ; WindowAttributes_t ; _root_std_complex<double> ; _root_std_complex<float> ; _root_std_complex<int> ; _root_std_complex<long> ; tableDescriptor_st . » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24289,Modifiability,variab,variable,24289, from a TTreeFriend.; ROOT::THnBaseBrowsable Browser-helper for THnBase; ROOT::TImpProxy<Long64_t> ; ROOT::TImpProxy<ULong64_t> ; ROOT::TImpProxy<bool> ; ROOT::TImpProxy<char> ; ROOT::TImpProxy<double> ; ROOT::TImpProxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOpt,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24599,Modifiability,variab,variable,24599, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24656,Modifiability,variab,variable,24656, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24966,Modifiability,variab,variable,24966, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25072,Modifiability,variab,variable,25072, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25548,Modifiability,variab,variable,25548, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25867,Modifiability,variab,variable,25867,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26122,Modifiability,adapt,adaptive,26122,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:26213,Modifiability,adapt,adaptive,26213,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:30140,Modifiability,variab,variable,30140,"RooCFunction3Ref<double,unsigned int,unsigned int,double> ; RooCFunction4Binding<double,double,double,double,bool> ; RooCFunction4Binding<double,double,double,double,double> ; RooCFunction4Binding<double,double,double,double,int> ; RooCFunction4PdfBinding<double,double,double,double,bool> ; RooCFunction4PdfBinding<double,double,double,double,double> ; RooCFunction4PdfBinding<double,double,double,double,int> ; RooCFunction4Ref<double,double,double,double,bool> ; RooCFunction4Ref<double,double,double,double,double> ; RooCFunction4Ref<double,double,double,double,int> ; RooCacheManager<RooAbsCacheElement> ; RooCacheManager<vector<double> > ; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output; RooCachedReal P.d.f class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter constraints; RooConvCoefVar Auxiliary class representing the coefficient of a RooAbsAnaConvPdf as a RooAbsReal; RooConvGenContext Context for generating a dataset from a PDF; RooConvIntegrandBinding RooAbsFunc representation of convolution integrands; RooCurve 1-dimensional smooth curve for",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:32268,Modifiability,variab,variables,32268,ule to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedBinding Your description goes here...; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expre,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:32683,Modifiability,extend,extended,32683,"ataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedBinding Your description goes here...; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunc",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:32848,Modifiability,extend,extended,32848,"ivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedBinding Your description goes here...; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExp",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:34407,Modifiability,variab,variables,34407," TFormula expression; RooFracRemainder Utility function calculating remainder fraction, i.e. 1-sum_i(a_i); RooFunctor Export RooAbsReal as functor; RooFunctor1DBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctor1DPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionOneDim; RooFunctorBinding RooAbsReal binding to a ROOT::Math::IBaseFunctionMultiDim; RooFunctorPdfBinding RooAbsPdf binding to a ROOT::Math::IBaseFunctionMultiDim; RooGExpModel Gauss (x) Expontial resolution model; RooGamma Gaussian PDF; RooGaussKronrodIntegrator1D 1-dimensional Gauss-Kronrod numerical integration engine; RooGaussModel Gaussian Resolution Model; RooGaussian Gaussian PDF; RooGenContext Universal context for generating toy MC data from any p.d.f; RooGenFitStudy Generate-and-Fit study module; RooGenFunction Export RooAbsReal as functor; RooGenProdProj General form of projected integral of product of PDFs, utility class for RooProdPdf; RooGenericPdf Generic PDF defined by string expression and list of variables; RooGlobalFunc ; RooGrid Utility class for RooMCIntegrator holding a multi-dimensional grid; RooHashTable Hash table; RooHist 1-dimensional histogram with error bars; RooHistConstraint Your description goes here...; RooHistError Utility class for calculating histogram errors; RooHistFunc Histogram based function; RooHistPdf Histogram based PDF; RooImproperIntegrator1D 1-dimensional improper integration engine; RooInt Container class for Int_t; RooIntegralMorph Linear shape interpolation operator p.d.f; RooIntegrator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooL",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:36167,Modifiability,variab,variable,36167,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37158,Modifiability,extend,extended,37158,"dCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCac",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37864,Modifiability,config,configuration,37864,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37958,Modifiability,config,configuration,37958,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:38124,Modifiability,portab,portable,38124,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:38277,Modifiability,parameteriz,parameterized,38277,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:39931,Modifiability,variab,variable,39931,on; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over a RooAbsReal object; RooRealMPFE Multi-process front-end for parallel calculation of a real valued function; RooRealProxy Proxy for a RooAbsReal object; RooRealSumPdf PDF constructed from a sum of (non-pdf) functions; RooRealVar Real-valued variable; RooRealVarSharedProperties Shared properties of a RooRealVar clone set; RooRecursiveFraction Recursive fraction formula f1*(1-f2)*(1-f3) etc...; RooRefArray Helper class for proxy lists; RooRefCountList RooLinkedList with reference counting; RooResolutionModel Abstract Resolution Model; RooScaledFunc Function binding applying scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of R,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41214,Modifiability,config,configuration,41214,"ng scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for th",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41290,Modifiability,config,configuration,41290,"ng scaling to another function binding; RooSecondMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooSegmentedIntegrator1D 1-dimensional piece-wise numerical integration engine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for th",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41418,Modifiability,config,configuration,41418,"ngine; RooSegmentedIntegrator2D 2-dimensional piece-wise numerical integration engine; RooSentinel ; RooSetPair Utility class holding a pair of RooArgSet pointers; RooSetProxy Proxy class for a RooArgSet; RooSharedProperties Abstract interface for shared property implementations; RooSharedPropertiesList Manager for shared properties among clones of certain RooAbsArg-derived types; RooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic inter",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:43025,Modifiability,flexible,flexible,43025,"rection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::HistFactory::HistRef ; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::HistoToWorkspaceFactoryFast ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HistFactory::Measurement ; RooStats::HistFactory::PreprocessFunction ; RooStats::HistFactory::RooBarlowBeestonLL Real-valued function representing a Barlow-Beeston minimized profile likelihood of external (likelihood) function; RooStats::HistFactory::Sample ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:45386,Modifiability,config,configuration,45386,kelihood) function; RooStats::HistFactory::Sample ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:47825,Modifiability,variab,variable,47825,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:49476,Modifiability,variab,variables,49476," to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_t; RooTable Abstract interface for tables; RooThreshEntry Utility class for RooThresholdCategory, holding a threshold/category state pair; RooThresholdCategory Real-to-Category function defined by series of threshold; RooTrace Memory tracer utility for RooFit objects; RooTreeData Dummy class for legacy RooDataSet support; RooTreeDataStore TTree-based Data Storage class; RooTruthModel Truth resolution model (delta function); RooUnblindCPAsymVar CP-Asymmetry unblinding transformation; RooUnblindOffset Offset unblinding transformation; RooUnblindPrecision Precision unblinding transformation; RooUnblindUniform Uniform unblinding transformation; RooUniform Flat PDF in N dimensions; RooUniformBinning Uniform binning specification; RooUnitTest Abstract base class for RooFit/RooStats unit regression tests; RooVectorDataStore STL-vector-based Data Storage class; RooVectorDataStore::CatVector STL-vector-based Data Storage class; RooVectorDataStore::RealFullVector STL-vector-based Data Storage class; RooVectorDataStore::RealVector STL-vector-based Data Storage class; RooVoigtian Voigtian PDF (Gauss (x) BreitWigner); RooWorkspace Persistable project container for (composite) pdfs, functions, variables and datasets; RooWorkspace::CodeRepo Code repository for RooWorkspace; RooWorkspace::WSDir TDirectory representation of RooWorkspace; RooXYChi2Var Chi^2 function of p.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:49841,Modifiability,plugin,plugin,49841,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:49918,Modifiability,plugin,plugin,49918,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:52249,Modifiability,plugin,plugin,52249,ray of longs; TArrayL64 Array of long64s; TArrayS Array of shorts; TArrow An arrow (line with a arrowhead); TArrowEditor GUI for editing arrow attributes; TAtomicCount ; TAtt3D 3D attributes; TAttAxis Axis attributes; TAttBBox Helper for management of bounding-box information; TAttBBox2D 2D bounding box attributes; TAttCanvas Canvas attributes; TAttFill Fill area attributes; TAttFillEditor GUI for editing fill attributes; TAttImage Image attributes; TAttLine Line attributes; TAttLineEditor GUI for editing line attributes; TAttMarker Marker attributes; TAttMarkerEditor GUI for editing marker attributes; TAttPad Pad attributes; TAttParticle Particle definition; TAttText Text attributes; TAttTextEditor GUI for editing text attributes; TAuthenticate Class providing remote authentication service; TAxis Axis class; TAxis3D 3-D ruler painting class; TAxisEditor axis editor; TBRIK TBRIK shape; TBackCompFitter Class providing backward compatibility for fitting by implementing the TVirtualFitter interface; TBase64 Base64 encoding/decoding; TBaseClass Description of a base class; TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:53751,Modifiability,inherit,inheritance,53751,"Buffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorGradient Gradient fill.; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar butt",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:54325,Modifiability,variab,variable,54325,Item One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorGradient Gradient fill.; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar button; TControlBarImp GUI independent controlbar abc; TCrown A crown or segment of crown; TCurlyArc A curly arc; TCurlyArcEditor GUI for editing arrow attributes; TCurlyLine A curly polyline; TCurlyLineEditor GUI for editing arrow attributes; TCut A specialized string object used for TTree selections; TCutG A Graphical cut.; TDNDData Drag and drop specific data; TDOMParser DOM Parser; TDSet Data set for remote processing (PROOF); TDSetElement A TDSet element; TDSetProxy TDSet proxy for use on slaves; TDataMember Dictionary for a class data member; TDataSet The base class to create the hierarchical data structures; TDataSetIter class-iterator to navigate TDataSet structure; TDataSetManager Abstract data set manager class; TDataSetManagerFile DataSet manager for files; TDataType Basic data type descriptor; TDatabasePDG PDG particle database; TDatime Date and time 950130 124559; TDecayChannel Class describi,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:54365,Modifiability,variab,variable,54365,Item One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorGradient Gradient fill.; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar button; TControlBarImp GUI independent controlbar abc; TCrown A crown or segment of crown; TCurlyArc A curly arc; TCurlyArcEditor GUI for editing arrow attributes; TCurlyLine A curly polyline; TCurlyLineEditor GUI for editing arrow attributes; TCut A specialized string object used for TTree selections; TCutG A Graphical cut.; TDNDData Drag and drop specific data; TDOMParser DOM Parser; TDSet Data set for remote processing (PROOF); TDSetElement A TDSet element; TDSetProxy TDSet proxy for use on slaves; TDataMember Dictionary for a class data member; TDataSet The base class to create the hierarchical data structures; TDataSetIter class-iterator to navigate TDataSet structure; TDataSetManager Abstract data set manager class; TDataSetManagerFile DataSet manager for files; TDataType Basic data type descriptor; TDatabasePDG PDG particle database; TDatime Date and time 950130 124559; TDecayChannel Class describi,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:57167,Modifiability,config,configuration,57167,"atrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary Interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnum Enum type class; TEnumConstant ; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size bo",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:61259,Modifiability,variab,variable,61259,"se class for event management and navigation.; TEveException Exception-type thrown by Eve classes.; TEveFrameBox Description of a 2D or 3D frame that can be used to visually group a set of objects.; TEveFrameBoxGL GL-renderer for TEveFrameBox class.; TEveGDoubleValuator Composite GUI element for selection of range (label, two number-entries and double-slider).; TEveGListTreeEditorFrame Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGedNameFrame Top name-frame used in EVE.; TEveGedNameTextButton Button for GED name-frame.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoShapeProjected ; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; TEveGridStepper Provide discrete position coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-edit",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63673,Modifiability,variab,variable,63673,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointSetArrayEditor Editor for TEvePointSetArray class.; TEvePointSetProj",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63727,Modifiability,config,configuration,63727,"or for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointSetArrayEditor Editor for TEvePointSetArray class.; TEvePointSetProjected Projected copy of a TEvePointSet.; TEvePolygonSetProjected Set of pro",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:71372,Modifiability,adapt,adapting,71372,"tCgi fastcgi engine for THttpServer; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TFunctionTemplate Dictionary for function template; TG16ColorSelector 16 color cells; TGApplication GUI application singleton; TGButton Button widget abstract base class; TGBut",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:72930,Modifiability,plugin,plugin,72930,"e native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitResult Class holding the result of the fit; TFitResultPtr indirection to TFitResult; TFitter The ROOT standard fitter based on TMinuit; TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamSampler ; TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TFunctionTemplate Dictionary for function template; TG16ColorSelector 16 color cells; TGApplication GUI application singleton; TGButton Button widget abstract base class; TGButtonGroup Organizes TGButtons in a group; TGCanvas A canvas with two scrollbars and a viewport; TGCheckButton A check button widget; TGClient Class making connection to display server; TGColorDialog Color selection dialog; TGColorFrame Frame for color cell; TGColorPalette Color palette widget; TGColorPick Color picker widget; TGColorPopup Color selector popup; TGColorSelect Color selection checkbutton; TGColumnLayout Column layout manager; TGComboBox Combo box widget; TGComboBoxPopup Combobox popup window; TGCommandPlugin Command (I/O redirection) plugin for the new ROOT Browser; TGCompositeFrame Base class for composite widgets (menubars, etc.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:88139,Modifiability,plugin,plugins,88139,"; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.; TGeoElement base element class; TGeoElementRN radionuclides class; TGeoElementTable table of elements; TGeoEltu elliptical tube class; TGeoEltuEditor TGeoEltu editor; TGeoExtension User extension for volumes and nodes; TGeoGedFrame Common base-class for geombuilder editors.; TGeoGenTrans rotation + translation + scale; TGeoGlobalMagField Global field manager; TGeoGtra G3 GTRA shape; TGeoGtraEditor TGeoGtra editor; TGeoHMatrix global matrix class; TGeoHalfSpace half-space class; TGeoHelix helix class; TGeoHype hyperboloid class; TGeoHypeEditor TGeoHype editor; TGeoIdentity identity transformation class; TGeoIntersection intersection node; TGeoIsotope Isotope class defined by Z,N,A; TGeoIterator Iterator for geometry.; TGeoIteratorPlugin ABC for user plugins connecter to a geometry iterator.; TGeoMCGeometry VMC TGeo Geometry builder; TGeoManager geometry manager; TGeoManagerEditor TGeoManager editor; TGeoMaterial base material class; TGeoMaterialDialog List-Tree based material dialog; TGeoMaterialEditor TGeoMaterial editor; TGeoMatrix base geometrical transformation class; TGeoMatrixDialog List-Tree based matrix dialog; TGeoMedium tracking medium; TGeoMediumDialog List-Tree based medium dialog; TGeoMediumEditor TGeoMedium editor; TGeoMixture material mixtures; TGeoMixtureEditor TGeoMixture editor; TGeoNavigator geometry navigator class; TGeoNavigatorArray An array of navigators; TGeoNode base class for all geometry nodes; TGeoNodeCache cache of reusable physical nodes; TGeoNodeEditor TGeoNode editor; TGeoNodeMatrix a geometry node in the general case; TGeoNodeOffset a geometry node with just an offset; TGeoOverlap base class for geometical overlaps; TGeoPNEntry a physical node entry with unique name; TGeoPainter geometry painter; TGeoP",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:91638,Modifiability,variab,variable,91638,"s torus class; TGeoTorusEditor TGeoTorus editor; TGeoTrack geometry tracks class; TGeoTransientPanel List-Tree based dialog; TGeoTranslation translation class; TGeoTranslationEditor TGeoTranslation editor; TGeoTrap G3 TRAP shape; TGeoTrapEditor TGeoTrap editor; TGeoTrd1 TRD1 shape class; TGeoTrd1Editor TGeoTrd1 editor; TGeoTrd2 TRD2 shape class; TGeoTrd2Editor TGeoTrd2 editor; TGeoTreeDialog List-Tree based dialog; TGeoTube cylindrical tube class; TGeoTubeEditor TGeoTube editor; TGeoTubeSeg cylindrical tube segment class; TGeoTubeSegEditor TGeoTubeSeg editor; TGeoUniformMagField Uniform magnetic field; TGeoUnion union node; TGeoVolume geometry volume descriptor; TGeoVolumeAssembly an assembly of volumes; TGeoVolumeDialog List-Tree based volume dialog; TGeoVolumeEditor TGeoVolume editor; TGeoVolumeMulti class to handle multiple volumes in one step; TGeoVoxelFinder voxel finder class; TGeoXtru extruded polygon class; TGeometry Structure for Matrices, Shapes and Nodes; TGlobal Global variable class; TGondzioSolver Gondzio Qp Solver class; TGraph Graph graphics class; TGraph2D Set of n x[n],y[n],z[n] points with 3-d graphics including Delaunay triangulation; TGraph2DErrors A 2D graph with error bars; TGraph2DPainter TGraph2D painter; TGraphAsymmErrors A graph with asymmetric error bars; TGraphBentErrors A graph with bent, asymmetric error bars; TGraphDelaunay Delaunay triangulation; TGraphEdge Graph edge class; TGraphEditor graph editor; TGraphErrors A graph with error bars; TGraphNode Graph node class; TGraphPainter TGraph painter; TGraphPolar Polar graph; TGraphPolargram Polar axis; TGraphQQ to create and to draw quantile-quantile plots; TGraphSmooth Graph Smoother; TGraphStruct Graph structure class; TGraphTime An array of objects evolving with time; TGrid ABC defining interface to GRID services; TGridCollection ABC managing collection of files on the Grid; TGridJDL ABC defining interface JDL generator; TGridJob ABC defining interface to a GRID job; TGridJobStatus ABC",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:97305,Modifiability,plugin,plugins,97305," THnT<float> multi-dimensional histogram with templated storage; THnT<int> multi-dimensional histogram with templated storage; THnT<long> multi-dimensional histogram with templated storage; THnT<short> multi-dimensional histogram with templated storage; THnT<unsigned int> multi-dimensional histogram with templated storage; THnT<unsigned long> multi-dimensional histogram with templated storage; THnT<unsigned short> multi-dimensional histogram with templated storage; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; THttpCallArg Arguments for single HTTP call; THttpEngine abstract class which should provide http-based protocol for server; THttpServer HTTP server for ROOT analysis; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> ; TKDTree<int,float> ; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:98186,Modifiability,variab,variable,98186,"TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> ; TKDTree<int,float> ; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.; TKeyMapFile Utility class for browsing TMapFile objects.; TKeySQL a special TKey for SQL data base; TKeyXML a special TKey for XML files; TLatex The Latex-style text processor class; TLeaf Leaf: description of a Branch data type; TLeafB A TLeaf for an 8 bit Integer data type.; TLeafC A TLeaf for a variable length string.; TLeafD A TLeaf for a 64 bit floating point data type.; TLeafElement A TLeaf for a general object derived from TObject.; TLeafF A TLeaf for a 32 bit floating point data type.; TLeafI A TLeaf for an Integer data type.; TLeafL A TLeaf for a 64 bit Integer data type.; TLeafO A TLeaf for an 8 bit Integer data type.; TLeafObject A TLeaf for a general object derived from TObject.; TLeafS A TLeaf for a 16 bit Integer data type.; TLegend Legend of markers/lines/boxes to represent obj's; TLegendEntry Storage class for one entry of a TLegend; TLibraryDocInfo documentation for a library; TLimit Class to compute 95% CL limits; TLimitDataSource input for TLimit routines; TLine A line segment; TLineEditor GUI for editing Line attributes; TLinearFitter fit a set of data points with a linear combination of functions; TLinearGradient Linear gradient fill.; TLinearMinimizer Implementation of the Minimizer interface using TLinearFitter; TLink Link: hypertext link to an object; TLi",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:100124,Modifiability,config,configuration,100124,"earFitter; TLink Link: hypertext link to an object; TList Doubly linked list; TListIter Linked list iterator; TListOfDataMembers List of TDataMembers for a class; TListOfEnums ; TListOfEnumsWithLock ; TListOfEnumsWithLockIter ; TListOfFunctionTemplates List of TFunctions for a class; TListOfFunctions List of TFunctions for a class; TListOfFunctionsIter ; TLockFile Lock an object using a file; TLockGuard ; TLorentzRotation Lorentz transformations including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:104368,Modifiability,variab,variables,104368,DEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoamKernelGauss Gaussian PDEFoam kernel estimator; TMVA::PDEFoamKernelLinN next neighbor PDEFoam kernel estimator; TMVA::PDEFoamKernelTrivial trivial PDEFoam kernel estimator; TMVA::PDEFoamMultiTarget Tree of PDEFoamCells; TMVA::PDEFoamTarget Tree of PDEFoamCells; TMVA::PDEFoamTargetDensity Class for Target density; TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::QuickMVAProbEstimator Interface to different separation critiera used in training algorithms; TMVA::ROCCalc ; TMVA::Ranking Method-specific ranking for input variables; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the SdivSqrtSplusB as separation criterion; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitter using a Simulated Annealing Algorithm; TMVA::TActivation Interface for TNeuron activation function classes; TMVA::TActivationChooser Class for choosing activation functions; TMVA::TActivationIdentity Identity activation function for TNeuron; TMVA::TActivationRadial Radial basis activation function for TNeuron; TMVA::TActivationSigmoid Sigmoid activation function ,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:106644,Modifiability,variab,variable,106644,plementation of the SdivSqrtSplusB as separation criterion; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitter using a Simulated Annealing Algorithm; TMVA::TActivation Interface for TNeuron activation function classes; TMVA::TActivationChooser Class for choosing activation functions; TMVA::TActivationIdentity Identity activation function for TNeuron; TMVA::TActivationRadial Radial basis activation function for TNeuron; TMVA::TActivationSigmoid Sigmoid activation function for TNeuron; TMVA::TActivationTanh Tanh sigmoid activation function for TNeuron; TMVA::TNeuron Neuron class used by MethodANNBase derivative ANNs; TMVA::TNeuronInput Interface for TNeuron input calculation classes; TMVA::TNeuronInputAbs Calculates the sum of the absolute values of the weighted inputs; TMVA::TNeuronInputChooser Class for choosing neuron input functions; TMVA::TNeuronInputSqSum Calculates square of weighted sum of neuron inputs; TMVA::TNeuronInputSum Calculates weighted sum of neuron inputs; TMVA::TSpline1 Linear interpolation class; TMVA::TSpline2 Quadratic interpolation class (using quadrax); TMVA::TSynapse Synapse class used by MethodANNBase and derivatives; TMVA::Timer Timing information for training and evaluation of MVA methods; TMVA::Tools ; TMVA::Types ; TMVA::VariableDecorrTransform Variable transformation: decorrelation; TMVA::VariableGaussTransform Variable transformation: Gauss transformation; TMVA::VariableIdentityTransform Variable transformation: identity; TMVA::VariableNormalizeTransform Variable transformation: normalization; TMVA::VariablePCATransform Variable transformation: Principal Value Composition; TMVA::VariableRearrangeTransform Variable transformation: normalization; TMVA::VariableTransformBase Base class for variable transformations; TMVA::kNN::Event ; TMacro Class supporting a collection of lines with C++ code.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:113873,Modifiability,plugin,plugin,113873,"ParallelCoordRanges used by TParallelCoord.; TParallelCoordVar A Variable of a parallel coordinates plot.; TParallelMergingFile TFile specialization that will semi-automatically upload its content to a merging server.; TParameter<Long64_t> ; TParameter<bool> ; TParameter<double> ; TParameter<float> ; TParameter<int> ; TParameter<long> ; TParticle TParticle vertex particle information; TParticleClassPDG PDG static particle definition; TParticlePDG PDG static particle definition; TPave Pave. A box with shadowing; TPaveClass A TPaveLabel specialized for TClassTree objects; TPaveLabel PaveLabel. A Pave with a label; TPaveStats A special TPaveText to draw histogram statistics.; TPaveStatsEditor GUI for editing TPaveStats; TPaveText PaveText. A Pave with several lines of text.; TPavesText Stacked Paves with text strings; TPerfEvent Class holding TProof Event Info; TPerfStats Class for collecting PROOF statistics; TPie Pie chart graphics class; TPieEditor piechart editor; TPieSlice Slice of a pie chart graphics class; TPieSliceEditor piechart' slice editor; TPluginHandler Handler for plugin libraries; TPluginManager Manager for plugin handlers; TPoint ; TPointSet3D TPolyMarker3D with direct OpenGL rendering.; TPointSet3DGL GL renderer for TPointSet3D; TPoints 2-D graphics point; TPoints3D Defines the abstract array of 3D points; TPoints3DABC A 3-D Points; TPointsArray3D A 3-D PolyLine; TPolyLine A PolyLine; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Proce",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:113918,Modifiability,plugin,plugin,113918,"ParallelCoordRanges used by TParallelCoord.; TParallelCoordVar A Variable of a parallel coordinates plot.; TParallelMergingFile TFile specialization that will semi-automatically upload its content to a merging server.; TParameter<Long64_t> ; TParameter<bool> ; TParameter<double> ; TParameter<float> ; TParameter<int> ; TParameter<long> ; TParticle TParticle vertex particle information; TParticleClassPDG PDG static particle definition; TParticlePDG PDG static particle definition; TPave Pave. A box with shadowing; TPaveClass A TPaveLabel specialized for TClassTree objects; TPaveLabel PaveLabel. A Pave with a label; TPaveStats A special TPaveText to draw histogram statistics.; TPaveStatsEditor GUI for editing TPaveStats; TPaveText PaveText. A Pave with several lines of text.; TPavesText Stacked Paves with text strings; TPerfEvent Class holding TProof Event Info; TPerfStats Class for collecting PROOF statistics; TPie Pie chart graphics class; TPieEditor piechart editor; TPieSlice Slice of a pie chart graphics class; TPieSliceEditor piechart' slice editor; TPluginHandler Handler for plugin libraries; TPluginManager Manager for plugin handlers; TPoint ; TPointSet3D TPolyMarker3D with direct OpenGL rendering.; TPointSet3DGL GL renderer for TPointSet3D; TPoints 2-D graphics point; TPoints3D Defines the abstract array of 3D points; TPoints3DABC A 3-D Points; TPointsArray3D A 3-D PolyLine; TPolyLine A PolyLine; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Proce",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:114462,Modifiability,variab,variable,114462,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:117488,Modifiability,config,config,117488,Info Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TProtoClass Persistent TClass; TProtoClass::TProtoRealData Persistent version of TRealData; TPyArg Python morphing argument type; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQApplication creates ROOT environment with the Qt windowing system; TQCanvasImp ABC describing Qt GUI independe,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:126917,Modifiability,variab,variable,126917,"ctrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrum2Painter TSpectrum 3d graphics package; TSpectrum2Transform Spectrum2 Transformer, it calculates classic orthogonal 2D transforms; TSpectrum3 Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms; TSpectrumFit Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrumTransform Spectrum Transformer, it calculates classic orthogonal 1D transforms; TSpider Helper class to draw spider; TSpiderEditor GUI for editing the spider plot attributes.; TSpline Spline base class; TSpline3 Class to create third natural splines; TSpline5 Class to create quintic natural splines; TSplinePoly Spline polynomial terms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObje",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:127689,Modifiability,config,configured,127689,erms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObjectAnyPointer Streamer element of type pointer to a non TObject; TStreamerObjectPointer Streamer element of type pointer to a TObject; TStreamerSTL Streamer element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManage,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:640,Performance,load,load,640,. Class Index. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. Class Index; Modules; BINDINGS; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TMVA; TREE. Jump to; C; ROOT:; ROOT::Math:; ROOT::Math::L; ROOT::Math::P; ROOT::Math::S; ROOT::Math::SMatrix<f; ROOT::Math::T; ROOT::T; ROOT::TN; Roo1; RooC; RooCh; RooG; RooN; RooS; RooSt; RooStats:; RooV; T; TB; TC; TD; TEv; TEveG; TEveQ; TEveW; TG; TGH; TGL; TGLP; TGLW; TGR; TGU; TGeo; TGeoN; TGeoT; TGu; TI; TM; TMV; TMVA:; TMVA::V; TMe; TO; TP; TPl; TPr; TPy; TR; TS; TSp; TSu; TU; TW. ColorStruct_t ; CpuInfo_t CPU load information.; Event_t ; FileStat_t ; FontAttributes_t ; FontMetrics_t ; Foption_t ; GCValues_t ; MemInfo_t Memory utilization information.; Memstat ; Memstat::TMemStatMng a manager of memstat sessions.; ParamHistFunc Sum of RooAbsReal objects; PictureAttributes_t ; PiecewiseInterpolation Sum of RooAbsReal objects; Point_t ; ProcInfo_t System resource usage of given process.; PyROOT ; PyROOT::TPyException C++ exception for throwing python exceptions; PyROOT::TPyROOTApplication Setup interactive application; ROOT ; ROOT::Fit ; ROOT::Fit::BinData ; ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::DataOptions ; ROOT::Fit::DataRange ; ROOT::Fit::FitConfig ; ROOT::Fit::FitData ; ROOT::Fit::FitResult ; ROOT::Fit::Fitter ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::ParameterSettings ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim> ; ROOT::Fit::SparseData ; ROOT::Fit::UnBinData ; ROOT::Math ; ROOT::Math::AdaptiveIntegratorMultiDim ; ROOT::Math::AxisAngle ; ROOT::Math::BaseIntegratorOptions ; ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim> ; ROOT::Math::B,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:21993,Performance,cache,cache,21993,":Minuit2::MnStrategy ; ROOT::Minuit2::MnTraceObject ; ROOT::Minuit2::MnUserParameterState ; ROOT::Minuit2::MnUserParameters ; ROOT::Minuit2::ModularFunctionMinimizer ; ROOT::Minuit2::ScanMinimizer ; ROOT::Minuit2::SimplexMinimizer ; ROOT::Minuit2::VariableMetricMinimizer ; ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TBranchProxy ; ROOT::TBranchProxyClassDescriptor Class to cache the information we gathered about the branch and its content; ROOT::TBranchProxyDescriptor Describe the proxy for a branch; ROOT::TBranchProxyDirector ; ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TClaArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TClaImpProxy<Long64_t> ; ROOT::TClaImpProxy<ULong64_t> ; ROOT::TClaImpProxy<bool> ; ROOT::TClaImpProxy<char> ; ROOT::TClaImpProxy<double> ; ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24387,Performance,cache,cache,24387, from a TTreeFriend.; ROOT::THnBaseBrowsable Browser-helper for THnBase; ROOT::TImpProxy<Long64_t> ; ROOT::TImpProxy<ULong64_t> ; ROOT::TImpProxy<bool> ; ROOT::TImpProxy<char> ; ROOT::TImpProxy<double> ; ROOT::TImpProxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOpt,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24437,Performance,cache,cache,24437, from a TTreeFriend.; ROOT::THnBaseBrowsable Browser-helper for THnBase; ROOT::TImpProxy<Long64_t> ; ROOT::TImpProxy<ULong64_t> ; ROOT::TImpProxy<bool> ; ROOT::TImpProxy<char> ; ROOT::TImpProxy<double> ; ROOT::TImpProxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOpt,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24493,Performance,cache,cached,24493, from a TTreeFriend.; ROOT::THnBaseBrowsable Browser-helper for THnBase; ROOT::TImpProxy<Long64_t> ; ROOT::TImpProxy<ULong64_t> ; ROOT::TImpProxy<bool> ; ROOT::TImpProxy<char> ; ROOT::TImpProxy<double> ; ROOT::TImpProxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOpt,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:24550,Performance,cache,cached,24550,oxy<float> ; ROOT::TImpProxy<int> ; ROOT::TImpProxy<long> ; ROOT::TImpProxy<short> ; ROOT::TImpProxy<unsigned char> ; ROOT::TImpProxy<unsigned int> ; ROOT::TImpProxy<unsigned long> ; ROOT::TImpProxy<unsigned short> ; ROOT::TNamedBranchProxy branch proxy with a name; ROOT::TSchemaMatch ; ROOT::TSchemaRule ; ROOT::TSchemaRule::TSources ; ROOT::TSchemaRuleSet ; ROOT::TTreeReaderArrayBase ; ROOT::TTreeReaderValueBase ; Rectangle_t ; RedirectHandle_t ; Rgl ; Roo1DMomentMorphFunction Your description goes here...; Roo1DTable 1-dimensional table; Roo2DKeysPdf Two-dimensional kernel estimation p.d.f.; Roo2DMomentMorphFunction ; RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstra,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25355,Performance,optimiz,optimized,25355, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:29973,Performance,cache,caches,29973,"unsigned int,unsigned int,double> ; RooCFunction3Ref<double,double,double,bool> ; RooCFunction3Ref<double,double,double,double> ; RooCFunction3Ref<double,double,int,int> ; RooCFunction3Ref<double,unsigned int,double,double> ; RooCFunction3Ref<double,unsigned int,double,unsigned int> ; RooCFunction3Ref<double,unsigned int,unsigned int,double> ; RooCFunction4Binding<double,double,double,double,bool> ; RooCFunction4Binding<double,double,double,double,double> ; RooCFunction4Binding<double,double,double,double,int> ; RooCFunction4PdfBinding<double,double,double,double,bool> ; RooCFunction4PdfBinding<double,double,double,double,double> ; RooCFunction4PdfBinding<double,double,double,double,int> ; RooCFunction4Ref<double,double,double,double,bool> ; RooCFunction4Ref<double,double,double,double,double> ; RooCFunction4Ref<double,double,double,double,int> ; RooCacheManager<RooAbsCacheElement> ; RooCacheManager<vector<double> > ; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output; RooCachedReal P.d.f class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter const",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:30047,Performance,cache,caches,30047,"RooCFunction3Ref<double,unsigned int,unsigned int,double> ; RooCFunction4Binding<double,double,double,double,bool> ; RooCFunction4Binding<double,double,double,double,double> ; RooCFunction4Binding<double,double,double,double,int> ; RooCFunction4PdfBinding<double,double,double,double,bool> ; RooCFunction4PdfBinding<double,double,double,double,double> ; RooCFunction4PdfBinding<double,double,double,double,int> ; RooCFunction4Ref<double,double,double,double,bool> ; RooCFunction4Ref<double,double,double,double,double> ; RooCFunction4Ref<double,double,double,double,int> ; RooCacheManager<RooAbsCacheElement> ; RooCacheManager<vector<double> > ; RooCachedPdf P.d.f class that wraps another p.d.f and caches its output; RooCachedReal P.d.f class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter constraints; RooConvCoefVar Auxiliary class representing the coefficient of a RooAbsAnaConvPdf as a RooAbsReal; RooConvGenContext Context for generating a dataset from a PDF; RooConvIntegrandBinding RooAbsFunc representation of convolution integrands; RooCurve 1-dimensional smooth curve for",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:32172,Performance,optimiz,optimized,32172,ule to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass difference background PDF; RooEffGenContext Context for generating a dataset from a PDF; RooEffProd Product operator p.d.f of (PDF x efficiency) implementing optimized generator context; RooEfficiency Generic PDF defined by string expression and list of variables; RooEllipse 2-dimensional contour; RooErrorVar RooAbsRealLValue representation of an error of a RooRealVar; RooExpensiveObjectCache Singleton class that serves as session repository for expensive objects; RooExpensiveObjectCache::ExpensiveObject Cache element containing expensive object and parameter values for which object is valid; RooExponential Exponential PDF; RooExtendPdf Wrapper p.d.f adding an extended likelihood term to an existing p.d.f; RooExtendedBinding Your description goes here...; RooExtendedTerm Meta-p.d.f flat in all observables introducing only extended ML term; RooFFTConvPdf Convolution operator p.d.f based on numeric Fourier transforms; RooFIter ; RooFactoryWSTool RooFit class code and instance factory; RooFirstMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooFit ; RooFitResult Container class for fit result; RooFitShortHand ; RooFoamGenerator Context for generating a dataset from a PDF using the TFoam class; RooFormula TFormula derived class interfacing with RooAbsArg objects; RooFormulaVar Real-valued function of other RooAbsArgs calculated by a TFormula expre,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:38188,Performance,cache,caches,38188,"state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProd",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:52626,Performance,load,load,52626,"to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.; TBufferJSON a specialized TBuffer to only write objects into JSON format; TBufferSQL Implementation of TBuffer to load and write to a SQL database; TBufferSQL2 a specialized TBuffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassT",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:53435,Performance,cache,cache,53435,"Buffer to convert data to SQL statements or read data from SQL tables; TBufferXML a specialized TBuffer to read/write to XML files; TButton A user interface button.; TCL C++ replacement for CERNLIB matrix / triangle matrix packages: F110 and F112; TCONE CONE shape; TCONS CONS shape; TCTUB The Cut Tube shape; TCanvas Graphics canvas; TCanvasImp ABC describing main window protocol; TChain A chain of TTrees; TChainElement A chain element; TChainIndex A Tree Index with majorname and minorname.; TChainIndex::TChainIndexEntry ; TChair A base class to provide a user custom interface to TTable class objects; TCivetweb http server implementation, based on civetweb embedded server; TClass Dictionary containing class information; TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TClassEdit ; TClassGenerator interface for TClass generators; TClassMenuItem One element of the class context menu; TClassRef ; TClassStreamer ; TClassTable Table of known classes; TClassTree Manager class to draw classes inheritance tree and relations; TClonesArray An array of clone objects; TCollection Collection abstract base class; TCollectionClassStreamer ; TCollectionMemberStreamer ; TCollectionMethodBrowsable Helper object to browse a collection's methods; TCollectionPropertyBrowsable Helper object to add browsable collection properties; TCollectionProxyFactory ; TCollectionStreamer ; TColor Color defined by RGB or HLS; TColorGradient Gradient fill.; TColorWheel The ROOT Color Wheel; TColumnView Helper to represent one TTable column; TComplex Complex Class; TCondition Condition variable class; TConditionImp Condition variable implementation ABC; TCondor Interface to the Condor System; TCondorSlave Describes a claimed slave; TConfidenceLevel output for TLimit functions; TContextMenu Context sensitive popup menu; TContextMenuImp Context sensitive popup menu implementation; TControlBar Control bar; TControlBarButton The Control bar butt",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63095,Performance,load,loading,63095,on coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:70530,Performance,cache,cache,70530,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:70572,Performance,cache,cache,70572,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:82322,Performance,cache,cache,82322,"metry MDI Geometry; TGMdiHorizontalWinResizer Horizontal Window Resizer; TGMdiMainFrame MDI main frame; TGMdiMenuBar MDI menu bar; TGMdiTitleBar MDI Title Bar; TGMdiTitleIcon MDI Title Icon; TGMdiVerticalWinResizer Vertical Window Resizer; TGMdiWinResizer Window Resizer; TGMenuBar Menu bar class; TGMenuEntry Menu entry class; TGMenuTitle Menu title class; TGMimeTypes Pool of mime type objects; TGMsgBox A message dialog box; TGNumberEntry Entry field widget for several numeric formats; TGNumberEntryField A text entry field used by a TGNumberEntry; TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider wid",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:86635,Performance,optimiz,optimization,86635,"ticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:86904,Performance,cache,cache,86904,"ticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:88838,Performance,cache,cache,88838,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:100549,Performance,perform,performs,100549,"ion Lorentz transformations including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116753,Performance,perform,performance,116753,OOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProo,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:130809,Performance,perform,performance,130809,; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeReader A simple interface to read trees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUpload,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:61209,Safety,safe,safe,61209,"se class for event management and navigation.; TEveException Exception-type thrown by Eve classes.; TEveFrameBox Description of a 2D or 3D frame that can be used to visually group a set of objects.; TEveFrameBoxGL GL-renderer for TEveFrameBox class.; TEveGDoubleValuator Composite GUI element for selection of range (label, two number-entries and double-slider).; TEveGListTreeEditorFrame Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGedNameFrame Top name-frame used in EVE.; TEveGedNameTextButton Button for GED name-frame.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoShapeProjected ; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; TEveGridStepper Provide discrete position coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-edit",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63475,Safety,safe,safe,63475,etCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthographic camera.; TEveLine An arbitrary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed ,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:63630,Safety,safe,safe,63630,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointSetArrayEditor Editor for TEvePointSetArray class.; TEvePointSetProj",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:82707,Safety,safe,safe,82707,"t Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTabl",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:121756,Safety,safe,safe,121756,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:122076,Safety,detect,detector,122076,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:51288,Security,authenticat,authentication,51288, sub-files (like a ZIP archive); TArchiveMember An archive member file; TArray Abstract array base class; TArrayC Array of chars; TArrayD Array of doubles; TArrayF Array of floats; TArrayI Array of ints; TArrayL Array of longs; TArrayL64 Array of long64s; TArrayS Array of shorts; TArrow An arrow (line with a arrowhead); TArrowEditor GUI for editing arrow attributes; TAtomicCount ; TAtt3D 3D attributes; TAttAxis Axis attributes; TAttBBox Helper for management of bounding-box information; TAttBBox2D 2D bounding box attributes; TAttCanvas Canvas attributes; TAttFill Fill area attributes; TAttFillEditor GUI for editing fill attributes; TAttImage Image attributes; TAttLine Line attributes; TAttLineEditor GUI for editing line attributes; TAttMarker Marker attributes; TAttMarkerEditor GUI for editing marker attributes; TAttPad Pad attributes; TAttParticle Particle definition; TAttText Text attributes; TAttTextEditor GUI for editing text attributes; TAuthenticate Class providing remote authentication service; TAxis Axis class; TAxis3D 3-D ruler painting class; TAxisEditor axis editor; TBRIK TBRIK shape; TBackCompFitter Class providing backward compatibility for fitting by implementing the TVirtualFitter interface; TBase64 Base64 encoding/decoding; TBaseClass Description of a base class; TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtr,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:69913,Security,hash,hash,69913,<double> ; TEveVector2T<float> ; TEveVector4T<double> ; TEveVector4T<float> ; TEveVectorT<double> ; TEveVectorT<float> ; TEveViewer Reve representation of TGLViewer.; TEveViewerList List of Viewers providing common operations on TEveViewer collections.; TEveViewerListEditor GUI editor for TEveViewerList.; TEveWindow Abstract base-class for eve-windows.; TEveWindowEditor GUI editor for TEveWindow.; TEveWindowFrame Eve-window containing any TGFrame.; TEveWindowManager Manager for EVE windows.; TEveWindowPack Eve-window containing a TGPack.; TEveWindowSlot An unoccupied eve-window slot.; TEveWindowTab Eve-window containing a TGTab.; TEventIter Event iterator used by TProofPlayer's; TEventIterObj Event iterator for objects; TEventIterTree Event iterator for Trees; TEventIterUnit Event iterator for objects; TEventList A list of selected entries in a TTree.; TExMap Map with external hash; TExMapIter TExMap iterator; TExec To execute a CINT command; TF1 The Parametric 1-D function; TF12 Projection of a TF2 along x or y; TF1Editor user interface for TF1 objects; TF2 The Parametric 2-D function; TF2GL GL renderer for TF2 and TF3.; TF3 The Parametric 3-D function; TFFTComplex ; TFFTComplexReal ; TFFTReal ; TFFTRealComplex ; TFITSHDU Class interfacing FITS HDUs; TFPBlock File prefetch block; TFTP File Transfer Protocol class using rootd; TFastCgi fastcgi engine for THttpServer; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:82185,Security,password,passwords,82185,"metry MDI Geometry; TGMdiHorizontalWinResizer Horizontal Window Resizer; TGMdiMainFrame MDI main frame; TGMdiMenuBar MDI menu bar; TGMdiTitleBar MDI Title Bar; TGMdiTitleIcon MDI Title Icon; TGMdiVerticalWinResizer Vertical Window Resizer; TGMdiWinResizer Window Resizer; TGMenuBar Menu bar class; TGMenuEntry Menu entry class; TGMenuTitle Menu title class; TGMimeTypes Pool of mime type objects; TGMsgBox A message dialog box; TGNumberEntry Entry field widget for several numeric formats; TGNumberEntryField A text entry field used by a TGNumberEntry; TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider wid",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:94471,Security,hash,hashtable,94471,ograms (one char per channel); TH2D 2-Dim histograms (one double per channel); TH2Editor TH2 editor; TH2F 2-Dim histograms (one float per channel); TH2GL GL renderer for TH2.; TH2I 2-Dim histograms (one 32 bits integer per channel); TH2Poly 2-Dim histogram with polygon bins; TH2PolyBin 2-Dim polygon bins; TH2S 2-Dim histograms (one short per channel); TH3 3-Dim histogram base class; TH3C 3-Dim histograms (one char per channel); TH3D 3-Dim histograms (one double per channel); TH3F 3-Dim histograms (one float per channel); TH3GL GL renderer class for TH3.; TH3I 3-Dim histograms (one 32 bits integer per channel); TH3S 3-Dim histograms (one short per channel); THLimitsFinder Class to find best axis limits; THStack A collection of histograms; THYPE HYPE shape; THaarMatrixT<double> ; THaarMatrixT<float> ; THashList Doubly linked list with hashtable for lookup; THashTable A hash table; THashTableIter Hash table iterator; THbookBranch A branch for a THbookTree; THbookFile ROOT interface to Hbook/PAW files; THbookKey Hbook id descriptor; THbookTree A wrapper class supporting Hbook ntuples (CWN and RWN); THelix A Helix drawn as a PolyLine3D; THilbertMatrixT<double> ; THilbertMatrixT<float> ; THilbertMatrixTSym<double> ; THilbertMatrixTSym<float> ; THistPainter Helper class to draw histograms; THn Base class for multi-dimensional histogram; THnBase Common base for n-dimensional histogram; THnIter Iterator over bins of a THnBase.; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THnT,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:94506,Security,hash,hash,94506,ograms (one char per channel); TH2D 2-Dim histograms (one double per channel); TH2Editor TH2 editor; TH2F 2-Dim histograms (one float per channel); TH2GL GL renderer for TH2.; TH2I 2-Dim histograms (one 32 bits integer per channel); TH2Poly 2-Dim histogram with polygon bins; TH2PolyBin 2-Dim polygon bins; TH2S 2-Dim histograms (one short per channel); TH3 3-Dim histogram base class; TH3C 3-Dim histograms (one char per channel); TH3D 3-Dim histograms (one double per channel); TH3F 3-Dim histograms (one float per channel); TH3GL GL renderer class for TH3.; TH3I 3-Dim histograms (one 32 bits integer per channel); TH3S 3-Dim histograms (one short per channel); THLimitsFinder Class to find best axis limits; THStack A collection of histograms; THYPE HYPE shape; THaarMatrixT<double> ; THaarMatrixT<float> ; THashList Doubly linked list with hashtable for lookup; THashTable A hash table; THashTableIter Hash table iterator; THbookBranch A branch for a THbookTree; THbookFile ROOT interface to Hbook/PAW files; THbookKey Hbook id descriptor; THbookTree A wrapper class supporting Hbook ntuples (CWN and RWN); THelix A Helix drawn as a PolyLine3D; THilbertMatrixT<double> ; THilbertMatrixT<float> ; THilbertMatrixTSym<double> ; THilbertMatrixTSym<float> ; THistPainter Helper class to draw histograms; THn Base class for multi-dimensional histogram; THnBase Common base for n-dimensional histogram; THnIter Iterator over bins of a THnBase.; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THnT,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:96394,Security,authenticat,authentication,96394,"parseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayS> Sparse n-dimensional histogram with templated content; THnT<Long64_t> multi-dimensional histogram with templated storage; THnT<ULong64_t> multi-dimensional histogram with templated storage; THnT<char> multi-dimensional histogram with templated storage; THnT<double> multi-dimensional histogram with templated storage; THnT<float> multi-dimensional histogram with templated storage; THnT<int> multi-dimensional histogram with templated storage; THnT<long> multi-dimensional histogram with templated storage; THnT<short> multi-dimensional histogram with templated storage; THnT<unsigned int> multi-dimensional histogram with templated storage; THnT<unsigned long> multi-dimensional histogram with templated storage; THnT<unsigned short> multi-dimensional histogram with templated storage; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; THttpCallArg Arguments for single HTTP call; THttpEngine abstract class which should provide http-based protocol for server; THttpServer HTTP server for ROOT analysis; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetA",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:99733,Security,hash,hash,99733,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:122914,Security,authenticat,authentication,122914,recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRootSniffer Sniffer of ROOT objects; TRootSnifferScanRec Scan record for objects sniffer; TRootSnifferStore structure for results store of objects sniffer; TRootSnifferStoreJson json results store of objects sniffer; TRootSnifferStoreXml xml results store of objects sniffer; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TS3HTTPRequest Create generic HTTP request for Amazon S3 and Google Storage services; TS3WebFile Read a ROOT file from a S3 server; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class; TSQLColumnData Single SQL column data.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:124548,Security,authenticat,authentication,124548,"LObjectDataPool XML object keeper class; TSQLObjectInfo Info (classname, version) about object in database; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket ; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307); TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on workers; TSlaveLite PROOF lite worker server; TSlider A user interface slider.; TSliderBox The moving box of a TSlider; TSocket This class implements client sockets; TSortedList A sorted list; TSpectrum Peak Finder, background estimator, Deconvolution; TSpectrum2 Peak Finder, background estimator, Deconvolution for 2-D histograms; TSpectrum2Fit Spectrum2 Fitter using algorithm without matri",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:124613,Security,authenticat,authentication,124613,"LObjectDataPool XML object keeper class; TSQLObjectInfo Info (classname, version) about object in database; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket ; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307); TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on workers; TSlaveLite PROOF lite worker server; TSlider A user interface slider.; TSliderBox The moving box of a TSlider; TSocket This class implements client sockets; TSortedList A sorted list; TSpectrum Peak Finder, background estimator, Deconvolution; TSpectrum2 Peak Finder, background estimator, Deconvolution for 2-D histograms; TSpectrum2Fit Spectrum2 Fitter using algorithm without matri",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:127160,Security,inject,injected,127160,"ctrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrum2Painter TSpectrum 3d graphics package; TSpectrum2Transform Spectrum2 Transformer, it calculates classic orthogonal 2D transforms; TSpectrum3 Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms; TSpectrumFit Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrumTransform Spectrum Transformer, it calculates classic orthogonal 1D transforms; TSpider Helper class to draw spider; TSpiderEditor GUI for editing the spider plot attributes.; TSpline Spline base class; TSpline3 Class to create third natural splines; TSpline5 Class to create quintic natural splines; TSplinePoly Spline polynomial terms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObje",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25365,Testability,test,test,25365, RooAICRegistry Registry for analytical integration codes; RooAbsAnaConvPdf Abstract Composite Convoluted PDF; RooAbsArg Abstract variable; RooAbsBinning Abstract base class for binning specification; RooAbsCache Base class for cache managers; RooAbsCacheElement Base class for cache elements; RooAbsCachedPdf Abstract base class for cached p.d.f.s; RooAbsCachedReal Abstract base class for cached p.d.f.s; RooAbsCategory Abstract discrete variable; RooAbsCategoryLValue Abstract modifiable index variable; RooAbsCollection Collection of RooAbsArg objects; RooAbsData Abstract data collection; RooAbsDataStore Abstract Data Storage class; RooAbsFunc Abstract real-valued function interface; RooAbsGenContext Abstract context for generating a dataset from a PDF; RooAbsHiddenReal Abstract hidden real-valued variable; RooAbsIntegrator Abstract interface for real-valued function integrators; RooAbsLValue Abstract variable; RooAbsMCStudyModule Monte Carlo study manager add-on module; RooAbsMoment Abstract representation of moment in a RooAbsReal in a given RooRealVar; RooAbsNumGenerator Abstract base class for numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical inte,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:25994,Testability,test,test,25994,or numeric event generator algorithms; RooAbsOptTestStatistic Abstract base class for optimized test statistics; RooAbsPdf Abstract PDF with normalization support; RooAbsPdf::GenSpec Generation specification; RooAbsProxy Abstract proxy interface; RooAbsReal Abstract real-valued variable; RooAbsRealLValue Abstract modifiable real-valued object; RooAbsRootFinder Abstract interface for 1-dim real-valued function root finders; RooAbsSelfCachedPdf Abstract base class for self-caching p.d.f.s; RooAbsSelfCachedReal Abstract base class for self-caching functions; RooAbsString Abstract string-valued variable; RooAbsStudy Abstract base class for RooStudyManager modules; RooAbsTestStatistic Abstract base class for real-valued test statistics; RooAcceptReject Context for generating a dataset from a PDF; RooAdaptiveGaussKronrodIntegrator1D 1-dimensional adaptive Gauss-Kronrod numerical integration engine; RooAdaptiveIntegratorND N-dimensional adaptive integration (interface to MathCore integrator); RooAddGenContext Specialized context for generating a dataset from a RooAddPdf; RooAddModel Resolution model representing a sum of resolution models; RooAddPdf PDF representing a sum of PDFs; RooAddition Sum of RooAbsReal objects; RooArgList Ordered list of RooAbsArg objects; RooArgProxy Abstract proxy for RooAbsArg objects; RooArgSet Set of RooAbsArg objects; RooArgusBG Argus background shape PDF; RooBCPEffDecay B Mixing decay PDF; RooBCPGenDecay B decay time distribution with CP violation; RooBDecay P.d.f of general description of B decay time distribution; RooBMixDecay B Mixing decay PDF; RooBernstein Bernstein polynomial PDF; RooBifurGauss Bifurcated Gaussian PDF; RooBinIntegrator 1-dimensional numerical integration engine; RooBinnedGenContext Specialized context for generating a dataset from a binned pdf; RooBinning Generic binning specification; RooBinningCategory RealVar-to-Category function defined by bin boundaries on input var; RooBlindTools Root implementation of BlindTools,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:30936,Testability,log,log,30936,"class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter constraints; RooConvCoefVar Auxiliary class representing the coefficient of a RooAbsAnaConvPdf as a RooAbsReal; RooConvGenContext Context for generating a dataset from a PDF; RooConvIntegrandBinding RooAbsFunc representation of convolution integrands; RooCurve 1-dimensional smooth curve for use in RooPlots; RooCustomizer Editing tool for RooAbsArg composite object expressions; RooDLLSignificanceMCSModule MCStudy module to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:31426,Testability,log,logL,31426,"class that wraps another p.d.f and caches its output; RooCatType Category state, (name,index) pair; RooCategory Discrete valued variable type; RooCategoryProxy Proxy for a RooAbsCategory object; RooCategorySharedProperties Shared properties of a RooCategory clone set; RooChangeTracker Meta object that tracks changes in set of other arguments; RooChebychev Chebychev polynomial PDF; RooChi2MCSModule MCStudy module to calculate chi2 between binned data and fit; RooChi2Var Chi^2 function of p.d.f w.r.t a binned dataset; RooChiSquarePdf Chi Square distribution (eg. the PDF ); RooCintUtils ; RooClassFactory RooFit class code and instance factory; RooCmdArg Generic named argument container; RooCmdConfig Configurable parse of RooCmdArg objects; RooComplex a non-persistent bare-bones complex class; RooCompositeDataStore Composite Data Storage class; RooConstVar Constant RooAbsReal value object; RooConstraintSum sum of -log of set of RooAbsPdf representing parameter constraints; RooConvCoefVar Auxiliary class representing the coefficient of a RooAbsAnaConvPdf as a RooAbsReal; RooConvGenContext Context for generating a dataset from a PDF; RooConvIntegrandBinding RooAbsFunc representation of convolution integrands; RooCurve 1-dimensional smooth curve for use in RooPlots; RooCustomizer Editing tool for RooAbsArg composite object expressions; RooDLLSignificanceMCSModule MCStudy module to calculate Delta(-logL) significance w.r.t given null hypothesis; RooDataHist Binned data set; RooDataHistSliceIter Iterator over a one-dimensional slice of a RooDataHist; RooDataProjBinding RealFunc/Dataset binding for data projection of a real function; RooDataSet Unbinned data set; RooDataWeightedAverage Optimized calculator of data weighted average of a RooAbsReal; RooDecay General decay function p.d.f; RooDerivative Representation of derivative of any RooAbsReal; RooDirItem Base class for RooFit objects that are listed TDirectories; RooDouble Container class for Double_t; RooDstD0BG D*-D0 mass",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:35808,Testability,log,log-normal,35808,"ator1D 1-dimensional numerical integration engine; RooIntegrator2D 2-dimensional numerical integration engine; RooIntegratorBinding Function binding representing output of numeric integrator; RooInvTransform Function binding returning inverse of other function binding; RooJeffreysPrior Sum of RooAbsReal objects; RooKeysPdf One-dimensional non-parametric kernel estimation p.d.f.; RooLandau Landau Distribution PDF; RooLegendre Legendre polynomial; RooLinTransBinning Linear transformation of binning specification; RooLinearVar Lvalue linear transformation function; RooLinkedList Doubly linked list for storage of RooAbsArg objects; RooLinkedListElem Element of RooLinkedList container class; RooLinkedListIter Iterator for RooLinkedList container class; RooList TList with extra support for Option_t associations; RooListProxy Proxy class for a RooArgList; RooLognormal log-normal PDF; RooMCIntegrator VEGAS based multi-dimensional numerical integration engine; RooMCStudy A general purpose toy Monte Carlo study manager; RooMPSentinel Singleton class that terminate MP server processes when parent exists; RooMapCatEntry Utility class, holding a map expression from a index label regexp to a RooCatType; RooMappedCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGau",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:37169,Testability,log,log,37169,"dCategory Index variable, derived from another index using pattern-matching based mapping; RooMappedCategory::Entry Map cat entry definition; RooMath math utility routines; RooMinimizer RooFit interface to ROOT::Fit::Fitter; RooMinimizerFcn ; RooMinuit RooFit minimizer based on MINUIT; RooMoment Representation of moment in a RooAbsReal in a given RooRealVar; RooMomentMorph Your description goes here...; RooMsgService RooFit Message Service Singleton class; RooMsgService::StreamConfig ; RooMultiBinomial Simultaneous pdf of N Binomial distributions with associated efficiency functions; RooMultiCatIter Iterator over all state permutations of a list of categories; RooMultiCategory Product operator for categories; RooMultiGenFunction Export RooAbsReal as functor; RooMultiVarGaussian Multivariate Gaussian PDF with correlations; RooMultiVarGaussian::AnaIntData ; RooMultiVarGaussian::GenData ; RooNDKeysPdf General N-dimensional non-parametric kernel estimation p.d.f; RooNLLVar Function representing (extended) -log(L) of p.d.f and dataset; RooNameReg String name registry; RooNameSet A sterile version of RooArgSet, containing only the names of the contained RooAbsArgs; RooNonCPEigenDecay PDF to model CP-violating decays to final states which are not CP eigenstates; RooNonCentralChiSquare non-central chisquare pdf; RooNormSetCache Management tool for tracking sets of similar integration/normalization sets; RooNovosibirsk Novosibirsk PDF; RooNumCdf Numeric calculator for CDF for a given PDF; RooNumConvPdf Operator PDF implementing numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCac",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:43873,Testability,test,test,43873,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:44137,Testability,test,tests,44137,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:44520,Testability,test,test,44520,Function ; RooStats::HistFactory::RooBarlowBeestonLL Real-valued function representing a Barlow-Beeston minimized profile likelihood of external (likelihood) function; RooStats::HistFactory::Sample ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (prod,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:45299,Testability,test,test,45299,kelihood) function; RooStats::HistFactory::Sample ; RooStats::HistFactory::StatError ; RooStats::HistFactory::StatErrorConfig ; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooStats::HypoTestCalculatorGeneric ; RooStats::HypoTestInverter HypoTestInverter class; RooStats::HypoTestInverterOriginal HypoTestInverterOriginal class; RooStats::HypoTestInverterPlot HypoTestInverterPlot class; RooStats::HypoTestInverterResult HypoTestInverterResult class; RooStats::HypoTestPlot ; RooStats::HypoTestResult Base class to represent results of a hypothesis test; RooStats::IntervalCalculator Interface for tools setting limits (producing confidence intervals); RooStats::LikelihoodInterval Concrete implementation of a ConfInterval based on a likelihood ratio; RooStats::LikelihoodIntervalPlot Class containing the results of the IntervalCalculator; RooStats::MCMCCalculator Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:46130,Testability,test,test,46130,"tat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:46450,Testability,test,test,46450,"ts::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:49080,Testability,test,tests,49080," to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_t; RooTable Abstract interface for tables; RooThreshEntry Utility class for RooThresholdCategory, holding a threshold/category state pair; RooThresholdCategory Real-to-Category function defined by series of threshold; RooTrace Memory tracer utility for RooFit objects; RooTreeData Dummy class for legacy RooDataSet support; RooTreeDataStore TTree-based Data Storage class; RooTruthModel Truth resolution model (delta function); RooUnblindCPAsymVar CP-Asymmetry unblinding transformation; RooUnblindOffset Offset unblinding transformation; RooUnblindPrecision Precision unblinding transformation; RooUnblindUniform Uniform unblinding transformation; RooUniform Flat PDF in N dimensions; RooUniformBinning Uniform binning specification; RooUnitTest Abstract base class for RooFit/RooStats unit regression tests; RooVectorDataStore STL-vector-based Data Storage class; RooVectorDataStore::CatVector STL-vector-based Data Storage class; RooVectorDataStore::RealFullVector STL-vector-based Data Storage class; RooVectorDataStore::RealVector STL-vector-based Data Storage class; RooVoigtian Voigtian PDF (Gauss (x) BreitWigner); RooWorkspace Persistable project container for (composite) pdfs, functions, variables and datasets; RooWorkspace::CodeRepo Code repository for RooWorkspace; RooWorkspace::WSDir TDirectory representation of RooWorkspace; RooXYChi2Var Chi^2 function of p.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:51688,Testability,benchmark,benchmarking,51688,ray of longs; TArrayL64 Array of long64s; TArrayS Array of shorts; TArrow An arrow (line with a arrowhead); TArrowEditor GUI for editing arrow attributes; TAtomicCount ; TAtt3D 3D attributes; TAttAxis Axis attributes; TAttBBox Helper for management of bounding-box information; TAttBBox2D 2D bounding box attributes; TAttCanvas Canvas attributes; TAttFill Fill area attributes; TAttFillEditor GUI for editing fill attributes; TAttImage Image attributes; TAttLine Line attributes; TAttLineEditor GUI for editing line attributes; TAttMarker Marker attributes; TAttMarkerEditor GUI for editing marker attributes; TAttPad Pad attributes; TAttParticle Particle definition; TAttText Text attributes; TAttTextEditor GUI for editing text attributes; TAuthenticate Class providing remote authentication service; TAxis Axis class; TAxis3D 3-D ruler painting class; TAxisEditor axis editor; TBRIK TBRIK shape; TBackCompFitter Class providing backward compatibility for fitting by implementing the TVirtualFitter interface; TBase64 Base64 encoding/decoding; TBaseClass Description of a base class; TBasket the TBranch buffers; TBasketSQL the TBranch buffers; TBenchmark ROOT utility to help benchmarking applications; TBinomialEfficiencyFitter Binomial Fitter for the division of two histograms; TBits Bit container; TBits::TReference ; TBox Box class; TBranch Branch descriptor; TBranchClones Branch in case of an array of clone objects; TBranchElement Branch in case of an object; TBranchObject Branch in case of an object; TBranchRef to support referenced objects on other branches; TBranchSTL Branch handling STL collection of pointers; TBrowser ROOT Object Browser; TBrowserImp ABC describing browser implementation protocol; TBrowserPlugin basic plugin description class; TBtree A B-tree; TBtreeIter B-tree iterator; TBuffer Buffer base class used for serializing objects; TBuffer3D 3D primitives description; TBufferFile concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:76360,Testability,log,logical,76360,"iewer.; TGLAnnotation GL-annotation.; TGLAutoRotator Automatic, timer-based, rotation of GL-viewer's camera.; TGLAxis a GL Axis; TGLAxisPainter GL axis painter.; TGLAxisPainterBox Painter of GL axes for a 3D box.; TGLBContainer Listbox container; TGLBEntry Basic listbox entry; TGLBoundingBox a 3D orientated bounding box; TGLBoxCut Cuts away part of a plot.; TGLBoxPainter Box painter; TGLCamera Camera abstract base class.; TGLCameraGuide Short description.; TGLCameraOverlay Show coorinates of current camera frustum.; TGLClip abstract clipping object; TGLClipBox clipping box; TGLClipPlane clipping plane; TGLClipSet A collection of supported clip-objects; TGLClipSetEditor GUI editor for TGLClipSet.; TGLClipSetSubEditor Sub-editor for TGLClipSet.; TGLColor Color in preferred GL format - RGBA.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOr",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:76551,Testability,log,logical,76551," a 3D box.; TGLBContainer Listbox container; TGLBEntry Basic listbox entry; TGLBoundingBox a 3D orientated bounding box; TGLBoxCut Cuts away part of a plot.; TGLBoxPainter Box painter; TGLCamera Camera abstract base class.; TGLCameraGuide Short description.; TGLCameraOverlay Show coorinates of current camera frustum.; TGLClip abstract clipping object; TGLClipBox clipping box; TGLClipPlane clipping plane; TGLClipSet A collection of supported clip-objects; TGLClipSetEditor GUI editor for TGLClipSet.; TGLClipSetSubEditor Sub-editor for TGLClipSet.; TGLColor Color in preferred GL format - RGBA.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlay",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:77084,Testability,log,logical,77084,"A.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFBO Frame-buffer object.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLH2PolyPainter Painter class for TH2Poly.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspec",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:78507,Testability,log,logical,78507," Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:78549,Testability,log,logical,78549," Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:78920,Testability,log,logial,78920,"ainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspective view.; TGLPhysicalShape a physical (placed, global frame) drawable object; TGLPlane GL plane helper/wrapper class; TGLPlot3D Short description.; TGLPlotBox Back box for plot.; TGLPlotCamera Camera for plot-painters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter Painter to draw several TH3.; TGLTH3Slice TH3 slice; TGLText a GL text; TGLTransManip GL translation manipulator widget; TGLUtil Wrapper class for misc GL pieces; TGLUtil::TColorLocker Lock/unlock color in constructor/destructor.; TGLUtil::TDrawQualityModifier Set/restore draw quality in constructor/destructor",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:79380,Testability,log,logical,79380,"nters.; TGLPlotCoordinates Auxilary class, holds plot dimensions.; TGLPlotPainter Base for gl plots; TGLPolyLine a polyline logical shape; TGLPolyMarker a polymarker logical shape; TGLQuadric GL quadric object; TGLRect GL rect helper/wrapper class; TGLRnrCtx Collection of objects and data passes along all rendering calls.; TGLRotateManip GL rotation manipulator widget; TGLSAFrame GUI frame for standalone viewer; TGLSAViewer Standalone GL viewer.; TGLScaleManip GL scaling manipulator widget; TGLScene Standard ROOT OpenGL scene with logial/physical shapes.; TGLScene::TSceneInfo ; TGLSceneBase Base-class for OpenGL scenes.; TGLSceneInfo Data about a scene within a viewer context.; TGLScenePad GL-scene filled via TPad-TVirtualViewer interface.; TGLSelectBuffer OpenGL select buffer with depth sorting.; TGLSelectRecord Standard GL selection record.; TGLSelectRecordBase Base class for GL selection records.; TGLSelectionBuffer Holds color buffer content for selection; TGLSphere a spherical logical shape; TGLStopwatch a GL stopwatch utility class; TGLSurfacePainter Surface painter.; TGLTF3Painter GL TF3 painter.; TGLTH3Composition Composition of TH3 objects.; TGLTH3CompositionPainter Painter to draw several TH3.; TGLTH3Slice TH3 slice; TGLText a GL text; TGLTransManip GL translation manipulator widget; TGLUtil Wrapper class for misc GL pieces; TGLUtil::TColorLocker Lock/unlock color in constructor/destructor.; TGLUtil::TDrawQualityModifier Set/restore draw quality in constructor/destructor.; TGLUtil::TDrawQualityScaler Multiply/restore draw quality in constructor/destructor.; TGLVContainer Listview container; TGLVEntry Item that goes into a TGListView container; TGLVector3 GL 3 component vector helper/wrapper class; TGLVertex3 GL 3 component vertex helper/wrapper class; TGLViewer Standard ROOT GL viewer.; TGLViewerBase GL Viewer base-class.; TGLViewerEditor GUI for editing TGLViewer attributes; TGLVoxelPainter Voxel painter; TGLWidget Window (widget) version of TGLPaintDevice",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:97862,Testability,log,logical,97862," THnT<float> multi-dimensional histogram with templated storage; THnT<int> multi-dimensional histogram with templated storage; THnT<long> multi-dimensional histogram with templated storage; THnT<short> multi-dimensional histogram with templated storage; THnT<unsigned int> multi-dimensional histogram with templated storage; THnT<unsigned long> multi-dimensional histogram with templated storage; THnT<unsigned short> multi-dimensional histogram with templated storage; THostAuth Class providing host specific authentication information; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; THttpCallArg Arguments for single HTTP call; THttpEngine abstract class which should provide http-based protocol for server; THttpServer HTTP server for ROOT analysis; TImage Abstract image class; TImageDump create image in batch mode; TImagePalette Color Palette for value -> color conversion; TImagePlugin base class for different image format handlers(plugins); TIndArray ; TIndexTable ""Index"" array for TTable object; TIndexTable::iterator ; TInetAddress Represents an Internet Protocol (IP) address; TInspectCanvas The canvas Inspector; TInspectorImp GUI independent inspector abc; TInterpreter ABC defining interface to generic interpreter; TIsAProxy ; TIter Iterator wrapper; TIterator Iterator abstract base class; TKDE One dimensional semi-parametric Kernel Density Estimation; TKDTree<int,double> ; TKDTree<int,float> ; TKDTreeBinning ; TKSocket General kerberized socket; TKey Header description of a logical record on file.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:100577,Testability,test,testing,100577,"including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for all TMVA method; TMVA::CostComplexityPruneTool ; TMVA::CrossEntropy Implementation of the CrossEntropy as separation criterion; TMVA::DecisionTree implementation of a Decision Tree; TMVA::DecisionTreeNode Node for the Decision Tree; TMVA::Event ; TMVA::Factory The factory creates all MVA methods, and performs their training and testing; TMVA::FitterBase Baseclass for fitters; TMVA::GeneticAlgorithm Genetic algorithm controller; TMVA::GeneticFitter Fitter using a Genetic Algorithm; TMVA::GeneticGenes Genes definition for genetic algorithm; TMVA::GeneticPopulation Population definition for genetic algorithm; TMVA::GeneticRange Range definition for genetic algorithm; TMVA::GiniIndex Implementation of the GiniIndex as separation criterion; TMVA::GiniIndexWithLaplace Implementation of the GiniIndexWithLaplace as separation criterion; TMVA::IFitterTarget base class for a fitter ""target""; TMVA::IMethod Method Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA:",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:103077,Testability,log,logging,103077,"ant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::OptimizeConfigParameters Interface to different separation critiera used in training algorithms; TMVA::PDEFoam Tree of PDEFoamCells; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamDecisionTree Decision tree like PDEFoam; TMVA::PDEFoamDecisionTreeDensity Class for decision tree like PDEFoam density; TMVA::PDEFoamDensityBase PDEFoam event density interface; TMVA::PDEFoamDiscriminant Tree of PDEFoamCells; TMVA::PDEFoamDiscriminantDensity Class for Discriminant density; TMVA::PDEFoamEvent Tree of PDEFoamCells; TMVA::PDEFoamEventDensity Class for Event density; TMVA::PDEFoamKernelBase PDEFoam kernel interface; TMVA::PDEFoamKernelGauss Gaussian PDEFoam kernel estimator; TMVA::PDEFoamKernelLinN next neighbor PDEFoam kernel estimator; TMVA::PDEFoamKernelTrivial trivial PDEFoam kernel estimator; TMVA::PDEFoamMultiTarget Tree of PDEFoamCells; TMVA::PDEFoamTarget Tree of PDEFoamCells; TMVA::PDEFoamTargetDensity Class f",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:115035,Testability,benchmark,benchmarks,115035,"3D; TPoints 2-D graphics point; TPoints3D Defines the abstract array of 3D points; TPoints3DABC A 3-D Points; TPointsArray3D A 3-D PolyLine; TPolyLine A PolyLine; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree dra",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:115142,Testability,benchmark,benchmark,115142,"s; TPointsArray3D A 3-D PolyLine; TPolyLine A PolyLine; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite c",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:115195,Testability,benchmark,benchmark,115195,"e; TPolyLine3D A 3-D polyline; TPolyLineShape The base class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TP",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:115248,Testability,benchmark,benchmark,115248,"e class to define an abstract 3D shape of STAR ""event"" geometry; TPolyMarker An array of points with the same marker; TPolyMarker3D An array of 3-D points with the same marker; TPosixCondition Posix condition variable; TPosixMutex Posix mutex lock; TPosixThread TPosixThread class; TPosixThreadFactory Posix thread factory; TPostScript PostScript driver; TPrimary TPrimary vertex particle information; TPrincipal Principal Components Analysis; TProcessEventTimer Process pending events at fixed time intervals; TProcessID Process Unique Identifier in time and space; TProcessUUID TProcessID managing UUIDs; TProfile Profile histogram class; TProfile2D Profile2D histogram class; TProfile3D Profile3D histogram class; TProof PROOF control class; TProofBench Steering class for PROOF benchmarks; TProofBenchDataSet Handle operations on datasets; TProofBenchRun Abstract base class for PROOF benchmark run; TProofBenchRunCPU CPU-intensive PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abst",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116185,Testability,log,log,116185,e PROOF benchmark; TProofBenchRunDataRead IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog C,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:116226,Testability,log,log,116226, IO-intensive PROOF benchmark; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TPro,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:117207,Testability,log,log,117207,em PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TProtoClass Persistent TClass; TProtoClass::TProtoRealData Persistent version of TRealData; TPyArg Python morphing argument type; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelec,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:41764,Usability,simpl,simple,41764,"ooSimGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimPdfBuilder RooSimultaneous PDF Builder (obsolete); RooSimSplitGenContext Context for efficiently generating a dataset from a RooSimultaneous PDF; RooSimWSTool Workspace oriented tool for customized cloning of p.d.f. into a simultaneous p.d.f; RooSimWSTool::BuildConfig Build configuration object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; Ro",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:42319,Usability,simpl,simple,42319,"STool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::AsymptoticCalculator ; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::DetailedOutputAggregator ; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory ; RooStats::HistFactory::Asimov ; RooStats::HistFactory::Channel ; RooStats::HistFactory::ConfigParser ; RooStats::HistFactory::Data ; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistFactoryNavigation ; RooStats::HistFactory::HistFactorySimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooStats::Hi",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:45800,Usability,simpl,simple,45800,"rlo calculator for Bayesian credible intervals; RooStats::MCMCInterval Concrete implementation of a ConfInterval based on MCMC calculation; RooStats::MCMCIntervalPlot Class containing the results of the MCMCCalculator; RooStats::MarkovChain ; RooStats::MaxLikelihoodEstimateTestStat ; RooStats::MetropolisHastings Markov Chain Monte Carlo calculator for Bayesian credible intervals; RooStats::MinNLLTestStat implements the minimum NLL as a test statistic to be used with several tools; RooStats::ModelConfig A class that holds configuration information for a model using a workspace as a store; RooStats::NeymanConstruction Interface for tools setting limits (producing confidence intervals); RooStats::NumEventsTestStat ; RooStats::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:46791,Usability,simpl,simple,46791,"ts::NumberCountingPdfFactory A factory specific to common number counting problems.; RooStats::NumberCountingUtils ; RooStats::PdfProposal ; RooStats::PointSetInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::ProfileInspector Class containing the results of the IntervalCalculator; RooStats::ProfileLikelihoodCalculator A concrete implementation of CombinedCalculator that uses the ProfileLikelihood ratio.; RooStats::ProfileLikelihoodTestStat implements the profile likelihood ratio as a test statistic to be used with several tools; RooStats::ProofConfig Configuration options for proof.; RooStats::ProposalFunction Interface for the proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:47018,Usability,simpl,simple,47018," proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:47375,Usability,simpl,simple,47375," proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:56702,Usability,feedback,feedback,56702,"atrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary Interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnum Enum type class; TEnumConstant ; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size bo",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:61666,Usability,simpl,simplified,61666," Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGedNameFrame Top name-frame used in EVE.; TEveGedNameTextButton Button for GED name-frame.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoShapeProjected ; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; TEveGridStepper Provide discrete position coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-editor for TEveGridStepper class.; TEveHit Monte Carlo hit (also used in VSD).; TEveJetCone Short description.; TEveJetConeEditor GUI editor for TEveJetCone.; TEveJetConeGL GL renderer class for TEveJetCone.; TEveJetConeProjected Projection of TEveJetCone.; TEveJetConeProjectedGL GL renderer class for TEveJetCone.; TEveLegoEventHandler A GL event handler class. Swiches perspective or orthog",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:74075,Usability,simpl,simple,74075,"edirection) plugin for the new ROOT Browser; TGCompositeFrame Base class for composite widgets (menubars, etc.); TGContainer Canvas container; TGDMLParse imports GDML using DOM and binds it to ROOT; TGDMLRefl helper class used for the storage of reflected solids; TGDMLWrite imports GDML using DOM and binds it to ROOT; TGDNDManager The main Drag and Drop Manager; TGDimension Dimension object (width, height); TGDockButton Dock button; TGDockHideButton Hide dock button; TGDockableFrame Dockable widget; TGDoubleHSlider Horizontal double slider widget; TGDoubleSlider Double slider widget abstract base class; TGDoubleVSlider Vertical double slider widget; TGDragWindow Window used for dragging; TGEventHandler Abstract event handler; TGFSComboBox Combo box widget for file system path; TGFileBrowser File browser.; TGFileContainer Container containing file system objects; TGFileDialog File selection dialog; TGFileInfo ; TGFileItem Class representing file system object; TGFont GUI font description; TGFontDialog Font selection dialog; TGFontDialog::FontProp_t ; TGFontPool Font pool; TGFontTypeComboBox Font type combobox widget; TGFrame Base class for simple widgets (button, etc.); TGFrameElement Base class used in GUI containers; TGFrameElementPack Class used in TGPack.; TGGC Graphics context; TGGCPool Graphics context pool; TGGotoDialog Goto line dialog used by TGTextEdit widget; TGGroupFrame A composite frame with border and title; TGHButtonGroup A button group with one horizontal row; TGHProgressBar Horizontal progress bar widget; TGHScrollBar Horizontal scrollbar widget; TGHSlider Horizontal slider widget; TGHSplitter A horizontal frame splitter; TGHeaderFrame Header frame with buttons and splitters; TGHorizontal3DLine A horizontal 3D separator line; TGHorizontalFrame Composite frame with horizontal child layout; TGHorizontalLayout Horizontal layout manager; TGHotString Graphics string with hot character; TGHtml HTML widget; TGHtmlBrowser very simple html browser; TGIcon Ic",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:74445,Usability,progress bar,progress bar,74445," File browser.; TGFileContainer Container containing file system objects; TGFileDialog File selection dialog; TGFileInfo ; TGFileItem Class representing file system object; TGFont GUI font description; TGFontDialog Font selection dialog; TGFontDialog::FontProp_t ; TGFontPool Font pool; TGFontTypeComboBox Font type combobox widget; TGFrame Base class for simple widgets (button, etc.); TGFrameElement Base class used in GUI containers; TGFrameElementPack Class used in TGPack.; TGGC Graphics context; TGGCPool Graphics context pool; TGGotoDialog Goto line dialog used by TGTextEdit widget; TGGroupFrame A composite frame with border and title; TGHButtonGroup A button group with one horizontal row; TGHProgressBar Horizontal progress bar widget; TGHScrollBar Horizontal scrollbar widget; TGHSlider Horizontal slider widget; TGHSplitter A horizontal frame splitter; TGHeaderFrame Header frame with buttons and splitters; TGHorizontal3DLine A horizontal 3D separator line; TGHorizontalFrame Composite frame with horizontal child layout; TGHorizontalLayout Horizontal layout manager; TGHotString Graphics string with hot character; TGHtml HTML widget; TGHtmlBrowser very simple html browser; TGIcon Icon GUI class; TGIconLBEntry Icon + text listbox entry; TGIdleHandler Idle event handler; TGImageMap Clickable image (like MAP in HTML); TGInputDialog Simple input dialog; TGInsets Inset (left, right, top, bottom); TGItemContext Context menu for TTVLVEntry; TGL5DDataSet Class to read data from TTree and create TGL5DPainter.; TGL5DDataSetEditor GUI for editing OpenGL 5D Viewer attributes; TGLAdapter Allow plot-painters to be used for gl-inpad and gl-viewer.; TGLAnnotation GL-annotation.; TGLAutoRotator Automatic, timer-based, rotation of GL-viewer's camera.; TGLAxis a GL Axis; TGLAxisPainter GL axis painter.; TGLAxisPainterBox Painter of GL axes for a 3D box.; TGLBContainer Listbox container; TGLBEntry Basic listbox entry; TGLBoundingBox a 3D orientated bounding box; TGLBoxCut Cuts away part ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:74888,Usability,simpl,simple,74888," File browser.; TGFileContainer Container containing file system objects; TGFileDialog File selection dialog; TGFileInfo ; TGFileItem Class representing file system object; TGFont GUI font description; TGFontDialog Font selection dialog; TGFontDialog::FontProp_t ; TGFontPool Font pool; TGFontTypeComboBox Font type combobox widget; TGFrame Base class for simple widgets (button, etc.); TGFrameElement Base class used in GUI containers; TGFrameElementPack Class used in TGPack.; TGGC Graphics context; TGGCPool Graphics context pool; TGGotoDialog Goto line dialog used by TGTextEdit widget; TGGroupFrame A composite frame with border and title; TGHButtonGroup A button group with one horizontal row; TGHProgressBar Horizontal progress bar widget; TGHScrollBar Horizontal scrollbar widget; TGHSlider Horizontal slider widget; TGHSplitter A horizontal frame splitter; TGHeaderFrame Header frame with buttons and splitters; TGHorizontal3DLine A horizontal 3D separator line; TGHorizontalFrame Composite frame with horizontal child layout; TGHorizontalLayout Horizontal layout manager; TGHotString Graphics string with hot character; TGHtml HTML widget; TGHtmlBrowser very simple html browser; TGIcon Icon GUI class; TGIconLBEntry Icon + text listbox entry; TGIdleHandler Idle event handler; TGImageMap Clickable image (like MAP in HTML); TGInputDialog Simple input dialog; TGInsets Inset (left, right, top, bottom); TGItemContext Context menu for TTVLVEntry; TGL5DDataSet Class to read data from TTree and create TGL5DPainter.; TGL5DDataSetEditor GUI for editing OpenGL 5D Viewer attributes; TGLAdapter Allow plot-painters to be used for gl-inpad and gl-viewer.; TGLAnnotation GL-annotation.; TGLAutoRotator Automatic, timer-based, rotation of GL-viewer's camera.; TGLAxis a GL Axis; TGLAxisPainter GL axis painter.; TGLAxisPainterBox Painter of GL axes for a 3D box.; TGLBContainer Listbox container; TGLBEntry Basic listbox entry; TGLBoundingBox a 3D orientated bounding box; TGLBoxCut Cuts away part ",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:83252,Usability,simpl,simple,83252,"t Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTabl",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:84396,Usability,simpl,simple,84396,"et abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-editable text viewer widget; TGTileLayout Tile layout manager; TGToolBar A bar containing picture buttons; TGToolTip One or multiple lines help text; TGTransientFrame Frame for dialog (transient) windows; TGTreeLBEntry TGFSComboBox entry; TGTreeTable A TGTable that owns it's TTreeTableIngeface.; TGTripleHSlider Horizontal triple slider widget; TGTripleVSlider Vertical triple slider widget; TGUndockedFrame Undocked frame; TGUnknownWindowHandler Abstract event handler for unknown windows; TGVButtonGroup A button group with one vertical column; TGVFileSplitter A vertical file frame splitter; TGVProgressBar Vertical progress bar widget; TGVScrollBar Vertical scrollbar widget; TGVSlider Vertical slider widget; TGVSplitter A vertical frame splitter; TGVertical3DLine A vertical 3D separator line; TGVertic",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:85191,Usability,progress bar,progress bar,85191,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:86931,Usability,simpl,simple,86931,"ticalFrame Composite frame with vertical child layout; TGVerticalLayout Vertical layout manager; TGView View widget base class; TGViewFrame Frame containing the actual text; TGViewPort Viewport through which to look at a container frame; TGWidget Widget base class; TGWindow GUI Window base class; TGX11 Interface to X11; TGX11TTF Interface to X11 + TTF font handling; TGXYLayout X / Y - layout manager; TGXYLayoutHints Hits for the X / Y - layout manager; TGaxis Graphics axis; TGedEditor ROOT graphics editor; TGedFrame base editor's frame; TGedMarkerPopup marker select popup; TGedMarkerSelect Marker selection button; TGedNameFrame frame showing the selected object name; TGedPatternFrame pattern frame; TGedPatternPopup Color selector popup; TGedPatternSelect pattern selection check-button; TGedPatternSelector select pattern frame; TGedPopup popup window; TGedSelect selection check-button; TGenCollectionProxy ; TGenCollectionProxy::Method ; TGenCollectionProxy::Value ; TGenPhaseSpace Simple Phase Space Generator; TGenerator Event generator interface abstract baseclass; TGenericTable Generic array of C-structure (a'la STL vector); TGenericTable::iterator ; TGeoArb8 arbitrary trapezoid with 8 vertices; TGeoAtt class for visibility, activity and optimization attributes for volumes/nodes; TGeoBBox box primitive; TGeoBBoxEditor TGeoBBox editor; TGeoBatemanSol Solution for the Bateman equation; TGeoBoolNode a boolean node; TGeoBranchArray ; TGeoBuilder geometry builder singleton; TGeoCacheState class storing the cache state; TGeoChecker a simple geometry checker; TGeoCombiTrans rotation + translation; TGeoCombiTransEditor TGeoCombiTrans editor; TGeoCompositeShape boolean composite shape; TGeoCone conical tube class; TGeoConeEditor TGeoCone editor; TGeoConeSeg conical tube segment class; TGeoConeSegEditor TGeoConeSeg editor; TGeoCtub cut tube segment class; TGeoCtubEditor TGeoCtub editor; TGeoDecayChannel Decay channel for Elements; TGeoElemIter Iterator for radionuclide chains.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:99786,Usability,simpl,simple,99786,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:102158,Usability,simpl,simple,102158,"d Interface; TMVA::Interval Interval definition, continous and discrete; TMVA::KDEKernel Kernel density estimator for PDF smoothing; TMVA::LogInterval Interval definition, continous and discrete; TMVA::MCFitter Fitter using Monte Carlo sampling of parameters; TMVA::MethodANNBase Base class for TMVA ANNs; TMVA::MethodBDT Analysis of Boosted Decision Trees; TMVA::MethodBase Virtual base class for all TMVA method; TMVA::MethodBayesClassifier Friedman's BayesClassifier method; TMVA::MethodBoost ; TMVA::MethodCFMlpANN Interface for Clermond-Ferrand artificial neural network; TMVA::MethodCFMlpANN_Utils Implementation of Clermond-Ferrand artificial neural network; TMVA::MethodCategory ; TMVA::MethodCompositeBase ; TMVA::MethodCuts Multivariate optimisation of signal efficiency; TMVA::MethodDT Analysis of Decision Trees; TMVA::MethodFDA Function Discriminant Analysis; TMVA::MethodFisher Analysis of Fisher discriminant (Fisher or Mahalanobis approach); TMVA::MethodHMatrix H-Matrix method, a simple comparison of chi-squared estimators for signal and background; TMVA::MethodKNN k Nearest Neighbour classifier; TMVA::MethodLD Linear discriminant analysis; TMVA::MethodLikelihood Likelihood analysis (""non-parametric approach""); TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Multi-dimensional probability density estimator using TFoam (PDE-Foam); TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::Optimiz",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:110845,Usability,simpl,simple,110845," TMinuitMinimizer Implementation of Minimizer interface using TMinuit; TMixture Mixtures used in the Geometry Shapes; TModuleDocInfo documentation for a group of classes; TMonitor Monitor activity on a set of TSocket objects; TMultiDimFit Multi dimensional fit class; TMultiGraph A collection of TGraph objects; TMultiLayerPerceptron a Neural Network; TMutex Mutex lock class; TMutexImp Mutex lock implementation ABC; TMySQLResult MySQL query result; TMySQLRow One row of MySQL query result; TMySQLServer Connection to MySQL server; TMySQLStatement SQL statement class for MySQL DB; TNDArray Base for n-dimensional array; TNDArrayRef<Long64_t> ; TNDArrayRef<ULong64_t> ; TNDArrayRef<char> ; TNDArrayRef<double> ; TNDArrayRef<float> ; TNDArrayRef<int> ; TNDArrayRef<long> ; TNDArrayRef<short> ; TNDArrayRef<unsigned int> ; TNDArrayRef<unsigned long> ; TNDArrayRef<unsigned short> ; TNDArrayT<Long64_t> N-dimensional array; TNDArrayT<ULong64_t> N-dimensional array; TNDArrayT<char> N-dimensional array; TNDArrayT<double> N-dimensional array; TNDArrayT<float> N-dimensional array; TNDArrayT<int> N-dimensional array; TNDArrayT<long> N-dimensional array; TNDArrayT<short> N-dimensional array; TNDArrayT<unsigned int> N-dimensional array; TNDArrayT<unsigned long> N-dimensional array; TNDArrayT<unsigned short> N-dimensional array; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNetXNGFile ROOT class definition; TNetXNGFileStager ! Interface to a 'XRD' staging; TNetXNGSystem ROOT class definition; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:110894,Usability,simpl,simple,110894,"nsional array; TNDArrayT<float> N-dimensional array; TNDArrayT<int> N-dimensional array; TNDArrayT<long> N-dimensional array; TNDArrayT<short> N-dimensional array; TNDArrayT<unsigned int> N-dimensional array; TNDArrayT<unsigned long> N-dimensional array; TNDArrayT<unsigned short> N-dimensional array; TNamed The basis for a named object (name, title); TNetFile A ROOT file that reads/writes via a rootd server; TNetFileStager Implementation for a 'rootd' backend; TNetSystem Directory handler for NetSystem; TNetXNGFile ROOT class definition; TNetXNGFileStager ! Interface to a 'XRD' staging; TNetXNGSystem ROOT class definition; TNeuron Neuron for MultiLayerPerceptrons; TNewChainDlg New chain dialog; TNewQueryDlg New query dialog; TNode Description of parameters to position a 3-D geometry object; TNodeDiv Description of parameters to divide a 3-D geometry object; TNonSplitBrowsable Helper object to browse unsplit objects; TNtuple A simple tree with branches of floats.; TNtupleD A simple tree with branches of floats.; TObjArray An array of objects; TObjArrayIter Object array iterator; TObjString Collectable string class; TObject Basic ROOT object; TObjectRefSpy Spy object reference for deletion; TObjectSet TDataSet wrapper for TObject class objects; TObjectSpy Spy object pointer for deletion; TObjectTable Table of active objects; TOptionListItem Element in the list of options.; TOrdCollection An ordered collection; TOrdCollectionIter Ordered collection iterator; TOutputListSelectorDataMap Converter from output list to TSelector data members; TPARA PARA shape; TPBHandleDSType Streamable PBHandleDSType; TPBHistType Streamable PBHistType; TPBReadType Streamable PBReadType; TPCON PCON shape; TPDF PDF driver; TPGON PGON shape; TPMERegexp Wrapper for Perl-like regular expression matching.; TPRegexp Perl Compatible Regular Expression Class; TPServerSocket Parallel server socket; TPSocket Parallel client socket; TPackageDescription Package description; TPacketizer Generate work pac",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:118649,Usability,undo,undo,118649,list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite PROOF-Lite Server Application Interface; TProofSuperMaster PROOF control class for making submasters; TProofVectorContainer<TProofDrawListOfGraphs::Point3D_t> Class describing a vector container; TProofVectorContainer<TProofDrawListOfPolyMarkers3D::Point4D_t> Class describing a vector container; TProtoClass Persistent TClass; TProtoClass::TProtoRealData Persistent version of TRealData; TPyArg Python morphing argument type; TPyDispatcher Python dispatcher class; TPyMultiGenFunction Python for Math::IMultiGenFunction equivalent; TPyMultiGradFunction Python for Math::IMultiGradFunction equivalent; TPyReturn Python morphing return object; TPySelector Python equivalent base class for PROOF; TPythia8 Interface class of Pythia8; TPythia8Decayer Particle Decayer using Pythia8; TPython Access to the python interpreter; TQApplication creates ROOT environment with the Qt windowing system; TQCanvasImp ABC describing Qt GUI independent main window; TQCanvasMenu interface to Qt based context sensitive popup menus; TQClass Class with connections; TQCommand encapsulates the information for undo/redo a single action.,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:119192,Usability,undo,undo,119192,"mation for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQMimeTypes Pool of mime type objects; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQRootApplication creates Qt environment interface with the ROOT windowing system; TQRootCanvas interface to Qt eventloop to handle user input; TQRootDialog prompt for the arguments of an object's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQtApplication Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootGuiFactory Factory for Qt-based ROOT GUI components; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number genera",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:121502,Usability,pause,paused,121502,,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:126962,Usability,feedback,feedback,126962,"ctrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrum2Painter TSpectrum 3d graphics package; TSpectrum2Transform Spectrum2 Transformer, it calculates classic orthogonal 2D transforms; TSpectrum3 Peak Finder, Background estimator, Markov smoothing and Deconvolution for 3-D histograms; TSpectrumFit Spectrum Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Hestens method); TSpectrumTransform Spectrum Transformer, it calculates classic orthogonal 1D transforms; TSpider Helper class to draw spider; TSpiderEditor GUI for editing the spider plot attributes.; TSpline Spline base class; TSpline3 Class to create third natural splines; TSpline5 Class to create quintic natural splines; TSplinePoly Spline polynomial terms; TSplinePoly3 Third spline polynomial terms; TSplinePoly5 Quintic spline polynomial terms; TStatistic Named statistical variable; TStatsFeedback Present PROOF query feedback; TStatus Status class; TStdExceptionHandler C++ exception handler; TStopwatch A stopwatch which times real and cpu time; TStorage Storage manager class; TStreamerArtificial StreamerElement injected by a TSchemaRule. Transient only to preverse forward compatibility.; TStreamerBase Streamer element of type base class; TStreamerBasicPointer Streamer element for a pointer to a basic type; TStreamerBasicType Streamer element for a basic type; TStreamerElement Base class for one element (data member) to be Streamed; TStreamerInfo Streamer information for one class version; TStreamerInfoActions ; TStreamerInfoActions::TActionSequence ; TStreamerInfoActions::TConfiguration ; TStreamerInfoActions::TConfiguredAction A configured action; TStreamerLoop Streamer element for a pointer to an array of objects; TStreamerObject Streamer element of type object; TStreamerObjectAny Streamer element of type object other than TObject; TStreamerObje",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:128824,Usability,simpl,simple,128824," element of type STL container; TStreamerSTLstring Streamer element of type C++ string; TStreamerString Streamer element of type TString; TString Basic string class; TStringLong Long string class (more than 255 chars); TStringToken String tokenizer using PCRE for finding next tokens.; TStructNode Node with information about class; TStructNodeEditor GUI fo editing TStructNode; TStructNodeProperty Class with nodes color property; TStructViewer A 3D struct viewer; TStructViewerGUI A GUI fo 3D struct viewer; TStyle A collection of all graphics attributes; TStyleDialog Dialog box used by the TStyleManager class; TStyleManager Graphical User Interface for managing styles; TStylePreview Preview window used by the TStyleManager class; TSubString ; TSynapse simple weighted bidirectionnal connection between 2 neurons; TSysEvtHandler ABC for handling system events; TSystem ABC defining a generic interface to the OS; TSystemDirectory A system directory; TSystemFile A system file; TTF Interface to TTF font handling; TTRAP TRAP shape; TTRD1 TRD1 shape; TTRD2 TRD2 shape; TTUBE TUBE shape; TTUBS TUBS shape; TTVLVContainer A dragging-capable LVContainer; TTVLVEntry Item that goes into the tree list view widget; TTVRecord A draw record for TTreeViewer; TTVSession A tree viewer session; TTabCom Perform command line completion when hitting <TAB>; TTable vector of the C structures; TTable3Points A 3-D Points; TTable::iterator ; TTableDescriptor descrpitor defining the internal layout of TTable objects; TTableIter Iterator over ""sorted"" TTable objects; TTableMap ""Map"" array for TTable object; TTablePadView3D ; TTablePoints Defines the TTable as an element of ""event"" geometry; TTableRange Range used in TGTable.; TTableSorter Is an ""observer"" class to sort the TTable objects; TTask Base class for tasks; TTeXDump Tex driver; TText Text; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precisi",MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/ClassIndex.html:130895,Usability,simpl,simple,130895,; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeReader A simple interface to read trees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUpload,MatchSource.WIKI,root/html602/ClassIndex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ClassIndex.html
https://root.cern/root/html602/CpuInfo_t.html:320,Integrability,interface,interface,320,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:1091,Performance,load,load,1091,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:1133,Performance,load,load,1133,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:1174,Performance,load,load,1174,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:1216,Performance,load,load,1216,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:1262,Performance,load,load,1262,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:1303,Performance,load,load,1303,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/CpuInfo_t.html:634,Usability,simpl,simple,634,". CpuInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » CpuInfo_t. class CpuInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~CpuInfo_t(); static TClass*Class(); CpuInfo_t(); CpuInfo_t(const CpuInfo_t&); virtual TClass*IsA() const; CpuInfo_t&operator=(const CpuInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfIdlecpu idle percentage; Float_tfLoad15mcpu load average over 15 m; Float_tfLoad1mcpu load average over 1 m; Float_tfLoad5mcpu load average over 5 m; Float_tfSyscpu sys load in percentage; Float_tfTotalcpu user+sys load in percentage; Float_tfUsercpu user load in percentage. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CpuInfo_t(); { }. virtual ~CpuInfo_t(); { }. TSystem& operator=(const CpuInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/CpuInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/CpuInfo_t.html
https://root.cern/root/html602/Event_t.html:814,Availability,mask,mask,814,". Event_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Event_t. class Event_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Event_t(); Event_t(); Event_t(const Event_t&); Event_t(Event_t&&); Event_t&operator=(const Event_t&); Event_t&operator=(Event_t&&). Data Members; public:. UInt_tfCodekey or button code; Int_tfCountif non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandlegeneral resource handle (used for atoms or windows); UInt_tfHeightwidth and height of exposed area; Bool_tfSendEventtrue if event came from SendEvent; UInt_tfStatekey or button mask; Time_tfTimetime event event occured in ms; EGEventTypefTypeof event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthwidth and height of exposed area; Window_tfWindowwindow reported event is relative to; Int_tfXpointer x, y coordinates in event window; Int_tfXRootcoordinates relative to root; Int_tfYpointer x, y coordinates in event window; Int_tfYRootcoordinates relative to root. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:21:10 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Event_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Event_t.html
https://root.cern/root/html602/Event_t.html:951,Integrability,message,message,951,". Event_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Event_t. class Event_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Event_t(); Event_t(); Event_t(const Event_t&); Event_t(Event_t&&); Event_t&operator=(const Event_t&); Event_t&operator=(Event_t&&). Data Members; public:. UInt_tfCodekey or button code; Int_tfCountif non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandlegeneral resource handle (used for atoms or windows); UInt_tfHeightwidth and height of exposed area; Bool_tfSendEventtrue if event came from SendEvent; UInt_tfStatekey or button mask; Time_tfTimetime event event occured in ms; EGEventTypefTypeof event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthwidth and height of exposed area; Window_tfWindowwindow reported event is relative to; Int_tfXpointer x, y coordinates in event window; Int_tfXRootcoordinates relative to root; Int_tfYpointer x, y coordinates in event window; Int_tfYRootcoordinates relative to root. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:21:10 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Event_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Event_t.html
https://root.cern/root/html602/Event_t.html:555,Security,expose,exposes,555,". Event_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Event_t. class Event_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Event_t(); Event_t(); Event_t(const Event_t&); Event_t(Event_t&&); Event_t&operator=(const Event_t&); Event_t&operator=(Event_t&&). Data Members; public:. UInt_tfCodekey or button code; Int_tfCountif non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandlegeneral resource handle (used for atoms or windows); UInt_tfHeightwidth and height of exposed area; Bool_tfSendEventtrue if event came from SendEvent; UInt_tfStatekey or button mask; Time_tfTimetime event event occured in ms; EGEventTypefTypeof event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthwidth and height of exposed area; Window_tfWindowwindow reported event is relative to; Int_tfXpointer x, y coordinates in event window; Int_tfXRootcoordinates relative to root; Int_tfYpointer x, y coordinates in event window; Int_tfYRootcoordinates relative to root. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:21:10 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Event_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Event_t.html
https://root.cern/root/html602/Event_t.html:723,Security,expose,exposed,723,". Event_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Event_t. class Event_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Event_t(); Event_t(); Event_t(const Event_t&); Event_t(Event_t&&); Event_t&operator=(const Event_t&); Event_t&operator=(Event_t&&). Data Members; public:. UInt_tfCodekey or button code; Int_tfCountif non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandlegeneral resource handle (used for atoms or windows); UInt_tfHeightwidth and height of exposed area; Bool_tfSendEventtrue if event came from SendEvent; UInt_tfStatekey or button mask; Time_tfTimetime event event occured in ms; EGEventTypefTypeof event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthwidth and height of exposed area; Window_tfWindowwindow reported event is relative to; Int_tfXpointer x, y coordinates in event window; Int_tfXRootcoordinates relative to root; Int_tfYpointer x, y coordinates in event window; Int_tfYRootcoordinates relative to root. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:21:10 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Event_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Event_t.html
https://root.cern/root/html602/Event_t.html:999,Security,expose,exposed,999,". Event_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » Event_t. class Event_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~Event_t(); Event_t(); Event_t(const Event_t&); Event_t(Event_t&&); Event_t&operator=(const Event_t&); Event_t&operator=(Event_t&&). Data Members; public:. UInt_tfCodekey or button code; Int_tfCountif non-zero, at least this many more exposes; Int_tfFormatNext fields only used by kClientMessageEvent; Handle_tfHandlegeneral resource handle (used for atoms or windows); UInt_tfHeightwidth and height of exposed area; Bool_tfSendEventtrue if event came from SendEvent; UInt_tfStatekey or button mask; Time_tfTimetime event event occured in ms; EGEventTypefTypeof event (see EGEventType); Long_tfUser[5]5 longs can be used by client message events; UInt_tfWidthwidth and height of exposed area; Window_tfWindowwindow reported event is relative to; Int_tfXpointer x, y coordinates in event window; Int_tfXRootcoordinates relative to root; Int_tfYpointer x, y coordinates in event window; Int_tfYRootcoordinates relative to root. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation. » Last changed: Tue Jun 30 14:21:10 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Event_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Event_t.html
https://root.cern/root/html602/FileStat_t.html:323,Integrability,interface,interface,323,". FileStat_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » FileStat_t. class FileStat_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~FileStat_t(); FileStat_t(); FileStat_t(FileStat_t&&); FileStat_t(const FileStat_t&); FileStat_t&operator=(FileStat_t&&); FileStat_t&operator=(const FileStat_t&). Data Members; public:. Long_tfDevdevice id; Int_tfGidgroup id of owner; Long_tfInoinode; Bool_tfIsLinksymbolic link; Int_tfModeprotection (combination of EFileModeMask bits); Long_tfMtimemodification date; Long64_tfSizetotal size in bytes; Int_tfUiduser id of owner; TStringfUrlend point url of file. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FileStat_t(); { }. TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/FileStat_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/FileStat_t.html
https://root.cern/root/html602/FileStat_t.html:637,Usability,simpl,simple,637,". FileStat_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » FileStat_t. class FileStat_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~FileStat_t(); FileStat_t(); FileStat_t(FileStat_t&&); FileStat_t(const FileStat_t&); FileStat_t&operator=(FileStat_t&&); FileStat_t&operator=(const FileStat_t&). Data Members; public:. Long_tfDevdevice id; Int_tfGidgroup id of owner; Long_tfInoinode; Bool_tfIsLinksymbolic link; Int_tfModeprotection (combination of EFileModeMask bits); Long_tfMtimemodification date; Long64_tfSizetotal size in bytes; Int_tfUiduser id of owner; TStringfUrlend point url of file. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FileStat_t(); { }. TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/FileStat_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/FileStat_t.html
https://root.cern/root/html602/Foption_t.html:710,Availability,error,error,710,". Foption_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » Foption_t. class Foption_t. Foption. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentatio",MatchSource.WIKI,root/html602/Foption_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Foption_t.html
https://root.cern/root/html602/Foption_t.html:1128,Availability,error,error,1128,"on. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Foption_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Foption_t.html
https://root.cern/root/html602/Foption_t.html:1387,Availability,error,error,1387,"on. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Foption_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Foption_t.html
https://root.cern/root/html602/Foption_t.html:1593,Availability,robust,robust,1593,"on. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Foption_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Foption_t.html
https://root.cern/root/html602/Foption_t.html:1843,Availability,error,error,1843,"on. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Foption_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Foption_t.html
https://root.cern/root/html602/Foption_t.html:1897,Availability,robust,robust,1897,"on. Histogram fit options structure. Function Members (Methods); public:. ~Foption_t(); Foption_t(); Foption_t(const Foption_t&); Foption_t(Foption_t&&); Foption_t&operator=(const Foption_t&); Foption_t&operator=(Foption_t&&). Data Members; public:. intBound""B"" When using pre-defined functions user parameter settings are used instead of default one; intChi2""X"" For fitting THnsparse use chi2 method (default is likelihood); intErrors""E"" Performs a better error evaluation, calling HESSE and MINOS; intGradient""G"" Option to compute derivatives analytically; intIntegral""I"" Use function integral instead of function in center of bin; intLike""L"" Use Log Likelihood. Default is chisquare method except fitting THnsparse; intMinuit""F"" If fitting a polN, switch to minuit fitter; intMore""M"" Improve fit results.; intNoErrX""EX0"" or ""T"" When fitting a TGraphErrors do not consider error in coordinates; intNochisq""C"" In case of linear fitting, don't calculate the chisquare; intNograph""0"" If set, do not display the function graph; intNostore""N"" If set, do not store the function graph; intPChi2""P"" Use Pearson chi2 built with the expected error instead of the observed ones; intPlus""+"" Add new function (default is replace); intQuiet""Q"" Quiet mode. No print; intRange""R"" Use the range stored in function; intRobust""ROB"" or ""H"": For a TGraph use robust fitting; intStoreResult""S"": Stores the result in a TFitResult structure; intUser""U"" Use a User specified fitting algorithm (via SetFCN); intVerbose""V"" Verbose mode. Print results after each iteration; intW1""W"" Set all the weights to 1. Ignore error bars; doublehRobustvalue of h parameter used in robust fitting. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Foption_t(); {}. » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Foption_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Foption_t.html
https://root.cern/root/html602/GCValues_t.html:1323,Availability,mask,mask,1323,". GCValues_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » GCValues_t. class GCValues_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~GCValues_t(); GCValues_t(); GCValues_t(const GCValues_t&); GCValues_t(GCValues_t&&); GCValues_t&operator=(const GCValues_t&); GCValues_t&operator=(GCValues_t&&). Data Members; public:. Int_tfArcModekArcChord, kArcPieSlice; ULong_tfBackgroundbackground pixel; Int_tfCapStylekCapNotLast, kCapButt,; Pixmap_tfClipMaskbitmap clipping; other calls for rects; Int_tfClipXOriginorigin for clipping; Int_tfClipYOrigin; Int_tfDashLennumber of dashes in fDashes; Int_tfDashOffsetpatterned/dashed line information; Char_tfDashes[8]dash pattern list (dash length per byte); Int_tfFillRulekEvenOddRule, kWindingRule; Int_tfFillStylekFillSolid, kFillTiled,; FontH_tfFontdefault text font for text operations; ULong_tfForegroundforeground pixel; EGraphicsFunctionfFunctionlogical operation; Bool_tfGraphicsExposuresboolean, should exposures be generated; Int_tfJoinStylekJoinMiter, kJoinRound, kJoinBevel; Int_tfLineStylekLineSolid, kLineOnOffDash, kLineDoubleDash; Int_tfLineWidthline width; Mask_tfMaskbit mask specifying which fields are valid; ULong_tfPlaneMaskplane mask; Pixmap_tfStipplestipple 1 plane pixmap for stipping; Int_tfSubwindowModekClipByChildren, kIncludeInferiors; Pixmap_tfTiletile pixmap for tiling operations; Int_tfTsXOriginoffset for tile or stipple operations; Int_tfTsYOrigin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GCValues_t(). » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/GCValues_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/GCValues_t.html
https://root.cern/root/html602/GCValues_t.html:1386,Availability,mask,mask,1386,". GCValues_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » GCValues_t. class GCValues_t. GuiTypes. Types used by the GUI classes. Function Members (Methods); public:. ~GCValues_t(); GCValues_t(); GCValues_t(const GCValues_t&); GCValues_t(GCValues_t&&); GCValues_t&operator=(const GCValues_t&); GCValues_t&operator=(GCValues_t&&). Data Members; public:. Int_tfArcModekArcChord, kArcPieSlice; ULong_tfBackgroundbackground pixel; Int_tfCapStylekCapNotLast, kCapButt,; Pixmap_tfClipMaskbitmap clipping; other calls for rects; Int_tfClipXOriginorigin for clipping; Int_tfClipYOrigin; Int_tfDashLennumber of dashes in fDashes; Int_tfDashOffsetpatterned/dashed line information; Char_tfDashes[8]dash pattern list (dash length per byte); Int_tfFillRulekEvenOddRule, kWindingRule; Int_tfFillStylekFillSolid, kFillTiled,; FontH_tfFontdefault text font for text operations; ULong_tfForegroundforeground pixel; EGraphicsFunctionfFunctionlogical operation; Bool_tfGraphicsExposuresboolean, should exposures be generated; Int_tfJoinStylekJoinMiter, kJoinRound, kJoinBevel; Int_tfLineStylekLineSolid, kLineOnOffDash, kLineDoubleDash; Int_tfLineWidthline width; Mask_tfMaskbit mask specifying which fields are valid; ULong_tfPlaneMaskplane mask; Pixmap_tfStipplestipple 1 plane pixmap for stipping; Int_tfSubwindowModekClipByChildren, kIncludeInferiors; Pixmap_tfTiletile pixmap for tiling operations; Int_tfTsXOriginoffset for tile or stipple operations; Int_tfTsYOrigin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GCValues_t(). » Last changed: Tue Jun 30 14:21:16 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/GCValues_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/GCValues_t.html
https://root.cern/root/html602/HTML_Index.html:564,Performance,cache,cache,564,". Index of HTML. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » HTML. Index of HTML; DUMMY - a howto, for now. The content of a file called index.html or index.txt will be put; into the module index page (e.g. into GUI/index.html).; All other files will be linked. .txt files will be run through THtml::Convert, html files will be kept.; Only files ending on .txt or .html will be considered as module documentation.; Class Index; Jump to; T; TD; TDocL; TDocO; TH; THtml:; THtml::TFileSysE; THtml::TH; THtml::TP; TM. TClassDocInfo info cache for class documentation; TClassDocOutput generates documentation web pages for a class; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; THtml Convert class(es) into HTML file(s); THtml::TFileDefinition helper class to determine a class's source files; THtml::TFileSysDB instance of file system data; THtml::TFileSysDir an directory of the local file system; THtml::TFileSysEntry an entry of the local file system; THtml::TFileSysRoot an root directory of the local file system; THtml::THelperBase a helper object's base class; THtml::TModuleDefinition helper class to determine a class's module; THtml::TPathDefinition helper class to determine directory layouts; TLibraryDocInfo documentation for a library; TModuleDocInfo documentation for a group of classes. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/HTML_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/HTML_Index.html
https://root.cern/root/html602/index.html:912,Integrability,depend,dependencies,912,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/index.html
https://root.cern/root/html602/index.html:268,Security,access,accessed,268,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/index.html
https://root.cern/root/html602/index.html:312,Security,access,accessing,312,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/index.html
https://root.cern/root/html602/index.html:377,Usability,simpl,simply,377,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/index.html
https://root.cern/root/html602/index.html:408,Usability,guid,guide,408,". ROOT Reference Guide. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT. ROOT Reference Guide; These pages contain the documentation for all ROOT classes, and the conceptual structure of the ROOT classes, its modules.; The documentation can be accessed by browsing the modules below,; by accessing a certain class directly using the Class Index,; or by simply searching the reference guide (see search field above).; The ROOT Tutorials show how to use many of ROOT's classes. Modules; BINDINGS; CORE; GEOM; GRAF2D; GRAF3D; GUI; HIST; HTML; IO; MATH; MISC; MONTECARLO; NET; PROOF; ROOFIT; SQL; TMVA; TREE. Chapters; Class Index; A complete list of all classes defined in ROOT; Class Hierarchy; A hierarchy graph of all classes, showing each class's base and derived classes; Type Index; A complete list of all types; Library Dependency; A diagram showing all of ROOT's libraries and their dependencies. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/index.html
https://root.cern/root/html602/MATH_Index.html:4211,Availability,avail,available,4211,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:638,Deployability,integrat,integration,638,". Index of MATH. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » MATH. Index of MATH. ; ROOT Math Work Package. Math: The ROOT Mathematical Libraries; The ROOT Math package consists of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing.; It provides the major mathematical functions in the namespaces ROOT::Math and TMath,; classes for random number generators, TRandom, class for complex numbers, TComplex,; common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementa",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:3401,Deployability,continuous,continuous,3401,"s. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:3541,Deployability,integrat,integrator,3541," in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: T",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:3779,Deployability,install,installation,3779,"ons.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automat",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:511,Integrability,interface,interfaces,511,". Index of MATH. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » MATH. Index of MATH. ; ROOT Math Work Package. Math: The ROOT Mathematical Libraries; The ROOT Math package consists of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing.; It provides the major mathematical functions in the namespaces ROOT::Math and TMath,; classes for random number generators, TRandom, class for complex numbers, TComplex,; common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementa",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:638,Integrability,integrat,integration,638,". Index of MATH. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » MATH. Index of MATH. ; ROOT Math Work Package. Math: The ROOT Mathematical Libraries; The ROOT Math package consists of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing.; It provides the major mathematical functions in the namespaces ROOT::Math and TMath,; classes for random number generators, TRandom, class for complex numbers, TComplex,; common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementa",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:875,Integrability,depend,dependent,875,". Index of MATH. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. ROOT; » MATH. Index of MATH. ; ROOT Math Work Package. Math: The ROOT Mathematical Libraries; The ROOT Math package consists of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing.; It provides the major mathematical functions in the namespaces ROOT::Math and TMath,; classes for random number generators, TRandom, class for complex numbers, TComplex,; common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementa",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:1098,Integrability,interface,interfaces,1098,"ge; Class Index; Class Hierarchy. Search. ROOT; » MATH. Index of MATH. ; ROOT Math Work Package. Math: The ROOT Mathematical Libraries; The ROOT Math package consists of the following components:. MathCore: a self-consistent minimal set of tools required for the basic numerical computing.; It provides the major mathematical functions in the namespaces ROOT::Math and TMath,; classes for random number generators, TRandom, class for complex numbers, TComplex,; common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearF",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:1393,Integrability,interface,interface,1393," generators, TRandom, class for complex numbers, TComplex,; common interfaces for function evaluation and numerical algorithms. Basic implementations of some of the numerical algorithms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumil",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:1703,Integrability,interface,interface,1703,"hms such as integration or derivation, are as also provided by MathCore. Furthermore, classes required for fit the ROOT data objects (and also any data sets) are as well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix T",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:1822,Integrability,interface,interface,1822,"s well provided. MathMore: package incorporating advanced numerical functionality and dependent on external libraries like the GNU Scientific Library (GSL). It complements the MathCore library by providing a more complete sets of special mathematical functions and implementations of the numerical algorithms interfaces defined in MathCore using GSL. Minimization and Fitting Libraries: libraries required for numerical minimization and fitting. The minimization libraries include the numerical methods for solving the fitting problem by finding minimum of multi-dimensional function. The current common interface for fitting is class TVirtualFitter and implemented by derived classes in the minimization and fitting libraries. The fitting in ROOT is being re-organized and new fitting classes are present in MathCore for providing the fitting functionality and the use the minimization libraries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatri",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:3541,Integrability,integrat,integrator,3541," in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: T",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:2693,Performance,perform,perform,2693,"raries via a new common interface (ROOT::Math::Minimizer). In detail the minimization libraries, implementing all the new and old minimization interface, include:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:2801,Performance,optimiz,optimized,2801,"clude:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural ne",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:2820,Performance,perform,performances,2820,"clude:. Minuit:library providing via a class TMinuit an implementation of the popular MINUIT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural ne",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:2950,Performance,optimiz,optimization,2950,"IT minimization package. In addition the library contains also an implementation of the linear fitter (class TLinearFitter), for solving linear least square fits. Minuit2: new object-oriented implementation of MINUIT, with the same minimization algorithms (such as Migrad or Simplex). In addition it provides a new implementation of the Fumili algorithm, a specialized method for finding the minimum of a standard least square or likelihood functions. ; Fumili: library providing the implementation of the original Fumili fitting algorithm. Linear algebra. Two libraries are contained in ROOT for describing linear algebra matrices and vector classes:. Matrix: general matrix package providing matrix TMatrix and vector TVector classes and the complete environment to perform linear algebra calculations, like equation solving and eigenvalue decompositions.; SMatrix: package optimized for high performances matrix and vector computations of small and fixed size. It is based on expression templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quad",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:3929,Performance,optimiz,optimization,3929,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:4350,Usability,guid,guide,4350,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:4396,Usability,guid,guide,4396,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MATH_Index.html:4442,Usability,guid,guide,4442,"ession templates to achieve an high level optimization. Physics Vectors: classes for describing vectors in 2, 3 and 4 dimensions (relativistic vectors) and their rotation and transformation algorithms. Two package exist in ROOT:. Physics: library with the TVector3 and TLorentzVector classes.; GenVector: new library providing generic class templates for modeling the vectors. Unuran: package with universal algorithms for generating non-uniform pseudo-random numbers, from a large classes of continuous or discrete distributions in one or multi-dimensions. ; Foam: multi-dimensional general purpose Monte Carlo event generator (and integrator). It generates randomly points (vectors) according to an arbitrary probability distribution in n dimensions.; FFTW: library with implementation of the fast Fourier transform (FFT) using the FFTW package. It requires a previous installation of (FFTW).; MLP: library with the neural network class, TMultiLayerPerceptron based on the NN algorithm from the mlpfit package.; Quadp: optimization library with linear and quadratic programming methods. It is based on the Matrix package.; Statistic classes for computing limits and confidence levels.; More detailed is provided here. Some of these classes are currently provided by libPhysics. Further information is available at the following links:. ROOT Mathematical Library Web page; ROOT Math doxygen class documentation; The Math chapter in the user guide; The Linear Algebra chapter in the user guide; The Physics Vector chapter in the user guide; Inventory of Math functions and algorithms. Last modified: Thu Mar 5 16:03:07 CET 2009 . ; MATH Modules; FFTW; FOAM; FUMILI; GENETIC; GENVECTOR; MATHCORE; MATHMORE; MATRIX; MINUIT; MINUIT2; MLP; PHYSICS; QUADP; SMATRIX; SPLOT; UNURAN. » Last changed: 2015-06-30 14:20 » Last generated: 2015-06-30 14:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MATH_Index.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MATH_Index.html
https://root.cern/root/html602/MemInfo_t.html:320,Integrability,interface,interface,320,". MemInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » MemInfo_t. class MemInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~MemInfo_t(); static TClass*Class(); virtual TClass*IsA() const; MemInfo_t(); MemInfo_t(const MemInfo_t&); MemInfo_t&operator=(const MemInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Int_tfMemFreefree RAM in MB; Int_tfMemTotaltotal RAM in MB; Int_tfMemUsedused RAM in MB; Int_tfSwapFreefree swap in MB; Int_tfSwapTotaltotal swap in MB; Int_tfSwapUsedused swap in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MemInfo_t(); { }. virtual ~MemInfo_t(); { }. TSystem& operator=(const MemInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MemInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MemInfo_t.html
https://root.cern/root/html602/MemInfo_t.html:634,Usability,simpl,simple,634,". MemInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » MemInfo_t. class MemInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~MemInfo_t(); static TClass*Class(); virtual TClass*IsA() const; MemInfo_t(); MemInfo_t(const MemInfo_t&); MemInfo_t&operator=(const MemInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Int_tfMemFreefree RAM in MB; Int_tfMemTotaltotal RAM in MB; Int_tfMemUsedused RAM in MB; Int_tfSwapFreefree swap in MB; Int_tfSwapTotaltotal swap in MB; Int_tfSwapUsedused swap in MB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MemInfo_t(); { }. virtual ~MemInfo_t(); { }. TSystem& operator=(const MemInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/MemInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/MemInfo_t.html
https://root.cern/root/html602/Memstat.html:945,Integrability,depend,depending,945,". Memstat. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » MISC; » MEMSTAT; » Memstat. namespace Memstat. Function Members (Methods); public:. voiddemangle(char* _codeInfo, TString& _str); stringdig2bytes(Long64_t bytes); size_tgetBacktrace(void** _trace, size_t _size, Bool_t _bUseGNUBuiltinBacktrace = kFALSE); voidgetSymbolFullInfo(void* _pAddr, TString* _retInfo, const char*const _seporator = "" | ""); intgetSymbols(void* _pAddr, TString& _strInfo, TString& _strLib, TString& _strSymbol); booloperator<(const Memstat::SCustomDigest& a, const Memstat::SCustomDigest& b). Data Members. Class Charts; Function documentation; string dig2bytes(Long64_t bytes); This function creates a string representation of the number of bytes,; represented as a number in B, kB, MB or GB depending on the value.; The result is rounded to a sensible number of digits. » Author: Anar Manafov (A.Manafov@gsi.de) 2008-03-02 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/memstat:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Memstat.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:1322,Availability,error,error,1322," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; static voidClose(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Memstat::TMemStatMng*GetInstance(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObject",MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:1406,Availability,error,error,1406,"const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; static voidClose(); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisable(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnable(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Memstat::TMemStatMng*GetInstance(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:6223,Energy Efficiency,monitor,monitoring,6223,; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfBeginTimetime when monitoring starts; Int_tfBtIDback trace identifier; Int_t*fBufBtIDback trace identifier; Int_tfBufNcurrent number of alloc or free in the buffer; Int_t*fBufNBytesnumber of bytes allocated/freed; ULong64_t*fBufPosposition in memory where alloc/free happens; Int_t*fBufTimems10000*(current time - begin time); Int_tfBufferSizemax number of malloc/free to keep in the buffer; TFile*fDumpFile!file to dump current information; TTree*fDumpTree!tree to dump information; Int_t*fIndexarray to sort fBufPos; Int_tfMaxCallsmax number of malloc/frees to register in the output Tree; Bool_t*fMustWriteflag to write or not the entry; Int_tfNBytesnumber of bytes allocated/freed; ULong64_tfPosposition in memory where alloc/free happens; TMemStatHook::FreeHookFunc_tfPreviousFreeHook!old free function; TMemStatHook::MallocHookFunc_tfPreviousMallocHook!old malloc function; TTimeStampfTimeStamp; Int_tfTimems10000*(current time - begin time); Bool_tfUseGNUBuiltinBacktrace; static Memstat::TMemStatMng*fgInstancepointer to instance; static void*fgStackTopstack top pointer. private:. Memstat::TMemStatMng::CRCSet_tfBTChecksums; Int_tfBTCount; UInt_tfBTIDCount; Memstat::TMemStatFAddrContainerfFAddrs; TObjArray*fFAddrsList; TH1I*fHbtids; TNamed*fSysInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatMng(); Default constructor. void Init(); Initialize MemStat manager - used only by instance method. TMemStatMng* GetInstance(); GetInstance - a static function; Initialize a s,MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:6401,Energy Efficiency,allocate,allocated,6401,; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfBeginTimetime when monitoring starts; Int_tfBtIDback trace identifier; Int_t*fBufBtIDback trace identifier; Int_tfBufNcurrent number of alloc or free in the buffer; Int_t*fBufNBytesnumber of bytes allocated/freed; ULong64_t*fBufPosposition in memory where alloc/free happens; Int_t*fBufTimems10000*(current time - begin time); Int_tfBufferSizemax number of malloc/free to keep in the buffer; TFile*fDumpFile!file to dump current information; TTree*fDumpTree!tree to dump information; Int_t*fIndexarray to sort fBufPos; Int_tfMaxCallsmax number of malloc/frees to register in the output Tree; Bool_t*fMustWriteflag to write or not the entry; Int_tfNBytesnumber of bytes allocated/freed; ULong64_tfPosposition in memory where alloc/free happens; TMemStatHook::FreeHookFunc_tfPreviousFreeHook!old free function; TMemStatHook::MallocHookFunc_tfPreviousMallocHook!old malloc function; TTimeStampfTimeStamp; Int_tfTimems10000*(current time - begin time); Bool_tfUseGNUBuiltinBacktrace; static Memstat::TMemStatMng*fgInstancepointer to instance; static void*fgStackTopstack top pointer. private:. Memstat::TMemStatMng::CRCSet_tfBTChecksums; Int_tfBTCount; UInt_tfBTIDCount; Memstat::TMemStatFAddrContainerfFAddrs; TObjArray*fFAddrsList; TH1I*fHbtids; TNamed*fSysInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatMng(); Default constructor. void Init(); Initialize MemStat manager - used only by instance method. TMemStatMng* GetInstance(); GetInstance - a static function; Initialize a s,MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:6873,Energy Efficiency,allocate,allocated,6873,; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfBeginTimetime when monitoring starts; Int_tfBtIDback trace identifier; Int_t*fBufBtIDback trace identifier; Int_tfBufNcurrent number of alloc or free in the buffer; Int_t*fBufNBytesnumber of bytes allocated/freed; ULong64_t*fBufPosposition in memory where alloc/free happens; Int_t*fBufTimems10000*(current time - begin time); Int_tfBufferSizemax number of malloc/free to keep in the buffer; TFile*fDumpFile!file to dump current information; TTree*fDumpTree!tree to dump information; Int_t*fIndexarray to sort fBufPos; Int_tfMaxCallsmax number of malloc/frees to register in the output Tree; Bool_t*fMustWriteflag to write or not the entry; Int_tfNBytesnumber of bytes allocated/freed; ULong64_tfPosposition in memory where alloc/free happens; TMemStatHook::FreeHookFunc_tfPreviousFreeHook!old free function; TMemStatHook::MallocHookFunc_tfPreviousMallocHook!old malloc function; TTimeStampfTimeStamp; Int_tfTimems10000*(current time - begin time); Bool_tfUseGNUBuiltinBacktrace; static Memstat::TMemStatMng*fgInstancepointer to instance; static void*fgStackTopstack top pointer. private:. Memstat::TMemStatMng::CRCSet_tfBTChecksums; Int_tfBTCount; UInt_tfBTIDCount; Memstat::TMemStatFAddrContainerfFAddrs; TObjArray*fFAddrsList; TH1I*fHbtids; TNamed*fSysInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatMng(); Default constructor. void Init(); Initialize MemStat manager - used only by instance method. TMemStatMng* GetInstance(); GetInstance - a static function; Initialize a s,MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:8544,Energy Efficiency,allocate,allocated,8544,"ction documentation; TMemStatMng(); Default constructor. void Init(); Initialize MemStat manager - used only by instance method. TMemStatMng* GetInstance(); GetInstance - a static function; Initialize a singleton of MemStat manager. void Close(); Close - a static function; This method stops the manager,; flashes all the buffered data and closes the output tree. ~TMemStatMng(); if an instance is destructed - the hooks are reseted to old hooks. void SetBufferSize(Int_t buffersize); Set the maximum number of alloc/free calls to be buffered.; if the alloc and free are in the buffer, the corresponding entries; are not saved tio the Tree, reducing considerably the Tree output size. void SetMaxCalls(Int_t maxcalls); Set the maximum number of new/delete registered in the output Tree. void Enable(); Enable memory hooks. void Disable(); Disble memory hooks. void MacAllocHook(void* ptr, size_t size); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is allocated. void MacFreeHook(void* ptr); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is deallocated. void * AllocHook(size_t size, const void* ); AllocHook - a static function; A glibc memory allocation hook. void FreeHook(void* ptr, const void* ); FreeHook - a static function; A glibc memory deallocation hook. Int_t generateBTID(UChar_t* CRCdigest, Int_t stackEntries, void** stackPointers); An internal function, which returns a bitid for a corresponding CRC digest; cache variables. void AddPointer(void* ptr, Int_t size); Add pointer to table.; This method is called every time when any of the hooks are triggered.; The memory de-/allocation information will is recorded. void FillTree(); loop on all entries in the buffer and fill the output Tree; entries with alloc and free in the buffer are eliminated. TMemStatMng(). void SetUseGNUBuiltinBacktrace(Bool_t newVal); stack data members. » Author: Anar Manafov (A.Manafov@gsi.d",MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:9079,Modifiability,variab,variables,9079,"er,; flashes all the buffered data and closes the output tree. ~TMemStatMng(); if an instance is destructed - the hooks are reseted to old hooks. void SetBufferSize(Int_t buffersize); Set the maximum number of alloc/free calls to be buffered.; if the alloc and free are in the buffer, the corresponding entries; are not saved tio the Tree, reducing considerably the Tree output size. void SetMaxCalls(Int_t maxcalls); Set the maximum number of new/delete registered in the output Tree. void Enable(); Enable memory hooks. void Disable(); Disble memory hooks. void MacAllocHook(void* ptr, size_t size); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is allocated. void MacFreeHook(void* ptr); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is deallocated. void * AllocHook(size_t size, const void* ); AllocHook - a static function; A glibc memory allocation hook. void FreeHook(void* ptr, const void* ); FreeHook - a static function; A glibc memory deallocation hook. Int_t generateBTID(UChar_t* CRCdigest, Int_t stackEntries, void** stackPointers); An internal function, which returns a bitid for a corresponding CRC digest; cache variables. void AddPointer(void* ptr, Int_t size); Add pointer to table.; This method is called every time when any of the hooks are triggered.; The memory de-/allocation information will is recorded. void FillTree(); loop on all entries in the buffer and fill the output Tree; entries with alloc and free in the buffer are eliminated. TMemStatMng(). void SetUseGNUBuiltinBacktrace(Bool_t newVal); stack data members. » Author: Anar Manafov (A.Manafov@gsi.de) 2008-03-02 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/memstat:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/Memstat__TMemStatMng.html:9073,Performance,cache,cache,9073,"er,; flashes all the buffered data and closes the output tree. ~TMemStatMng(); if an instance is destructed - the hooks are reseted to old hooks. void SetBufferSize(Int_t buffersize); Set the maximum number of alloc/free calls to be buffered.; if the alloc and free are in the buffer, the corresponding entries; are not saved tio the Tree, reducing considerably the Tree output size. void SetMaxCalls(Int_t maxcalls); Set the maximum number of new/delete registered in the output Tree. void Enable(); Enable memory hooks. void Disable(); Disble memory hooks. void MacAllocHook(void* ptr, size_t size); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is allocated. void MacFreeHook(void* ptr); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is deallocated. void * AllocHook(size_t size, const void* ); AllocHook - a static function; A glibc memory allocation hook. void FreeHook(void* ptr, const void* ); FreeHook - a static function; A glibc memory deallocation hook. Int_t generateBTID(UChar_t* CRCdigest, Int_t stackEntries, void** stackPointers); An internal function, which returns a bitid for a corresponding CRC digest; cache variables. void AddPointer(void* ptr, Int_t size); Add pointer to table.; This method is called every time when any of the hooks are triggered.; The memory de-/allocation information will is recorded. void FillTree(); loop on all entries in the buffer and fill the output Tree; entries with alloc and free in the buffer are eliminated. TMemStatMng(). void SetUseGNUBuiltinBacktrace(Bool_t newVal); stack data members. » Author: Anar Manafov (A.Manafov@gsi.de) 2008-03-02 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/memstat:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Memstat__TMemStatMng.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Memstat__TMemStatMng.html
https://root.cern/root/html602/ParamHistFunc.html:10145,Availability,error,error,10145,,MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:10229,Availability,error,error,10229,,MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:35676,Deployability,integrat,integration,35676,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:36442,Deployability,integrat,integration,36442,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:37382,Deployability,integrat,integrator,37382,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:37393,Deployability,configurat,configuration,37393,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:40650,Deployability,integrat,integrations,40650,"(ie, we create one parameter; per observable in vars and per bin in each observable); Store them in a list using:; _paramSet.add( createParamSet() );; This list is stored in the ""TH1"" index order; Get the number of bins; in the nominal histogram; We also set the parameters to have nominal min and max values. RooArgList createParamSet(const string& , Int_t , Double_t , Double_t ); Create the list of RooRealVar; parameters which represent the; height of the histogram bins.; Store them in a list; _paramSet.add( createParamSet() );; Get the number of bins; in the nominal histogram. Int_t addVarSet(const RooArgList& vars). Int_t addParamSet(const RooArgList& params). Double_t evaluate() const. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. TObject* clone(const char* newname) const; { return new ParamHistFunc(*this, newname); }. const RooArgList& paramList() const; { return _paramSet ; }. Int_t numBins() const; { return _dataSet.numEntries(); }. const RooArgSet* get(Int_t masterIdx) const; { return _dataSet.get",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:40733,Deployability,integrat,integrators,40733,"(ie, we create one parameter; per observable in vars and per bin in each observable); Store them in a list using:; _paramSet.add( createParamSet() );; This list is stored in the ""TH1"" index order; Get the number of bins; in the nominal histogram; We also set the parameters to have nominal min and max values. RooArgList createParamSet(const string& , Int_t , Double_t , Double_t ); Create the list of RooRealVar; parameters which represent the; height of the histogram bins.; Store them in a list; _paramSet.add( createParamSet() );; Get the number of bins; in the nominal histogram. Int_t addVarSet(const RooArgList& vars). Int_t addParamSet(const RooArgList& params). Double_t evaluate() const. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. TObject* clone(const char* newname) const; { return new ParamHistFunc(*this, newname); }. const RooArgList& paramList() const; { return _paramSet ; }. Int_t numBins() const; { return _dataSet.numEntries(); }. const RooArgSet* get(Int_t masterIdx) const; { return _dataSet.get",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:40989,Energy Efficiency,efficient,efficiently,40989,"s to have nominal min and max values. RooArgList createParamSet(const string& , Int_t , Double_t , Double_t ); Create the list of RooRealVar; parameters which represent the; height of the histogram bins.; Store them in a list; _paramSet.add( createParamSet() );; Get the number of bins; in the nominal histogram. Int_t addVarSet(const RooArgList& vars). Int_t addParamSet(const RooArgList& params). Double_t evaluate() const. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. TObject* clone(const char* newname) const; { return new ParamHistFunc(*this, newname); }. const RooArgList& paramList() const; { return _paramSet ; }. Int_t numBins() const; { return _dataSet.numEntries(); }. const RooArgSet* get(Int_t masterIdx) const; { return _dataSet.get( masterIdx ) ; }. const RooArgSet* get(const RooArgSet& coord) const; { return _dataSet.get( coord ) ; }. double binVolume() const; { return _dataSet.binVolume(); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. Bool_t isBinnedDistribution(cons",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:41287,Energy Efficiency,efficient,efficiently,41287,"stogram. Int_t addVarSet(const RooArgList& vars). Int_t addParamSet(const RooArgList& params). Double_t evaluate() const. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. TObject* clone(const char* newname) const; { return new ParamHistFunc(*this, newname); }. const RooArgList& paramList() const; { return _paramSet ; }. Int_t numBins() const; { return _dataSet.numEntries(); }. const RooArgSet* get(Int_t masterIdx) const; { return _dataSet.get( masterIdx ) ; }. const RooArgSet* get(const RooArgSet& coord) const; { return _dataSet.get( coord ) ; }. double binVolume() const; { return _dataSet.binVolume(); }. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; { return kTRUE ; }. Bool_t isBinnedDistribution(const RooArgSet& ) const; {return kTRUE;}. » Author: George Lewis, Kyle Cranmer » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the ",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:7474,Integrability,depend,dependentVars,7474," arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); static RooArgListcreateParamSet(RooWorkspace& w, const string&, const RooArgList& Vars); static RooArgListcreateParamSet(const string&, Int_t, Double_t, Double_t); static RooArgListcreateParamSet(RooWorkspace& w, const string&, const RooArgList& Vars, Double_t, Double_t); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt)",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:8716,Integrability,depend,dependentOverlaps,8716,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:8808,Integrability,depend,dependentOverlaps,8808,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:8902,Integrability,depend,dependsOn,8902,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:9031,Integrability,depend,dependsOn,9031,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:9149,Integrability,depend,dependsOnValue,9149,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:9256,Integrability,depend,dependsOnValue,9256,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:17579,Integrability,message,message,17579,"TObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:17730,Integrability,message,message,17730,"ameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsAr",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:35676,Integrability,integrat,integration,35676,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:36442,Integrability,integrat,integration,36442,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:37382,Integrability,integrat,integrator,37382,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:40650,Integrability,integrat,integrations,40650,"(ie, we create one parameter; per observable in vars and per bin in each observable); Store them in a list using:; _paramSet.add( createParamSet() );; This list is stored in the ""TH1"" index order; Get the number of bins; in the nominal histogram; We also set the parameters to have nominal min and max values. RooArgList createParamSet(const string& , Int_t , Double_t , Double_t ); Create the list of RooRealVar; parameters which represent the; height of the histogram bins.; Store them in a list; _paramSet.add( createParamSet() );; Get the number of bins; in the nominal histogram. Int_t addVarSet(const RooArgList& vars). Int_t addParamSet(const RooArgList& params). Double_t evaluate() const. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. TObject* clone(const char* newname) const; { return new ParamHistFunc(*this, newname); }. const RooArgList& paramList() const; { return _paramSet ; }. Int_t numBins() const; { return _dataSet.numEntries(); }. const RooArgSet* get(Int_t masterIdx) const; { return _dataSet.get",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:40733,Integrability,integrat,integrators,40733,"(ie, we create one parameter; per observable in vars and per bin in each observable); Store them in a list using:; _paramSet.add( createParamSet() );; This list is stored in the ""TH1"" index order; Get the number of bins; in the nominal histogram; We also set the parameters to have nominal min and max values. RooArgList createParamSet(const string& , Int_t , Double_t , Double_t ); Create the list of RooRealVar; parameters which represent the; height of the histogram bins.; Store them in a list; _paramSet.add( createParamSet() );; Get the number of bins; in the nominal histogram. Int_t addVarSet(const RooArgList& vars). Int_t addParamSet(const RooArgList& params). Double_t evaluate() const. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. TObject* clone(const char* newname) const; { return new ParamHistFunc(*this, newname); }. const RooArgList& paramList() const; { return _paramSet ; }. Int_t numBins() const; { return _dataSet.numEntries(); }. const RooArgSet* get(Int_t masterIdx) const; { return _dataSet.get",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:24822,Modifiability,config,config,24822," = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetConstant(bool constant); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetParamConst(Int_t, Bool_t = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidsetShape(TH1* shape); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRoo",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:37393,Modifiability,config,configuration,37393,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:1847,Performance,cache,cacheUniqueSuffix,1847,"queSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; doublebinVolume() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(),",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:10963,Performance,cache,cacheList,10963,"rRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:11051,Performance,cache,cacheList,11051,"ggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:19559,Performance,optimiz,optimizeCacheMode,19559,"EvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ParamHistFunc&operator=(const ParamHistFunc&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ParamHistFunc(); ParamHistFunc(const ParamHistFunc& other, const char* name = 0); ParamHistFunc(const char* name, const char* title, const RooArgList& vars, const RooArgList& paramSet); ParamHistFunc(const char* name, const char* title, const RooArgList& vars, const RooArgList& paramSet, const TH1* hist); const RooArgList&paramList() const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 =",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:19631,Performance,optimiz,optimizeCacheMode,19631,"rg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ParamHistFunc&operator=(const ParamHistFunc&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ParamHistFunc(); ParamHistFunc(const ParamHistFunc& other, const char* name = 0); ParamHistFunc(const char* name, const char* title, const RooArgList& vars, const RooArgList& paramSet); ParamHistFunc(const char* name, const char* title, const RooArgList& vars, const RooArgList& paramSet, const TH1* hist); const RooArgList&paramList() const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:23448,Performance,cache,cache,23448,"rtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetConstant(bool constant); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* o",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:24665,Performance,cache,cache,24665,"; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); voidsetConstant(bool constant); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetParamConst(Int_t, Bool_t = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidsetShape(TH1* shape); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUnique",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:26828,Performance,cache,cache,26828,"voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:30044,Performance,optimiz,optimizeDirtyHook,30044,"ual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; voidRooAbsReal::plotOnCompSelect(RooArgSet* selNodes) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsReal::selectComp(Bool_t flag); virtual voidRooAbsReal::selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); virtual voidRooAbsReal::selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); voidRooAbsArg::setProxyNormSet(const Roo",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:34527,Performance,cache,cache,34527,,MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:34610,Performance,cache,cache,34610,,MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:34808,Performance,cache,caches,34808,,MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:35399,Performance,cache,cache,35399,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:35578,Performance,cache,cache,35578,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:35991,Performance,cache,cache,35991,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:36454,Performance,cache,cache,36454,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:37035,Performance,cache,cache,37035,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:37577,Performance,cache,cache,37577,"; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooObjCacheManager_normIntMgrThe integration cache manager; Int_t_numBins; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ParamHistFunc(). ParamHistFunc(const char* name, const char* title, const",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:11895,Security,hash,hash,11895,"bsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; const RooArgSet*get(Int_t masterIdx) const; const RooArgSet*get(const RooArgSet& coord) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tgetAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbs",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:12046,Security,hash,hash,12046,"t& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; const RooArgSet*get(Int_t masterIdx) const; const RooArgSet*get(const RooArgSet& coord) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tgetAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::getDependents(const RooAbsData* set) const; RooArgSet*RooAbsArg::getDependents(con",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:34704,Security,validat,validate,34704,,MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:35499,Security,access,access,35499,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:8775,Testability,test,testArg,8775,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:8869,Testability,test,testArg,8869,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:17554,Testability,log,logEvalError,17554,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsRe",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:17653,Testability,log,logEvalError,17653,"irtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverla",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:18704,Testability,test,testArg,18704,"origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ParamHistFunc&operator=(const ParamHistFunc&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinke",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:18799,Testability,test,testArg,18799,"n_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tnumBins() const; Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ParamHistFunc&operator=(const ParamHistFunc&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = ",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:19775,Testability,test,testArg,19775,"t, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ParamHistFunc&operator=(const ParamHistFunc&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ParamHistFunc(); ParamHistFunc(const ParamHistFunc& other, const char* name = 0); ParamHistFunc(const char* name, const char* title, const RooArgList& vars, const RooArgList& paramSet); ParamHistFunc(const char* name, const char* title, const RooArgList& vars, const RooArgList& paramSet, const TH1* hist); const RooArgList&paramList() const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virt",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:3302,Usability,clear,clearEvalErrorLog,3302,", const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg:",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:3338,Usability,clear,clearShapeDirty,3338,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:3378,Usability,clear,clearValueAndShapeDirty,3378,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/ParamHistFunc.html:3426,Usability,clear,clearValueDirty,3426,"mdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root/html602/ParamHistFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ParamHistFunc.html
https://root.cern/root/html602/PiecewiseInterpolation.html:9910,Availability,error,error,9910,,MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:9994,Availability,error,error,9994,,MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:35200,Deployability,integrat,integration,35200,"es; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:36109,Deployability,integrat,integration,36109,"or component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooRealProxy_nominalThe nominal value; RooObjCacheManager_normIntMgrThe integration cache manager; RooListProxy_normSetinterpolation parameters; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:37141,Deployability,integrat,integrator,37141,"perModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:37152,Deployability,configurat,configuration,37152,"perModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:38872,Deployability,integrat,integrations,38872," PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet(i). If takeOwnership is true the PiecewiseInterpolation object will take ownership of the arguments in sumSet. PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); Copy constructor. ~PiecewiseInterpolation(); Destructor. Double_t evaluate() const; Calculate and return current value of self. Bool_t setBinIntegrator(RooArgSet& allVars). Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. void setInterpCode(RooAbsReal& param, int code). void setAllInterpCodes(int code). void printAllInterpCodes(). std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. Bool_t isBinnedDistribution(const RooArgSet& obs) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const. void Streamer(TBuffer& ); Stream an object of class PiecewiseInterpolation. TObject* clone(const char* newname) const; { return new PiecewiseInterpolation(*this, newname); }. const RooArgList& lowList() const; virtual Double_t defaultErrorLevel() const ;; void printMetaArgs(std::ostream& os) const ;. { return _lowSet ; }. const RooArgList& highList(",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:38955,Deployability,integrat,integrators,38955," PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet(i). If takeOwnership is true the PiecewiseInterpolation object will take ownership of the arguments in sumSet. PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); Copy constructor. ~PiecewiseInterpolation(); Destructor. Double_t evaluate() const; Calculate and return current value of self. Bool_t setBinIntegrator(RooArgSet& allVars). Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. void setInterpCode(RooAbsReal& param, int code). void setAllInterpCodes(int code). void printAllInterpCodes(). std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. Bool_t isBinnedDistribution(const RooArgSet& obs) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const. void Streamer(TBuffer& ); Stream an object of class PiecewiseInterpolation. TObject* clone(const char* newname) const; { return new PiecewiseInterpolation(*this, newname); }. const RooArgList& lowList() const; virtual Double_t defaultErrorLevel() const ;; void printMetaArgs(std::ostream& os) const ;. { return _lowSet ; }. const RooArgList& highList(",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:7239,Integrability,depend,dependentVars,7239,"const char* rangeName = 0) const; virtual RooAbsReal*RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; RooAbsReal*RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt)",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8481,Integrability,depend,dependentOverlaps,8481,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8573,Integrability,depend,dependentOverlaps,8573,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8667,Integrability,depend,dependsOn,8667,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8796,Integrability,depend,dependsOn,8796,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8914,Integrability,depend,dependsOnValue,8914,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:9021,Integrability,depend,dependsOnValue,9021,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:17219,Integrability,message,message,17219,"TObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEva",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:17370,Integrability,message,message,17370,"ameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bo",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:35200,Integrability,integrat,integration,35200,"es; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:36109,Integrability,integrat,integration,36109,"or component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooRealProxy_nominalThe nominal value; RooObjCacheManager_normIntMgrThe integration cache manager; RooListProxy_normSetinterpolation parameters; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:37141,Integrability,integrat,integrator,37141,"perModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:38872,Integrability,integrat,integrations,38872," PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet(i). If takeOwnership is true the PiecewiseInterpolation object will take ownership of the arguments in sumSet. PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); Copy constructor. ~PiecewiseInterpolation(); Destructor. Double_t evaluate() const; Calculate and return current value of self. Bool_t setBinIntegrator(RooArgSet& allVars). Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. void setInterpCode(RooAbsReal& param, int code). void setAllInterpCodes(int code). void printAllInterpCodes(). std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. Bool_t isBinnedDistribution(const RooArgSet& obs) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const. void Streamer(TBuffer& ); Stream an object of class PiecewiseInterpolation. TObject* clone(const char* newname) const; { return new PiecewiseInterpolation(*this, newname); }. const RooArgList& lowList() const; virtual Double_t defaultErrorLevel() const ;; void printMetaArgs(std::ostream& os) const ;. { return _lowSet ; }. const RooArgList& highList(",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:38955,Integrability,integrat,integrators,38955," PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet(i). If takeOwnership is true the PiecewiseInterpolation object will take ownership of the arguments in sumSet. PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); Copy constructor. ~PiecewiseInterpolation(); Destructor. Double_t evaluate() const; Calculate and return current value of self. Bool_t setBinIntegrator(RooArgSet& allVars). Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implement analytical integrations by doing appropriate weighting from component integrals; functions to integrators of components. void setInterpCode(RooAbsReal& param, int code). void setAllInterpCodes(int code). void printAllInterpCodes(). std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. Bool_t isBinnedDistribution(const RooArgSet& obs) const; WVE note: assumes nominal and alternates have identical structure, must add explicit check. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const. void Streamer(TBuffer& ); Stream an object of class PiecewiseInterpolation. TObject* clone(const char* newname) const; { return new PiecewiseInterpolation(*this, newname); }. const RooArgList& lowList() const; virtual Double_t defaultErrorLevel() const ;; void printMetaArgs(std::ostream& os) const ;. { return _lowSet ; }. const RooArgList& highList(",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:24566,Modifiability,config,config,24566," const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidsetAllInterpCodes(int code); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); Bool_tsetBinIntegrator(RooArgSet& allVars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidsetInterpCode(RooAbsReal& param, int code); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidsetPositiveDefinite(bool flag = true); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterat",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:37152,Modifiability,config,configuration,37152,"perModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:1885,Performance,cache,cacheUniqueSuffix,1885,"AbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(),",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:10728,Performance,cache,cacheList,10728,"rRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:10816,Performance,cache,cacheList,10816,"ggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:19229,Performance,optimiz,optimizeCacheMode,19229,"static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PiecewiseInterpolation&operator=(const PiecewiseInterpolation&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; PiecewiseInterpolation(); PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:19301,Performance,optimiz,optimizeCacheMode,19301,"laps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PiecewiseInterpolation&operator=(const PiecewiseInterpolation&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; PiecewiseInterpolation(); PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& ar",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:23147,Performance,cache,cache,23147,"rtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidsetAllInterpCodes(int code); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); Bool_tsetBinIntegrator(RooArgSet& allVars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); v",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:24409,Performance,cache,cache,24409,"ename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidsetAllInterpCodes(int code); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); Bool_tsetBinIntegrator(RooArgSet& allVars); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidsetInterpCode(RooAbsReal& param, int code); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidsetPositiveDefinite(bool flag = true); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:26595,Performance,cache,cache,26595,"voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:29652,Performance,optimiz,optimizeDirtyHook,29652,"ual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; voidRooAbsReal::plotOnCompSelect(RooArgSet* selNodes) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsReal::selectComp(Bool_t flag); virtual voidRooAbsReal::selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); virtual voidRooAbsReal::selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); voidRooAbsArg::setProxyNormSet(const Roo",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:34110,Performance,cache,cache,34110,,MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:34193,Performance,cache,cache,34193,,MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:34391,Performance,cache,caches,34391,,MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:34923,Performance,cache,cache,34923,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLengt",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:35102,Performance,cache,cache,35102,"es; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:35556,Performance,cache,cache,35556,"es; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:36121,Performance,cache,cache,36121,"or component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooRealProxy_nominalThe nominal value; RooObjCacheManager_normIntMgrThe integration cache manager; RooListProxy_normSetinterpolation parameters; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:36794,Performance,cache,cache,36794,"perModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:37336,Performance,cache,cache,37336,"perModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooArgList_ownedListList of owned components; RooListProxy_paramSetinterpolation parameters; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_t_positiveDefiniteprotect against negative and 0 bins.; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PiecewiseInterpolation(). PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); Constructor with two set of RooAbsReals. The value of the function will be. A = sum_i lowSet(i)*highSet",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:11660,Security,hash,hash,11660,"bsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tgetAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::getDependents(",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:11811,Security,hash,hash,11811,"t& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tgetAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::getDependents(const RooAbsData* set) const; RooArgSet*RooAbsArg::getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption() const; stat",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:34287,Security,validat,validate,34287,,MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:35023,Security,access,access,35023,"es; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooListProxy_highSetHigh-side varaition; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; vector<int>_interpCode; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooListProxy_lowSetLow-side variation; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8540,Testability,test,testArg,8540,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:8634,Testability,test,testArg,8634,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:17194,Testability,log,logEvalError,17194,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static I",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:17293,Testability,log,logEvalError,17293,"irtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::obse",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:18356,Testability,test,testArg,18356,"nst char* message, const char* serverValueString = 0); const RooArgList&lowList() const; virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PiecewiseInterpolation&operator=(const PiecewiseInterpolation&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& ",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:18451,Testability,test,testArg,18451,"l voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PiecewiseInterpolation&operator=(const PiecewiseInterpolation&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, B",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:19445,Testability,test,testArg,19445,"& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PiecewiseInterpolation&operator=(const PiecewiseInterpolation&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); const RooArgList&paramList() const; PiecewiseInterpolation(); PiecewiseInterpolation(const PiecewiseInterpolation& other, const char* name = 0); PiecewiseInterpolation(const char* name, const char* title, const RooAbsReal& nominal, const RooArgList& lowSet, const RooArgList& highSet, const RooArgList& paramSet, Bool_t takeOwnerShip = kFALSE); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; vi",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:3340,Usability,clear,clearEvalErrorLog,3340,", const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg:",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:3376,Usability,clear,clearShapeDirty,3376,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:3416,Usability,clear,clearValueAndShapeDirty,3416,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/PiecewiseInterpolation.html:3464,Usability,clear,clearValueDirty,3464,"mdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root/html602/PiecewiseInterpolation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PiecewiseInterpolation.html
https://root.cern/root/html602/ProcInfo_t.html:323,Integrability,interface,interface,323,". ProcInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » ProcInfo_t. class ProcInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~ProcInfo_t(); static TClass*Class(); virtual TClass*IsA() const; ProcInfo_t&operator=(const ProcInfo_t&); ProcInfo_t(); ProcInfo_t(const ProcInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfCpuSyssystem time used by this process in seconds; Float_tfCpuUseruser time used by this process in seconds; Long_tfMemResidentresident memory used by this process in KB; Long_tfMemVirtualvirtual memory used by this process in KB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProcInfo_t(); { }. virtual ~ProcInfo_t(); { }. TSystem& operator=(const ProcInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ProcInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ProcInfo_t.html
https://root.cern/root/html602/ProcInfo_t.html:637,Usability,simpl,simple,637,". ProcInfo_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » ProcInfo_t. class ProcInfo_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. virtual~ProcInfo_t(); static TClass*Class(); virtual TClass*IsA() const; ProcInfo_t&operator=(const ProcInfo_t&); ProcInfo_t(); ProcInfo_t(const ProcInfo_t&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. Float_tfCpuSyssystem time used by this process in seconds; Float_tfCpuUseruser time used by this process in seconds; Long_tfMemResidentresident memory used by this process in KB; Long_tfMemVirtualvirtual memory used by this process in KB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProcInfo_t(); { }. virtual ~ProcInfo_t(); { }. TSystem& operator=(const ProcInfo_t& ). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/ProcInfo_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/ProcInfo_t.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:4635,Availability,error,error,4635,"Arr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*T",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:4719,Availability,error,error,4719,"(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virt",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:4863,Availability,error,error,4863,"m); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*TApplication::GetIdleCommand() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; v",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:8769,Availability,error,error,8769,"icsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PyROOT::TPyROOTApplication&operator=(const PyROOT::TPyROOTApplication&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const c",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:8890,Availability,error,error,8890,"virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); PyROOT::TPyROOTApplication&operator=(const PyROOT::TPyROOTApplication&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual vo",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:12216,Availability,error,error,12216,"l_t bLoadLibs = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); static voidTApplication::Close(TApplication* app); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnE",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:13836,Availability,avail,available,13836," static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); Create a TApplication derived for use with interactive ROOT from python. A; set of standard, often used libs is loaded if bLoadLibs is true (default). Bool_t CreatePyROOTApplication(Bool_t bLoadLibs = kTRUE); Create a TPyROOTApplication. Returns false if gApplication is not null. Bool_t InitROOTGlobals(); Setup the basic ROOT globals gBenchmark, gStyle, gProgname, if not already; set. Always returns true. Bool_t InitROOTMessageCallback(); Install ROOT message handler which will turn ROOT error message into; python exceptions. Always returns true. void dummy(); {}. TPyROOTApplication(const ch",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:14533,Availability,error,error,14533,"Referenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); Create a TApplication derived for use with interactive ROOT from python. A; set of standard, often used libs is loaded if bLoadLibs is true (default). Bool_t CreatePyROOTApplication(Bool_t bLoadLibs = kTRUE); Create a TPyROOTApplication. Returns false if gApplication is not null. Bool_t InitROOTGlobals(); Setup the basic ROOT globals gBenchmark, gStyle, gProgname, if not already; set. Always returns true. Bool_t InitROOTMessageCallback(); Install ROOT message handler which will turn ROOT error message into; python exceptions. Always returns true. void dummy(); {}. TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); { }. » Last changed: Tue Jun 30 14:21:27 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:14496,Integrability,message,message,14496,"Referenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); Create a TApplication derived for use with interactive ROOT from python. A; set of standard, often used libs is loaded if bLoadLibs is true (default). Bool_t CreatePyROOTApplication(Bool_t bLoadLibs = kTRUE); Create a TPyROOTApplication. Returns false if gApplication is not null. Bool_t InitROOTGlobals(); Setup the basic ROOT globals gBenchmark, gStyle, gProgname, if not already; set. Always returns true. Bool_t InitROOTMessageCallback(); Install ROOT message handler which will turn ROOT error message into; python exceptions. Always returns true. void dummy(); {}. TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); { }. » Last changed: Tue Jun 30 14:21:27 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:14539,Integrability,message,message,14539,"Referenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); Create a TApplication derived for use with interactive ROOT from python. A; set of standard, often used libs is loaded if bLoadLibs is true (default). Bool_t CreatePyROOTApplication(Bool_t bLoadLibs = kTRUE); Create a TPyROOTApplication. Returns false if gApplication is not null. Bool_t InitROOTGlobals(); Setup the basic ROOT globals gBenchmark, gStyle, gProgname, if not already; set. Always returns true. Bool_t InitROOTMessageCallback(); Install ROOT message handler which will turn ROOT error message into; python exceptions. Always returns true. void dummy(); {}. TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); { }. » Last changed: Tue Jun 30 14:21:27 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:862,Performance,load,load,862,". PyROOT::TPyROOTApplication. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » BINDINGS; » PYROOT; » PyROOT::TPyROOTApplication. class PyROOT::TPyROOTApplication: public TApplication. Setup interactive application for python. The TPyROOTApplication sets up the nuts and bolts for interactive ROOT use; from python, closely following TRint. Note that not everything is done here,; some bits (such as e.g. the use of exception hook for shell escapes) are more; easily done in python and you'll thus find them ROOT.py. The intended use of this class is from python only. It is used by default in; ROOT.py, so if you do not want to have a TApplication derived object created; for you, you'll need to load libPyROOT.so instead. The static InitXYZ functions are used in conjunction with TPyROOTApplication; in ROOT.py, but they can be used independently. NOTE: This class will receive the command line arguments from sys.argv. A; distinction between arguments for TApplication and user arguments can be; made by using ""-"" or ""--"" as a separator on the command line. Function Members (Methods); public:. virtual~TPyROOTApplication(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TApplication::ApplicationName() const; static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Int_tTApplication::Argc() const; char**TApplication::Argv() const; char*TApplication::Argv(Int_t index) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTApplication::ClearInputFiles",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/PyROOT__TPyROOTApplication.html:14152,Performance,load,loaded,14152,"Referenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TApplication::EStatusBitsTApplication::kProcessRemotely; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); Create a TApplication derived for use with interactive ROOT from python. A; set of standard, often used libs is loaded if bLoadLibs is true (default). Bool_t CreatePyROOTApplication(Bool_t bLoadLibs = kTRUE); Create a TPyROOTApplication. Returns false if gApplication is not null. Bool_t InitROOTGlobals(); Setup the basic ROOT globals gBenchmark, gStyle, gProgname, if not already; set. Always returns true. Bool_t InitROOTMessageCallback(); Install ROOT message handler which will turn ROOT error message into; python exceptions. Always returns true. void dummy(); {}. TPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); { }. » Last changed: Tue Jun 30 14:21:27 2015 » Last generated: 2015-06-30 14:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/PyROOT__TPyROOTApplication.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/PyROOT__TPyROOTApplication.html
https://root.cern/root/html602/RedirectHandle_t.html:341,Integrability,interface,interface,341,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~RedirectHandle_t(); RedirectHandle_t&operator=(RedirectHandle_t&&); RedirectHandle_t&operator=(const RedirectHandle_t&); RedirectHandle_t(const char* n = 0); RedirectHandle_t(RedirectHandle_t&&); RedirectHandle_t(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/RedirectHandle_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RedirectHandle_t.html
https://root.cern/root/html602/RedirectHandle_t.html:655,Usability,simpl,simple,655,". RedirectHandle_t. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » RedirectHandle_t. class RedirectHandle_t. TSystem. Abstract base class defining a generic interface to the underlying; Operating System.; This is not an ABC in the strict sense of the (C++) word. For; every member function there is an implementation (often not more; than a call to AbstractMethod() which prints a warning saying; that the method should be overridden in a derived class), which; allows a simple partial implementation for new OS'es. Function Members (Methods); public:. ~RedirectHandle_t(); RedirectHandle_t&operator=(RedirectHandle_t&&); RedirectHandle_t&operator=(const RedirectHandle_t&); RedirectHandle_t(const char* n = 0); RedirectHandle_t(RedirectHandle_t&&); RedirectHandle_t(const RedirectHandle_t&); voidReset(). Data Members; public:. TStringfFileFile where the output was redirected; Int_tfReadOffSetOffset where to start reading the file (used by ShowOutput(...)); Int_tfStdErrDupDuplicated descriptor for stderr; TStringfStdErrTtytty associated with stderr, if any (e.g. from ttyname(...)); Int_tfStdOutDupDuplicated descriptor for stdout; TStringfStdOutTtytty associated with stdout, if any (e.g. from ttyname(...)). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RedirectHandle_t(const char* n = 0); { }. void Reset(). TSystem& operator=(const TSystem&). » Author: Fons Rademakers 15/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/RedirectHandle_t.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RedirectHandle_t.html
https://root.cern/root/html602/Rgl.html:426,Security,access,accessors,426,". Rgl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » Rgl. namespace Rgl. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. Int_tColorToObjectID(const UChar_t* color, Bool_t highColor); voidDrawAxes(Int_t frontPoint, const Int_t* viewport, const TGLVertex3* box2D, const TGLPlotCoordinates* plotCoord, TAxis* xAxis, TAxis* yAxis, TAxis* zAxis); voidDrawBoxFront(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Int_t fp); voidDrawBoxFrontTextured(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Double_t tMin, Double_t tMax, Int_t front); voidDrawBoxWithGradientFill(Double_t y1, Double_t y2, Double_t x1, Double_t x2, const Double_t* rgba1, const Double_t* rgba2); voidDrawCylinder(TGLQuadric* quadric, Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawError(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawFaceTextured(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, Double_t t1, Double_t t2, Double_t t3, Double_t z, const TGLVector3& planeNormal); voidDrawFaceTextured(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, Double_t t1, Double_t t2, Double_t t3, const TGLVector3& norm1, const TGLVector3& norm2, const TGLVector3& norm3); voidDrawMapleMesh(const vector<Double_t>& vs, const vector<Double_t>& ns, const ve",MatchSource.WIKI,root/html602/Rgl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Rgl.html
https://root.cern/root/html602/Rgl.html:3155,Testability,log,logZ,3155,"onst vector<Float_t>& vs, const vector<UInt_t>& fTS); voidDrawMesh(const vector<Double_t>& vs, const vector<UInt_t>& fTS); voidDrawMesh(const vector<Float_t>& vs, const vector<Float_t>& ns, const vector<UInt_t>& ts); voidDrawMesh(const vector<Double_t>& vs, const vector<Double_t>& ns, const vector<UInt_t>& ts); voidDrawMesh(const vector<Float_t>& vs, const vector<UInt_t>& ts, const TGLBoxCut& box); voidDrawMesh(const vector<Double_t>& vs, const vector<UInt_t>& ts, const TGLBoxCut& box); voidDrawMesh(const vector<Float_t>& vs, const vector<Float_t>& ns, const vector<UInt_t>& ts, const TGLBoxCut& box); voidDrawMesh(const vector<Double_t>& vs, const vector<Double_t>& ns, const vector<UInt_t>& ts, const TGLBoxCut& box); voidDrawPalette(const TGLPlotCamera* camera, const TGLLevelPalette& palette); voidDrawPalette(const TGLPlotCamera* camera, const TGLLevelPalette& palette, const vector<Double_t>& levels); voidDrawPaletteAxis(const TGLPlotCamera* camera, const Rgl::Range_t& minMax, Bool_t logZ); voidDrawQuadFilled(const TGLVertex3& v0, const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, const TGLVector3& normal); voidDrawQuadFilled(const Double_t* v0, const Double_t* v1, const Double_t* v2, const Double_t* v3, const Double_t* normal); voidDrawQuadOutline(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, const TGLVertex3& v4); voidDrawQuadStripWithRadialGradientFill(unsigned int nPoints, const Double_t* inner, const Double_t* innerRGBA, const Double_t* outer, const Double_t* outerRGBA); voidDrawSmoothFace(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, const TGLVector3& norm1, const TGLVector3& norm2, const TGLVector3& norm3); voidDrawSphere(TGLQuadric* quadric, Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawTransparentBox(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Int_t fp); voidDrawTrapezoid(const Double_t[][3] ver); voidDrawTr",MatchSource.WIKI,root/html602/Rgl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Rgl.html
https://root.cern/root/html602/Rgl.html:338,Usability,simpl,simple,338,". Rgl. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; namespace description; function members; data members; class charts. ROOT; » GRAF3D; » GL; » Rgl. namespace Rgl. TGLVertex3. 3 component (x/y/z) vertex class. This is part of collection of simple utility classes for GL only in; TGLUtil.h/cxx. These provide const and non-const accessors Arr() &; CArr() to a GL compatible internal field - so can be used directly; with OpenGL C API calls - which TVector3 etc cannot (easily).; They are not intended to be fully featured just provide minimum; required. Function Members (Methods); public:. Int_tColorToObjectID(const UChar_t* color, Bool_t highColor); voidDrawAxes(Int_t frontPoint, const Int_t* viewport, const TGLVertex3* box2D, const TGLPlotCoordinates* plotCoord, TAxis* xAxis, TAxis* yAxis, TAxis* zAxis); voidDrawBoxFront(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Int_t fp); voidDrawBoxFrontTextured(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Double_t tMin, Double_t tMax, Int_t front); voidDrawBoxWithGradientFill(Double_t y1, Double_t y2, Double_t x1, Double_t x2, const Double_t* rgba1, const Double_t* rgba2); voidDrawCylinder(TGLQuadric* quadric, Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawError(Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax); voidDrawFaceTextured(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, Double_t t1, Double_t t2, Double_t t3, Double_t z, const TGLVector3& planeNormal); voidDrawFaceTextured(const TGLVertex3& v1, const TGLVertex3& v2, const TGLVertex3& v3, Double_t t1, Double_t t2, Double_t t3, const TGLVector3& norm1, const TGLVector3& norm2, const TGLVector3& norm3); voidDrawMapleMesh(const vector<Double_t>& vs, const vector<Double_t>& ns, const ve",MatchSource.WIKI,root/html602/Rgl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Rgl.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:9910,Availability,error,error,9910,,MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:9994,Availability,error,error,9994,,MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35389,Deployability,integrat,integration,35389,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:37002,Deployability,integrat,integrator,37002,":_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo1DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo1DMomentMorphFunction(). Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:37013,Deployability,configurat,configuration,37013,":_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo1DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo1DMomentMorphFunction(). Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:7239,Integrability,depend,dependentVars,7239,"const char* rangeName = 0) const; virtual RooAbsReal*RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; RooAbsReal*RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt)",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8481,Integrability,depend,dependentOverlaps,8481,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8573,Integrability,depend,dependentOverlaps,8573,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8667,Integrability,depend,dependsOn,8667,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8796,Integrability,depend,dependsOn,8796,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8914,Integrability,depend,dependsOnValue,8914,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:9021,Integrability,depend,dependsOnValue,9021,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:17204,Integrability,message,message,17204,"TObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsR",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:17355,Integrability,message,message,17355,"ameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35389,Integrability,integrat,integration,35389,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:37002,Integrability,integrat,integrator,37002,":_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo1DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo1DMomentMorphFunction(). Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:24380,Modifiability,config,config,24380,"e(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidsetMode(const Roo1DMomentMorphFunction::Setting& setting); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsAr",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:37013,Modifiability,config,configuration,37013,":_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo1DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo1DMomentMorphFunction(). Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:1885,Performance,cache,cacheUniqueSuffix,1885,"iqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(),",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:10728,Performance,cache,cacheList,10728,"rRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:10816,Performance,cache,cacheList,10816,"ggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:19184,Performance,optimiz,optimizeCacheMode,19184,"ic Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo1DMomentMorphFunction&operator=(const Roo1DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceO",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:19256,Performance,optimiz,optimizeCacheMode,19256,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo1DMomentMorphFunction&operator=(const Roo1DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:22730,Performance,cache,cache,22730,"rtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); Roo1DMomentMorphFunction(); Roo1DMomentMorphFunction(const Roo1DMomentMorphFunction& other, const char* name = 0); Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m, const RooArgList& varList, const TVectorD& mrefpoints, const Roo1DMomentMorphFunction::Setting& setting = Linear); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t s",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:24223,Performance,cache,cache,24223,"tion::Setting& setting = Linear); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidsetMode(const Roo1DMomentMorphFunction::Setting& setting); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UI",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:26381,Performance,cache,cache,26381,"voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:29603,Performance,optimiz,optimizeDirtyHook,29603,"ual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; voidRooAbsReal::plotOnCompSelect(RooArgSet* selNodes) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsReal::selectComp(Bool_t flag); virtual voidRooAbsReal::selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); virtual voidRooAbsReal::selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); voidRooAbsArg::setProxyNormSet(const Roo",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:34299,Performance,cache,cache,34299,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:34382,Performance,cache,cache,34382,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:34580,Performance,cache,caches,34580,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35112,Performance,cache,cache,35112,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35291,Performance,cache,cache,35291,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35720,Performance,cache,cache,35720,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:36612,Performance,cache,cache,36612,":_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo1DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo1DMomentMorphFunction(). Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:37197,Performance,cache,cache,37197,":_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo1DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; TIterator*_varItr! do not persist; RooSetProxy_varList; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo1DMomentMorphFunction(). Roo1DMomentMorphFunction(const char* name, const char* title, RooAbsReal",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:11660,Security,hash,hash,11660,"bsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tRooAbsReal::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::ge",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:11811,Security,hash,hash,11811,"t& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tRooAbsReal::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::getDependents(const RooAbsData* set) const; RooArgSet*RooAbsArg::getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption()",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:34476,Security,validat,validate,34476,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:35212,Security,access,access,35212,"ed:. TMatrixD*_M; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD*_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TVectorD*_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Poi",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8540,Testability,test,testArg,8540,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:8634,Testability,test,testArg,8634,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:17179,Testability,log,logEvalError,17179,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:17278,Testability,log,logEvalError,17278,"irtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* d",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:18307,Testability,test,testArg,18307,"iginator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo1DMomentMorphFunction&operator=(const Roo1DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgS",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:18402,Testability,test,testArg,18402,"l voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo1DMomentMorphFunction&operator=(const Roo1DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testAr",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:19400,Testability,test,testArg,19400,"onst RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo1DMomentMorphFunction&operator=(const Roo1DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:3340,Usability,clear,clearEvalErrorLog,3340,", const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg:",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:3376,Usability,clear,clearShapeDirty,3376,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:3416,Usability,clear,clearValueAndShapeDirty,3416,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DMomentMorphFunction.html:3464,Usability,clear,clearValueDirty,3464,"mdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root/html602/Roo1DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DMomentMorphFunction.html
https://root.cern/root/html602/Roo1DTable.html:1631,Availability,error,error,1631," class charts. ROOT; » ROOFIT; » ROOFITCORE; » Roo1DTable. class Roo1DTable: public RooTable. Roo1DTable implements a one-dimensional table. A table is the category; equivalent of a plot. To create a table use the RooDataSet::table method.; . Function Members (Methods); public:. virtual~Roo1DTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tget(const char* label, Bool_t silent = kFALSE) const; Double_tget(const int index, Bool_t silent ",MatchSource.WIKI,root/html602/Roo1DTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DTable.html
https://root.cern/root/html602/Roo1DTable.html:1715,Availability,error,error,1715," class charts. ROOT; » ROOFIT; » ROOFITCORE; » Roo1DTable. class Roo1DTable: public RooTable. Roo1DTable implements a one-dimensional table. A table is the category; equivalent of a plot. To create a table use the RooDataSet::table method.; . Function Members (Methods); public:. virtual~Roo1DTable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidfill(RooAbsCategory& cat, Double_t weight = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tget(const char* label, Bool_t silent = kFALSE) const; Double_tget(const int index, Bool_t silent ",MatchSource.WIKI,root/html602/Roo1DTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DTable.html
https://root.cern/root/html602/Roo1DTable.html:10876,Integrability,interface,interface,10876,"ches no table slot name, the table; overflow counter is incremented. void printName(ostream& os) const; Print the name of the table. void printTitle(ostream& os) const; Print the title of the table. void printClassName(ostream& os) const; Print the class name of the table. void printValue(ostream& os) const; Print the table value, i.e. the contents, in 'inline' format. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print the formatted table contents on the given stream. Double_t get(const char* label, Bool_t silent = kFALSE) const; Return the table entry named 'label'. Zero is returned if given; label doesn't occur in table. Double_t get(const int index, Bool_t silent = kFALSE) const; Return the table entry named 'label'. Zero is returned if given; label doesn't occur in table. Double_t getOverflow() const; Return the number of overflow entries in the table. Double_t getFrac(const char* label, Bool_t silent = kFALSE) const; Return the fraction of entries in the table contained in the slot named 'label'.; The normalization includes the number of overflows.; Zero is returned if given label doesn't occur in table. Double_t getFrac(const int index, Bool_t silent = kFALSE) const; Return the fraction of entries in the table contained in the slot named 'label'.; The normalization includes the number of overflows.; Zero is returned if given label doesn't occur in table. Bool_t isIdentical(const RooTable& other); Return true if table is identical in contents to given reference table. Roo1DTable(); Constructors, cloning and assignment. void Print(Option_t* options = 0) const; Printing interface (human readable). » Last changed: Tue Jun 30 14:29:42 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/Roo1DTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo1DTable.html
https://root.cern/root/html602/Roo2DKeysPdf.html:9974,Availability,error,error,9974,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:10058,Availability,error,error,10058,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:42561,Availability,error,errors,42561,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:42834,Deployability,integrat,integration,42834,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44861,Deployability,configurat,configuration,44861,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44958,Deployability,integrat,integrator,44958,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44969,Deployability,configurat,configuration,44969,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:6984,Integrability,depend,dependentVars,6984,"), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); virtual RooAbsReal*RooAbsPdf::createNLL(RooAbsData& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsPdf::createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8474,Integrability,depend,dependentOverlaps,8474,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8566,Integrability,depend,dependentOverlaps,8566,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8660,Integrability,depend,dependsOn,8660,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8789,Integrability,depend,dependsOn,8789,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8907,Integrability,depend,dependsOnValue,8907,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:9014,Integrability,depend,dependsOnValue,9014,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:21174,Integrability,message,message,21174,"sFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::n",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:21325,Integrability,message,message,21325,") const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAb",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:42834,Integrability,integrat,integration,42834,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44958,Integrability,integrat,integrator,44958,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:10374,Modifiability,extend,extendedTerm,10374,"bject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidRooAbsReal::enableOffsetting(Bool_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static Bool_tRooAbsPdf::evalError(); static RooAbsReal::EvalErrorIterRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual Double_tevaluate() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; v",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:10486,Modifiability,extend,extendMode,10486,"lone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidRooAbsReal::enableOffsetting(Bool_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static Bool_tRooAbsPdf::evalError(); static RooAbsReal::EvalErrorIterRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual Double_tevaluate() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Doubl",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:13996,Modifiability,extend,extended,13996,"ec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Double_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """", Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); virtual voidRooAbsPdf::generateEvent(Int_t code); virtual RooDataSet*RooAbsPdf::generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); virtual RooArgSet*RooAbsPdf::getAllConstraints(const RooArgSet& o",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:14150,Modifiability,extend,extended,14150,"ProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Double_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """", Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); virtual voidRooAbsPdf::generateEvent(Int_t code); virtual RooDataSet*RooAbsPdf::generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); virtual RooArgSet*RooAbsPdf::getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooA",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:29343,Modifiability,config,config,29343,"imitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetOptions(TString options); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(In",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:29501,Modifiability,config,config,29501,":serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetOptions(TString options); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t ",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:34363,Modifiability,extend,extended,34363,"ooAbsReal& fcn, RooLinkedList& cmdList); TStringRooAbsArg::cleanBranchName() const; virtual voidRooAbsReal::copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); RooAbsReal*RooAbsReal::createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidRooAbsReal::fillTreeBranch(TTree& t); voidRooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; virtual RooAbsGenContext*RooAbsPdf::genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tR",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44861,Modifiability,config,configuration,44861,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44969,Modifiability,config,configuration,44969,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:1948,Performance,cache,cacheUniqueSuffix,1948,"niqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:11095,Performance,cache,cacheList,11095,"ent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:11183,Performance,cache,cacheList,11183,"oArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:23212,Performance,optimiz,optimizeCacheMode,23212,"ment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DKeysPdf&operator=(const Roo2DKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:23284,Performance,optimiz,optimizeCacheMode,23284,"ment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DKeysPdf&operator=(const Roo2DKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:27722,Performance,cache,cache,27722," voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; static voidRooAbsReal::printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); virtual voidRooPrintable::printExtras(ostream& os) const; voidPrintInfo(ostream&) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; virtual voidRooAbsPdf::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsArg::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsPdf::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidRooAbsPdf::resetErrorCounters(Int_t resetValue = 10); Roo2DKeysPdf(const Roo2DKeysPdf& other, const char* name = 0); Roo2DKeysPdf(const char* name, const char* title, RooAbsReal& xx, RooAbsReal& yy, RooDataSet& data, TString options = ""a"", Double_t widthScaleFactor = 1.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:29241,Performance,cache,cache,29241,"ject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetOptions(TString options); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:31955,Performance,cache,cache,31955,"sp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidwriteHistToFile(char* outputFile, const char* histName) const; voidwriteNTupleToFile(char* outputFile, const char* name) const; voidwriteToFile(char* outputFile, const char* name) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:36003,Performance,optimiz,optimizeDirtyHook,36003,"t* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:41644,Performance,cache,cache,41644,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:41727,Performance,cache,cache,41727,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:41925,Performance,cache,caches,41925,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:42457,Performance,cache,cache,42457,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; T",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:42736,Performance,cache,cache,42736,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:43149,Performance,cache,cache,43149,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:43758,Performance,cache,cache,43758,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:44429,Performance,cache,cache,44429,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:45217,Performance,cache,cache,45217,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:46648,Performance,load,loadDataSet,46648,"ed::fTitleobject title. private:. Double_t_2pi= M_PI*2; Int_t_BandWidthType; Int_t_MirrorAtBoundary; Int_t_debug; Double_t_hix; Double_t_hiy; Double_t*_hx; Double_t*_hy; Double_t_lox; Double_t_loy; Double_t_ncoefficient of the kernel estimation sum; Double_t_n16pow(_nEvents, -1/6); Int_t_nEvents; Double_t_norm; Double_t_sqrt2pi; Int_t_verbosedebug; Int_t_vverbosedebug; Double_t_widthScaleFactorallow manipulation of the bandwidth by a scale factor; Double_t*_x; Double_t_xMeanthe (x,y) mean and sigma are properties of the data, not of the PDF; Double_t_xSigma; Double_t_xoffset; Double_t*_y; Double_t_yMean; Double_t_ySigma; Double_t_yoffset. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DKeysPdf(const char* name, const char* title, RooAbsReal& xx, RooAbsReal& yy, RooDataSet& data, TString options = ""a"", Double_t widthScaleFactor = 1.). Roo2DKeysPdf(const Roo2DKeysPdf& other, const char* name = 0). ~Roo2DKeysPdf(). Int_t loadDataSet(RooDataSet& data, TString options). void setOptions(TString options). void getOptions(void). Int_t calculateBandWidth(Int_t kernel = -999). Double_t evaluate() const; use the cacheing intrinsic in RFC to bypass the grid and remove; the grid and extrapolation approximation in the kernel estimation method; implementation - cheers Wouter :). Double_t evaluateFull(Double_t thisX, Double_t thisY) const. Double_t highBoundaryCorrection(Double_t thisVar, Double_t thisH, Double_t high, Double_t tVar) const. Double_t lowBoundaryCorrection(Double_t thisVar, Double_t thisH, Double_t low, Double_t tVar) const. Double_t g(Double_t var1, Double_t* _var1, Double_t sigma1, Double_t var2, Double_t* _var2, Double_t sigma2) const. Int_t getBandWidthType() const. Double_t getMean(const char* axis) const. Double_t getSigma(const char* axis) const. void writeToFile(char* outputFile, const char* name) const. void writeHistToFile(char* outputFile, const char* histName) const. void writeNTupleToFile(char* outputFile, ",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:46835,Performance,cache,cacheing,46835,"el estimation sum; Double_t_n16pow(_nEvents, -1/6); Int_t_nEvents; Double_t_norm; Double_t_sqrt2pi; Int_t_verbosedebug; Int_t_vverbosedebug; Double_t_widthScaleFactorallow manipulation of the bandwidth by a scale factor; Double_t*_x; Double_t_xMeanthe (x,y) mean and sigma are properties of the data, not of the PDF; Double_t_xSigma; Double_t_xoffset; Double_t*_y; Double_t_yMean; Double_t_ySigma; Double_t_yoffset. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DKeysPdf(const char* name, const char* title, RooAbsReal& xx, RooAbsReal& yy, RooDataSet& data, TString options = ""a"", Double_t widthScaleFactor = 1.). Roo2DKeysPdf(const Roo2DKeysPdf& other, const char* name = 0). ~Roo2DKeysPdf(). Int_t loadDataSet(RooDataSet& data, TString options). void setOptions(TString options). void getOptions(void). Int_t calculateBandWidth(Int_t kernel = -999). Double_t evaluate() const; use the cacheing intrinsic in RFC to bypass the grid and remove; the grid and extrapolation approximation in the kernel estimation method; implementation - cheers Wouter :). Double_t evaluateFull(Double_t thisX, Double_t thisY) const. Double_t highBoundaryCorrection(Double_t thisVar, Double_t thisH, Double_t high, Double_t tVar) const. Double_t lowBoundaryCorrection(Double_t thisVar, Double_t thisH, Double_t low, Double_t tVar) const. Double_t g(Double_t var1, Double_t* _var1, Double_t sigma1, Double_t var2, Double_t* _var2, Double_t sigma2) const. Int_t getBandWidthType() const. Double_t getMean(const char* axis) const. Double_t getSigma(const char* axis) const. void writeToFile(char* outputFile, const char* name) const. void writeHistToFile(char* outputFile, const char* histName) const. void writeNTupleToFile(char* outputFile, const char* name) const. void PrintInfo(ostream& ) const. void setWidthScaleFactor(Double_t widthScaleFactor); { _widthScaleFactor = widthScaleFactor; }. TObject* clone(const char* newname) const; { return new Roo2DKeysPdf(*this,new",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:12515,Security,hash,hash,12515,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:12666,Security,hash,hash,12666,"rg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), ",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:41821,Security,validat,validate,41821,,MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:42657,Security,access,access,42657,"ibutes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8533,Testability,test,testArg,8533,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:8627,Testability,test,testArg,8627,"aramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:21149,Testability,log,logEvalError,21149,"tual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notif",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:21248,Testability,log,logEvalError,21248," other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRo",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:22359,Testability,test,testArg,22359," = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DKeysPdf&operator=(const Roo2DKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedL",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:22454,Testability,test,testArg,22454,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DKeysPdf&operator=(const Roo2DKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kF",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:23428,Testability,test,testArg,23428,"ment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DKeysPdf&operator=(const Roo2DKeysPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:2578,Usability,clear,clearEvalError,2578,"ooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 ",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:2619,Usability,clear,clearEvalErrorLog,2619,"; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:2655,Usability,clear,clearShapeDirty,2655,"onst RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdA",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:2695,Usability,clear,clearValueAndShapeDirty,2695,"= 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DKeysPdf.html:2743,Usability,clear,clearValueDirty,2743,"dRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root/html602/Roo2DKeysPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DKeysPdf.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:9910,Availability,error,error,9910,,MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:9994,Availability,error,error,9994,,MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36402,Deployability,integrat,integration,36402,"AttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:38080,Deployability,integrat,integrator,38080,"ool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbs",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:38091,Deployability,configurat,configuration,38091,"ool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbs",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:7239,Integrability,depend,dependentVars,7239,"const char* rangeName = 0) const; virtual RooAbsReal*RooAbsReal::createIntegral(const RooArgSet& iset, const RooArgSet* nset = 0, const RooNumIntConfig* cfg = 0, const char* rangeName = 0) const; RooAbsReal*RooAbsReal::createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt)",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8481,Integrability,depend,dependentOverlaps,8481,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8573,Integrability,depend,dependentOverlaps,8573,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8667,Integrability,depend,dependsOn,8667,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8796,Integrability,depend,dependsOn,8796,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8914,Integrability,depend,dependsOnValue,8914,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:9021,Integrability,depend,dependsOnValue,9021,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:17204,Integrability,message,message,17204,"TObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsR",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:17355,Integrability,message,message,17355,"ameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36402,Integrability,integrat,integration,36402,"AttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:38080,Integrability,integrat,integrator,38080,"ool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbs",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:24682,Modifiability,config,config,24682,"e(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidsetMode(const Roo2DMomentMorphFunction::Setting& setting); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsAr",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:38091,Modifiability,config,configuration,38091,"ool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbs",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:1885,Performance,cache,cacheUniqueSuffix,1885,"iqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(),",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:10728,Performance,cache,cacheList,10728,"rRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:10816,Performance,cache,cacheList,10816,"ggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:19184,Performance,optimiz,optimizeCacheMode,19184,"ic Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DMomentMorphFunction&operator=(const Roo2DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceO",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:19256,Performance,optimiz,optimizeCacheMode,19256,"(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DMomentMorphFunction&operator=(const Roo2DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L""",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:22730,Performance,cache,cache,22730,"rtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsReal::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tRooAbsArg::redirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); Roo2DMomentMorphFunction(); Roo2DMomentMorphFunction(const Roo2DMomentMorphFunction& other, const char* name = 0); Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbsReal& _m2, const TMatrixD& mrefpoints, const Roo2DMomentMorphFunction::Setting& setting = Linear, const Bool_t& verbose = false); Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbsReal& _m2, const Int_t& nrows, const Double_t* dm1arr, const Double_t* dm2arr, const Double_t* dvalarr, const Roo2DMomentMorphFunction::Setting& setting = Linear, const Bool_t& verbose = false); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterato",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:24525,Performance,cache,cache,24525,", const Bool_t& verbose = false); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; voidsetMode(const Roo2DMomentMorphFunction::Setting& setting); virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UI",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:26704,Performance,cache,cache,26704,"peDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; voidSummary() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:29833,Performance,optimiz,optimizeDirtyHook,29833,"ual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsReal::plotAsymOn(RooPlot* frame, const RooAbsCategoryLValue& asymCat, RooAbsReal::PlotOpt o) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; voidRooAbsReal::plotOnCompSelect(RooArgSet* selNodes) const; RooPlot*RooAbsReal::plotOnWithErrorBand(RooPlot* frame, const RooFitResult& fr, Double_t Z, const RooArgSet* params, const RooLinkedList& argList, Bool_t method1) const; Bool_tRooAbsReal::plotSanityChecks(RooPlot* frame) const; voidRooAbsArg::printAttribList(ostream& os) const; voidRooAbsArg::registerProxy(RooArgProxy& proxy); voidRooAbsArg::registerProxy(RooSetProxy& proxy); voidRooAbsArg::registerProxy(RooListProxy& proxy); voidRooAbsReal::selectComp(Bool_t flag); virtual voidRooAbsReal::selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); virtual voidRooAbsReal::selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); voidRooAbsArg::setProxyNormSet(const Roo",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:35312,Performance,cache,cache,35312,,MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:35395,Performance,cache,cache,35395,,MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:35593,Performance,cache,caches,35593,,MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36125,Performance,cache,cache,36125,"string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36304,Performance,cache,cache,36304,"AttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36732,Performance,cache,cache,36732,"AttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:37690,Performance,cache,cache,37690,"ool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbs",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:38313,Performance,cache,cache,38313,"ool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_t_npoints; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Roo2DMomentMorphFunction::Setting_setting; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; int_squareIdx[4]; TMatrixD_squareVec; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verbose; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxym1; RooRealProxym2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Roo2DMomentMorphFunction(const char* name, const char* title, RooAbsReal& _m1, RooAbs",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:11660,Security,hash,hash,11660,"bsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tRooAbsReal::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::ge",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:11811,Security,hash,hash,11811,"t& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tRooAbsReal::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::getDependents(const RooAbsData* set) const; RooArgSet*RooAbsArg::getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption()",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:35489,Security,validat,validate,35489,,MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36225,Security,access,access,36225,"AttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8540,Testability,test,testArg,8540,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:8634,Testability,test,testArg,8634,"l*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:17179,Testability,log,logEvalError,17179,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:17278,Testability,log,logEvalError,17278,"irtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* d",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:18307,Testability,test,testArg,18307,"iginator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DMomentMorphFunction&operator=(const Roo2DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgS",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:18402,Testability,test,testArg,18402,"l voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DMomentMorphFunction&operator=(const Roo2DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testAr",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:19400,Testability,test,testArg,19400,"onst RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Roo2DMomentMorphFunction&operator=(const Roo2DMomentMorphFunction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:3340,Usability,clear,clearEvalErrorLog,3340,", const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg:",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:3376,Usability,clear,clearShapeDirty,3376,"rtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = Ro",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:3416,Usability,clear,clearValueAndShapeDirty,3416,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/Roo2DMomentMorphFunction.html:3464,Usability,clear,clearValueDirty,3464,"mdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooC",MatchSource.WIKI,root/html602/Roo2DMomentMorphFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:2132,Availability,avail,available,2132,"ts of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsAnaConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData&",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:11883,Availability,error,error,11883,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:11967,Availability,error,error,11967,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44602,Availability,error,errors,44602,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:1825,Deployability,integrat,integration,1825,"lutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooAbsAnaConvPdf physics model consists of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsAnaConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, con",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44053,Deployability,integrat,integration,44053,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44875,Deployability,integrat,integration,44875,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:46951,Deployability,configurat,configuration,46951,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:47048,Deployability,integrat,integrator,47048,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:47059,Deployability,configurat,configuration,47059,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:49351,Deployability,deploy,deploy,49351,"ession, const RooArgList& params); Declare a basis function for use in this physics model. The string expression; must be a valid RooFormulVar expression representing the basis function, referring; to the convolution variable as '@0', and any additional parameters (supplied in; 'params' as '@1','@2' etc. The return value is a unique identifier code, that will be passed to coefficient(); to identify the basis function for which the coefficient is requested. If the; resolution model used does not support the declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', r",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50278,Deployability,integrat,integration,50278,"e physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50486,Deployability,integrat,integration,50486,"e physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50617,Deployability,integrat,integration,50617,"generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function depen",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50732,Deployability,configurat,configuration,50732,"generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function depen",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51168,Deployability,integrat,integrated,51168,"rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51229,Deployability,integrat,integrated,51229,"rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51510,Deployability,integrat,integrated,51510,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51568,Deployability,integrat,integrated,51568,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51947,Deployability,integrat,integration,51947,"ngeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the re",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52123,Deployability,integrat,integration,52123,"x) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52440,Deployability,integrat,integration,52440,"basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printM",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52574,Deployability,integrat,integration,52574,"ient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52677,Deployability,integrat,integration,52677,"ient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52821,Deployability,integrat,integrate,52821,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52892,Deployability,integrat,integration,52892,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52966,Deployability,integrat,integrate,52966,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:1507,Integrability,interface,interface,1507," physics model must be able to be written in the form; _ _ _ _; Phys(x,a,b) = Sum_k coef_k(a) * basis_k(x,b). where basis_k are a limited number of functions in terms of the variable; to be convoluted and coef_k are coefficients independent of the convolution; variable. Classes derived from RooResolutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooAbsAnaConvPdf physics model consists of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsAnaConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::ad",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:1825,Integrability,integrat,integration,1825,"lutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooAbsAnaConvPdf physics model consists of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsAnaConvPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, con",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:8858,Integrability,depend,dependentVars,8858,"), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; RooAbsReal*RooAbsReal::createIntRI(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); virtual RooAbsReal*RooAbsPdf::createNLL(RooAbsData& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsPdf::createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& depVars, const RooArgSet& projVars, RooArgSet*& cloneSet) const; const RooAbsReal*RooAbsReal::createPlotProjection(const RooArgSet& dependentVars, const RooArgSet* projectedVars, RooArgSet*& cloneSet, const char* rangeName = 0, const RooArgSet* condObs = 0) const; virtual RooAbsReal*RooAbsReal::createProfile(const RooArgSet& paramsOfInterest); virtual RooAbsPdf*RooAbsPdf::createProjection(const RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10417,Integrability,depend,dependentOverlaps,10417," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10509,Integrability,depend,dependentOverlaps,10509," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10603,Integrability,depend,dependsOn,10603," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10732,Integrability,depend,dependsOn,10732," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10850,Integrability,depend,dependsOnValue,10850," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10957,Integrability,depend,dependsOnValue,10957," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:23171,Integrability,message,message,23171,"TObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::n",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:23322,Integrability,message,message,23322,"ameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAb",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44053,Integrability,integrat,integration,44053,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44875,Integrability,integrat,integration,44875,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:47048,Integrability,integrat,integrator,47048,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50278,Integrability,integrat,integration,50278,"e physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50486,Integrability,integrat,integration,50486,"e physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50617,Integrability,integrat,integration,50617,"generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function depen",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51151,Integrability,depend,dependents,51151,"rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51168,Integrability,integrat,integrated,51168,"rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51212,Integrability,depend,dependents,51212,"rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51229,Integrability,integrat,integrated,51229,"rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51493,Integrability,depend,dependents,51493,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51510,Integrability,integrat,integrated,51510,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51551,Integrability,depend,dependents,51551,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51568,Integrability,integrat,integrated,51568,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51609,Integrability,depend,dependents,51609,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51681,Integrability,depend,dependents,51681,"oAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration de",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51947,Integrability,integrat,integration,51947,"ngeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the re",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:51977,Integrability,interface,interface,51977,"x) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52123,Integrability,integrat,integration,52123,"x) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52440,Integrability,integrat,integration,52440,"basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printM",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52574,Integrability,integrat,integration,52574,"ient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52586,Integrability,depend,dependents,52586,"ient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52677,Integrability,integrat,integration,52677,"ient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52821,Integrability,integrat,integrate,52821,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52841,Integrability,depend,dependents,52841,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52892,Integrability,integrat,integration,52892,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52904,Integrability,interface,interface,52904,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52966,Integrability,integrat,integrate,52966,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52982,Integrability,depend,dependents,52982,"Name = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns no",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:715,Modifiability,variab,variable,715,". RooAbsAnaConvPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsAnaConvPdf. class RooAbsAnaConvPdf: public RooAbsPdf. RooAbsAnaConvPdf is the base class of for PDFs that represents a; physics model that can be analytically convolved with a resolution model. To achieve factorization between the physics model and the resolution; model, each physics model must be able to be written in the form; _ _ _ _; Phys(x,a,b) = Sum_k coef_k(a) * basis_k(x,b). where basis_k are a limited number of functions in terms of the variable; to be convoluted and coef_k are coefficients independent of the convolution; variable. Classes derived from RooResolutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooAbsAnaConvPdf physics model consists of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Fun",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:802,Modifiability,variab,variable,802,". RooAbsAnaConvPdf. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsAnaConvPdf. class RooAbsAnaConvPdf: public RooAbsPdf. RooAbsAnaConvPdf is the base class of for PDFs that represents a; physics model that can be analytically convolved with a resolution model. To achieve factorization between the physics model and the resolution; model, each physics model must be able to be written in the form; _ _ _ _; Phys(x,a,b) = Sum_k coef_k(a) * basis_k(x,b). where basis_k are a limited number of functions in terms of the variable; to be convoluted and coef_k are coefficients independent of the convolution; variable. Classes derived from RooResolutionModel implement; _ _ _ _; R_k(x,b,c) = Int(dx') basis_k(x',b) * resModel(x-x',c). which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; _ _ _ _ _ _; PDF(x,a,b,c) = Sum_k coef_k(a) * R_k(x,b,c). A minimal implementation of a RooAbsAnaConvPdf physics model consists of. - A constructor that declares the required basis functions using the declareBasis() method.; The declareBasis() function assigns a unique identifier code to each declare basis. - An implementation of coefficient(Int_t code) returning the coefficient value for each; declared basis function. Optionally, analytical integrals can be provided for the coefficient functions. The; interface for this is quite similar to that for integrals of regular PDFs. Two functions,. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const. advertise the coefficient integration capabilities and implement them respectively.; Please see RooAbsPdf for additional details. Advertised analytical integrals must be; valid for all coefficients. Fun",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:12283,Modifiability,extend,extendedTerm,12283,"nt_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidRooAbsReal::enableOffsetting(Bool_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static Bool_tRooAbsPdf::evalError(); static RooAbsReal::EvalErrorIterRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; v",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:12395,Modifiability,extend,extendMode,12395,"U ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidRooAbsReal::enableOffsetting(Bool_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static Bool_tRooAbsPdf::evalError(); static RooAbsReal::EvalErrorIterRooAbsReal::evalErrorIter(); static RooAbsReal::ErrorLoggingModeRooAbsReal::evalErrorLoggingMode(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Doubl",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:15897,Modifiability,extend,extended,15897,"ec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Double_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """", Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); virtual voidRooAbsPdf::generateEvent(Int_t code); virtual RooDataSet*RooAbsPdf::generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); virtual RooArgSet*RooAbsPdf::getAllConstraints(const RooArgSet& o",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:16051,Modifiability,extend,extended,16051,"ProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Double_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t autoBinned = kTRUE, const char* binnedTag = """", Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, Bool_t expectedData = kFALSE, Bool_t extended = kFALSE) const; virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); virtual RooDataHist*RooAbsPdf::generateBinned(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); virtual voidRooAbsPdf::generateEvent(Int_t code); virtual RooDataSet*RooAbsPdf::generateSimGlobal(const RooArgSet& whatVars, Int_t nEvents); virtual RooArgSet*RooAbsPdf::getAllConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected = kTRUE) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooA",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:31291,Modifiability,config,config,31291,"imitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(Int_t value, Bool_t allNodes = kFAL",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:31449,Modifiability,config,config,31449,":serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsPdf::setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(con",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:36147,Modifiability,extend,extended,36147,"::cleanBranchName() const; const RooRealVar*convVar() const; virtual voidRooAbsReal::copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE); RooAbsReal*RooAbsReal::createIntObj(const RooArgSet& iset, const RooArgSet* nset, const RooNumIntConfig* cfg, const char* rangeName) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Double_tevaluate() const; virtual voidRooAbsReal::fillTreeBranch(TTree& t); voidRooAbsReal::findInnerMostIntegration(const RooArgSet& allObs, RooArgSet& innerObs, const char* rangeName) const; virtual RooAbsGenContext*genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Double_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto, Bool_t skipInit = kFALSE, Bool_t extended = kFALSE) const; Double_tgetCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidmakeCoefVarList(RooArgList&) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTOb",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44377,Modifiability,variab,variable,44377,"sient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal:",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:46951,Modifiability,config,configuration,46951,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:47059,Modifiability,config,configuration,47059,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:48138,Modifiability,variab,variable,48138,"bsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsAnaConvPdf(); Default constructor, required for persistence. RooAbsAnaConvPdf(const char* name, const char* title, const RooResolutionModel& model, RooRealVar& convVar); Constructor. The supplied resolution model must be constructed with the same; convoluted variable as this physics model ('convVar'). RooAbsAnaConvPdf(const RooAbsAnaConvPdf& other, const char* name = 0); _basisList(other._basisList),; Copy constructor. ~RooAbsAnaConvPdf(); Destructor. Int_t declareBasis(const char* expression, const RooArgList& params); Declare a basis function for use in this physics model. The string expression; must be a valid RooFormulVar expression representing the basis function, referring; to the convolution variable as '@0', and any additional parameters (supplied in; 'params' as '@1','@2' etc. The return value is a unique identifier code, that will be passed to coefficient(); to identify the basis function for which the coefficient is requested. If the; resolution model used does not support the declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, co",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:48587,Modifiability,variab,variable,48587,"static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsAnaConvPdf(); Default constructor, required for persistence. RooAbsAnaConvPdf(const char* name, const char* title, const RooResolutionModel& model, RooRealVar& convVar); Constructor. The supplied resolution model must be constructed with the same; convoluted variable as this physics model ('convVar'). RooAbsAnaConvPdf(const RooAbsAnaConvPdf& other, const char* name = 0); _basisList(other._basisList),; Copy constructor. ~RooAbsAnaConvPdf(); Destructor. Int_t declareBasis(const char* expression, const RooArgList& params); Declare a basis function for use in this physics model. The string expression; must be a valid RooFormulVar expression representing the basis function, referring; to the convolution variable as '@0', and any additional parameters (supplied in; 'params' as '@1','@2' etc. The return value is a unique identifier code, that will be passed to coefficient(); to identify the basis function for which the coefficient is requested. If the; resolution model used does not support the declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation contex",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:49892,Modifiability,variab,variable,49892,"he declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeN",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50732,Modifiability,config,configuration,50732,"generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k * Int(dw) [ basis_k (x) ResModel ]. where x is the set of coefficient dependents to be integrated,; y the set of basis function dependents to be integrated,; v is the set of coefficient dependents over which is normalized and; w is the set of basis function depen",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:53291,Modifiability,variab,variables,53291,"AnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns normalization integral for coefficient coefIdx for observables nset in range rangeNae. Double_t coefficient(Int_t basisIndex) const. RooArgSet* parseIntegrationRequest(const RooArgSet& intSet, Int_t& coefCode, RooArgSet* analVars = 0) const. » Last changed: Tue Jun 30 14:29:49 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:3654,Performance,cache,cacheUniqueSuffix,3654,"egateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname =",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:13004,Performance,cache,cacheList,13004,"ent(Int_t event, Int_t px, Int_t py); virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:13092,Performance,cache,cacheList,13092,"oArgSet* nset) const; virtual Double_tRooAbsPdf::expectedEvents(const RooArgSet& nset) const; RooExpensiveObjectCache&RooAbsArg::expensiveObjectCache() const; virtual Double_tRooAbsPdf::extendedTerm(Double_t observedEvents, const RooArgSet* nset = 0) const; virtual RooAbsPdf::ExtendModeRooAbsPdf::extendMode() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); RooDataHist*RooAbsReal::fillDataHist(RooDataHist* hist, const RooArgSet* nset, Double_t scaleFactor, Bool_t correctForBinVolume = kFALSE, Bool_t showProgress = kFALSE) const; TH1*RooAbsReal::fillHistogram(TH1* hist, const RooArgList& plotVars, Double_t scaleFactor = 1, const RooArgSet* projectedVars = 0, Bool_t scaling = kTRUE, const RooArgSet* condObs = 0, Bool_t setError = kTRUE) const; Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tRooAbsArg::findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*RooAbsArg::findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tRooAbsReal::findRoot(RooRealVar& x, Double_t xmin, Double_t xmax, Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:25217,Performance,optimiz,optimizeCacheMode,25217,"RealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:25289,Performance,optimiz,optimizeCacheMode,25289,"RealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:29689,Performance,cache,cache,29689,"eam(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsArg::printTitle(ostream& os) const; virtual voidRooAbsArg::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsPdf::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_tRooAbsReal::readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_tRooAbsArg::recursiveCheckDependents(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveCheckObservables(const RooArgSet* nset) const; Bool_tRooAbsArg::recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidRooAbsPdf::resetErrorCounters(Int_t resetValue = 10); RooAbsAnaConvPdf(); RooAbsAnaConvPdf(const RooAbsAnaConvPdf& other, const char* name = 0); RooAbsAnaConvPdf(const char* name, const char* title, const RooResolutionModel& model, RooRealVar& convVar); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, B",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:31189,Performance,cache,cache,31189,"ject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidRooAbsReal::setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); virtual voidRooAbsArg::setExpensiveObjectCache(RooExpensiveObjectCache& cache); voidRooAbsPdf::setGeneratorConfig(); voidRooAbsPdf::setGeneratorConfig(const RooNumGenConfig& config); static voidRooAbsReal::setHideOffset(Bool_t flag); voidRooAbsReal::setIntegratorConfig(); voidRooAbsReal::setIntegratorConfig(const RooNumIntConfig& config); voidRooAbsArg::setLocalNoDirtyInhibit(Bool_t flag) const; virtual voidRooAbsArg::SetName(const char* name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); voidRooAbsPdf::setNormRange(const char* rangeName); voidRooAbsPdf::setNormRangeOverride(const char* rangeName); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsReal::setParameterizeIntegral(const RooArgSet& paramVars); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::Se",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:33818,Performance,cache,cache,33818,"r* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:37917,Performance,optimiz,optimizeDirtyHook,37917,"nded = kFALSE) const; Double_tgetCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; virtual voidRooAbsArg::getObservablesHook(const RooArgSet*, RooArgSet*) const; virtual voidRooAbsArg::getParametersHook(const RooArgSet*, RooArgSet*, Bool_t) const; RooAbsProxy*RooAbsArg::getProxy(Int_t index) const; static voidRooAbsReal::globalSelectComp(Bool_t flag); voidRooAbsArg::graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >&); Bool_tRooAbsArg::inhibitDirty() const; TStringRooAbsReal::integralNameSuffix(const RooArgSet& iset, const RooArgSet* nset = 0, const char* rangeName = 0, Bool_t omitEmpty = kFALSE) const; Bool_tRooAbsReal::isSelectedComp() const; virtual Bool_tRooAbsReal::isValid() const; virtual Bool_tRooAbsReal::isValidReal(Double_t value, Bool_t printError = kFALSE) const; voidmakeCoefVarList(RooArgList&) const; voidRooAbsReal::makeProjectionSet(const RooAbsArg* plotVar, const RooArgSet* allVars, RooArgSet& projectedVars, Bool_t silent) const; voidTObject::MakeZombie(); Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgSet& set) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c) const; Bool_tRooAbsReal::matchArgs(const RooArgSet& allDeps, RooArgSet& numDeps, const RooArgProxy& a, const RooArgProxy& b, const RooArgProxy& c, const RooArgProxy& d) const; Int_tRooAbsArg::numProxies() const; virtual voidRooAbsArg::operModeHook(); virtual voidRooAbsArg::optimizeDirtyHook(const RooArgSet*); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooArgSet& params, Bool_t showConstants = kFALSE, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:43304,Performance,cache,cache,43304,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:43387,Performance,cache,cache,43387,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:43585,Performance,cache,caches,43585,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44498,Performance,cache,cache,44498, clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOrigina,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44777,Performance,cache,cache,44777,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:45190,Performance,cache,cache,45190,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:45848,Performance,cache,cache,45848,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:46519,Performance,cache,cache,46519,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:47307,Performance,cache,cache,47307,"egral (owned by _normMgr); RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Double_tRooAbsPdf::_rawValue; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; Bool_tRooAbsPdf::_selectCompComponent selection flag for RooAbsPdf::plotCompOn; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumGenConfig*RooAbsPdf::_specGeneratorConfig! MC generator configuration specific for this object; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Int_tRooAbsPdf::_traceCountNumber of traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50222,Performance,perform,perform,50222,"= kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to b",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:50405,Performance,perform,performed,50405,"e physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates results into composite configuration with a unique; code assigned by RooAICRegistry. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given code, which is returned; by getAnalyticalIntegralWN(). For unnormalized integrals the returned value is; _ _; PDF = sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; _; where x is the set of coefficient dependents to be integrated; and y the set of basis function dependents to be integrated. For normalized integrals this becomes. sum_k Int(dx) coef_k * Int(dy) [ basis_k (x) ResModel ].; PDF = --------------------------------------------------------; sum_k Int(dv) coef_k",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:49677,Safety,safe,safe,49677,"fier code, that will be passed to coefficient(); to identify the basis function for which the coefficient is requested. If the; resolution model used does not support the declared basis function, code -1 is; returned. Bool_t changeModel(const RooResolutionModel& newModel); Change the current resolution model to newModel. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Create a generator context for this p.d.f. If both the p.d.f and the resolution model; support internal generation of the convolution observable on an infinite domain,; deploy a specialized convolution generator context, which generates the physics distribution; and the smearing separately, adding them a posteriori. If this is not possible return; a (slower) generic generation context that uses accept/reject sampling. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Return true if it is safe to generate the convolution observable; from the internal generator (this is the case if the chosen resolution; model is the truth model). const RooRealVar* convVar() const; Return a pointer to the convolution variable instance used in the resolution model. Double_t evaluate() const; Calculate the current unnormalized value of the PDF. PDF = sum_k coef_k * [ basis_k (x) ResModel ]. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Advertise capability to perform (analytical) integrals; internally. For a given integration request over allVars while; normalized over normSet2 and in range 'rangeName', returns; largest subset that can be performed internally in analVars; Return code is unique integer code identifying integration scenario; to be passed to analyticalIntegralWN() to calculate requeste integral. Class RooAbsAnaConv defers analytical integration request to; resolution model and/or coefficient implementations and; aggregates res",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:52730,Safety,unsafe,unsafe,52730,"ient dependents over which is normalized and; w is the set of basis function dependents over which is normalized. Set x must be contained in v and set y must be contained in w. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Default implementation of function advertising integration capabilities. The interface is; similar to that of getAnalyticalIntegral except that an integer code is added that; designates the coefficient number for which the integration capabilities are requested. This default implementation advertises that no internal integrals are supported. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; Default implementation of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:14424,Security,hash,hash,14424,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg& dep) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgS",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:14575,Security,hash,hash,14575,"rg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg& dep) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const Ro",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:43481,Security,validat,validate,43481,,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:44698,Security,access,access,44698,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:53821,Security,access,access,53821," of function implementing advertised integrals. Only; the pass-through scenario (no integration) is implemented. Bool_t forceAnalyticalInt(const RooAbsArg& dep) const; This function forces RooRealIntegral to offer all integration dependents; to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; to hidden Jacobian terms). RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; but feed them to the resolution models integration interface, which will; make the final determination on how to integrate these dependents. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet* nset, const TNamed* rangeName) const; Returns the normalization integral value of the coefficient with number coefIdx over normalization; set nset in range rangeName. void makeCoefVarList(RooArgList& ) const; Build complete list of coefficient variables. RooArgSet* coefVars(Int_t coefIdx) const; Return set of parameters with are used exclusively by the coefficient functions. void printMultiline(ostream& stream, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this object to the specified stream. In addition to the info; from RooAbsPdf::printStream() we add:. Verbose : detailed information on convolution integrals. Double_t getCoefNorm(Int_t coefIdx, const RooArgSet& nset, const char* rangeName) const; Coefficient normalization access. return getCoefNorm(coefIdx,&nset,rangeName); Returns normalization integral for coefficient coefIdx for observables nset in range rangeNae. Double_t coefficient(Int_t basisIndex) const. RooArgSet* parseIntegrationRequest(const RooArgSet& intSet, Int_t& coefCode, RooArgSet* analVars = 0) const. » Last changed: Tue Jun 30 14:29:49 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10476,Testability,test,testArg,10476," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:10570,Testability,test,testArg,10570," RooArgSet& iset); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsReal::createRunningIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); RooAbsReal*RooAbsPdf::createScanCdf(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); RooAbsReal*RooAbsReal::createScanRI(const RooArgSet& iset, const RooArgSet& nset, Int_t numScanBins, Int_t intOrder); Int_tdeclareBasis(const char* expression, const RooArgList& params); virtual Double_tRooAbsReal::defaultErrorLevel() const; static RooNumGenConfig*RooAbsPdf::defaultGeneratorConfig(); static RooNumIntConfig*RooAbsReal::defaultIntegratorConfig(); virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tRooAbsArg::dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tRooAbsArg::dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; RooDerivative*RooAbsReal::derivative(RooRealVar& obs, Int_t order = 1, Double_t eps = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:23146,Testability,log,logEvalError,23146,") const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notif",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:23245,Testability,log,logEvalError,23245,"irtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRo",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:24356,Testability,test,testArg,24356," = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, Ro",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:24451,Testability,test,testArg,24451,"Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueO",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:25433,Testability,test,testArg,25433,"RealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsAnaConvPdf&operator=(const RooAbsAnaConvPdf&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:4238,Usability,clear,clearEvalError,4238,"ual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:4279,Usability,clear,clearEvalErrorLog,4279,"s(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const Roo",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:4315,Usability,clear,clearShapeDirty,4315,"le_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbs",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:4355,Usability,clear,clearValueAndShapeDirty,4355,"(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& i",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsAnaConvPdf.html:4403,Usability,clear,clearValueDirty,4403,"t = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg&",MatchSource.WIKI,root/html602/RooAbsAnaConvPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html
https://root.cern/root/html602/RooAbsArg.html:1211,Availability,avail,available,1211,"s; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*cacheUniqueSuffix() const; virtual RooAbsArg::CacheModecanNodeBeCached() const; voidchangeServer(RooAbsArg& server, Bool_t valuePr",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:4386,Availability,error,error,4386,""")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_t",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:4470,Availability,error,error,4470,"onst; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tfnv1a64(const char* data); static ULong64_tfnv1a64(const char* data, ULong_t sz, ULo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:22962,Availability,mask,mask,22962,"f this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's value and/or shape. void addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register a list of RooAbsArg as servers to us by calls; addServer() for each arg in the list. void removeServer(RooAbsArg& server, Bool_t force = kFALSE); Unregister another RooAbsArg as a server to us, ie, declare that; we no longer depend on its value and shape. void replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); Replace 'oldServer' with 'newServer'. void changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Change dirty flag propagation mask for specified server. void leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all leaf nodes of the arg tree, starting with; ourself as top node. A leaf node is node that has no servers declared. void branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all branch nodes of the arg tree starting with; ourself as top node. A branch node is node that has one or more servers declared. void treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with nodes of the arg tree, following all server links,; starting with ourself as top node. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const; Create a lis",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:25796,Availability,error,error,25796," const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservab",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:27885,Availability,error,error,27885,"AbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. RooAbsArg * findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; Find the new server in the specified set that matches the old server.; Allow a name change if nameChange is kTRUE, in which case the new; server is selected by searching for a new server with an attribute; of ""ORIGNAME:<oldName>"". Return zero if there is not a unique match. Bool_t recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); Recursively redirect all servers with new server in collection 'newSet'.; Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:28854,Availability,error,error,28854,"ing is printed and error status is returned if not all servers could be sucessfully; substituted. RooAbsArg * findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; Find the new server in the specified set that matches the old server.; Allow a name change if nameChange is kTRUE, in which case the new; server is selected by searching for a new server with an attribute; of ""ORIGNAME:<oldName>"". Return zero if there is not a unique match. Bool_t recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); Recursively redirect all servers with new server in collection 'newSet'.; Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. If recurseInNewSet is true, the recursion algorithm also recursion into; expression trees under the arguments in the new servers (i.e. those in newset). void registerProxy(RooArgProxy& proxy); Register an RooArgProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the pr",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:29309,Deployability,update,updates,29309," unique match. Bool_t recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); Recursively redirect all servers with new server in collection 'newSet'.; Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. If recurseInNewSet is true, the recursion algorithm also recursion into; expression trees under the arguments in the new servers (i.e. those in newset). void registerProxy(RooArgProxy& proxy); Register an RooArgProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:29820,Deployability,update,updates,29820," is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. If recurseInNewSet is true, the recursion algorithm also recursion into; expression trees under the arguments in the new servers (i.e. those in newset). void registerProxy(RooArgProxy& proxy); Register an RooArgProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooListProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. RooAbsProxy* getProxy(Int_t index) const; Return the nth proxy from the proxy list. Int_t numProxies() const; Return the number of registered proxies. void setProxyNormSet(const RooArgSet* nset); Forward a change in the cached normalization argset; to all the registered proxies. void attachToTree(TTree& t, Int_t bufSize = 32000",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:30267,Deployability,update,updates,30267," pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooListProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. RooAbsProxy* getProxy(Int_t index) const; Return the nth proxy from the proxy list. Int_t numProxies() const; Return the number of registered proxies. void setProxyNormSet(const RooArgSet* nset); Forward a change in the cached normalization argset; to all the registered proxies. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:35901,Deployability,update,update,35901,"s. void printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on given ostream.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36076,Deployability,update,update,36076,"m.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36258,Deployability,update,update,36258,"e; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooAr",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:42455,Deployability,integrat,integrated,42455,"; If true, arg is a value server of self. Bool_t isValueServer(const char* name) const; If true, we have a server with given name. Bool_t isShapeServer(const RooAbsArg& arg) const; If true arg is a shape server of self. Bool_t isShapeServer(const char* name) const; If true, we have a shape server with given name. Bool_t isFundamental() const; Is this object a fundamental type that can be added to a dataset?; Fundamental-type subclasses override this method to return kTRUE.; Note that this test is subtlely different from the dynamic isDerived(); test, e.g. a constant is not derived but is also not fundamental. RooAbsArg * createFundamental(const char* newname = 0) const; Create a fundamental-type object that stores our type of value. The; created object will have a valid value, but not necessarily the same; as our value. The caller is responsible for deleting the returned object. Bool_t isLValue() const; Is this argument an l-value, ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:445,Integrability,depend,depends,445,". RooAbsArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:714,Integrability,depend,depends,714,". RooAbsArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:971,Integrability,interface,interfaces,971,"sArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) co",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:22222,Integrability,depend,depend,22222,"g propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's value and/or shape. void addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register a list of RooAbsArg as servers to us by calls; addServer() for each arg in the list. void removeServer(RooAbsArg& server, Bool_t force = kFALSE); Unregister another RooAbsArg as a server to us, ie, declare that; we no longer depend on its value and shape. void replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); Replace 'oldServer' with 'newServer'. void changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Change dirty flag propagation mask for specified server. void leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all leaf nodes of the ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:22305,Integrability,depend,dependence,22305,"Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's value and/or shape. void addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register a list of RooAbsArg as servers to us by calls; addServer() for each arg in the list. void removeServer(RooAbsArg& server, Bool_t force = kFALSE); Unregister another RooAbsArg as a server to us, ie, declare that; we no longer depend on its value and shape. void replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); Replace 'oldServer' with 'newServer'. void changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Change dirty flag propagation mask for specified server. void leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all leaf nodes of the arg tree, starting with; ourself as top node. A leaf node is node that has no servers declared. void branchNodeServerList(RooAbsCollection* li",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:22689,Integrability,depend,depend,22689,"y'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes; are unset. void addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register another RooAbsArg as a server to us, ie, declare that; we depend on it. In addition to the basic client-server relationship,; we can declare dependence on the server's value and/or shape. void addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); Register a list of RooAbsArg as servers to us by calls; addServer() for each arg in the list. void removeServer(RooAbsArg& server, Bool_t force = kFALSE); Unregister another RooAbsArg as a server to us, ie, declare that; we no longer depend on its value and shape. void replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); Replace 'oldServer' with 'newServer'. void changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Change dirty flag propagation mask for specified server. void leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all leaf nodes of the arg tree, starting with; ourself as top node. A leaf node is node that has no servers declared. void branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all branch nodes of the arg tree starting with; ourself as top node. A branch node is node that has one or more servers declared. void treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:24076,Integrability,depend,dependents,24076,"agation mask for specified server. void leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all leaf nodes of the arg tree, starting with; ourself as top node. A leaf node is node that has no servers declared. void branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all branch nodes of the arg tree starting with; ourself as top node. A branch node is node that has one or more servers declared. void treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with nodes of the arg tree, following all server links,; starting with ourself as top node. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). void addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; INTERNAL helper function for getParameters(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getObservables(const RooAbsData* data) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:24960,Integrability,depend,dependents,24960,"sData* data, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). void addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; INTERNAL helper function for getParameters(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getObservables(const RooAbsData* data) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveChe",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:25980,Integrability,depend,dependsOn,25980,"function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* s",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:26108,Integrability,depend,depend,26108,"function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* s",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:26188,Integrability,depend,dependsOn,26188,"t of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the obj",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:26234,Integrability,depend,dependsOn,26234,"supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:26351,Integrability,depend,depend,26351,"supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:26738,Integrability,depend,dependents,26738,"the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:26940,Integrability,depend,dependents,26940,"on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could b",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:31838,Integrability,depend,dependent,31838,"es. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32039,Integrability,depend,dependent,32039,"lete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observa",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32694,Integrability,depend,depend,32694," set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, Roo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33198,Integrability,depend,depend,33198,"ame, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperM",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36360,Integrability,interface,interface,36360,"Pat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:40034,Integrability,depend,dependsOnValue,40034," of RooAbsArg-derived; classes that are container classes with references to other members, which may; not yet be 'live' in the first ioStreamer() evolution pass. Classes may overload this function, but must call the base method in the; overloaded call to ensure base evolution is handled properly. void ioStreamerPass2Finalize(); Method called by workspace container to finalize schema evolution issues; that cannot be handled in a single ioStreamer pass. This static finalize method; is called after ioStreamerPass2() is called on each directly listed object; in the workspace. It's purpose is to complete schema evolution of any; objects in the workspace that are not directly listed as content elements; (e.g. analytical convolution tokens ). TObject* clone(const char* newname = 0) const. TObject* Clone(const char* newname = 0) const. Bool_t isDerived() const; Accessors to client-server relation information. Bool_t dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of any of of the values in serverList?. Bool_t dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of server?. Bool_t hasClients() const; { return _clientList.GetSize()>0 ? kTRUE : kFALSE ; }. TIterator* clientIterator() const; Return iterator over all client RooAbsArgs. TIterator* valueClientIterator() const; Return iterator over all value client RooAbsArgs. TIterator* shapeClientIterator() const; Return iterator over all shape client RooAbsArgs. TIterator* serverIterator() const; Return iterator over all server RooAbsArgs. RooFIter valueClientMIterator() const; { return _clientListValue.fwdIterator() ; }. RooFIter shapeClientMIterator() const; { return _clientListShape.fwdIterator() ; }. RooFIter serverMIterator() const; { return _serverList.fwdIterator() ; }. RooAbsArg* findServer(const char* name) const; Return server of this arg with given name. Returns null if not found. Roo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:40138,Integrability,depend,depend,40138," of RooAbsArg-derived; classes that are container classes with references to other members, which may; not yet be 'live' in the first ioStreamer() evolution pass. Classes may overload this function, but must call the base method in the; overloaded call to ensure base evolution is handled properly. void ioStreamerPass2Finalize(); Method called by workspace container to finalize schema evolution issues; that cannot be handled in a single ioStreamer pass. This static finalize method; is called after ioStreamerPass2() is called on each directly listed object; in the workspace. It's purpose is to complete schema evolution of any; objects in the workspace that are not directly listed as content elements; (e.g. analytical convolution tokens ). TObject* clone(const char* newname = 0) const. TObject* Clone(const char* newname = 0) const. Bool_t isDerived() const; Accessors to client-server relation information. Bool_t dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of any of of the values in serverList?. Bool_t dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of server?. Bool_t hasClients() const; { return _clientList.GetSize()>0 ? kTRUE : kFALSE ; }. TIterator* clientIterator() const; Return iterator over all client RooAbsArgs. TIterator* valueClientIterator() const; Return iterator over all value client RooAbsArgs. TIterator* shapeClientIterator() const; Return iterator over all shape client RooAbsArgs. TIterator* serverIterator() const; Return iterator over all server RooAbsArgs. RooFIter valueClientMIterator() const; { return _clientListValue.fwdIterator() ; }. RooFIter shapeClientMIterator() const; { return _clientListShape.fwdIterator() ; }. RooFIter serverMIterator() const; { return _serverList.fwdIterator() ; }. RooAbsArg* findServer(const char* name) const; Return server of this arg with given name. Returns null if not found. Roo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:40205,Integrability,depend,dependsOnValue,40205,"tion pass. Classes may overload this function, but must call the base method in the; overloaded call to ensure base evolution is handled properly. void ioStreamerPass2Finalize(); Method called by workspace container to finalize schema evolution issues; that cannot be handled in a single ioStreamer pass. This static finalize method; is called after ioStreamerPass2() is called on each directly listed object; in the workspace. It's purpose is to complete schema evolution of any; objects in the workspace that are not directly listed as content elements; (e.g. analytical convolution tokens ). TObject* clone(const char* newname = 0) const. TObject* Clone(const char* newname = 0) const. Bool_t isDerived() const; Accessors to client-server relation information. Bool_t dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of any of of the values in serverList?. Bool_t dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of server?. Bool_t hasClients() const; { return _clientList.GetSize()>0 ? kTRUE : kFALSE ; }. TIterator* clientIterator() const; Return iterator over all client RooAbsArgs. TIterator* valueClientIterator() const; Return iterator over all value client RooAbsArgs. TIterator* shapeClientIterator() const; Return iterator over all shape client RooAbsArgs. TIterator* serverIterator() const; Return iterator over all server RooAbsArgs. RooFIter valueClientMIterator() const; { return _clientListValue.fwdIterator() ; }. RooFIter shapeClientMIterator() const; { return _clientListShape.fwdIterator() ; }. RooFIter serverMIterator() const; { return _serverList.fwdIterator() ; }. RooAbsArg* findServer(const char* name) const; Return server of this arg with given name. Returns null if not found. RooAbsArg* findServer(const RooAbsArg& arg) const; Return server of this arg with name of given input arg. Returns null if not found. RooAbsArg* findServe",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:40298,Integrability,depend,depend,40298,"tion pass. Classes may overload this function, but must call the base method in the; overloaded call to ensure base evolution is handled properly. void ioStreamerPass2Finalize(); Method called by workspace container to finalize schema evolution issues; that cannot be handled in a single ioStreamer pass. This static finalize method; is called after ioStreamerPass2() is called on each directly listed object; in the workspace. It's purpose is to complete schema evolution of any; objects in the workspace that are not directly listed as content elements; (e.g. analytical convolution tokens ). TObject* clone(const char* newname = 0) const. TObject* Clone(const char* newname = 0) const. Bool_t isDerived() const; Accessors to client-server relation information. Bool_t dependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of any of of the values in serverList?. Bool_t dependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; Does this arg depend on the value of server?. Bool_t hasClients() const; { return _clientList.GetSize()>0 ? kTRUE : kFALSE ; }. TIterator* clientIterator() const; Return iterator over all client RooAbsArgs. TIterator* valueClientIterator() const; Return iterator over all value client RooAbsArgs. TIterator* shapeClientIterator() const; Return iterator over all shape client RooAbsArgs. TIterator* serverIterator() const; Return iterator over all server RooAbsArgs. RooFIter valueClientMIterator() const; { return _clientListValue.fwdIterator() ; }. RooFIter shapeClientMIterator() const; { return _clientListShape.fwdIterator() ; }. RooFIter serverMIterator() const; { return _serverList.fwdIterator() ; }. RooAbsArg* findServer(const char* name) const; Return server of this arg with given name. Returns null if not found. RooAbsArg* findServer(const RooAbsArg& arg) const; Return server of this arg with name of given input arg. Returns null if not found. RooAbsArg* findServe",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:42455,Integrability,integrat,integrated,42455,"; If true, arg is a value server of self. Bool_t isValueServer(const char* name) const; If true, we have a server with given name. Bool_t isShapeServer(const RooAbsArg& arg) const; If true arg is a shape server of self. Bool_t isShapeServer(const char* name) const; If true, we have a shape server with given name. Bool_t isFundamental() const; Is this object a fundamental type that can be added to a dataset?; Fundamental-type subclasses override this method to return kTRUE.; Note that this test is subtlely different from the dynamic isDerived(); test, e.g. a constant is not derived but is also not fundamental. RooAbsArg * createFundamental(const char* newname = 0) const; Create a fundamental-type object that stores our type of value. The; created object will have a valid value, but not necessarily the same; as our value. The caller is responsible for deleting the returned object. Bool_t isLValue() const; Is this argument an l-value, ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:43258,Integrability,depend,dependentOverlaps,43258,", ie, can it appear on the left-hand side; of an assignment expression? LValues are also special since they can; potentially be analytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<s",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:43387,Integrability,depend,dependentOverlaps,43387,"ytically integrated and generated. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const. RooArgSet* getParameters(const RooAbsData& data, Bool_t stripDisconnected = kTRUE) const; Return the parameters of this p.d.f when used in conjuction with dataset 'data'. RooArgSet* getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; Return the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Co",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:43859,Integrability,interface,interface,43859,"rn the observables of _this_ pdf given a set of observables. return getObservables(&set,valueOnly). RooArgSet* getDependents(const RooArgSet& set) const; --- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:43994,Integrability,interface,interface,43994,"-- Obsolete functions for backward compatibility. { return getObservables(set) ; }. RooArgSet* getDependents(const RooAbsData* set) const; { return getObservables(set) ; }. RooArgSet* getDependents(const RooArgSet* depList) const; { return getObservables(depList) ; }. Bool_t dependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; { return observableOverlaps(dset,testArg) ; }. Bool_t dependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; { return observableOverlaps(depList, testArg) ; }. Bool_t checkDependents(const RooArgSet* nset) const; { return checkObservables(nset) ; }. Bool_t recursiveCheckDependents(const RooArgSet* nset) const; --- End obsolete functions for backward compatibility. { return recursiveCheckObservables(nset) ; }. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). CacheMode canNodeBeCached() const; { return Always ; }. void setCacheAndTrackHints(RooArgSet& ); {}. Bool_t isShapeDirty() const; Dirty state accessor. Bo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:44795,Integrability,interface,interface,44795,"l_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). void writeToStream(ostream& os, Bool_t compact) const. void Print(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). CacheMode canNodeBeCached() const; { return Always ; }. void setCacheAndTrackHints(RooArgSet& ); {}. Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:24031,Modifiability,variab,variable,24031,"agation mask for specified server. void leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all leaf nodes of the arg tree, starting with; ourself as top node. A leaf node is node that has no servers declared. void branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with all branch nodes of the arg tree starting with; ourself as top node. A branch node is node that has one or more servers declared. void treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; Fill supplied list with nodes of the arg tree, following all server links,; starting with ourself as top node. RooArgSet* getParameters(const RooAbsData* data, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). void addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; INTERNAL helper function for getParameters(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getObservables(const RooAbsData* data) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:24915,Modifiability,variab,variable,24915,"sData* data, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). void addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; INTERNAL helper function for getParameters(). RooArgSet* getParameters(const RooArgSet* depList, Bool_t stripDisconnected = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that don't match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getObservables(const RooAbsData* data) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveChe",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:25739,Modifiability,variab,variables,25739," returned argset. The complement of this function; is getObservables(). RooArgSet* getObservables(const RooAbsData* data) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAb",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:31766,Modifiability,variab,variable,31766,"es. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:31802,Modifiability,variab,variables,31802,"es. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:31967,Modifiability,variab,variable,31967,"lete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observa",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32003,Modifiability,variab,variables,32003,"lete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observa",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:35505,Modifiability,variab,variables,35505,"Pat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on stdout, or to file if filename is specified.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on given ostream.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:37244,Modifiability,variab,variables,37244,"sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on concept developed by Kyle Cranmer. void graphVizTree(ostream& os, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Write the GraphViz representation of the expression tree headed by; this RooAbsArg object to the given ostream. Based on concept developed by Kyle Cranmer. void graphVizAddConnections(set<pair<RooAbsArg*,RooAbsArg*> >& ); Utility function that inserts all point-to-point client-server co",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:2074,Performance,cache,cacheUniqueSuffix,2074," virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFA",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:4790,Performance,cache,cacheList,4790,"pendsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tfnv1a64(const char* data); static ULong64_tfnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); Bool_tgetAttribute(const Text_t* name) const; RooAbsCache*getCache(Int_t index) const; RooLinkedListgetCloningAncestors() const; RooArgSet*getComponents() const; RooArgSet*getDependents(const RooArgSet& set) const; RooArgSet*getDependents(const RooAbsData* set) const; RooArgSet*getDependents(",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:4867,Performance,cache,cacheList,4867," 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tfnv1a64(const char* data); static ULong64_tfnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); Bool_tgetAttribute(const Text_t* name) const; RooAbsCache*getCache(Int_t index) const; RooLinkedListgetCloningAncestors() const; RooArgSet*getComponents() const; RooArgSet*getDependents(const RooArgSet& set) const; RooArgSet*getDependents(const RooAbsData* set) const; RooArgSet*getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption() co",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:12110,Performance,cache,cache,12110,"tream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidprintTitle(ostream& os) const; virtual voidprintTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual Bool_treadFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Bool_trecursiveCheckDependents(const RooArgSet* nset) const; Bool_trecursiveCheckObservables(const RooArgSet* nset) const; Bool_trecursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tredirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidregisterCache(RooAbsCache& cache); voidremoveServer(RooAbsArg& server, Bool_t force = kFALSE); voidreplaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooAbsArg(); RooAbsArg(const char* name, const char* title); RooAbsArg(const RooAbsArg& other, const char* name = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*serverIterator() const; RooFIterserverMIterator() const; virtual voidserverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidsetAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidsetCacheAndTrackHints(RooArgSet&); static voidsetDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpensiveObjectCache(RooExpensiveObjectC",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:13119,Performance,cache,cache,13119,"removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidreplaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); RooAbsArg(); RooAbsArg(const char* name, const char* title); RooAbsArg(const RooAbsArg& other, const char* name = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TIterator*serverIterator() const; RooFIterserverMIterator() const; virtual voidserverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidsetAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidsetCacheAndTrackHints(RooArgSet&); static voidsetDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpensiveObjectCache(RooExpensiveObjectCache& cache); voidsetLocalNoDirtyInhibit(Bool_t flag) const; virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidsetOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetProhibitServerRedirect(Bool_t flag); voidsetShapeDirty() const; voidsetStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidsetTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetValueDirty() const; TIterator*shapeClientIterator() const; RooFItershapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:14472,Performance,cache,cache,14472,"DrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpensiveObjectCache(RooExpensiveObjectCache& cache); voidsetLocalNoDirtyInhibit(Bool_t flag) const; virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidsetOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidsetProhibitServerRedirect(Bool_t flag); voidsetShapeDirty() const; voidsetStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidsetTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetValueDirty() const; TIterator*shapeClientIterator() const; RooFItershapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&transientAttributes() const; voidtreeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidunRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*valueClientIterator() const; RooFItervalueClientMIterator() const; static voidverboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidwireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:18676,Performance,cache,caches,18676,"::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. set<string>_boolAttribBoolean attributes; set<string>_boolAttribTransient! Transient boolean attributes (not copied in ctor); deque<RooAbsCache*>_cacheListlist of caches; RooRefCountList_clientListlist of client objects; RooRefCountList_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountList_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*_clientShapeIter! Iterator over _clientListShape; TIterator*_clientValueIter! Iterator over _clientListValue; Bool_t_deleteWatch! Delete watch flag; RooExpensiveObjectCache*_eocachePointer to global cache manager for any expensive components created by this object; Bool_t_fastAllow fast access mode in getVal() and proxies; static Bool_t_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_isConstant! Cached isConstant status; Bool_t_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperMode_operModeDirty state propagation mode; RooArgSet*_ownedComponents! Set of owned component; Bool_t_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArray_proxyListlist of proxies; RooRefCountList_serverListlist of server objects; Bool_t_shapeDirtyFlag set if value needs recalculating because input shapes modified; map<string,string>_stringAttribString attributes; Bool_t_valueD",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:19131,Performance,cache,cache,19131,"::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. set<string>_boolAttribBoolean attributes; set<string>_boolAttribTransient! Transient boolean attributes (not copied in ctor); deque<RooAbsCache*>_cacheListlist of caches; RooRefCountList_clientListlist of client objects; RooRefCountList_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountList_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*_clientShapeIter! Iterator over _clientListShape; TIterator*_clientValueIter! Iterator over _clientListValue; Bool_t_deleteWatch! Delete watch flag; RooExpensiveObjectCache*_eocachePointer to global cache manager for any expensive components created by this object; Bool_t_fastAllow fast access mode in getVal() and proxies; static Bool_t_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_isConstant! Cached isConstant status; Bool_t_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperMode_operModeDirty state propagation mode; RooArgSet*_ownedComponents! Set of owned component; Bool_t_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArray_proxyListlist of proxies; RooRefCountList_serverListlist of server objects; Bool_t_shapeDirtyFlag set if value needs recalculating because input shapes modified; map<string,string>_stringAttribString attributes; Bool_t_valueD",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:21031,Performance,cache,cache,21031,"t_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_t_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t inhibitDirty() const; { return _inhibitDirty && !_localNoInhibitDirty; }. RooAbsArg(); Default constructor. RooAbsArg(const char* name, const char* title); Create an object with the specified name and descriptive title.; The newly created object has no clients or servers and has its; dirty flags set. RooAbsArg(const RooAbsArg& other, const char* name = 0); Copy constructor transfers all boolean and string properties of the original; object. Transient properties and client-server links are not copied. ~RooAbsArg(); Destructor. void setDirtyInhibit(Bool_t flag); Control global dirty inhibit mode. When set to true no value or shape dirty; flags are propagated and cache is always considered to be dirty. void verboseDirty(Bool_t flag); Activate verbose messaging related to dirty flag propagation. Bool_t isCloneOf(const RooAbsArg& other) const; Check if this object was created as a clone of 'other'. void setAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getAttribute(const Text_t* name) const; Check if a named attribute is set. By default, all attributes are unset. void setStringAttribute(const Text_t* key, const Text_t* value); Associate string 'value' to this object under key 'key'. const Text_t* getStringAttribute(const Text_t* key) const; Get string attribute mapped under key 'key'. Returns null pointer; if no attribute exists under that key. void setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); Set (default) or clear a named boolean attribute of this object. Bool_t getTransientAttribute(const Text_t* name) const; Check if a named attribu",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:29320,Performance,cache,cached,29320," unique match. Bool_t recursiveRedirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t recurseInNewSet = kTRUE); Recursively redirect all servers with new server in collection 'newSet'.; Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. If recurseInNewSet is true, the recursion algorithm also recursion into; expression trees under the arguments in the new servers (i.e. those in newset). void registerProxy(RooArgProxy& proxy); Register an RooArgProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:29831,Performance,cache,cached,29831," is set,; a warning is printed and error status is returned if not all servers could be sucessfully; substituted. If recurseInNewSet is true, the recursion algorithm also recursion into; expression trees under the arguments in the new servers (i.e. those in newset). void registerProxy(RooArgProxy& proxy); Register an RooArgProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooListProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. RooAbsProxy* getProxy(Int_t index) const; Return the nth proxy from the proxy list. Int_t numProxies() const; Return the number of registered proxies. void setProxyNormSet(const RooArgSet* nset); Forward a change in the cached normalization argset; to all the registered proxies. void attachToTree(TTree& t, Int_t bufSize = 32000",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:30278,Performance,cache,cached,30278," pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. The proxied argument is; also added as value and/or shape server. void unRegisterProxy(RooArgProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooSetProxy& proxy); Register an RooSetProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooListProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. RooAbsProxy* getProxy(Int_t index) const; Return the nth proxy from the proxy list. Int_t numProxies() const; Return the number of registered proxies. void setProxyNormSet(const RooArgSet* nset); Forward a change in the cached normalization argset; to all the registered proxies. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:30710,Performance,cache,cached,30710,"by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooSetProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. void registerProxy(RooListProxy& proxy); Register an RooListProxy in the proxy list. This function is called by owned; proxies upon creation. After registration, this arg wil forward pointer; changes from serverRedirects and updates in cached normalization sets; to the proxies immediately after they occur. void unRegisterProxy(RooListProxy& proxy); Remove proxy from proxy list. This functions is called by owned proxies; upon their destruction. RooAbsProxy* getProxy(Int_t index) const; Return the nth proxy from the proxy list. Int_t numProxies() const; Return the number of registered proxies. void setProxyNormSet(const RooArgSet* nset); Forward a change in the cached normalization argset; to all the registered proxies. void attachToTree(TTree& t, Int_t bufSize = 32000); Overloadable function for derived classes to implement; attachment as branch to a TTree. Bool_t isValid() const; WVE (08/21/01) Probably obsolete now. void printName(ostream& os) const; Print object name. void printTitle(ostream& os) const; Print object title. void printClassName(ostream& os) const; Print object class name. void printAddress(ostream& os) const; Print addrss of this RooAbsArg. void printArgs(ostream& os) const; Print object arguments, ie its proxies. Int_t defaultPrintContents(Option_t* opt) const; Define default contents to print. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Implement multi-line detailed printing. void printTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32470,Performance,optimiz,optimizeCacheMode,32470,"ntTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-c",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32528,Performance,cache,cache,32528,"ntTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-c",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32539,Performance,optimiz,optimization,32539,"ntTree(ostream& os, TString indent = """") const; Print object tree structure. void printAttribList(ostream& os) const; Print the attribute list. void attachDataSet(const RooAbsData& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-c",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32595,Performance,cache,cache,32595," set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. void attachDataStore(const RooAbsDataStore& set); Replace server nodes with names matching the dataset variable names; with those data set variables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, Roo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:32922,Performance,optimiz,optimizeCacheMode,32922,"ariables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE);",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33032,Performance,cache,cache,33032,"ariables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE);",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33043,Performance,optimiz,optimization,33043,"ariables, making this PDF directly dependent on the dataset. Int_t Compare(const TObject* other) const; Utility function used by TCollection::Sort to compare contained TObjects; We implement comparison by name, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE);",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33099,Performance,cache,cache,33099,"ame, resulting in alphabetical sorting by object name. void printDirty(Bool_t depth = kTRUE) const; Print information about current value dirty state information.; If depth flag is true, information is recursively printed for; all nodes in this arg tree. void optimizeCacheMode(const RooArgSet& observables); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperM",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33487,Performance,cache,cacheList,33487,"mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* cl",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33594,Performance,cache,cached,33594,"mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* cl",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33715,Performance,cache,cacheList,33715,"ty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on stdout, or to file if filename is specified.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly d",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:33853,Performance,cache,cached,33853,"ty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. void optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on stdout, or to file if filename is specified.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly d",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:34048,Performance,perform,perform,34048,"inkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on stdout, or to file if filename is specified.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:34071,Performance,optimiz,optimization,34071,"inkedList& processedNodes); Activate cache mode optimization with given definition of observables.; The cache operation mode of all objects in the expression tree will; modified such that all nodes that depend directly or indirectly on; any of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on stdout, or to file if filename is specified.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:34259,Performance,cache,cache,34259," of the listed observables will be set to ADirty, as they are; expected to change every time. This save change tracking overhead for; nodes that are a priori known to change every time. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. Bool_t findConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); Find branch nodes with all-constant parameters, and add them to the list of; nodes that can be cached with a dataset in a test statistic calculation. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Interface function signaling a request to perform constant term; optimization. This default implementation takes no action other than to; forward the calls to all servers. void setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); Change cache operation mode to given mode. If recurseAdirty; is true, then a mode change to AlwaysDirty will automatically; be propagated recursively to all client nodes. void printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on stdout, or to file if filename is specified.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on given ostream.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36541,Performance,cache,cache,36541,"s not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* del",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36752,Performance,cache,cache,36752,"; Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on conce",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36807,Performance,cache,cache,36807,"; Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on conce",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36838,Performance,cache,cache,36838,"; Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on conce",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36935,Performance,cache,cache,36935,"t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on concept developed by Kyle Cranmer. void graphVizTree(ostream& os, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false);",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:37062,Performance,cache,caches,37062,"ng_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on concept developed by Kyle Cranmer. void graphVizTree(ostream& os, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Write the GraphViz representation of the expression tree headed by; this RooAbsArg object to the given o",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:37130,Performance,cache,cache,37130,"t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooArgSet with all variables (tree leaf nodes of expresssion tree). RooLinkedList getCloningAncestors() const; Return ancestors in cloning chain of this RooAbsArg. NOTE: Returned pointers; are not guaranteed to be 'live', so do not dereference without proper caution. void graphVizTree(const char* fileName, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Create a GraphViz .dot file visualizing the expression tree headed by; this RooAbsArg object. Use the GraphViz tool suite to make e.g. a gif; or ps file from the .dot file. Based on concept developed by Kyle Cranmer. void graphVizTree(ostream& os, const char* delimiter = ""\n"", bool useTitle = false, bool useLatex = false); Write the GraphViz representation of the expression tree headed by; this RooAbsArg object to the given ostream. Based on concept developed by Kyle Cranmer. void graphVizAddConn",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:45560,Performance,optimiz,optimizeDirtyHook,45560,"& other). Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). CacheMode canNodeBeCached() const; { return Always ; }. void setCacheAndTrackHints(RooArgSet& ); {}. Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:46021,Performance,cache,cacheUniqueSuffix,46021,"been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gener",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:46321,Performance,cache,cache,46321," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:46343,Performance,cache,cache,46343," Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:25832,Safety,abort,abort,25832," const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). RooArgSet* getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Test if any of the dependents of the arg tree (as determined by getObservab",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:5351,Security,hash,hash,5351,"thod, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tfnv1a64(const char* data); static ULong64_tfnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); Bool_tgetAttribute(const Text_t* name) const; RooAbsCache*getCache(Int_t index) const; RooLinkedListgetCloningAncestors() const; RooArgSet*getComponents() const; RooArgSet*getDependents(const RooArgSet& set) const; RooArgSet*getDependents(const RooAbsData* set) const; RooArgSet*getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); RooArgSet*getObservables(const RooAbsData* data) const; RooArgSet*getObservables(const RooAbsData& data) const; RooArgSet*getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; RooArgSet*getObservables(const RooArgSet* depList, Bo",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:5480,Security,hash,hash,5480,"virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); RooExpensiveObjectCache&expensiveObjectCache() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList); Bool_tfindConstantNodes(const RooArgSet& observables, RooArgSet& cacheList, RooLinkedList& processedNodes); RooAbsArg*findNewServer(const RooAbsCollection& newSet, Bool_t nameChange) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; RooAbsArg*findServer(const char* name) const; RooAbsArg*findServer(const RooAbsArg& arg) const; RooAbsArg*findServer(Int_t index) const; static UInt_tfnv1a32(const char* data); static UInt_tfnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tfnv1a64(const char* data); static ULong64_tfnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); Bool_tgetAttribute(const Text_t* name) const; RooAbsCache*getCache(Int_t index) const; RooLinkedListgetCloningAncestors() const; RooArgSet*getComponents() const; RooArgSet*getDependents(const RooArgSet& set) const; RooArgSet*getDependents(const RooAbsData* set) const; RooArgSet*getDependents(const RooArgSet* depList) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); RooArgSet*getObservables(const RooAbsData* data) const; RooArgSet*getObservables(const RooAbsData& data) const; RooArgSet*getObservables(const RooArgSet& set, Bool_t valueOnly = kTRUE) const; RooArgSet*getObservables(const RooArgSet* depList, Bool_t valueOnly = kTRUE) const; virtual Option_t*TObject::GetOption() const; RooArgSet*getParameters(const RooAbsData* data, Bool_",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:19220,Security,access,access,19220,"::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. set<string>_boolAttribBoolean attributes; set<string>_boolAttribTransient! Transient boolean attributes (not copied in ctor); deque<RooAbsCache*>_cacheListlist of caches; RooRefCountList_clientListlist of client objects; RooRefCountList_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountList_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*_clientShapeIter! Iterator over _clientListShape; TIterator*_clientValueIter! Iterator over _clientListValue; Bool_t_deleteWatch! Delete watch flag; RooExpensiveObjectCache*_eocachePointer to global cache manager for any expensive components created by this object; Bool_t_fastAllow fast access mode in getVal() and proxies; static Bool_t_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_isConstant! Cached isConstant status; Bool_t_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperMode_operModeDirty state propagation mode; RooArgSet*_ownedComponents! Set of owned component; Bool_t_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArray_proxyListlist of proxies; RooRefCountList_serverListlist of server objects; Bool_t_shapeDirtyFlag set if value needs recalculating because input shapes modified; map<string,string>_stringAttribString attributes; Bool_t_valueD",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:35815,Security,checksum,checksum,35815," nature; of the client-server links. It should be zero in calls initiated by users. void printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); Print tree structure of expression tree on given ostream.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:35986,Security,hash,hash,35986,"at = 0, RooAbsArg* client = 0); Print tree structure of expression tree on given ostream.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCac",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36054,Security,hash,hash,36054,"m.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36096,Security,hash,hash,36096,"m.; If namePat is not ""*"", only nodes with names matching the pattern will be printed.; The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36162,Security,hash,hash,36162,"The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache obj",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36236,Security,hash,hash,36236,"e; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooAr",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:36278,Security,hash,hash,36278,"e; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache object by index. RooArgSet* getVariables(Bool_t stripDisconnected = kTRUE) const; Return RooAr",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:44970,Security,access,accessor,44970,"t(Option_t* options = 0) const; Printing interface (human readable). void printMetaArgs(ostream& ) const; {}. const std::set<std::string>& attributes() const; Returns set of names of boolean attributes defined. const std::map<std::string,std::string>& stringAttributes() const; Returns std::map<string,string> with all string attributes defined. const std::set<std::string>& transientAttributes() const; Return set of transient boolean attributes. Bool_t isConstant() const; Returns true if 'Constant' attribute is set. Bool_t IsSortable() const; Object is sortable in ROOT container class. Bool_t operator==(const RooAbsArg& other). Bool_t isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE). Bool_t inRange(const char* ) const; Range management. Bool_t hasRange(const char* ) const; Has this argument a defined range (dummy interface always returns flase). CacheMode canNodeBeCached() const; { return Always ; }. void setCacheAndTrackHints(RooArgSet& ); {}. Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:1048,Testability,test,testing,1048,"sArg. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsArg. class RooAbsArg: public TNamed, public RooPrintable. RooAbsArg is the common abstract base class for objects that; represent a value (of arbitrary type) and ""shape"" that in general; depends on (is a client of) other RooAbsArg subclasses. The only; state information about a value that is maintained in this base; class consists of named attributes and flags that track when either; the value or the shape of this object changes. The meaning of shape; depends on the client implementation but could be, for example, the; allowed range of a value. The base class is also responsible for; managing client/server links and propagating value/shape changes; through an expression tree. RooAbsArg implements public interfaces; for inspecting client/server relationships and; setting/clearing/testing named attributes.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsArg(); voidTObject::AbstractMethod(const char* method) const; Bool_taddOwnedComponents(const RooArgSet& comps); voidaddParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidaddServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidattachDataSet(const RooAbsData& set); voidattachDataStore(const RooAbsDataStore& set); const set<string>&attributes() const; voidbranchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) co",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:3463,Testability,test,testArg,3463,"arShapeDirty() const; voidclearValueAndShapeDirty() const; voidclearValueDirty() const; TIterator*clientIterator() const; virtual TObject*clone(const char* newname = 0) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tcrc32(const char* data); static UInt_tcrc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
https://root.cern/root/html602/RooAbsArg.html:3546,Testability,test,testArg,3546,"nst; TIterator*clientIterator() const; virtual TObject*clone(const char* newname = 0) const; virtual TObject*Clone(const char* newname = 0) const; virtual RooAbsArg*cloneTree(const char* newname = 0) const; virtual Int_tCompare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tcrc32(const char* data); static UInt_tcrc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tdependentOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tdependentOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; Bool_tdependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOn(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0, Bool_t valueOnly = kFALSE) const; Bool_tdependsOnValue(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg = 0) const; Bool_tdependsOnValue(const RooAbsArg& server, const RooAbsArg* ignoreArg = 0) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); ",MatchSource.WIKI,root/html602/RooAbsArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html602/RooAbsArg.html
