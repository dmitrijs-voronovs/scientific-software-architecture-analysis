id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/v616/modules.html:712,Integrability,interface,interface,712,". ROOT: Functional Parts. ; ROOT   6.16/01 Reference Guide ; . Functional Parts. Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  GDML toolsGDML tools for geometry classes ;  CAD convertersClasses to convert geometries to CAD systems ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  RPad coordinate systemsThese define typesafe coordinates used by RPad to identify which coordinate system a coordinate is referring to ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  TUnfold classes;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGe",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:938,Integrability,interface,interfaceClasses,938,". ROOT: Functional Parts. ; ROOT   6.16/01 Reference Guide ; . Functional Parts. Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  GDML toolsGDML tools for geometry classes ;  CAD convertersClasses to convert geometries to CAD systems ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  RPad coordinate systemsThese define typesafe coordinates used by RPad to identify which coordinate system a coordinate is referring to ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  TUnfold classes;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGe",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:1119,Integrability,interface,interfaceInterface,1119,". ROOT: Functional Parts. ; ROOT   6.16/01 Reference Guide ; . Functional Parts. Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  GDML toolsGDML tools for geometry classes ;  CAD convertersClasses to convert geometries to CAD systems ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  RPad coordinate systemsThese define typesafe coordinates used by RPad to identify which coordinate system a coordinate is referring to ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  TUnfold classes;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGe",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:3430,Integrability,integrat,integration,3430,"r implementing Functor and Functor1D classes ;  Parameteric Function Evaluation Interfaces.Interfaces classes for evaluation of parametric functions ;  ►Numerical AlgorithmsNumerical Algorithm classes from the MathCore Library and MathMore Library libraries ;  One-dimensional MinimizationClasses for one-dimensional minimization ;  ►Numerical IntegrationClasses for numerical integration of functions ;  Numerical Monte Carlo Integration ClassesClasses implementing method for Monte Carlo Integration ;  Multi-dimensional MinimizationClasses implementing algorithms for multi-dimensional minimization ;  Numerical DifferentiationClasses for numerical differentiation ;  One-dimensional Root-FindingClasses implementing algorithms for finding the roots of a one-dimensional function ;  Function Approximation (ChebyshevApprox)Numerical algorithm from the MathMore library and implemented using the GSL library ;  Multidimensional ROOT findingClasses for finding the roots of a multi-dimensional system ;  Interpolation ClassesClasses for interpolation of points ;  ►Statistical functionsProbability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  ►MathMoreThe Mathematical library providing some advanced functionality and based on GSL. See the MathMore Library page ;  ►Numerical AlgorithmsNumerical Algorithm classes from the",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:5222,Integrability,integrat,integration,5222,,MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:7972,Integrability,interface,interface,7972,"functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:8004,Integrability,interface,interface,8004,"functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:8036,Integrability,interface,interface,8036,"functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:8878,Integrability,interface,interface,8878," Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  ▼RoofitRooFit toolkit classes ;  RoofitcoreCore RooFit classes ;  ►RoostatsRooStats toolkit classes ;  HistFactoryFactory classes to create RooFit workspaces from histograms ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showi",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:9387,Integrability,interface,interface,9387,"utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  ▼RoofitRooFit toolkit classes ;  RoofitcoreCore RooFit classes ;  ►RoostatsRooStats toolkit classes ;  HistFactoryFactory classes to create RooFit workspaces from histograms ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese t",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:9555,Integrability,interface,interface,9555,"roofd daemon ;  TMVAThe Multi Variate Analysis package ;  ▼RoofitRooFit toolkit classes ;  RoofitcoreCore RooFit classes ;  ►RoostatsRooStats toolkit classes ;  HistFactoryFactory classes to create RooFit workspaces from histograms ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Mo",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:9724,Integrability,interface,interface,9724,"h level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multi",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:9774,Integrability,interface,interface,9774,"h level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showing the FITS file interface ;  FOAM tutorialsExamples showing how to use FOAM ;  Geometry tutorialsVarious ROOT geometry package examples ;  OpenGL tutorialsVarious examples showing the OpenGL graphics in ROOT ;  Graphics tutorialsVarious examples showing the basic ROOT graphics ;  Graphs tutorialsExamples showing the ""graphs classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multi",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:10287,Integrability,interface,interface,10287,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:12028,Integrability,interface,interface,12028,les aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  TUnfold tutorialsTest programs for the classes TUnfold and related ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  VecOps tutorialsThese examples show the functionalities of the VecOps utilities ;  XML tutorialsXML examples ;  R Interface for Statistical Computing. ROOT 6.16/01 - Reference,MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:12829,Integrability,interface,interface,12829,file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate the main features of RooFit. Their names are related to the aspect which is treated in the code ;  RooStats TutorialsThese tutorials illustrate the main features of RooStats ;  Spectrum tutorialsExamples showing the TSpectrum and TSpectrumPainter usage ;  TSPlot tutorialsThis tutorial illustrates the use of class TSPlot ;  SQL tutorialsExamples showing the SQL classes ;  Thread tutorialsThread examples ;  TMVA tutorialsExample code which illustrates how to use the TMVA toolkit ;  Tree tutorialsExample code which illustrates how to use ROOT trees and ntuples ;  TUnfold tutorialsTest programs for the classes TUnfold and related ;  Unuran tutorialsExamples showing unuran capabilities ;  ROOT 7 tutorialsVarious examples showing the ROOT 7 interface ;  VecOps tutorialsThese examples show the functionalities of the VecOps utilities ;  XML tutorialsXML examples ;  R Interface for Statistical Computing. ROOT 6.16/01 - Reference Guide Generated on Sun Dec 19 2021 22:33:51 (GVA Time) using Doxygen 1.9.3 (234637167bd5d39d32bf51f755d58253441f123a). ,MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:7061,Performance,perform,performance,7061,"continuous and discrete) ;  Probability Density Functions (PDF)Probability density functions of various statistical distributions (continuous and discrete) ;  Cumulative Distribution Functions (CDF)Cumulative distribution functions of various distributions ;  Statistical functions from truncated distributionsStatistical functions for the truncated distributions ;  Quantile FunctionsInverse functions of the cumulative distribution functions and the inverse of the complement of the cumulative distribution functions for various distributions ;  Special functionsSpecial mathematical functions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRandom numbers and based on GSL ;  Matrix Linear AlgebraThe ROOT Matrix Linear Algebra classes ;  TMinuitThe Minuit Minimization package ;  Minuit2 Minimization LibraryNew Object-oriented implementation of the MINUIT minimization package ;  Physics VectorsThe Physics Vectors classes ;  ►SMatrixSMatrix Package for high performance vector and matrix computations ;  Expression Template Classes;  Generic Template FunctionsThese functions apply for any type T, such as a scalar, a vector or a matrix ;  Vector Template FunctionsThese functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product ;  Matrix Template FunctionsThese function apply to matrices (and also Matrix expression) and can return a matrix expression of a particular defined type, like in the matrix multiplication or a vector, like in the matrix-vector product or a scalar like in the Similarity vector-matrix product ;  SMatrix Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte C",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:10858,Safety,safe,safety,10858,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:8351,Testability,benchmark,benchmark,8351," Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  ▼RoofitRooFit toolkit classes ;  RoofitcoreCore RooFit classes ;  ►RoostatsRooStats toolkit classes ;  HistFactoryFactory classes to create RooFit workspaces from histograms ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showi",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:8390,Testability,benchmark,benchmark,8390," Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  ▼RoofitRooFit toolkit classes ;  RoofitcoreCore RooFit classes ;  ►RoostatsRooStats toolkit classes ;  HistFactoryFactory classes to create RooFit workspaces from histograms ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showi",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:11739,Testability,test,test,11739,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:9043,Usability,learn,learn,9043," Storage Representation;  Matrix and Vector classesClasses representing Matrices and Vectors of arbitrary type and dimension ;  Unuran;  VecOps;  ▼Monte CarloThe Monte Carlo related packages ;  EGParticle Data Group interface ;  Pythia6The Pythia6 interface ;  Pythia8The Pythia8 interface ;  VMCVirtual Monte Carlo ;  ▼PROOFClasses defining the Parallel ROOT Facility, PROOF, a framework for parallel analysis of ROOT TTrees ;  PROOF kernel LibrariesThe PROOF kernel libraries (libProof, libProofPlayer, libProofDraw) contain the classes defining the kernel of the PROOF facility, i.e ;  PROOF benchmark utilitiesSet of utilities to benchmark a PROOF facility ;  XProofD client LibraryThe XProofD client library, libProofx, contain the classes providing the client to interact with the XRootD-based xproofd daemon ;  TMVAThe Multi Variate Analysis package ;  ▼RoofitRooFit toolkit classes ;  RoofitcoreCore RooFit classes ;  ►RoostatsRooStats toolkit classes ;  HistFactoryFactory classes to create RooFit workspaces from histograms ;  DataFrameROOT's RDataFrame allows to analyse data stored in TTrees with a high level interface ;  Tree LibraryTo store large quantities of same-class objects, ROOT provides the TTree and TNtuple classes ;  ▼TutorialsA collection of macros helping to learn ROOT by example ;  Tutorials specific to Mac/CocoaVarious examples showing graphics done with the Mac graphics system Cocoa. These examples run only on Mac/Os ;  Containers tutorialsExamples showing the ""containers' classes"" usage. ;  Data Frame tutorialsThese examples show the functionalities of RDataFrame: ROOT's declarative analysis interface ;  Event display tutorialsExamples showing the ""Event display classes"" usage. ;  Fast Fourier Transforms tutorialsExample showing the Fast Fourier Transforms interface in ROOT ;  Fit TutorialsThese tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code ;  FITS files interface tutorialsExamples showi",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/modules.html:11420,Usability,simpl,simple,11420,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate",MatchSource.WIKI,doc/v616/modules.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/modules.html
https://root.cern/doc/v616/namespaces.html:7529,Availability,alive,alive,7529,"ltSplitter;  CTF3Adapter;  CTF3EdgeSplitter;  CTGridGeometry;  CTH3Adapter;  CTIsoMesh;  CTMeshBuilder;  CTSlice;  CTSourceAdapterSelector;  CTSourceAdapterSelector< TF3 >;  CTSourceAdapterSelector< TH3C >;  CTSourceAdapterSelector< TH3D >;  CTSourceAdapterSelector< TH3F >;  CTSourceAdapterSelector< TH3I >;  CTSourceAdapterSelector< TH3S >;  CTSourceAdapterSelector< TKDEFGT >;  CTSplitterSelector;  CTSplitterSelector< TF3, V >;  CTSplitterSelector< TH3C, V >;  CTSplitterSelector< TH3D, V >;  CTSplitterSelector< TH3F, V >;  CTSplitterSelector< TH3I, V >;  CTSplitterSelector< TH3S, V >;  CTSplitterSelector< TKDEFGT, V >;  ►NPad;  CBoundingRect;  CFillAttribSet;  CGLLimits;  CLineAttribSet;  CMarkerPainter;  CMeshPatch_t;  COffScreenDevice;  CPolygonStippleSet;  CTesselator;  CPlotTranslation;  CTGuardBase;  CTOneArgGuard;  CTTwoArgsGuard;  NRooFit;  NRooFitShortHand;  ►NRooHelpers;  CHijackMessageStreamHijacks all messages with given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  NRooLinkedListImplDetails;  NRooSimultaneousAux;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  NConstraint;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRo",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:7609,Availability,alive,alive,7609,"soMesh;  CTMeshBuilder;  CTSlice;  CTSourceAdapterSelector;  CTSourceAdapterSelector< TF3 >;  CTSourceAdapterSelector< TH3C >;  CTSourceAdapterSelector< TH3D >;  CTSourceAdapterSelector< TH3F >;  CTSourceAdapterSelector< TH3I >;  CTSourceAdapterSelector< TH3S >;  CTSourceAdapterSelector< TKDEFGT >;  CTSplitterSelector;  CTSplitterSelector< TF3, V >;  CTSplitterSelector< TH3C, V >;  CTSplitterSelector< TH3D, V >;  CTSplitterSelector< TH3F, V >;  CTSplitterSelector< TH3I, V >;  CTSplitterSelector< TH3S, V >;  CTSplitterSelector< TKDEFGT, V >;  ►NPad;  CBoundingRect;  CFillAttribSet;  CGLLimits;  CLineAttribSet;  CMarkerPainter;  CMeshPatch_t;  COffScreenDevice;  CPolygonStippleSet;  CTesselator;  CPlotTranslation;  CTGuardBase;  CTOneArgGuard;  CTTwoArgsGuard;  NRooFit;  NRooFitShortHand;  ►NRooHelpers;  CHijackMessageStreamHijacks all messages with given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  NRooLinkedListImplDetails;  NRooSimultaneousAux;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  NConstraint;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:9294,Availability,error,error,9294,"HistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetai",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:9424,Availability,error,error,9424,"aceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally a",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:27561,Availability,error,errors,27561," scaling a RPadLength ;  CRPadUserAxisBase;  CTBufferMergerTBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file ;  CTBufferMergerFile;  ►CTDirectoryKey/value store of objects ;  CToContentType;  CTDirectoryTypeMismatchObjects of this class are thrown to signal that the value known under the given name ;  CTDirectoryUnknownKeyObjects of this class are thrown to signal that no key with that name exists ;  ►CTFileA ROOT file ;  COptions_tOptions for TFile construction ;  CTFilePtrPoints to an object that stores or reads objects in ROOT's binary format ;  CTFitResult;  CTFunction;  CTFutureA TFuture class. It can wrap an std::future ;  CTLogDiagCounterObject to count the number of warnings and errors emitted by a section of code, after construction of this type ;  CTLogEntryA diagnostic, emitted by the TLogManager upon destruction of the TLogEntry ;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManagerA TLogHandler that multiplexes diagnostics to different client TLogHandlers ;  CTTaskGroupA class to manage the asynchronous execution of work items ;  ►NFitNamespace for the fitting classes ;  ►NFitUtilNamespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  CEvaluate;  CIntegralEvaluator;  CLikelihoodAux;  CLikelihoodAux< double >;  NHFitInterface;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRan",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:28499,Availability,error,error,28499,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:28521,Availability,error,error,28521,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:29248,Availability,error,error,29248,"Aux< double >;  NHFitInterface;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  NGLTutorials;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NRDF;  ►NGraphDrawing;  CGraphCreatorHelper;  CGraphNode;  CDisplayHelper;  CPassAsVecHelper;  CPassAsVecHelper< std::index_sequence< N.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:39416,Availability,error,error,39416,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:54160,Availability,error,error,54160,"rom ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  CKahanSumThe Kahan compensate summation algorithm significantly reduces the numerical error in the total obtained by adding a sequence of finite precision floating point numbers ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLib;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatr",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56729,Availability,error,error,56729,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:68643,Availability,avail,available,68643," specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNG",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:68778,Availability,error,error,68778,"tax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:71336,Availability,avail,available,71336,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:72950,Availability,error,error,72950,"Failed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffC",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:73218,Availability,error,errors,73218,"ng values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a g",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:73363,Availability,error,errors,73363,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:74774,Availability,error,errors,74774,"inimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.e ;  CMnMachinePrecisionDetermines the relative floating point arithmetic precision ;  CMnMigradAPI class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnMinimizeAPI class for minimization using Variable Metric technology (""MIGRAD""); allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnMinosAPI class for Minos Error analysis (asymmetric errors); minimization has to be done before and Minimum must be valid; possibility to ask only for one side of the Minos Error; ;  CMnParabolaThis class defines a parabola of the form a*x*x + b*x + c ;  CMnParabolaFactory;  CMnParabolaPointA point of a parabola ;  CMnParameterScanScans the values of FCN as a function of one Parameter and retains the best function and Parameter values found ;  CMnPlotMnPlot produces a text-screen graphical output of (x,y) points, e.g ;  CMnPosDefForce the covariance matrix to be positive defined by adding extra terms in the diagonal ;  CMnPrint;  CMnRefCountedPointer;  CMnReferenceCounter;  CMnScanAPI class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for mini",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:76589,Availability,error,errors,76589,"  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has par",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:76721,Availability,error,errors,76721,"API class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:78911,Availability,error,error,78911,"hod of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInside ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  NInternal;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRDis",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:80522,Availability,avail,available,80522,"to the RDataFrame federation of classes ;  CRLazyDSA RDataSource implementation which is built on top of result proxies ;  CRResultPtrSmart pointer for the return type of actions ;  CRRootDS;  CRSnapshotOptionsA collection of options to steer the creation of the dataset on file ;  ►CRSqliteDSRSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files ;  CValue_tUsed to hold a single ""cell"" of the SELECT query's result table. Can be changed to std::variant once available ;  CRTrivialDS;  CTCutInfo;  CTH1DModelA struct which stores the parameters of a TH1D ;  CTH2DModelA struct which stores the parameters of a TH2D ;  CTH3DModelA struct which stores the parameters of a TH3D ;  CTProfile1DModelA struct which stores the parameters of a TProfile ;  CTProfile2DModelA struct which stores the parameters of a TProfile2D ;  ►NTF1Helper;  CTGradientParFunctionFunction class representing the derivative with respect a parameter of a given TF1 ;  NTMetaUtils;  NTreeUtils;  NTThreadedObjectUtils;  ►NTypeTraitsROOT type_traits extensions ;  CHasBeginAndEnd;  CIsContainerCheck for container traits ;  CIsContainer< std::span< T > >;  CIsSignedNumeralChecks for signed integers types that are not characters ;  CIsSmartOrDumbPtr;  CIsSmartOrDumbPtr< std::shared_ptr< P > >;  CIsSmartOrDumbPtr< std::unique_ptr< P > >;  CIsUnsignedNumeralChecks for unsigned integer types that are not characters ;  CRemoveFirst;  CRemoveFirstParameterRemove first of possibly many template parameters ;  CRemoveFirstParameter< U< T, Rest... > >;  CTakeFirstParameterReturn first of possibly many template parameters ;  CTakeFirstParameter< Template< T, Rest... > >;  CTakeFirstType;  CTypeListLightweight storage for a collection of types ;  ►Nv5;  NTFastFun;  CTF1Data;  CTFormulaThe FORMULA class (ROOT version 5) ;  CTFormulaPrimitiveThe Formula Primitive class ;  CTOperOffset;  ►NVecOps;  CRVecA ""std::vector""-like collection of values implementing handy operation to analyse them ;  ►CR",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:88573,Availability,error,error,88573," Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:89640,Availability,error,errors,89640,"CFitterBaseBase class for TMVA fitters ;  CGeneticAlgorithmBase definition for genetic algorithm ;  CGeneticFitterFitter using a Genetic Algorithm ;  CGeneticGenesCut optimisation interface class for genetic algorithm ;  CGeneticPopulationPopulation definition for genetic algorithm ;  CGeneticRangeRange definition for genetic algorithm ;  CGiniIndexImplementation of the GiniIndex as separation criterion ;  CGiniIndexWithLaplaceImplementation of the GiniIndex With Laplace correction as separation criterion ;  CHuberLossFunctionHuber Loss Function ;  CHuberLossFunctionBDTHuber BDT Loss Function ;  CHyperParameterOptimisation;  CHyperParameterOptimisationResult;  CIFitterTargetInterface for a fitter 'target' ;  CIMethodInterface for all concrete MVA method implementations ;  CIncrement;  CIntervalThe TMVA::Interval Class ;  CIPruneToolIPruneTool - a helper interface class to prune a decision tree ;  CIPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook ;  CKDEKernelKDE Kernel for ""smoothing"" the PDFs ;  CLDA;  CLeastSquaresLossFunctionLeast Squares Loss Function ;  CLeastSquaresLossFunctionBDTLeast Squares BDT Loss Function ;  CLogIntervalThe TMVA::Interval Class ;  CLossFunction;  CLossFunctionBDT;  CLossFunctionEventInfo;  CMCFitterFitter using Monte Carlo sampling of parameters ;  CMethodANNBaseBase class for all TMVA methods using artificial neural networks ;  CMethodBaseVirtual base Class for all MVA method ;  CMethodBayesClassifierDescription of bayesian classifiers ;  CMethodBDTAnalysis of Boosted Decision Trees ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural network ;  CVARn2;  CMethodCompositeBaseVirtual base class for combining several TMVA method ;  CMethodCrossV",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:94070,Availability,error,error,94070," the discriminant ;  CPDEFoamDiscriminantDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamEventThis PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights ;  CPDEFoamEventDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamKernelBaseThis class is the abstract kernel interface for PDEFoam ;  CPDEFoamKernelGaussThis PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function ;  CPDEFoamKernelLinNThis PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells ;  CPDEFoamKernelTrivialThis class is a trivial PDEFoam kernel estimator ;  CPDEFoamMultiTargetThis PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ;  CPDEFoamTargetThis PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget ;  CPDEFoamTargetDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamVect;  CPDFPDF wrapper for histograms; uses user-defined spline interpolation ;  CPruningInfo;  CPyMethodBase;  ►CQuickMVAProbEstimator;  CEventInfo;  CRandomGenerator;  CRank;  CRankingRanking for variables in method (implementation) ;  CReaderServes to use the MVAs in a specific analysis context ;  CRegressionVarianceCalculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms ;  CResultsClass that is the base-class for a vector of result ;  CResultsClassificationClass that is the base-class for a vector of result ;  CResultsMulticlassClass which takes the results of a multiclass classification ;  CResultsRegressionClass that is the base-class for a vector of result ;  CRMethodBase;  CROCCalc;  CROCCurve;  CRootFinderRoot finding using Brents algorithm (translated from CERNLIB function RZERO) ;  CRuleImplementation of a rule ;  CRu",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10537,Deployability,configurat,configuration,10537,"Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10791,Deployability,configurat,configuration,10791,"inCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the Hy",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12840,Deployability,integrat,integrate,12840,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13510,Deployability,configurat,configuration,13510,"ovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTe",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14767,Deployability,configurat,configuration,14767,tion ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTes,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:28945,Deployability,configurat,configuration,28945,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:39030,Deployability,integrat,integration,39030,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:40099,Deployability,integrat,integration,40099," Operation Class ;  CAddPolicyMatrix addition policy ;  CAddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  CAssignStructure to assign from an expression based to general matrix to general matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Dummy Structure which flags an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthos",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44326,Deployability,integrat,integration,44326,ary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the nu,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44400,Deployability,integrat,integration,44400,to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ; ,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:45724,Deployability,integrat,integration,45724,"rGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimiz",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:46187,Deployability,integrat,integration,46187,"DerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for i",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52374,Deployability,integrat,integration,52374,"ble) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from R",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52443,Deployability,integrat,integration,52443,"tation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParame",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52519,Deployability,integrat,integration,52519,"nterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52615,Deployability,integrat,integration,52615,"GradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52964,Deployability,configurat,configuration,52964,"ons It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method Param",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:57388,Deployability,integrat,integration,57388," or limited variables (support both double and single bounds) The class manages the passed function pointer ;  CMinimTransformVariableMinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdap",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65216,Deployability,integrat,integration,65216,"in Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65373,Deployability,integrat,integration,65373,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65468,Deployability,integrat,integrator,65468,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65597,Deployability,integrat,integration,65597,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65685,Deployability,integrat,integration,65685,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65859,Deployability,integrat,integration,65859,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:72912,Deployability,release,release,72912,"inimumError keeps the inv ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFuncti",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:76554,Deployability,release,release,76554,"rameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParam",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:87277,Deployability,configurat,configuration,87277," CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImpl",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:17564,Energy Efficiency,allocate,allocated,17564,"tension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placeholder that is put in the collection of custom columns in place of a RCustomColumn that will be just-in-time compiled ;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code ;  ►CRLoopManagerThe head node of a RDF computation graph ;  CTCallback;  CTOneTimeCallback;  CRNodeBaseBase class for non-leaf nodes of the computational graph ;  CRRange;  CRRangeBase;  ►NVecOps;  ►CRAdoptAllocatorRAdoptAllocator can provide a view on already allocated memory ;  Crebind;  ►CRAdoptAllocator< bool >;  Crebind;  C__integer_sequence;  C__make;  C__make< 0 >;  C__make< 1 >;  C__make< 2 >;  C__make< 3 >;  C__make< 4 >;  C__make< 5 >;  C__make< 6 >;  C__make< 7 >;  C__parity;  ►C__parity< 0 >;  C__pmake;  ►C__parity< 1 >;  C__pmake;  ►C__parity< 2 >;  C__pmake;  ►C__parity< 3 >;  C__pmake;  ►C__parity< 4 >;  C__pmake;  ►C__parity< 5 >;  C__pmake;  ►C__parity< 6 >;  C__pmake;  ►C__parity< 7 >;  C__pmake;  C__repeat;  C__repeat< __integer_sequence< _Tp, _Np.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:20450,Energy Efficiency,adapt,adaptater,20450," to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< Bool_t, A > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t, A > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CRArgsMenuItem;  CRCheckedMenuItem;  CRHistBinIterIterates over the bins of a RHist or RHistImpl ;  CRHistBinPtrPoints to a histogram bin (or actually a RHistBinRef) ;  CRHistBinRefRepresents a bin reference ;  CRHistBinStatConst view on a bin's statistical data ;  CRHistDataA RHistImplBase's data, provides accessors to all its statistics ;  CRHistImpl;  CRHistImplBaseInterface class for RHistImpl ;  CRHistImplPrecisionAgnosticBaseBase class for RHistImplBase that abstracts out the histogram's PRECISION ;  CRMenuArgument;  CRMenuItemClass contains info for producing menu item on the JS side ;  ►NHi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:39010,Energy Efficiency,adapt,adaptive,39010,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:45436,Energy Efficiency,adapt,adapting,45436,"ementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:46349,Energy Efficiency,adapt,adapting,46349,"lgorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivat",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:46786,Energy Efficiency,adapt,adapting,46786,"rpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL Mul",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:47724,Energy Efficiency,adapt,adapting,47724,"ization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEn",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:54138,Energy Efficiency,reduce,reduces,54138," is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  CKahanSumThe Kahan compensate summation algorithm significantly reduces the numerical error in the total obtained by adding a sequence of finite precision floating point numbers ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLib;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric ma",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:61125,Energy Efficiency,energy,energy,61125,"o times the expression) Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPolar2DClass describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) ;  CPolar3DClass describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) ;  CPolynomialParametric Function class describing polynomials of order n ;  CPositionVector2DClass describing a generic position vector (point) in 2 dimensions ;  CPositionVector3DClass describing a generic position vector (point) in 3 dimensions ;  CPtEtaPhiE4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+) ;  CPtEtaPhiM4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+) ;  CPxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E) ;  CPxPyPzM4DClass describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M) ;  CQuasiRandomUser class for MathMore random numbers template on the Engine type ;  CQuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k) ;  CRandomDocumentation for the Random class ;  CRandomFunctions;  CRandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library ;  CRandomFunctionsImplDefinition of the generic impelmentation class for the RandomFunctions ;  CRandomFunctionsImpl< TRandomEngine >Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions ;  CRetrieveMatrixStructure for getting sub matrices We have different cases according to the matrix repres",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:61231,Energy Efficiency,energy,energy,61231," in op: A += A * B ) ;  CPolar2DClass describing a polar 2D coordinate system based on r and phi Phi is restricted to be in the range [-PI,PI) ;  CPolar3DClass describing a polar coordinate system based on r, theta and phi Phi is restricted to be in the range [-PI,PI) ;  CPolynomialParametric Function class describing polynomials of order n ;  CPositionVector2DClass describing a generic position vector (point) in 2 dimensions ;  CPositionVector3DClass describing a generic position vector (point) in 3 dimensions ;  CPtEtaPhiE4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and E (or rho, phi, eta , T) The metric used is (-,-,-,+) ;  CPtEtaPhiM4DClass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+) ;  CPxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E) ;  CPxPyPzM4DClass describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M) ;  CQuasiRandomUser class for MathMore random numbers template on the Engine type ;  CQuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k) ;  CRandomDocumentation for the Random class ;  CRandomFunctions;  CRandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library ;  CRandomFunctionsImplDefinition of the generic impelmentation class for the RandomFunctions ;  CRandomFunctionsImpl< TRandomEngine >Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions ;  CRetrieveMatrixStructure for getting sub matrices We have different cases according to the matrix representations ;  CRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CRetrieveM",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:69402,Energy Efficiency,adapt,adapting,69402," CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:69594,Energy Efficiency,adapt,adapting,69594,"ternal (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit cal",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:70151,Energy Efficiency,adapt,adapting,70151,"edMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:73403,Energy Efficiency,reduce,reduce,73403,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:7458,Integrability,message,messages,7458,"3_numintcache;  ►NRgl;  ►NFgt;  CTKDEAdapter;  ►NMc;  CTCell;  CTDefaultSplitter;  CTF3Adapter;  CTF3EdgeSplitter;  CTGridGeometry;  CTH3Adapter;  CTIsoMesh;  CTMeshBuilder;  CTSlice;  CTSourceAdapterSelector;  CTSourceAdapterSelector< TF3 >;  CTSourceAdapterSelector< TH3C >;  CTSourceAdapterSelector< TH3D >;  CTSourceAdapterSelector< TH3F >;  CTSourceAdapterSelector< TH3I >;  CTSourceAdapterSelector< TH3S >;  CTSourceAdapterSelector< TKDEFGT >;  CTSplitterSelector;  CTSplitterSelector< TF3, V >;  CTSplitterSelector< TH3C, V >;  CTSplitterSelector< TH3D, V >;  CTSplitterSelector< TH3F, V >;  CTSplitterSelector< TH3I, V >;  CTSplitterSelector< TH3S, V >;  CTSplitterSelector< TKDEFGT, V >;  ►NPad;  CBoundingRect;  CFillAttribSet;  CGLLimits;  CLineAttribSet;  CMarkerPainter;  CMeshPatch_t;  COffScreenDevice;  CPolygonStippleSet;  CTesselator;  CPlotTranslation;  CTGuardBase;  CTOneArgGuard;  CTTwoArgsGuard;  NRooFit;  NRooFitShortHand;  ►NRooHelpers;  CHijackMessageStreamHijacks all messages with given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  NRooLinkedListImplDetails;  NRooSimultaneousAux;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  NConstraint;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal cl",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:7563,Integrability,message,message,7563,"Splitter;  CTGridGeometry;  CTH3Adapter;  CTIsoMesh;  CTMeshBuilder;  CTSlice;  CTSourceAdapterSelector;  CTSourceAdapterSelector< TF3 >;  CTSourceAdapterSelector< TH3C >;  CTSourceAdapterSelector< TH3D >;  CTSourceAdapterSelector< TH3F >;  CTSourceAdapterSelector< TH3I >;  CTSourceAdapterSelector< TH3S >;  CTSourceAdapterSelector< TKDEFGT >;  CTSplitterSelector;  CTSplitterSelector< TF3, V >;  CTSplitterSelector< TH3C, V >;  CTSplitterSelector< TH3D, V >;  CTSplitterSelector< TH3F, V >;  CTSplitterSelector< TH3I, V >;  CTSplitterSelector< TH3S, V >;  CTSplitterSelector< TKDEFGT, V >;  ►NPad;  CBoundingRect;  CFillAttribSet;  CGLLimits;  CLineAttribSet;  CMarkerPainter;  CMeshPatch_t;  COffScreenDevice;  CPolygonStippleSet;  CTesselator;  CPlotTranslation;  CTGuardBase;  CTOneArgGuard;  CTTwoArgsGuard;  NRooFit;  NRooFitShortHand;  ►NRooHelpers;  CHijackMessageStreamHijacks all messages with given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  NRooLinkedListImplDetails;  NRooSimultaneousAux;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  NConstraint;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:8467,Integrability,wrap,wrapping,8467," given level and topic (and optionally object name) while alive ;  CMakeVerboseSwitches the message service to verbose while the instance alive ;  NRooLinkedListImplDetails;  NRooSimultaneousAux;  ►NRooStats@(#)root/roostats:$Id$ Author: George Lewis, Kyle Cranmer ;  ►NHistFactory;  NConstraint;  CAsimovTODO Here, we are missing some documentation ;  CChannelThis class encapsulates all information for the statistical interpretation of one experiment ;  CConfigParserTODO Add documentation ;  CData;  ►CEstimateSummary;  CNormFactor;  CShapeSys;  CFlexibleInterpVar;  Chf_exc;  CHistFactoryNavigation;  CHistFactorySimultaneousRooSimultaneous facilitates simultaneous fitting of multiple PDFs to subsets of a given dataset ;  CHistoFactorConfiguration for an unconstrained, coherent shape variation of affected samples ;  CHistoSysConfiguration for a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberC",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:9961,Integrability,interface,interface,9961,"rlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  C",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10137,Integrability,interface,interface,10137,"torUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10182,Integrability,interface,interface,10182,"cted histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10835,Integrability,interface,interface,10835,"ty in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInve",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:11267,Integrability,interface,interface,11267,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12215,Integrability,interface,interface,12215,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12380,Integrability,interface,interface,12380,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12840,Integrability,integrat,integrate,12840,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13010,Integrability,interface,interface,13010,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13335,Integrability,interface,interface,13335,"mentation of the RooStats::ConfInterval interface ;  CLikelihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  C",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13711,Integrability,interface,interface,13711,"CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular pa",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14024,Integrability,interface,interface,14024,"ntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14146,Integrability,interface,interface,14146,"is class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14242,Integrability,interface,interface,14242," Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling di",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14451,Integrability,interface,interface,14451," CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (cho",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14643,Integrability,interface,interface,14643,"ruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14857,Integrability,interface,interface,14857,toryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics ,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15565,Integrability,interface,interface,15565,tStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood u,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15791,Integrability,interface,interface,15791,of and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBa,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15949,Integrability,interface,interface,15949," ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placehol",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:16220,Integrability,interface,interface,16220,"ly holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placeholder that is put in the collection of custom columns in place of a RCustomColumn that will be just-in-time compiled ;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:16408,Integrability,interface,interface,16408,"space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placeholder that is put in the collection of custom columns in place of a RCustomColumn that will be just-in-time compiled ;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code ;  ►CRLoopManagerThe head node of a RDF computation graph ;  CTCallback;  CTOneTimeCallback;  CRNodeBaseBase cl",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:16849,Integrability,wrap,wrapper,16849,"atistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placeholder that is put in the collection of custom columns in place of a RCustomColumn that will be just-in-time compiled ;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code ;  ►CRLoopManagerThe head node of a RDF computation graph ;  CTCallback;  CTOneTimeCallback;  CRNodeBaseBase class for non-leaf nodes of the computational graph ;  CRRange;  CRRangeBase;  ►NVecOps;  ►CRAdoptAllocatorRAdoptAllocator can provide a view on already allocated memory ;  Crebind;  ►CRAdoptAllocator< bool >;  Crebind;  C__integer_sequence;  C__make;  C__make< 0 >;  C__make< 1 >;  C__make< 2 >;  C__make< 3 >;  C__make< 4 >;  C__make< 5 >;  C__make< 6 >;  C__make< 7 >;  C__parity;  ►C__parity< 0 >;  C__pmake;  ►C__parity< 1 >;  C__pmake; ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:17088,Integrability,wrap,wrapper,17088,"tension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA wrapper around a concrete RCustomColumn, which forwards all calls to it RJittedCustomColumn is a placeholder that is put in the collection of custom columns in place of a RCustomColumn that will be just-in-time compiled ;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code ;  ►CRLoopManagerThe head node of a RDF computation graph ;  CTCallback;  CTOneTimeCallback;  CRNodeBaseBase class for non-leaf nodes of the computational graph ;  CRRange;  CRRangeBase;  ►NVecOps;  ►CRAdoptAllocatorRAdoptAllocator can provide a view on already allocated memory ;  Crebind;  ►CRAdoptAllocator< bool >;  Crebind;  C__integer_sequence;  C__make;  C__make< 0 >;  C__make< 1 >;  C__make< 2 >;  C__make< 3 >;  C__make< 4 >;  C__make< 5 >;  C__make< 6 >;  C__make< 7 >;  C__parity;  ►C__parity< 0 >;  C__pmake;  ►C__parity< 1 >;  C__pmake;  ►C__parity< 2 >;  C__pmake;  ►C__parity< 3 >;  C__pmake;  ►C__parity< 4 >;  C__pmake;  ►C__parity< 5 >;  C__pmake;  ►C__parity< 6 >;  C__pmake;  ►C__parity< 7 >;  C__pmake;  C__repeat;  C__repeat< __integer_sequence< _Tp, _Np.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:22474,Integrability,interface,interface,22474,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:22557,Integrability,interface,interface,22557,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:24080,Integrability,synchroniz,synchronization,24080,"uidistantAxis with equidistant bin borders ;  CRAxisGrowAn axis that can extend its range, keeping the number of its bins unchanged ;  CRAxisIrregularAn axis with non-equidistant bins (also known as ""variable binning"") ;  CRAxisLabelsA RAxisGrow that has a label assigned to each bin and a bin width of 1 ;  CRAxisViewCommon view on a RAxis, no matter what its kind ;  CRCanvasA window's topmost RPad ;  CRDrawableBase class for drawable entities: objects that can be painted on a RPad ;  CRDrawableBase;  ►CRFrameHolds a user coordinate system with a palette ;  CDrawingOpts;  CRHistHistogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION ;  CRHist< DIMENSIONS, PRECISION >RHist with no STAT parameter uses RHistStatContent by default ;  CRHistBufferedFillBuffers calls to Fill() ;  CRHistConcurrentFillerBuffers a thread's Fill calls and submits them to the RHistConcurrentFillManager ;  CRHistConcurrentFillManagerManages the synchronization of calls to FillN() ;  ►CRHistDataMomentUncertFor now do as RH1: calculate first (xw) and second (x^2w) moment ;  CRBinStatNo-op; this class does not provide per-bin statistics ;  CRHistDrawable;  CRHistDrawableBase;  CRHistDrawingOpts;  CRHistDrawingOpts< 1 >Drawing options for a 1D histogram ;  CRHistDrawingOpts< 2 >Drawing options for a 2D histogram ;  CRHistDrawingOpts< 3 >Drawing options for a 3D histogram ;  ►CRHistStatContentBasic histogram statistics, keeping track of the bin content and the total number of calls to Fill() ;  CRBinStatModifying view on a RHistStatContent for a given bin ;  CRConstBinStatConst view on a RHistStatContent for a given bin ;  ►CRHistStatRuntimeInterface implementing a pure virtual functions DoFill(), DoFillN() ;  CRBinStatNo-op; this class does not provide per-bin statistics ;  ►CRHistStatTotalSumOfSquaredWeightsKeeps track of the histogram's total sum of squared weights ;  CRBinStatNo-op; this class does not provide per-bin statistics ;  ►C",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:27479,Integrability,wrap,wrap,27479," scaling a RPadLength ;  CRPadUserAxisBase;  CTBufferMergerTBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file ;  CTBufferMergerFile;  ►CTDirectoryKey/value store of objects ;  CToContentType;  CTDirectoryTypeMismatchObjects of this class are thrown to signal that the value known under the given name ;  CTDirectoryUnknownKeyObjects of this class are thrown to signal that no key with that name exists ;  ►CTFileA ROOT file ;  COptions_tOptions for TFile construction ;  CTFilePtrPoints to an object that stores or reads objects in ROOT's binary format ;  CTFitResult;  CTFunction;  CTFutureA TFuture class. It can wrap an std::future ;  CTLogDiagCounterObject to count the number of warnings and errors emitted by a section of code, after construction of this type ;  CTLogEntryA diagnostic, emitted by the TLogManager upon destruction of the TLogEntry ;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManagerA TLogHandler that multiplexes diagnostics to different client TLogHandlers ;  CTTaskGroupA class to manage the asynchronous execution of work items ;  ►NFitNamespace for the fitting classes ;  ►NFitUtilNamespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  CEvaluate;  CIntegralEvaluator;  CLikelihoodAux;  CLikelihoodAux< double >;  NHFitInterface;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRan",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:31055,Integrability,wrap,wrapper,31055,"nDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  NGLTutorials;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NRDF;  ►NGraphDrawing;  CGraphCreatorHelper;  CGraphNode;  CDisplayHelper;  CPassAsVecHelper;  CPassAsVecHelper< std::index_sequence< N... >, T, F >;  CRActionAn action node in a RDF computation graph ;  CRAction< SnapshotHelper< ColTypes... >, PrevDataFrame, ROOT::TypeTraits::TypeList< ColTypes... > >;  CRAction< SnapshotHelperMT< ColTypes... >, PrevDataFrame, ROOT::TypeTraits::TypeList< ColTypes... > >;  CRActionBase;  CRActionCRTPUnused, not instantiatable. Only the partial specialization RActionCRTP<RAction<...>> can be used ;  CRActionCRTP< RAction< Helper, PrevDataFrame, ColumnTypes_t > >A common template base class for all RActions ;  CRBookedCustomColumnsEncapsulates the columns defined by the user ;  CRDisplayElementHelper class to let Display print compact tabular representations of the events ;  CRJittedAction;  CRSlotStackThis is an helper class to allow to pick a slot resorting to a map indexed by thread ids ;  CRTypeErasedColumnValueA type-erasing wrapper around RColumnValue ;  CSnapshotHelper;  CSnapshotHelperMT;  CTRDFValueTuple;  CTRDFValueTuple< TypeList< BranchTypes... > >;  CTReaderValueOrArrayChoose between TTreeReader{Array,Value} depending on whether the branch type T is a RVec<T> or any other type (respectively) ;  CTReaderValueOrArray< RVec< T > >;  ►NSHA256;  Csha256_t;  ►NTDS;  CTPointerHolderMother class of TTypedPointerHolder ;  CTTypedPointerHolderClass to wrap a pointer and delete the memory associated to it correctly ;  ►NTThreadedObjectUtils;  CClonerReturn a copy of the object or a ""Clone"" if the copy constructor is not implemented ;  CCloner< T, false >;  CDetacher;  CDetacher< T, true >;  CDirCreator;  CDirCreator< T, true >;  ►NVecOps;  CREmplaceBackHelper;  CREmplaceBackHelper< std::vector< bool >, Args... >;  CClassDefGenerateInitInstanceLoca",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:31250,Integrability,depend,depending,31250,"Unused, not instantiatable. Only the partial specialization RActionCRTP<RAction<...>> can be used ;  CRActionCRTP< RAction< Helper, PrevDataFrame, ColumnTypes_t > >A common template base class for all RActions ;  CRBookedCustomColumnsEncapsulates the columns defined by the user ;  CRDisplayElementHelper class to let Display print compact tabular representations of the events ;  CRJittedAction;  CRSlotStackThis is an helper class to allow to pick a slot resorting to a map indexed by thread ids ;  CRTypeErasedColumnValueA type-erasing wrapper around RColumnValue ;  CSnapshotHelper;  CSnapshotHelperMT;  CTRDFValueTuple;  CTRDFValueTuple< TypeList< BranchTypes... > >;  CTReaderValueOrArrayChoose between TTreeReader{Array,Value} depending on whether the branch type T is a RVec<T> or any other type (respectively) ;  CTReaderValueOrArray< RVec< T > >;  ►NSHA256;  Csha256_t;  ►NTDS;  CTPointerHolderMother class of TTypedPointerHolder ;  CTTypedPointerHolderClass to wrap a pointer and delete the memory associated to it correctly ;  ►NTThreadedObjectUtils;  CClonerReturn a copy of the object or a ""Clone"" if the copy constructor is not implemented ;  CCloner< T, false >;  CDetacher;  CDetacher< T, true >;  CDirCreator;  CDirCreator< T, true >;  ►NVecOps;  CREmplaceBackHelper;  CREmplaceBackHelper< std::vector< bool >, Args... >;  CClassDefGenerateInitInstanceLocalInjector;  CEntryClusterA cluster of entries ;  CFriendInfo;  CGetFunctorType;  CGetFunctorType< T(F::*)(const T *, const double *) const >;  CGetFunctorType< T(F::*)(const T *, const double *)>;  CGetFunctorType< T(F::*)(T *, double *) const >;  CGetFunctorType< T(F::*)(T *, double *)>;  CInterpreterMutexRegistrationRAII;  ►CRConcurrentHashCollThis class is a TS set of unsigned set ;  CHashValue;  CRecurseCounts;  CTArrayCharProxy;  CTArrayProxy;  CTArrayType;  CTArrayType< T, 0 >;  CTAtomicPointerHelper class to manage atomic pointers ;  CTBranchCacheInfo;  CTBranchDescriptor;  CTBranchIMTHelper;  CTBranchProxyClassD",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:31488,Integrability,wrap,wrap,31488,"Unused, not instantiatable. Only the partial specialization RActionCRTP<RAction<...>> can be used ;  CRActionCRTP< RAction< Helper, PrevDataFrame, ColumnTypes_t > >A common template base class for all RActions ;  CRBookedCustomColumnsEncapsulates the columns defined by the user ;  CRDisplayElementHelper class to let Display print compact tabular representations of the events ;  CRJittedAction;  CRSlotStackThis is an helper class to allow to pick a slot resorting to a map indexed by thread ids ;  CRTypeErasedColumnValueA type-erasing wrapper around RColumnValue ;  CSnapshotHelper;  CSnapshotHelperMT;  CTRDFValueTuple;  CTRDFValueTuple< TypeList< BranchTypes... > >;  CTReaderValueOrArrayChoose between TTreeReader{Array,Value} depending on whether the branch type T is a RVec<T> or any other type (respectively) ;  CTReaderValueOrArray< RVec< T > >;  ►NSHA256;  Csha256_t;  ►NTDS;  CTPointerHolderMother class of TTypedPointerHolder ;  CTTypedPointerHolderClass to wrap a pointer and delete the memory associated to it correctly ;  ►NTThreadedObjectUtils;  CClonerReturn a copy of the object or a ""Clone"" if the copy constructor is not implemented ;  CCloner< T, false >;  CDetacher;  CDetacher< T, true >;  CDirCreator;  CDirCreator< T, true >;  ►NVecOps;  CREmplaceBackHelper;  CREmplaceBackHelper< std::vector< bool >, Args... >;  CClassDefGenerateInitInstanceLocalInjector;  CEntryClusterA cluster of entries ;  CFriendInfo;  CGetFunctorType;  CGetFunctorType< T(F::*)(const T *, const double *) const >;  CGetFunctorType< T(F::*)(const T *, const double *)>;  CGetFunctorType< T(F::*)(T *, double *) const >;  CGetFunctorType< T(F::*)(T *, double *)>;  CInterpreterMutexRegistrationRAII;  ►CRConcurrentHashCollThis class is a TS set of unsigned set ;  CHashValue;  CRecurseCounts;  CTArrayCharProxy;  CTArrayProxy;  CTArrayType;  CTArrayType< T, 0 >;  CTAtomicPointerHelper class to manage atomic pointers ;  CTBranchCacheInfo;  CTBranchDescriptor;  CTBranchIMTHelper;  CTBranchProxyClassD",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:39030,Integrability,integrat,integration,39030,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:40099,Integrability,integrat,integration,40099," Operation Class ;  CAddPolicyMatrix addition policy ;  CAddPolicy< T, D1, D2, MatRepSym< T, D1 >, MatRepSym< T, D1 > >;  CAssignStructure to assign from an expression based to general matrix to general matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Dummy Structure which flags an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthos",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:40387,Integrability,interface,interface,40387,"tructure which flags an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix ;  CBoostXClass representing a Lorentz Boost along the X axis, by beta ;  CBoostYClass representing a Lorentz Boost along the Y axis, by beta ;  CBoostZClass representing a Lorentz Boost along the Z axis, by beta ;  CBrentMinimizer1DUser class for performing function mi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:40405,Integrability,interface,interface,40405,"gs an error to avoid assigment from expression based on a general matrix to a symmetric matrix ;  CAssign< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Structure to assign from an expression based to symmetric matrix to symmetric matrix ;  CAssignItrStructure for assignment to a general matrix from iterator ;  CAssignItr< T, D1, D2, MatRepSym< T, D1 > >Specialized structure for assignment to a symmetrix matrix from iterator ;  CAssignSymForce Expression evaluation from general to symmetric ;  CAxisAngleAxisAngle class describing rotation represented with direction axis (3D Vector) and an angle of rotation around that axis ;  CBaseIntegratorOptionsBase class for Numerical integration options common in 1D and multi-dimension This is an internal class and is not supposed to be instantiated by the user ;  CBasicFitMethodFunctionFitMethodFunction class Interface for objective functions (like chi2 and likelihood used in the fit) In addition to normal function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix ;  CBoostXClass representing a Lorentz Boost along the X axis, by beta ;  CBoostYClass representing a Lorentz Boost along the Y axis, by beta ;  CBoostZClass representing a Lorentz Boost along the Z axis, by beta ;  CBrentMinimizer1DUser class for performing function minimization ;  CBre",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:43420,Integrability,interface,interfaces,43420,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44125,Integrability,wrap,wrapping,44125,se) Operation Class ;  CEulerAnglesEulerAngles class describing rotation as three angles (Euler Angles) ;  CEvaluatorOneDim;  CEvaluatorOneDim< const ROOT::Math::IParamMultiFunction & >;  CExpr;  CFabsUnary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  C,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44326,Integrability,integrat,integration,44326,ary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the nu,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44400,Integrability,integrat,integration,44400,to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ; ,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:45538,Integrability,wrap,wrap,45538,"airs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim functio",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:45724,Integrability,integrat,integration,45724,"rGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimiz",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:46187,Integrability,integrat,integration,46187,"DerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for i",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:48457,Integrability,wrap,wrap,48457,"s algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator ;  CGSLRngCMRGCombined multiple recursive generator (L'Ecuyer) see here ;  CGSLRngGFSR4Lagged Fibonacci generator by Ziff see here ;  CGSLRngMinStdMINSTD generator (Park and Miller) see here ;  CGSLRngMixMaxMixMax generator based on ROOT::Math::MixMaxEngine of N=240 ;  CGSLRngMRG5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ;  CGSLRngMTMersenne-Twister generator gsl_rng_mt19937 from here ;  CGSLRngRandBSD rand() generator gsl_rmg_rand from here ;  CGSLRngRanLuxOld Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 w",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:50305,Integrability,wrap,wrap,50305,"generator gsl_rmg_rand from here ;  CGSLRngRanLuxOld Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ;  CGSLRngRanLuxD1Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ;  CGSLRngRanLuxD2Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ;  CGSLRngRanLuxS1Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ;  CGSLRngRanLuxS2Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ;  CGSLRngRanMarRANMAR generator see here ;  CGSLRngROOTWrapper;  CGSLRngTausTausworthe generator by L'Ecuyer see here ;  CGSLRngWrapperGSLRngWrapper class to wrap gsl_rng structure ;  CGSLRootFdFSolverRoot-Finder with derivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimens",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:51768,Integrability,interface,interface,51768,"CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:51919,Integrability,interface,interface,51919,"ass for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52374,Integrability,integrat,integration,52374,"ble) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from R",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52443,Integrability,integrat,integration,52443,"tation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParame",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52519,Integrability,integrat,integration,52519,"nterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52615,Integrability,integrat,integration,52615,"GradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52941,Integrability,interface,interface,52941,"or one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the paramet",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:53062,Integrability,interface,interface,53062,"evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:53284,Integrability,interface,interface,53284,"-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  CKahanSumThe Kahan compensate summation algorithm significantly reduces the numerical error in the total obtained by adding a sequence of finite precision floating point numbers ;  ►CKDTree;  CBaseNode;  CBinNode;  ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:54946,Integrability,wrap,wrapper,54946," parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  CKahanSumThe Kahan compensate summation algorithm significantly reduces the numerical error in the total obtained by adding a sequence of finite precision floating point numbers ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLib;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatrixMulOpClass for Matrix-Matrix multiplication ;  CMemFunHandlerFunctor Handler to Wrap pointers to member functions The member function type must be (XXX means any name is allowed) : double XXX ( double x) for 1D functions and double XXXX (const double *x) for multi-dimensional functions ;  CMemGradFunHandlerFunctor Handler to Wrap pointers to member functions for the evaluation of the function and the gradient ;  CMersenneTwisterEngineRandom number generator class based on M ;  Cmeta_col_dot;  Cmeta_col_dot< 0 >;  Cmeta_dot;  Cmeta_dot< 0 >;  Cmeta_mag;  Cmeta_mag< 0 >;  Cmeta_matrix_dot;  Cmeta_matrix_dot< 0 >;  Cmeta_row_dot;  Cmeta_row_dot< 0 >;  CMinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:55871,Integrability,interface,interface,55871," parameters, via the method ParameterGradient ;  CIRootFinderMethodInterface for finding function roots of one-dimensional functions ;  CKahanSumThe Kahan compensate summation algorithm significantly reduces the numerical error in the total obtained by adding a sequence of finite precision floating point numbers ;  ►CKDTree;  CBaseNode;  CBinNode;  CComparePoints;  CCut;  CHeadNode;  Citerator;  CSplitNode;  CTerminalNode;  CKelvinFunctionsThis class calculates the Kelvin functions Ber(x), Bei(x), Ker(x), Kei(x), and their first derivatives ;  CLCGEngine;  CLocalCoordinateSystemTagTag for identifying vectors based on a local coordinate system ;  CLorentzRotationLorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix ;  CLorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part ;  CLSResidualFuncLSResidualFunc class description ;  CMathMoreLib;  CMatRepStdExpression wrapper class for Matrix objects ;  CMatRepSymMatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N ;  CMatrixMulOpClass for Matrix-Matrix multiplication ;  CMemFunHandlerFunctor Handler to Wrap pointers to member functions The member function type must be (XXX means any name is allowed) : double XXX ( double x) for 1D functions and double XXXX (const double *x) for multi-dimensional functions ;  CMemGradFunHandlerFunctor Handler to Wrap pointers to member functions for the evaluation of the function and the gradient ;  CMersenneTwisterEngineRandom number generator class based on M ;  Cmeta_col_dot;  Cmeta_col_dot< 0 >;  Cmeta_dot;  Cmeta_dot< 0 >;  Cmeta_mag;  Cmeta_mag< 0 >;  Cmeta_matrix_dot;  Cmeta_matrix_dot< 0 >;  Cmeta_row_dot;  Cmeta_row_dot< 0 >;  CMinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:57388,Integrability,integrat,integration,57388," or limited variables (support both double and single bounds) The class manages the passed function pointer ;  CMinimTransformVariableMinimTransformVariable class Contains meta information of the variables such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdap",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:57594,Integrability,wrap,wrap,57594,"les such as bounds, fix flags and deals with transformation of the variable The class does not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CPar",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:57681,Integrability,interface,interface,57681," not contain the values and the step size (error) of the variable This is an internal class used by the MinimTransformFunction class ;  CMinOpSubtraction Operation Class ;  CMinusUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass def",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:57861,Integrability,wrap,wrap,57861,"usUnary Minus Operation Class ;  CMinusEqualsEvaluate the expression performing a -= operation Need to check whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C func",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:57966,Integrability,interface,interface,57966," whether creating a temporary object with the expression result (like in op: A -= A * B ) ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplPara",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:58122,Integrability,wrap,wrap,58122,", D1, D2 > >Specialization for symmetrix -= general : NOT Allowed operation ;  CMinusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices ;  CMiserParametersStructures collecting parameters for MISER multidimensional integration ;  CMixMaxEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPl",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:58407,Integrability,wrap,wrap,58407,"xEngine;  CMixMaxEngineImpl;  CMixMaxEngineImpl< ROOT_MM_N >;  CMulOpMultiplication (element-wise) Operation Class ;  CMultiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:58529,Integrability,wrap,wrap,58529,"tiDimParamFunctionAdapterMultiDimParamFunctionAdapter class to wrap a one-dimensional parametric function in a multi dimensional parameteric function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiDimParamGradFunctionAdapterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParam",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:58811,Integrability,wrap,wrapping,58811,"pterMultiDimParamGradFunctionAdapter class to wrap a one-dimensional parametric gradient function in a multi dimensional parameteric gradient function interface This is used typically in fitting where internally the function is stored as multidimension ;  CMultiNumGradFunctionMultiNumGradFunction class to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += genera",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:61908,Integrability,interface,interface,61908,"ass describing a 4D cylindrical coordinate system using Pt , Phi, Eta and M (mass) The metric used is (-,-,-,+) ;  CPxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors stored as (Px, Py, Pz, E) ;  CPxPyPzM4DClass describing a 4D coordinate system or momentum-energy vectors stored as (Px, Py, Pz, M) ;  CQuasiRandomUser class for MathMore random numbers template on the Engine type ;  CQuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k) ;  CRandomDocumentation for the Random class ;  CRandomFunctions;  CRandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >Specialized implementation of the Random functions based on the GSL library ;  CRandomFunctionsImplDefinition of the generic impelmentation class for the RandomFunctions ;  CRandomFunctionsImpl< TRandomEngine >Implementation class for the RandomFunction for all the engined that derives from TRandomEngine class, which defines an interface which has TRandomEngine::Rndm() In this way we can have a common implementation for the RandomFunctions ;  CRetrieveMatrixStructure for getting sub matrices We have different cases according to the matrix representations ;  CRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CRetrieveMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CRichardsonDerivatorUser class for calculating the derivatives of a function ;  CRMinimizerRMinimizer class ;  CRootFinderUser Class to find the Root of one dimensional functions ;  CRotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix ;  CRotationXRotation class representing a 3D rotation about the X axis by the angle of rotation ;  CRotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation ;  CRotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation ;  CRotationZYXRotation class with the (3D) rota",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:63870,Integrability,wrap,wrap,63870,"ationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:63939,Integrability,interface,interface,63939,"ribing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile functio",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65023,Integrability,wrap,wrapper,65023,"in Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65216,Integrability,integrat,integration,65216,"in Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65373,Integrability,integrat,integration,65373,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65468,Integrability,integrat,integrator,65468,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65597,Integrability,integrat,integration,65597,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65685,Integrability,integrat,integration,65685,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65859,Integrability,integrat,integration,65859,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:65997,Integrability,wrap,wrap,65997,"ilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClass describing the Vavilov pdf ;  CVavilovAccurateQuantileClass describing the Vavilov quantile function ;  CVavilovFastClass describing a Vavilov distribution ;  CVecExprExpression wrapper class for Vector objects ;  CVectorMatrixColOpClass for Vector-Matrix multiplication ;  CVectorMatrixRowOp;  CVegasParametersStructures collecting parameters for VEGAS multidimensional integration FOr implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h ;  CVirtualIntegratorAbstract class for all numerical integration methods (1D and multi-dim) Interface defining the common methods for the numerical integrator classes of one and multi dimensions The derived class VirtualIntegratorOneDim defines the methods for one-dimensional integration ;  CVirtualIntegratorMultiDimInterface (abstract) class for multi numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLMCIntegrator ;  CVirtualIntegratorOneDimInterface (abstract) class for 1D numerical integration It must be implemented by the concrate Integrator classes like ROOT::Math::GSLIntegrator ;  CWrappedFunctionTemplate class to wrap any C++ callable object which takes one argument i.e ;  CWrappedMemFunctionTemplate class to wrap any member function of a class taking a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66095,Integrability,wrap,wrap,66095,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66187,Integrability,interface,interface,66187,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66281,Integrability,wrap,wrapped,66281,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66432,Integrability,wrap,wrap,66432,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66536,Integrability,interface,interface,66536,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66642,Integrability,interface,interface,66642,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66775,Integrability,wrap,wrap,66775,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:66888,Integrability,interface,interface-like,66888,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67044,Integrability,wrap,wrap,67044,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67131,Integrability,interface,interface-like,67131,"a double and returning a double in a 1D function interface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlge",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67305,Integrability,interface,interface,67305," WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumTy",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67387,Integrability,wrap,wrapper,67387,"  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSu",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67472,Integrability,wrap,wrapper,67472,"erator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnal",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:69384,Integrability,wrap,wrapped,69384,"cSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:69576,Integrability,wrap,wrapped,69576,"th internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the f",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:70133,Integrability,wrap,wrapped,70133,"izerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance m",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:72669,Integrability,interface,interface,72669,"n ;  CInitialGradientCalculatorClass to calculate an initial estimate of the gradient ;  CLASymMatrixClass describing a symmetric matrix of size n ;  CLAVector;  CMatrixInverse;  CMatrixInverse< vec, M, T >;  CMinimumBuilder;  ►CMinimumErrorMinimumError keeps the inv ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase inte",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:72986,Integrability,interface,interface,72986,"ef;  CMnNotPosDef;  CMinimumErrorUpdator;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficien",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:73670,Integrability,interface,interface,73670,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:75662,Integrability,interface,interface,75662,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:76332,Integrability,interface,interface,76332,"diagonal ;  CMnPrint;  CMnRefCountedPointer;  CMnReferenceCounter;  CMnScanAPI class for minimization using a scan method to find the minimum; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnSeedGeneratorConcrete implementation of the MinimumSeedGenerator interface; used within ModularFunctionMinimizer; ;  CMnSimplexAPI class for minimization using the Simplex method, which does not need and use the derivatives of the function, but only function values ;  CMnStrategyAPI class for defining three levels of strategies: low (0), medium (1), high (>=2); acts on: Migrad (behavioural), Minos (lowers strategy by 1 for Minos-own minimization), Hesse (iterations), Numerical2PDerivative (iterations) ;  CMnTiny;  CMnTraceObject;  CMnUserCovarianceClass containing the covariance matrix data represented as a vector of size n*(n+1)/2 Used to hide internal matrix representation to user ;  CMnUserFcnWrapper used by Minuit of FCN interface containing a reference to the transformation object ;  CMnUserParametersAPI class for the user interaction with the parameters; serves as input to the minimizer as well as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negativ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:79702,Integrability,interface,interface,79702,"meter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInside ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  NInternal;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRDisplayThis class is the textual representation of the content of a columnar dataset ;  CRInterfaceThe public interface to the RDataFrame federation of classes ;  CRLazyDSA RDataSource implementation which is built on top of result proxies ;  CRResultPtrSmart pointer for the return type of actions ;  CRRootDS;  CRSnapshotOptionsA collection of options to steer the creation of the dataset on file ;  ►CRSqliteDSRSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files ;  CValue_tUsed to hold a single ""cell"" of the SELECT query's result table.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:80021,Integrability,interface,interface,80021,"meter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOuterProduct;  ►NQuartz;  CCGAAStateGuard;  CCGStateGuard;  CTextLine;  ►NRNamespace associated R package for ROOT ;  Cclass_;  ►CTRDataFrameThis is a class to create DataFrames from ROOT to R ;  CBinding;  CTRFunctionExportThis is a class to pass functions from ROOT to R ;  CTRFunctionImportThis is a class to pass functions from ROOT to R ;  ►CTRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInside ;  CBinding;  CTRObjectThis is a class to get ROOT's objects from R's objects ;  ►NRDF;  NInternal;  CRArrowDSRDataFrame data source class to interface with Apache Arrow ;  CRCsvDSRDataFrame data source class for reading CSV files ;  CRCutFlowReport;  CRDataSourceRDataSource defines an API that RDataFrame can use to read arbitrary data formats ;  CRDisplayThis class is the textual representation of the content of a columnar dataset ;  CRInterfaceThe public interface to the RDataFrame federation of classes ;  CRLazyDSA RDataSource implementation which is built on top of result proxies ;  CRResultPtrSmart pointer for the return type of actions ;  CRRootDS;  CRSnapshotOptionsA collection of options to steer the creation of the dataset on file ;  ►CRSqliteDSRSqliteDS is an RDF data source implementation for SQL result sets from sqlite3 files ;  CValue_tUsed to hold a single ""cell"" of the SELECT query's result table.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:82069,Integrability,depend,depend,82069,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:82266,Integrability,interface,interface,82266,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:82379,Integrability,interface,interface,82379,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:82677,Integrability,interface,interface,82677,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:83087,Integrability,interface,interface,83087,"able named R__ZipMode which can be modified by a global function named R__SetZipMode ;  CEAlgorithm;  CEDefaults;  CELevel;  CRDataFrameROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< R",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:83130,Integrability,wrap,wrapper,83130,"d by a global function named R__SetZipMode ;  CEAlgorithm;  CEDefaults;  CELevel;  CRDataFrameROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashVa",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:83234,Integrability,interface,interface,83234,"aFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  Nsurfaces;  Ntbb;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:83385,Integrability,interface,interface,83385,"o execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  Nsurfaces;  Ntbb;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declaration into fReturnType fScopeName::fFunctionName<fFunctionTemplateArguments>(fFunctionParameters) ;  CTInterpreterLookupHelper;  CTSplitType;  ►Ntest;  Ctest; ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:88823,Integrability,interface,interface,88823,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:89509,Integrability,interface,interface,89509,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:92153,Integrability,interface,interface,92153,"stimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TMVA TMultiLayerPerceptron interface class ;  CMinuitFitter/Fitter using MINUIT ;  CMinuitWrapperWrapper around MINUIT ;  CMisClassificationErrorImplementation of the MisClassificationError as separation criterion ;  CMonitoring;  CMsgLoggerOstringstream derivative to redirect and format output ;  CNodeNode for the BinarySearch or Decision Trees ;  Cnull_t;  COptimizeConfigParameters;  COption;  COption< T * >;  COptionBaseClass for TMVA-option handling ;  ►COptionMapClass to storage options for the differents methods ;  CBinding;  CPDEFoamImplementation of PDEFoam ;  CPDEFoamCell;  CPDEFoamDecisionTreeThis PDEFoam variant acts like a decision tree and stores in every cell the discriminant ;  CPDEFoamDecisionTreeDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamDensityBaseThis is an abstract class, which provides an interface for a PDEFoam density estimator ;  CPDEFoamDiscriminantThis PDEFoam variant stores in every cell the discriminant ;  CPDEFoamDiscriminantDensityThis is a concrete implementation of ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:92967,Integrability,interface,interface,92967,"RuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TMVA TMultiLayerPerceptron interface class ;  CMinuitFitter/Fitter using MINUIT ;  CMinuitWrapperWrapper around MINUIT ;  CMisClassificationErrorImplementation of the MisClassificationError as separation criterion ;  CMonitoring;  CMsgLoggerOstringstream derivative to redirect and format output ;  CNodeNode for the BinarySearch or Decision Trees ;  Cnull_t;  COptimizeConfigParameters;  COption;  COption< T * >;  COptionBaseClass for TMVA-option handling ;  ►COptionMapClass to storage options for the differents methods ;  CBinding;  CPDEFoamImplementation of PDEFoam ;  CPDEFoamCell;  CPDEFoamDecisionTreeThis PDEFoam variant acts like a decision tree and stores in every cell the discriminant ;  CPDEFoamDecisionTreeDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamDensityBaseThis is an abstract class, which provides an interface for a PDEFoam density estimator ;  CPDEFoamDiscriminantThis PDEFoam variant stores in every cell the discriminant ;  CPDEFoamDiscriminantDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamEventThis PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights ;  CPDEFoamEventDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamKernelBaseThis class is the abstract kernel interface for PDEFoam ;  CPDEFoamKernelGaussThis PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function ;  CPDEFoamKernelLinNThis PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells ;  CPDEFoamKernelTrivialThis class is a trivial PDEFoam kernel estimator ;  CPDEFoamMultiTargetThis PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ;  CPDEFoamTargetThis PDEFoam variant",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:93413,Integrability,interface,interface,93413,"put ;  CNodeNode for the BinarySearch or Decision Trees ;  Cnull_t;  COptimizeConfigParameters;  COption;  COption< T * >;  COptionBaseClass for TMVA-option handling ;  ►COptionMapClass to storage options for the differents methods ;  CBinding;  CPDEFoamImplementation of PDEFoam ;  CPDEFoamCell;  CPDEFoamDecisionTreeThis PDEFoam variant acts like a decision tree and stores in every cell the discriminant ;  CPDEFoamDecisionTreeDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamDensityBaseThis is an abstract class, which provides an interface for a PDEFoam density estimator ;  CPDEFoamDiscriminantThis PDEFoam variant stores in every cell the discriminant ;  CPDEFoamDiscriminantDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamEventThis PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights ;  CPDEFoamEventDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamKernelBaseThis class is the abstract kernel interface for PDEFoam ;  CPDEFoamKernelGaussThis PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function ;  CPDEFoamKernelLinNThis PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells ;  CPDEFoamKernelTrivialThis class is a trivial PDEFoam kernel estimator ;  CPDEFoamMultiTargetThis PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ;  CPDEFoamTargetThis PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget ;  CPDEFoamTargetDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamVect;  CPDFPDF wrapper for histograms; uses user-defined spline interpolation ;  CPruningInfo;  CPyMethodBase;  ►CQuickMVAProbEstimator;  CEventInfo;  CRandomGenerator;  CRank;  CRankingRanking for variables in method (implementation) ;  CR",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:94193,Integrability,wrap,wrapper,94193,"riant stores in every cell the sum of event weights and the sum of the squared event weights ;  CPDEFoamEventDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamKernelBaseThis class is the abstract kernel interface for PDEFoam ;  CPDEFoamKernelGaussThis PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function ;  CPDEFoamKernelLinNThis PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells ;  CPDEFoamKernelTrivialThis class is a trivial PDEFoam kernel estimator ;  CPDEFoamMultiTargetThis PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ;  CPDEFoamTargetThis PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget ;  CPDEFoamTargetDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamVect;  CPDFPDF wrapper for histograms; uses user-defined spline interpolation ;  CPruningInfo;  CPyMethodBase;  ►CQuickMVAProbEstimator;  CEventInfo;  CRandomGenerator;  CRank;  CRankingRanking for variables in method (implementation) ;  CReaderServes to use the MVAs in a specific analysis context ;  CRegressionVarianceCalculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms ;  CResultsClass that is the base-class for a vector of result ;  CResultsClassificationClass that is the base-class for a vector of result ;  CResultsMulticlassClass which takes the results of a multiclass classification ;  CResultsRegressionClass that is the base-class for a vector of result ;  CRMethodBase;  CROCCalc;  CROCCurve;  CRootFinderRoot finding using Brents algorithm (translated from CERNLIB function RZERO) ;  CRuleImplementation of a rule ;  CRuleCutA class describing a 'rule cut' ;  CRuleEnsemble;  CRuleFitA class implementing various fits of rule ensembles ;  ►CRul",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:95455,Integrability,interface,interface,95455,"analysis context ;  CRegressionVarianceCalculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms ;  CResultsClass that is the base-class for a vector of result ;  CResultsClassificationClass that is the base-class for a vector of result ;  CResultsMulticlassClass which takes the results of a multiclass classification ;  CResultsRegressionClass that is the base-class for a vector of result ;  CRMethodBase;  CROCCalc;  CROCCurve;  CRootFinderRoot finding using Brents algorithm (translated from CERNLIB function RZERO) ;  CRuleImplementation of a rule ;  CRuleCutA class describing a 'rule cut' ;  CRuleEnsemble;  CRuleFitA class implementing various fits of rule ensembles ;  ►CRuleFitAPIJ Friedman's RuleFit method ;  CIntParms;  CRealParms;  CRuleFitParamsA class doing the actual fitting of a linear model using rules as base functions ;  CSdivSqrtSplusBImplementation of the SdivSqrtSplusB as separation criterion ;  CSeparationBaseAn interface to calculate the ""SeparationGain"" for different separation criteria used in various training algorithms ;  CSimulatedAnnealingBase implementation of simulated annealing fitting procedure ;  CSimulatedAnnealingFitterFitter using a Simulated Annealing Algorithm ;  CStatDialogBDT;  CStatDialogBDTReg;  CStatDialogMVAEffs;  CSVEventEvent class for Support Vector Machine ;  CSVKernelFunctionKernel for Support Vector Machine ;  CSVKernelMatrixKernel matrix for Support Vector Machine ;  CSVWorkingSetWorking class for Support Vector Machine ;  CTActivationInterface for TNeuron activation function classes ;  CTActivationChooserClass for easily choosing activation functions ;  CTActivationIdentityIdentity activation function for TNeuron ;  CTActivationRadialRadial basis activation function for ANN ;  CTActivationReLURectified Linear Unit activation function for TNeuron ;  CTActivationSigmoidSigmoid activation function for TNeuron ;  CTActivationTanhTanh activation function for ANN ;  CTimerT",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:97103,Integrability,rout,routines,97103,choosing activation functions ;  CTActivationIdentityIdentity activation function for TNeuron ;  CTActivationRadialRadial basis activation function for ANN ;  CTActivationReLURectified Linear Unit activation function for TNeuron ;  CTActivationSigmoidSigmoid activation function for TNeuron ;  CTActivationTanhTanh activation function for ANN ;  CTimerTiming information for training and evaluation of MVA methods ;  CTMVAGaussPair;  CTMVAGUI;  CTNeuronNeuron class used by TMVA artificial neural network methods ;  CTNeuronInputInterface for TNeuron input calculation classes ;  CTNeuronInputAbsTNeuron input calculator – calculates the sum of the absolute values of the weighted inputs ;  CTNeuronInputChooserClass for easily choosing neuron input functions ;  CTNeuronInputSqSumTNeuron input calculator – calculates the squared weighted sum of inputs ;  CTNeuronInputSumTNeuron input calculator – calculates the weighted sum of inputs ;  CToolsGlobal auxiliary applications and data treatment routines ;  ►CTransformationHandlerClass that contains all the data information ;  CVariableStat;  CTreeInfo;  CTSpline1Linear interpolation of TGraph ;  CTSpline2Quadratic interpolation of TGraph ;  CTSynapseSynapse class used by TMVA artificial neural network methods ;  CTTrainingSettingsAll of the options that can be specified in the training string ;  CTypesSingleton class for Global types used by TMVA ;  CVariableDecorrTransformLinear interpolation class ;  CVariableGaussTransformGaussian Transformation of input variables ;  CVariableIdentityTransformLinear interpolation class ;  CVariableImportance;  CVariableImportanceResult;  CVariableInfoClass for type info of MVA input variable ;  CVariableNormalizeTransformLinear interpolation class ;  CVariablePCATransformLinear interpolation class ;  CVariableRearrangeTransformRearrangement of input variables ;  CVariableTransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  Ntornado;  Ntree;  ►N,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:98329,Integrability,rout,routines,98329,ussPair;  CTMVAGUI;  CTNeuronNeuron class used by TMVA artificial neural network methods ;  CTNeuronInputInterface for TNeuron input calculation classes ;  CTNeuronInputAbsTNeuron input calculator – calculates the sum of the absolute values of the weighted inputs ;  CTNeuronInputChooserClass for easily choosing neuron input functions ;  CTNeuronInputSqSumTNeuron input calculator – calculates the squared weighted sum of inputs ;  CTNeuronInputSumTNeuron input calculator – calculates the weighted sum of inputs ;  CToolsGlobal auxiliary applications and data treatment routines ;  ►CTransformationHandlerClass that contains all the data information ;  CVariableStat;  CTreeInfo;  CTSpline1Linear interpolation of TGraph ;  CTSpline2Quadratic interpolation of TGraph ;  CTSynapseSynapse class used by TMVA artificial neural network methods ;  CTTrainingSettingsAll of the options that can be specified in the training string ;  CTypesSingleton class for Global types used by TMVA ;  CVariableDecorrTransformLinear interpolation class ;  CVariableGaussTransformGaussian Transformation of input variables ;  CVariableIdentityTransformLinear interpolation class ;  CVariableImportance;  CVariableImportanceResult;  CVariableInfoClass for type info of MVA input variable ;  CVariableNormalizeTransformLinear interpolation class ;  CVariablePCATransformLinear interpolation class ;  CVariableRearrangeTransformRearrangement of input variables ;  CVariableTransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  Ntornado;  Ntree;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  NtStudent;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nvo001_AdoptOrOwnMemory;  Nvo004_SortAndSelect;  Nvo005_Combinations;  ►Nwriter;  Cwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones.,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10537,Modifiability,config,configuration,10537,"Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10791,Modifiability,config,configuration,10791,"inCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the Hy",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13510,Modifiability,config,configuration,13510,"ovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTe",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14767,Modifiability,config,configuration,14767,tion ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTes,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:20450,Modifiability,adapt,adaptater,20450," to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< Bool_t, A > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t, A > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CRArgsMenuItem;  CRCheckedMenuItem;  CRHistBinIterIterates over the bins of a RHist or RHistImpl ;  CRHistBinPtrPoints to a histogram bin (or actually a RHistBinRef) ;  CRHistBinRefRepresents a bin reference ;  CRHistBinStatConst view on a bin's statistical data ;  CRHistDataA RHistImplBase's data, provides accessors to all its statistics ;  CRHistImpl;  CRHistImplBaseInterface class for RHistImpl ;  CRHistImplPrecisionAgnosticBaseBase class for RHistImplBase that abstracts out the histogram's PRECISION ;  CRMenuArgument;  CRMenuItemClass contains info for producing menu item on the JS side ;  ►NHi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:22930,Modifiability,config,configure,22930,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:23161,Modifiability,extend,extend,23161,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:23288,Modifiability,variab,variable,23288,"enerate RHist::fImpl from constructor arguments; recursion end ;  CRHistPainterBase;  CRPadHorizVertA 2D (horizontal and vertical) combination of RPadLengths ;  CRPadPainterAbstract interface for object painting on the pad/canvas ;  ►CRVirtualCanvasPainterAbstract interface for painting a canvas ;  CGenerator;  CTDirectoryEntry;  CTIndexIterIterates over an index; the REFERENCE is defined by the REFERENCE template parameter ;  ►CTUniWeakPtr;  CAccessorGives transparent access to the shared or unique pointer ;  ►CRAxisBaseHistogram axis base class ;  Cconst_iteratorRandom const_iterator through bins ;  ►CRAxisConfigObjects used to configure the different axis types ;  CGrow_tTag type signalling that an axis should be able to grow; used for calling the appropriate constructor ;  CRAxisEquidistantAxis with equidistant bin borders ;  CRAxisGrowAn axis that can extend its range, keeping the number of its bins unchanged ;  CRAxisIrregularAn axis with non-equidistant bins (also known as ""variable binning"") ;  CRAxisLabelsA RAxisGrow that has a label assigned to each bin and a bin width of 1 ;  CRAxisViewCommon view on a RAxis, no matter what its kind ;  CRCanvasA window's topmost RPad ;  CRDrawableBase class for drawable entities: objects that can be painted on a RPad ;  CRDrawableBase;  ►CRFrameHolds a user coordinate system with a palette ;  CDrawingOpts;  CRHistHistogram class for histograms with DIMENSIONS dimensions, where each bin count is stored by a value of type PRECISION ;  CRHist< DIMENSIONS, PRECISION >RHist with no STAT parameter uses RHistStatContent by default ;  CRHistBufferedFillBuffers calls to Fill() ;  CRHistConcurrentFillerBuffers a thread's Fill calls and submits them to the RHistConcurrentFillManager ;  CRHistConcurrentFillManagerManages the synchronization of calls to FillN() ;  ►CRHistDataMomentUncertFor now do as RH1: calculate first (xw) and second (x^2w) moment ;  CRBinStatNo-op; this class does not provide per-bin statistics ;  CRHistDrawable;  ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:28945,Modifiability,config,configuration,28945,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:39010,Modifiability,adapt,adaptive,39010,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:45436,Modifiability,adapt,adapting,45436,"ementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:46349,Modifiability,adapt,adapting,46349,"lgorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivat",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:46786,Modifiability,adapt,adapting,46786,"rpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL Mul",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:47724,Modifiability,adapt,adapting,47724,"ization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEn",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52964,Modifiability,config,configuration,52964,"ons It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient ;  CIParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method Param",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56082,Modifiability,plug-in,plug-in,56082,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56366,Modifiability,variab,variables,56366,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56406,Modifiability,variab,variables,56406,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56590,Modifiability,variab,variables,56590,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56663,Modifiability,variab,variable,56663,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56743,Modifiability,variab,variable,56743,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:63372,Modifiability,variab,variables,63372,"ion ;  CRMinimizerRMinimizer class ;  CRootFinderUser Class to find the Root of one dimensional functions ;  CRotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix ;  CRotationXRotation class representing a 3D rotation about the X axis by the angle of rotation ;  CRotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation ;  CRotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation ;  CRotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:63739,Modifiability,variab,variables,63739,"y the angle of rotation ;  CRotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation ;  CRotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vav",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:63838,Modifiability,variab,variables,63838,"the angle of rotation ;  CRotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle phi (yaw) about the Z axis, followed by a rotation of an angle theta (pitch) about the Y axis, followed by a third rotation of an angle psi (roll) about the X axis ;  CRowOffsetsStatic structure to keep the conversion from (i,j) to offsets in the storage data for a symmetric matrix ;  CSDeterminantDsfact ;  CSinVariableTransformationSin Transformation class for dealing with double bounded variables ;  CSInverterDsinv ;  CSkipFunction;  CSkipFunction< 0 >;  ►CSMatrixSMatrix: a generic fixed size D1 x D2 Matrix class ;  CSMatrixRow;  CSMatrixRow_const;  CSMatrixIdentity;  CSMatrixNoInit;  CSqrUnary Square Operation Class ;  CSqrtUnary Square Root Operation Class ;  CSqrtLowVariableTransformationSqrt Transformation class for dealing with lower bounded variables ;  CSqrtUpVariableTransformationSqrt Transformation class for dealing with upper bounded variables ;  CStdEngineClass to wrap engines fron the C++ standard random library in the ROOT Random interface ;  CStdEngineType;  CStdEngineType< std::knuth_b >;  CStdEngineType< std::minstd_rand >;  CStdEngineType< std::mt19937 >;  CStdEngineType< std::mt19937_64 >;  CStdEngineType< std::random_device >;  CStdEngineType< std::ranlux24 >;  CStdEngineType< std::ranlux48 >;  CStdRandomEngine;  CSVectorSVector: a generic fixed size Vector class ;  CTDataPoint;  CTDataPointN;  CTensorMulOpClass for Tensor Multiplication (outer product) of two vectors giving a matrix ;  CTRandomEngine;  CTransposeOpClass for Transpose Operations ;  CTranspPolicyMatrix transpose policy ;  CTranspPolicy< T, D1, D2, MatRepSym< T, D1 > >;  CUnaryOpUnaryOperation class A class representing unary operators in the parse tree ;  CVavilovBase class describing a Vavilov distribution ;  CVavilovAccurateClass describing a Vavilov distribution ;  CVavilovAccurateCdfClass describing the Vavilov cdf ;  CVavilovAccuratePdfClas",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67184,Modifiability,variab,variables,67184,"terface For example, if you have a class like: struct X { double Eval(double x); }; you can wrapped in the following way: WrappedMemFunction<X, double ( X::* ) (double) > f; ;  CWrappedMemMultiFunction;  CWrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-dimensional function interface ;  CWrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions to be used in the ROOT::Math numerical algorithm ;  CWrappedParamFunctionWrappedParamFunction class to wrap any multi-dimensional function pbject implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sy",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:69402,Modifiability,adapt,adapting,69402," CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:69594,Modifiability,adapt,adapting,69594,"ternal (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated minimum : Error matrix + dcovar + additional flags for quality and validity checks ;  CMnHesseFailed;  CMnInvertFailed;  CMnMadePosDef;  CMnNotPosDef;  CBasicMinimumParameters;  CBasicMinimumSeed;  CBasicMinimumState;  CBFGSErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CBFGSMinimizerType;  CCombinedMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit cal",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:70151,Modifiability,adapt,adapting,70151,"edMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:71509,Modifiability,inherit,inherit,71509,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:78116,Modifiability,evolve,evolve,78116,"and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization method ;  CBFGSType;  Cvec;  CVectorOu",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:82088,Modifiability,variab,variable,82088,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:86066,Modifiability,layers,layers,86066,"orithm (SGD) ;  CTAdadeltaAdadelta Optimizer class ;  CTAdagradAdagrad Optimizer class ;  CTAdamAdam Optimizer class ;  CTBatchTBatch ;  CTBatchIteratorTBatchIterator ;  CTCpuThe TCpu architecture class ;  ►CTCpuBufferTCpuBuffer ;  CTDestructor;  CTCpuMatrixThe TCpuMatrix class ;  CTCudaThe TCuda architecture class ;  ►CTCudaDeviceBufferTCudaDeviceBuffer ;  CTDestructor;  CTCudaDeviceReferenceTCudaDeviceReference ;  ►CTCudaHostBufferTCudaHostBuffer ;  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDataLoader< AData, TReference< AReal > >;  CTDeepNetGeneric Deep Neural Network class ;  CTDenseLayerGeneric layer class ;  CTDeviceTDevice ;  CTDLGradientDescent;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTReshapeLayer;  CTRMSPropRMSProp Optimizer class ;  CTSGDStochastic Batch Gradient Descent Optimizer class ;  CTSharedLayerLayer class width shared weight and bias layers ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTree",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:87277,Modifiability,config,configuration,87277," CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImpl",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:91257,Modifiability,variab,variables,91257,"es ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural network ;  CVARn2;  CMethodCompositeBaseVirtual base class for combining several TMVA method ;  CMethodCrossValidation;  CMethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements ;  CMethodDL;  ►CMethodDNNDeep Neural Network Implementation ;  CTTrainingSettings;  CMethodDTAnalysis of Boosted Decision Trees ;  CMethodFDAFunction discriminant analysis (FDA) ;  CMethodFisherFisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ;  CMethodHMatrixH-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TMVA TMultiLayerPerceptron interface class ;  CMinuitFitter/Fitter using MINUIT ;  CMinuitWrapperWrapper around MINUIT ;  CMisClassifica",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:91831,Modifiability,variab,variables,91831,"al Network Implementation ;  CTTrainingSettings;  CMethodDTAnalysis of Boosted Decision Trees ;  CMethodFDAFunction discriminant analysis (FDA) ;  CMethodFisherFisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ;  CMethodHMatrixH-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TMVA TMultiLayerPerceptron interface class ;  CMinuitFitter/Fitter using MINUIT ;  CMinuitWrapperWrapper around MINUIT ;  CMisClassificationErrorImplementation of the MisClassificationError as separation criterion ;  CMonitoring;  CMsgLoggerOstringstream derivative to redirect and format output ;  CNodeNode for the BinarySearch or Decision Trees ;  Cnull_t;  COptimizeConfigParameters;  COption;  COption< T * >;  COptionBaseClass for TMVA-option handling ;  ►COptionMapClass to storage options for the differents methods ;  CBinding;  CPDEFoamImplementation of PDEFoam ;  CPDEFoamCell;  CPDEFoamDecisionTreeThis PDEFoam variant acts like a decision tree and stores in every cell the discriminant ;  CPDEFoam",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:94376,Modifiability,variab,variables,94376,"is class is the abstract kernel interface for PDEFoam ;  CPDEFoamKernelGaussThis PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function ;  CPDEFoamKernelLinNThis PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells ;  CPDEFoamKernelTrivialThis class is a trivial PDEFoam kernel estimator ;  CPDEFoamMultiTargetThis PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ;  CPDEFoamTargetThis PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget ;  CPDEFoamTargetDensityThis is a concrete implementation of PDEFoam ;  CPDEFoamVect;  CPDFPDF wrapper for histograms; uses user-defined spline interpolation ;  CPruningInfo;  CPyMethodBase;  ►CQuickMVAProbEstimator;  CEventInfo;  CRandomGenerator;  CRank;  CRankingRanking for variables in method (implementation) ;  CReaderServes to use the MVAs in a specific analysis context ;  CRegressionVarianceCalculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms ;  CResultsClass that is the base-class for a vector of result ;  CResultsClassificationClass that is the base-class for a vector of result ;  CResultsMulticlassClass which takes the results of a multiclass classification ;  CResultsRegressionClass that is the base-class for a vector of result ;  CRMethodBase;  CROCCalc;  CROCCurve;  CRootFinderRoot finding using Brents algorithm (translated from CERNLIB function RZERO) ;  CRuleImplementation of a rule ;  CRuleCutA class describing a 'rule cut' ;  CRuleEnsemble;  CRuleFitA class implementing various fits of rule ensembles ;  ►CRuleFitAPIJ Friedman's RuleFit method ;  CIntParms;  CRealParms;  CRuleFitParamsA class doing the actual fitting of a linear model using rules as base functions ;  CSdivSqrtSplusBImplemen",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:97626,Modifiability,variab,variables,97626,ussPair;  CTMVAGUI;  CTNeuronNeuron class used by TMVA artificial neural network methods ;  CTNeuronInputInterface for TNeuron input calculation classes ;  CTNeuronInputAbsTNeuron input calculator – calculates the sum of the absolute values of the weighted inputs ;  CTNeuronInputChooserClass for easily choosing neuron input functions ;  CTNeuronInputSqSumTNeuron input calculator – calculates the squared weighted sum of inputs ;  CTNeuronInputSumTNeuron input calculator – calculates the weighted sum of inputs ;  CToolsGlobal auxiliary applications and data treatment routines ;  ►CTransformationHandlerClass that contains all the data information ;  CVariableStat;  CTreeInfo;  CTSpline1Linear interpolation of TGraph ;  CTSpline2Quadratic interpolation of TGraph ;  CTSynapseSynapse class used by TMVA artificial neural network methods ;  CTTrainingSettingsAll of the options that can be specified in the training string ;  CTypesSingleton class for Global types used by TMVA ;  CVariableDecorrTransformLinear interpolation class ;  CVariableGaussTransformGaussian Transformation of input variables ;  CVariableIdentityTransformLinear interpolation class ;  CVariableImportance;  CVariableImportanceResult;  CVariableInfoClass for type info of MVA input variable ;  CVariableNormalizeTransformLinear interpolation class ;  CVariablePCATransformLinear interpolation class ;  CVariableRearrangeTransformRearrangement of input variables ;  CVariableTransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  Ntornado;  Ntree;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  NtStudent;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nvo001_AdoptOrOwnMemory;  Nvo004_SortAndSelect;  Nvo005_Combinations;  ►Nwriter;  Cwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones.,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:97791,Modifiability,variab,variable,97791,ussPair;  CTMVAGUI;  CTNeuronNeuron class used by TMVA artificial neural network methods ;  CTNeuronInputInterface for TNeuron input calculation classes ;  CTNeuronInputAbsTNeuron input calculator – calculates the sum of the absolute values of the weighted inputs ;  CTNeuronInputChooserClass for easily choosing neuron input functions ;  CTNeuronInputSqSumTNeuron input calculator – calculates the squared weighted sum of inputs ;  CTNeuronInputSumTNeuron input calculator – calculates the weighted sum of inputs ;  CToolsGlobal auxiliary applications and data treatment routines ;  ►CTransformationHandlerClass that contains all the data information ;  CVariableStat;  CTreeInfo;  CTSpline1Linear interpolation of TGraph ;  CTSpline2Quadratic interpolation of TGraph ;  CTSynapseSynapse class used by TMVA artificial neural network methods ;  CTTrainingSettingsAll of the options that can be specified in the training string ;  CTypesSingleton class for Global types used by TMVA ;  CVariableDecorrTransformLinear interpolation class ;  CVariableGaussTransformGaussian Transformation of input variables ;  CVariableIdentityTransformLinear interpolation class ;  CVariableImportance;  CVariableImportanceResult;  CVariableInfoClass for type info of MVA input variable ;  CVariableNormalizeTransformLinear interpolation class ;  CVariablePCATransformLinear interpolation class ;  CVariableRearrangeTransformRearrangement of input variables ;  CVariableTransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  Ntornado;  Ntree;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  NtStudent;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nvo001_AdoptOrOwnMemory;  Nvo004_SortAndSelect;  Nvo005_Combinations;  ►Nwriter;  Cwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones.,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:97961,Modifiability,variab,variables,97961,ussPair;  CTMVAGUI;  CTNeuronNeuron class used by TMVA artificial neural network methods ;  CTNeuronInputInterface for TNeuron input calculation classes ;  CTNeuronInputAbsTNeuron input calculator – calculates the sum of the absolute values of the weighted inputs ;  CTNeuronInputChooserClass for easily choosing neuron input functions ;  CTNeuronInputSqSumTNeuron input calculator – calculates the squared weighted sum of inputs ;  CTNeuronInputSumTNeuron input calculator – calculates the weighted sum of inputs ;  CToolsGlobal auxiliary applications and data treatment routines ;  ►CTransformationHandlerClass that contains all the data information ;  CVariableStat;  CTreeInfo;  CTSpline1Linear interpolation of TGraph ;  CTSpline2Quadratic interpolation of TGraph ;  CTSynapseSynapse class used by TMVA artificial neural network methods ;  CTTrainingSettingsAll of the options that can be specified in the training string ;  CTypesSingleton class for Global types used by TMVA ;  CVariableDecorrTransformLinear interpolation class ;  CVariableGaussTransformGaussian Transformation of input variables ;  CVariableIdentityTransformLinear interpolation class ;  CVariableImportance;  CVariableImportanceResult;  CVariableInfoClass for type info of MVA input variable ;  CVariableNormalizeTransformLinear interpolation class ;  CVariablePCATransformLinear interpolation class ;  CVariableRearrangeTransformRearrangement of input variables ;  CVariableTransformBaseLinear interpolation class ;  CVarTransformHandler;  CVolumeVolume for BinarySearchTree ;  Ntornado;  Ntree;  ►NTStreamerInfoActions;  ►CTActionSequence;  CSequencePtr;  CTConfigurationBase class of the Configurations ;  CTConfiguredAction;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  NtStudent;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nvo001_AdoptOrOwnMemory;  Nvo004_SortAndSelect;  Nvo005_Combinations;  ►Nwriter;  Cwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones.,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:11091,Performance,perform,performed,11091,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:11464,Performance,perform,performing,11464,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12028,Performance,perform,performed,12028,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13749,Performance,perform,performs,13749,"timating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProo",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:29442,Performance,perform,performing,29442,"Aux< double >;  NHFitInterface;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  NGLTutorials;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NRDF;  ►NGraphDrawing;  CGraphCreatorHelper;  CGraphNode;  CDisplayHelper;  CPassAsVecHelper;  CPassAsVecHelper< std::index_sequence< N.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:41370,Performance,perform,performing,41370,"al function interface provide interface for calculating each data contrinution to the function which is required by some algorithm (like Fumili) ;  CBasicMinimizerBase Minimizer class, which defines the basic funcionality of various minimizer implementations (apart from Minuit and Minuit2) It provides support for storing parameter values, step size, parameter transofrmation etc ;  CBinaryOpBinaryOperation class A class representing binary operators in the parse tree ;  CBinaryOpCopyLBinary Operation class with value storage for the left argument ;  CBinaryOpCopyRBinary Operation class with value storage for the right argument ;  CBoostLorentz boost class with the (4D) transformation represented internally by a 4x4 orthosymplectic matrix ;  CBoostXClass representing a Lorentz Boost along the X axis, by beta ;  CBoostYClass representing a Lorentz Boost along the Y axis, by beta ;  CBoostZClass representing a Lorentz Boost along the Z axis, by beta ;  CBrentMinimizer1DUser class for performing function minimization ;  CBrentRootFinderClass for finding the root of a one dimensional function using the Brent algorithm ;  CCartesian2DClass describing a 2D cartesian coordinate system (x, y coordinates) ;  CCartesian3DClass describing a 3D cartesian coordinate system (x, y, z coordinates) ;  CChebyshevApproxClass describing a Chebyshev series which can be used to approximate a function in a defined range [a,b] using Chebyshev polynomials ;  CChebyshevPol;  CCholeskyDecompClass to compute the Cholesky decomposition of a matrix ;  CCholeskyDecompGenDimClass to compute the Cholesky decomposition of a matrix ;  CCholInverter;  CCompileTimeChecker;  CCompileTimeChecker< false >;  CConstantConstant expression class A class representing constant expressions (literals) in the parse tree ;  CCylindrical3DClass describing a cylindrical coordinate system based on rho, z and phi ;  CCylindricalEta3DClass describing a cylindrical coordinate system based on eta (pseudorapidity) instead of ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44306,Performance,perform,performing,44306,& >;  CExpr;  CFabsUnary abs Operation Class ;  CFactoryFactory class holding static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is impl,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:44380,Performance,perform,performing,44380,ing static functions to create the interfaces like ROOT::Math::Minimizer via the Plugin Manager ;  CFastInverterFast Matrix Inverter class Class to specialize calls to Dinv ;  CFastInverter< 3 >3x3 direct matrix inversion using Cramer Rule use only for FastInverter ;  CFastInverter< 4 >4x4 matrix inversion using Cramers rule ;  CFastInverter< 5 >5x5 Matrix inversion using Cramers rule ;  CFunctorDocumentation for class Functor class ;  CFunctor1DFunctor1D class for one-dimensional functions ;  CFunctorGradHandlerFunctor Handler class for gradient functions where both callable objects are provided for the function evaluation (type Func) and for the gradient (type GradFunc) ;  CFunctorHandlerFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFunctorImplFunctorImpl is a base class for the functor handler implementation class ;  CGaussIntegratorUser class for performing function integration ;  CGaussLegendreIntegratorUser class for performing function integration ;  CGenAlgoOptionsClass implementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GS,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:45703,Performance,perform,performing,45703,"e >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:50932,Performance,perform,performing,50932,(It throws away 202 values for every 12 used) see here ;  CGSLRngRanLuxS2Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ;  CGSLRngRanMarRANMAR generator see here ;  CGSLRngROOTWrapper;  CGSLRngTausTausworthe generator by L'Ecuyer see here ;  CGSLRngWrapperGSLRngWrapper class to wrap gsl_rng structure ;  CGSLRootFdFSolverRoot-Finder with derivatives implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract ,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52346,Performance,perform,performing,52346,"ion given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52498,Performance,perform,performing,52498,"FunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class)",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:52661,Performance,perform,performing,52661,"ss) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional integration ;  CIntegratorMultiDimOptionsNumerical multi dimensional integration options ;  CIntegratorOneDimUser Class for performing numerical integration of a function in one dimension ;  CIntegratorOneDimOptionsNumerical one dimensional integration options ;  CInterpolatorClass for performing function interpolation of points ;  CInverterMatrix Inverter class Class to specialize calls to Dinv ;  CInverter< 0 >Inverter<0> ;  CInverter< 1 >1x1 matrix inversion \(a_{11} \to 1/a_{11}\) ;  CInverter< 2 >2x2 matrix inversion using Cramers rule ;  CIOptionsGeneric interface for defining configuration options of a numerical algorithm ;  CIParametricFunctionMultiDimTemplIParamFunction interface (abstract class) describing multi-dimensional parameteric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam ;  CIParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam ;  CIParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56333,Performance,perform,perform,56333,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:56932,Performance,perform,performing,56932,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:59575,Performance,perform,performing,59575,"lass to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:59974,Performance,perform,performing,59974,"lass to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:77503,Performance,perform,performing,77503,"ll as output from it; users can interact: Fix/release parameters, set values and errors, etc ;  CMnUserParameterStateClass which holds the external user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:87597,Performance,perform,perform,87597," Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:9315,Safety,predict,predictions,9315,"r a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:39425,Safety,avoid,avoid,39425,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:60060,Safety,avoid,avoid,60060,"lass to wrap a normal function in a gradient function using numerical gradient calculation provided by the class Derivator (based on GSL numerical derivation) ;  CMultPolicyMatrix-matrix multiplication policy ;  CNullTypeFunc1D;  COneDimMultiFunctionAdapterOneDimMultiFunctionAdapter class to wrap a multidimensional function in one dimensional one ;  COneDimParamFunctionAdapterOneDimParamFunctionAdapter class to wrap a multi-dim parameteric function in one dimensional one ;  CParamFunctionBase template class for all Parametric Functions ;  CParamFunctionBaseClass defining the signature for multi-dim parametric functions ;  ►CParamFunctorHandlerParamFunctor Handler class is responsible for wrapping any other functor and pointer to free C functions ;  CFuncEvaluator;  CFuncEvaluator< F *, T >;  CFuncEvaluator< F *const, T >;  CParamFunctorTemplParam Functor class for Multidimensional functions ;  ►CParamMemFunHandlerParamFunctor Handler to Wrap pointers to member functions ;  CMemFuncEvaluator;  CPlaceExpr;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceExpr< T, D1, D2, D3, D4, A, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlaceMatrixStructure to deal when a submatrix is placed in a matrix ;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepStd< T, D3, D4 > >;  CPlaceMatrix< T, D1, D2, D3, D4, MatRepSym< T, D1 >, MatRepSym< T, D3 > >;  CPlainParameters;  CPlusEqualsEvaluate the expression performing a += operation Need to check whether creating a temporary object with the expression result (like in op: A += A * B ) ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepStd< T, D1, D2 > >Specialization for symmetrix += general : NOT Allowed operation ;  CPlusEquals< T, D1, D2, A, MatRepSym< T, D1 >, MatRepSym< T, D1 > >Specialization for symmetric matrices Evaluate the expression performing a += operation for symmetric matrices Need to have a separate functions to avoid to modify two times the off-diagonal elements (i.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:67813,Safety,avoid,avoid,67813,"t implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated min",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:70685,Safety,predict,predicted,70685," of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in Upper triangular packed storage format, e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:2791,Security,access,access,2791,"Cexternal_constructor< value_t::array >;  Cexternal_constructor< value_t::boolean >;  Cexternal_constructor< value_t::number_float >;  Cexternal_constructor< value_t::number_integer >;  Cexternal_constructor< value_t::number_unsigned >;  Cexternal_constructor< value_t::object >;  Cexternal_constructor< value_t::string >;  Cfrom_json_fn;  Chas_from_json;  Chas_non_default_from_json;  Chas_to_json;  Cis_basic_json_nested_type;  Cis_compatible_array_type;  Cis_compatible_integer_type;  Cis_compatible_integer_type_impl;  Cis_compatible_integer_type_impl< true, RealIntegerType, CompatibleNumberIntegerType >;  Cis_compatible_object_type;  Cis_compatible_object_type_impl;  Cis_compatible_object_type_impl< true, RealType, CompatibleObjectType >;  Cnegation;  Cpriority_tag;  Cpriority_tag< 0 >;  Cstatic_const;  Cto_json_fn;  Cadl_serializerDefault JSONSerializer template argument ;  ►Cbasic_jsonClass to store JSON values ;  Cinternal_iteratorIterator value ;  Citer_implTemplate for a random access iterator for the basic_json class ;  ►Citeration_proxyProxy class for the iterator_wrapper functions ;  Citeration_proxy_internalHelper class for iteration ;  Cjson_pointerJSON Pointer ;  Cjson_reverse_iteratorTemplate for a reverse iterator class ;  Cjson_valueJSON value ;  ►ClexerLexical analysis ;  CstrtonumParse string into a built-in arithmetic type as if the current locale is POSIX ;  CnumtostrLocale-independent serialization for built-in arithmetic types ;  CparserSyntax analysis ;  Cprimitive_iterator_tIterator for primitive JSON types ;  NnormalDist;  Nntuple1;  NnumberEntry;  Nparse_CSV_file_with_TTree_ReadStream;  Nprincipal;  ►NPyROOT;  NPyStrings;  NUtility;  ►CMethodProxy;  CMethodInfo_t;  CObjectProxy;  CPropertyProxy;  CPyCallable;  CPyGILRAII;  CPyRootClassType object to hold TClassRef instance (this is only semantically a presentation of PyRootType instances, not in a C++ sense) ;  CTCallContext;  CTClassMethodHolder;  CTConstructorHolder;  CTConverter;  CTCppObjec",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:19383,Security,access,accesses,19383,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:19492,Security,access,access,19492,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:19805,Security,access,accesses,19805,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:19925,Security,access,accesses,19925,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:20128,Security,access,accesses,20128," all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CAddress< std::vector< Bool_t, A > >;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< Bool_t, A > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t, A > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CRArgsMenuItem;  CRCheckedMenuItem;  CRHistBinIterIterates over the bins of a RHist or RHistImpl ;  CRHistBinPtrPoints to a histogram bin (or actually a RHistBinRef) ;  CRHistBinRefRepresents a bin reference ;  CRHistBinStatConst view on a bin's statistical data ;  CRHistDataA RHist",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:20233,Security,access,accesses,20233,"ronSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< Bool_t, A > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t, A > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CRArgsMenuItem;  CRCheckedMenuItem;  CRHistBinIterIterates over the bins of a RHist or RHistImpl ;  CRHistBinPtrPoints to a histogram bin (or actually a RHistBinRef) ;  CRHistBinRefRepresents a bin reference ;  CRHistBinStatConst view on a bin's statistical data ;  CRHistDataA RHistImplBase's data, provides accessors to all its statistics ;  CRHistImpl;  CRHistImplBaseInterface class f",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:21159,Security,access,accessors,21159,"_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t, A > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CRArgsMenuItem;  CRCheckedMenuItem;  CRHistBinIterIterates over the bins of a RHist or RHistImpl ;  CRHistBinPtrPoints to a histogram bin (or actually a RHistBinRef) ;  CRHistBinRefRepresents a bin reference ;  CRHistBinStatConst view on a bin's statistical data ;  CRHistDataA RHistImplBase's data, provides accessors to all its statistics ;  CRHistImpl;  CRHistImplBaseInterface class for RHistImpl ;  CRHistImplPrecisionAgnosticBaseBase class for RHistImplBase that abstracts out the histogram's PRECISION ;  CRMenuArgument;  CRMenuItemClass contains info for producing menu item on the JS side ;  ►NHist;  CRCoordArray;  ►NInternal;  CAxisConfigToTypeConverts a RAxisConfig of whatever kind to the corresponding RAxisBase-derived object ;  CAxisConfigToType< RAxisConfig::kEquidistant >;  CAxisConfigToType< RAxisConfig::kGrow >;  CAxisConfigToType< RAxisConfig::kIrregular >;  CAxisConfigToType< RAxisConfig::kLabels >;  CRFillBinCoordFill coord with low bin edge or center or high bin edge of all axes ;  CRFillBinCoord<-1, COORD, AXES >;  CRFillIterRangeFill range with begin() and end() of all axes, including under/overflow as specified by over ;  CRFillIterRange<-1, AXES >;  CRGetBinCount;  CRGetBinCount< 0, AXES >;  CRGetBinIndex;  CRGetBinIndex<-1, HISTIMPL, AXES, GROW >;  CRHistBufferedFillBase;  C",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:22766,Security,access,access,22766,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:87611,Security,validat,validation,87611," Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:87748,Security,validat,validation,87748," Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CCvSplit;  CCvSplitKFolds;  CCvSplitKFoldsExpr;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:10645,Testability,test,test,10645,"sianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:11489,Testability,test,test,11489,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:11531,Testability,test,test,11531,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:11909,Testability,test,test,11909,"eBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to aid in the construction of RooDataSets and RooArgSets, particularly those naturally arising in fitting operations ;  CFeldmanCousins(like the Feldman-Cousins technique) is essentially a specific configuration of the more general NeymanConstruction ;  CFrequentistCalculatorDoes a frequentist hypothesis test ;  CHeavisideRepresents the Heaviside function ;  CHLFactoryHLFactory is an High Level model Factory allows you to describe your models in a configuration file (datacards) acting as an interface with the RooFactoryWSTool ;  CHybridCalculatorSame purpose as HybridCalculatorOriginal, but different implementation ;  CHybridCalculatorOriginalHybridCalculatorOriginal class ;  CHybridPlotThis class provides the plots for the result of a study performed with the HybridCalculatorOriginal class ;  CHybridResultClass encapsulating the result of the HybridCalculatorOriginal ;  CHypoTestCalculatorHypoTestCalculator is an interface class for a tools which produce RooStats HypoTestResults ;  CHypoTestCalculatorGenericCommon base class for the Hypothesis Test Calculators ;  CHypoTestInverterHypoTestInverter class for performing an hypothesis test inversion by scanning the hypothesis test results of an HypoTestCalculator for various values of the parameter of interest ;  CHypoTestInverterOriginalThis class is now deprecated and to be replaced by the HypoTestInverter ;  CHypoTestInverterPlotClass to plot an HypoTestInverterResult, result of the HypoTestInverter calculator ;  CHypoTestInverterResultHypoTestInverterResult class holds the array of hypothesis test results and compute a confidence interval ;  CHypoTestPlotThis class provides the plots for the result of a study performed with any of the HypoTestCalculatorGeneric (e.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12162,Testability,test,tests,12162,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13395,Testability,log,log,13395,"elihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13439,Testability,test,test,13439,"e and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalcula",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15266,Testability,test,test,15266,ctorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implemen,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15642,Testability,log,log,15642,nterface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROO,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15846,Testability,test,test,15846,on is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  NCocoaTutorials;  ►NDetail;  ►NRDF;  ►NCustomColExtraArgs;  CNone;  CSlot;  CSlotAndEntry;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedCustomColumnA ,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:29757,Testability,log,log,29757,"Aux< double >;  NHFitInterface;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  NGLTutorials;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NRDF;  ►NGraphDrawing;  CGraphCreatorHelper;  CGraphNode;  CDisplayHelper;  CPassAsVecHelper;  CPassAsVecHelper< std::index_sequence< N.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:37375,Testability,test,test,37375,"0, V >Struct to solve a linear system using its Cholesky decomposition (N=0) ;  C_solver< F, 1, V >Struct to solve a linear system using its Cholesky decomposition (N=1) ;  C_solver< F, 2, V >Struct to solve a linear system using its Cholesky decomposition (N=2) ;  C_solver< F, 3, V >Struct to solve a linear system using its Cholesky decomposition (N=3) ;  C_solver< F, 4, V >Struct to solve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  NGenAlgoOptUtil;  NGenVector;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NImpl;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton al",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:12436,Usability,simpl,simple,12436,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13060,Usability,simpl,simple,13060,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13486,Usability,simpl,simple,13486,"hoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalMCMCInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can p",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:13981,Usability,simpl,simple,13981,"he RooStats::ConfInterval interface ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfP",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:14043,Usability,simpl,simple,14043,"lass provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactoryA factory for building PDFs and data for a number counting combination ;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15112,Usability,simpl,simple,15112,tation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Impor,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:15221,Usability,simpl,simply,15221, the ConfInterval interface ;  CProfileInspectorUtility class to plot conditional MLE of nuisance parameters vs ;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals) ;  CProfileLikelihoodTestStatProfileLikelihoodTestStat is an implementation of the TestStatistic interface that calculates the profile likelihood ratio at a particular parameter point given a dataset ;  CProofConfigHolds configuration options for proof and proof-lite ;  CProposalFunctionProposalFunction is an interface for all proposal functions that would be used with a Markov Chain Monte Carlo algorithm ;  CProposalHelper;  CRatioOfProfiledLikelihoodsTestStatTestStatistic that returns the ratio of profiled likelihoods ;  CSamplingDistPlotThis class provides simple and straightforward utilities to plot SamplingDistribution objects ;  CSamplingDistributionThis class simply holds a sampling distribution of some test statistic ;  CSamplingSummary;  CSamplingSummaryLookup;  CSequentialProposalClass implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step ;  CSimpleIntervalSimpleInterval is a concrete implementation of the ConfInterval interface ;  CSimpleLikelihoodRatioTestStatTestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler inter,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:28715,Usability,simpl,simple,28715,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:38075,Usability,simpl,simplest,38075,"ve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  NGenAlgoOptUtil;  NGenVector;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NImpl;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton algorithm, which computes the derivative at each iteration See the GSL manual for more information ;  CSecantSecant algorithm, simplified version of Newton method, which does not require the derivative at every step ;  CSteffensonSteffenson method, providing the fastes convergence ;  ►NrowOffsetsUtils;  Cindices;  Cmake_indices;  Cmake_indices_impl;  Cmake_indices_impl< I, indices< Indices.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:38503,Usability,simpl,simplified,38503,"ve a linear system using its Cholesky decomposition (N=4) ;  C_solver< F, 5, V >Struct to solve a linear system using its Cholesky decomposition (N=5) ;  C_solver< F, 6, V >Struct to solve a linear system using its Cholesky decomposition (N=6) ;  C_solverGenDimStruct to solve a linear system using its Cholesky decomposition (generalised dimensionality) ;  CPackedArrayAdapterAdapter for packed arrays (to SMatrix indexing conventions) ;  ►Ndetail;  Cmanipulator;  NGenAlgoOptUtil;  NGenVector;  ►NGenVector_detail;  ►CBitReproducible;  CDB8;  CBitReproducibleException;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  ►Ngv_detail;  CERROR_This_Rotation_Conversion_is_NOT_Supported;  ►NImpl;  CPlane3DClass describing a geometrical plane in 3 dimensions ;  CTransform3DBasic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data ;  CTranslation3DClass describing a 3 dimensional translation ;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  ►NRootsRoot-Finding Algorithms ;  CBisectionRoots::Bisection Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one ;  CBrentBrent-Dekker algorithm which combines an interpolation strategy with the bisection algorithm See the GSL manual for more information ;  CFalsePosFalse Position algorithm based on linear interpolation ;  CNewtonNewton algorithm, which computes the derivative at each iteration See the GSL manual for more information ;  CSecantSecant algorithm, simplified version of Newton method, which does not require the derivative at every step ;  CSteffensonSteffenson method, providing the fastes convergence ;  ►NrowOffsetsUtils;  Cindices;  Cmake_indices;  Cmake_indices_impl;  Cmake_indices_impl< I, indices< Indices.",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:51370,Usability,simpl,simple,51370,"ves implementation class using GSL ;  CGSLRootFinderBase class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives ;  CGSLRootFinderDerivBase class for GSL Root-Finding algorithms for one dimensional functions which use function derivatives ;  CGSLRootFSolverRoot-Finder implementation class using GSL ;  CGSLSimAnFuncGSLSimAnFunc class description ;  CGSLSimAnMinimizerGSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL ;  CGSLSimAnnealingGSLSimAnnealing class for performing a simulated annealing search of a multidimensional function ;  CGSLSimAnParamsStructure holding the simulated annealing parameters ;  CGSLVegasIntegrationWorkspaceWorkspace for VEGAS ;  CIBaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim ;  CIBaseFunctionOneDimInterface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ) ;  CIBaseParamDocumentation for the abstract class IBaseParam ;  CIGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation ;  CIGradientFunctionOneDimInterface (abstract class) for one-dimensional functions providing a gradient calculation ;  CIGradientMultiDimTemplGradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function ;  CIGradientOneDimSpecialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ;  CIMinimizer1DInterface class for numerical methods for one-dimensional minimization ;  CIntegrandTransformAuxiliary inner class for mapping infinite and semi-infinite integrals ;  CIntegratorMultiDimUser class for performing multidimensional ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:73026,Usability,simpl,simplex,73026,"r;  CMinimumParameters;  CMinimumSeedMinimumSeed contains the starting values for the minimization produced by the SeedGenerator ;  CMinimumSeedGeneratorBase class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:77650,Usability,simpl,simplex,77650,"l user and/or internal Minuit representation of the parameters and errors; transformation internal <-> external on demand; ;  CMnUserTransformationClass dealing with the transformation between user specified parameters (external) and internal parameters used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:77903,Usability,simpl,simplex,77903," used for minimization ;  CMnVectorTransform;  CModularFunctionMinimizerBase common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possi",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:78077,Usability,simpl,simplex,78077,"g on the type of FCN function passesd and on the objects used for the parameters ;  CMPIProcess;  CMPITerminate;  CNegativeG2LineSearchIn case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive ;  CNumerical2PGradientCalculatorClass performing the numerical gradient calculation ;  CParametricFunctionFunction which has parameters ;  CScanBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CScanMinimizerClass implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class ;  CSimplexBuilderPerforms a minimization using the simplex method of Nelder and Mead (ref ;  CSimplexMinimizerClass implementing the required methods for a minimization using Simplex ;  CSimplexParametersClass describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process ;  CSimplexSeedGeneratorGenerate Simplex starting point (state) ;  CSinParameterTransformationClass for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one ;  CSqrtLowParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CSqrtUpParameterTransformationTransformation from external to internal Parameter based on sqrt(1 + x**2) ;  CStackAllocatorStackAllocator controls the memory allocation/deallocation of Minuit ;  CStackAllocatorHolder;  CStackError;  CStackOverflowDefine stack allocator symbol ;  Csym;  CVariableMetricBuilderBuild (find) function minimum using the Variable Metric method (MIGRAD) Two possible error updators can be choosen ;  CVariableMetricEDMEstimator;  ►CVariableMetricMinimizerInstantiates the SeedGenerator and MinimumBuilder for Variable Metric Minimization",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:82670,Usability,simpl,simple,82670,,MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:83227,Usability,simpl,simple,83227,"OT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats ;  CTExecutorThis class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTGenericClassInfo;  CTIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree ;  CTProcessExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTReadLockGuard;  CTReentrantRWLock;  CTRWMutexImp;  CTRWSpinLock;  CTRWSpinLockReadGuard;  CTRWSpinLockWriteGuard;  ►CTSchemaRule;  CTSources;  ►CTSeqA pseudo container class which is a generator of indices ;  Citerator;  CTSequentialExecutor;  CTSpinMutexA spin mutex class which respects the STL interface for mutexes ;  CTThreadedObjectA wrapper to make object instances thread private, lazily ;  CTThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time ;  CTTreeProcessorMPThis class provides an interface to process a TTree dataset in parallel with multi-process technology ;  CTTreeProcessorMTA class to process the entries of a TTree in parallel ;  ►CTVirtualRWMutex;  CStateEarlier lock state as returned by GetState() that can be passed to Restore() ;  CStateDeltaState as returned by GetStateDelta() that can be passed to Restore() ;  CTWriteLockGuard;  Nroot-argparse;  Nrootmarks;  ►NROOTwriter;  CROOTwriter;  Nshapes;  Nsqlcreatedb;  Nsqlfilldb;  Nsqlio;  Nsqlselect;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ccheck_bound_t;  Cspan;  ►NDetail;  Cnot_fn_t;  C__make_integer_sequence_checked;  Ccheck_bound_t;  Chash< nlohmann::json >Hash value for JSON objects ;  Cinteger_sequence;  Cless< ROOT::Internal::RConcurrentHashColl::HashValue >;  Nsurfaces;  Ntbb;  ►NTClassEdit;  CFunctionSplitInfoResult of splitting a function declar",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:86723,Usability,simpl,simple,86723,"CTDeviceTDevice ;  CTDLGradientDescent;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTReshapeLayer;  CTRMSPropRMSProp Optimizer class ;  CTSGDStochastic Batch Gradient Descent Optimizer class ;  CTSharedLayerLayer class width shared weight and bias layers ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save ",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v616/namespaces.html:91124,Usability,simpl,simple,91124,"ase Class for all MVA method ;  CMethodBayesClassifierDescription of bayesian classifiers ;  CMethodBDTAnalysis of Boosted Decision Trees ;  CMethodBoostClass for boosting a TMVA method ;  CMethodC50;  CMethodCategoryClass for categorizing the phase space ;  CMethodCFMlpANNInterface to Clermond-Ferrand artificial neural network ;  ►CMethodCFMlpANN_UtilsImplementation of Clermond-Ferrand artificial neural network ;  CVARn2;  CMethodCompositeBaseVirtual base class for combining several TMVA method ;  CMethodCrossValidation;  CMethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements ;  CMethodDL;  ►CMethodDNNDeep Neural Network Implementation ;  CTTrainingSettings;  CMethodDTAnalysis of Boosted Decision Trees ;  CMethodFDAFunction discriminant analysis (FDA) ;  CMethodFisherFisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ;  CMethodHMatrixH-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables ;  CMethodInfo;  CMethodKNNAnalysis of k-nearest neighbor ;  CMethodLDLinear Discriminant ;  CMethodLikelihoodLikelihood analysis (""non-parametric approach"") ;  CMethodMLPMultilayer Perceptron class built off of MethodANNBase ;  CMethodPDEFoamThe PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density ;  CMethodPDERSThis is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA ;  CMethodPyAdaBoost;  CMethodPyGTB;  CMethodPyKeras;  CMethodPyRandomForest;  CMethodRSNNS;  CMethodRSVM;  CMethodRuleFitJ Friedman's RuleFit method ;  CMethodRXGB;  CMethodSVMSMO Platt's SVM classifier with Keerthi & Shavade improvements ;  CMethodTMlpANNThis is the TM",MatchSource.WIKI,doc/v616/namespaces.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v616/namespaces.html
https://root.cern/doc/v618/namespaceROOT.html:10783,Availability,down,down,10783,"ne of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. More...;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. More...;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. More...;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. More...;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. More...;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; Namespace for new ROOT classes and functions. ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:19289,Availability,avail,available,19289,"663 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5648 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 596 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:22799,Availability,failure,failure,22799,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 613 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:28497,Availability,down,down,28497,"ue_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 265 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 464 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 682 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 629 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 753 of file RCo",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:9939,Deployability,update,update,9939,"f the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. More...;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. More...;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. More...;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. More...;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. More...;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. More...;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. More...;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeM",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:22613,Deployability,update,updated,22613,"ot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 613 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:26489,Deployability,update,update,26489,"string . ). I am being called when a read pragma is encountered. ; Definition at line 873 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 909 of file RConversionRuleParser.cxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 862 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 837 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 805 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 731 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<ty",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20293,Energy Efficiency,schedul,scheduler,20293,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:22502,Energy Efficiency,power,power,22502,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:1214,Integrability,depend,depend,1214,"ace for new ROOT classes and functions. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:1393,Integrability,interface,interface,1393,"ns pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mute",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:1525,Integrability,interface,interface,1525,"for the fitting classes. ;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provid",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:1897,Integrability,interface,interface,1897,"age for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parall",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:2383,Integrability,interface,interface,2383,"taFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t; ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:2445,Integrability,wrap,wrapper,2445," data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:2568,Integrability,interface,interface,2568,"ibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Lon",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:2738,Integrability,interface,interface,2738,"change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; typedef std::map< std",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:22423,Integrability,rout,routine,22423,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:1233,Modifiability,variab,variable,1233,"ace for new ROOT classes and functions. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20263,Modifiability,config,configured,20263,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21063,Modifiability,plug-in,plug-ins,21063,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21135,Modifiability,variab,variable,21135,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:7150,Performance,multi-thread,multi-threading,7150,"ass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. More...;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:7279,Performance,multi-thread,multi-threading,7279,"l definition of the TClass class. More...;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAd",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:8477,Performance,multi-thread,multi-threading,8477,"nableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. More...;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. More...;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. More...;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema ru",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:8925,Performance,multi-thread,multi-threading,8925,"baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. More...;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. More...;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. More...;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. More...;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. More...;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. More...;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, S",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:18730,Performance,multi-thread,multi-threading,18730,"Setting::EAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5663 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5648 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 596 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:18926,Performance,multi-thread,multi-threading,18926," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5663 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5648 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 596 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:19366,Performance,multi-thread,multi-threading,19366,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5648 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 596 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Defi",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:19733,Performance,perform,performs,19733,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 596 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20101,Performance,multi-thread,multi-threading,20101,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20558,Performance,concurren,concurrent,20558,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20724,Performance,concurren,concurrent,20724,"allel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20907,Performance,concurren,concurrent,20907,"Ts are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20978,Performance,concurren,concurrent,20978,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21036,Performance,concurren,concurrent,21036,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21047,Performance,load,loading,21047,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:23959,Performance,multi-thread,multi-threading,23959,"onst T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 613 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 209 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 617 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 523 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 519 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 829 of file RConversionRuleParser.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 435 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 610 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:24781,Performance,multi-thread,multi-threading,24781,"te ; (; ). Definition at line 209 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 617 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 523 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 519 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 829 of file RConversionRuleParser.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 435 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 610 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 206 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 200 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 91 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 873 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enco",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:7461,Safety,safe,safe,7461,"ompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ()",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20515,Safety,safe,safe,20515,"ng over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:20551,Safety,safe,safe,20551,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21225,Safety,safe,safe,21225," the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21386,Safety,safe,safe,21386,"ition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21559,Safety,safe,safe,21559,"bal mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:21625,Safety,safe,safety,21625,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:26996,Security,checksum,checksum,26996,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 862 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 837 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 805 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 731 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:1890,Usability,simpl,simple,1890,"age for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parall",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v618/namespaceROOT.html:2561,Usability,simpl,simple,2561,"ibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Lon",MatchSource.WIKI,doc/v618/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:10836,Availability,down,down,10836,"ne of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. More...;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. More...;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. More...;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. More...;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. More...;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; VSD Structures. ; A helper class for managing ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:19381,Availability,avail,available,19381,"634 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5619 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 597 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:22891,Availability,failure,failure,22891,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 613 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:28590,Availability,down,down,28590,"ue_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RCo",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:9992,Deployability,update,update,9992,"f the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. More...;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. More...;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. More...;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. More...;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. More...;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. More...;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. More...;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeM",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:22705,Deployability,update,updated,22705,"ot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 613 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:26582,Deployability,update,update,26582,"string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 862 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 837 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 805 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<ty",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20385,Energy Efficiency,schedul,scheduler,20385,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:22594,Energy Efficiency,power,power,22594,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:1217,Integrability,depend,depend,1217,"uctures. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:1396,Integrability,interface,interface,1396,"used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mute",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:1528,Integrability,interface,interface,1528,"amespace  FoundationUtils;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provid",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:1900,Integrability,interface,interface,1900,"age for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parall",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:2386,Integrability,interface,interface,2386,"taFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t; ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:2448,Integrability,wrap,wrapper,2448," data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:2571,Integrability,interface,interface,2571,"ibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Lon",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:2741,Integrability,interface,interface,2741,"change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; typedef std::map< std",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:22515,Integrability,rout,routine,22515,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:1236,Modifiability,variab,variable,1236,"uctures. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20355,Modifiability,config,configured,20355,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21155,Modifiability,plug-in,plug-ins,21155,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21227,Modifiability,variab,variable,21227,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:7203,Performance,multi-thread,multi-threading,7203,"ass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. More...;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:7332,Performance,multi-thread,multi-threading,7332,"l definition of the TClass class. More...;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAd",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:8530,Performance,multi-thread,multi-threading,8530,"nableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. More...;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. More...;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. More...;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema ru",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:8978,Performance,multi-thread,multi-threading,8978,"baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. More...;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. More...;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. More...;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. More...;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. More...;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. More...;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, S",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:18822,Performance,multi-thread,multi-threading,18822,"Setting::EAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5634 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5619 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 597 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:19018,Performance,multi-thread,multi-threading,19018," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5634 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5619 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 597 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:19458,Performance,multi-thread,multi-threading,19458,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5619 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 597 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Defi",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:19825,Performance,perform,performs,19825,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 597 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20193,Performance,multi-thread,multi-threading,20193,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20650,Performance,concurren,concurrent,20650,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20816,Performance,concurren,concurrent,20816,"allel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20999,Performance,concurren,concurrent,20999,"Ts are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21070,Performance,concurren,concurrent,21070,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21128,Performance,concurren,concurrent,21128,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21139,Performance,load,loading,21139,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:24051,Performance,multi-thread,multi-threading,24051,"onst T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 613 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 209 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 618 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 524 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 520 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 611 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:24873,Performance,multi-thread,multi-threading,24873,"te ; (; ). Definition at line 209 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 618 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 524 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 520 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 611 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 206 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 200 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:7514,Safety,safe,safe,7514,"ompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ()",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20607,Safety,safe,safe,20607,"ng over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:20643,Safety,safe,safe,20643,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21317,Safety,safe,safe,21317," the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21478,Safety,safe,safe,21478,"ition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21651,Safety,safe,safe,21651,"bal mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:21717,Safety,safe,safety,21717,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:27089,Security,checksum,checksum,27089,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 862 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 837 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 805 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:1893,Usability,simpl,simple,1893,"age for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parall",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v620/namespaceROOT.html:2564,Usability,simpl,simple,2564,"ibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNames_t = ROOT::Detail::RDF::ColumnNames_t;  ; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Lon",MatchSource.WIKI,doc/v620/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:11139,Availability,down,down,11139,"ne of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. More...;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. More...;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. More...;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. More...;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. More...;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:19979,Availability,avail,available,19979,"847 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5832 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 543 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:23489,Availability,failure,failure,23489,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:29334,Availability,down,down,29334,"ue_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RCo",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:10295,Deployability,update,update,10295,"f the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. More...;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. More...;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. More...;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. More...;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. More...;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. More...;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. More...;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeM",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:23303,Deployability,update,updated,23303,"ot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:27326,Deployability,update,update,27326,"string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 865 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 840 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 808 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<ty",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:20983,Energy Efficiency,schedul,scheduler,20983,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:23192,Energy Efficiency,power,power,23192,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:1378,Integrability,depend,depend,1378,"amespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; c",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:1557,Integrability,interface,interface,1557,"ith TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:1717,Integrability,interface,interface,1717,"space  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrappe",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2101,Integrability,interface,interfaces,2101,"sociated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2180,Integrability,interface,interface,2180,"dObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2666,Integrability,interface,interface,2666,"ormats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typede",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2728,Integrability,wrap,wrapper,2728,"e same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (voi",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2851,Integrability,interface,interface,2851,"IOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (voi",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:3021,Integrability,interface,interface,3021," class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; typedef std::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:23113,Integrability,rout,routine,23113,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:1397,Modifiability,variab,variable,1397,"amespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; c",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:20953,Modifiability,config,configured,20953,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21753,Modifiability,plug-in,plug-ins,21753,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21825,Modifiability,variab,variable,21825,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:7424,Performance,multi-thread,multi-threading,7424,"ass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. More...;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:7553,Performance,multi-thread,multi-threading,7553,"l definition of the TClass class. More...;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAd",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:8751,Performance,multi-thread,multi-threading,8751,"nableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. More...;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. More...;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. More...;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. More...;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:9281,Performance,multi-thread,multi-threading,9281,"st T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. More...;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. More...;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. More...;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. More...;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. More...;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. More...;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. More...;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. More...;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. More...;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). More...;  ; void ResetClassVersion (TClass *, const char *, S",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:19420,Performance,multi-thread,multi-threading,19420,"Setting::EAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5847 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5832 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 543 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:19616,Performance,multi-thread,multi-threading,19616," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5847 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5832 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 543 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:20056,Performance,multi-thread,multi-threading,20056,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5832 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 543 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Defi",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:20423,Performance,perform,performs,20423,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 543 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:20791,Performance,multi-thread,multi-threading,20791,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21248,Performance,concurren,concurrent,21248,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21414,Performance,concurren,concurrent,21414,"allel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21597,Performance,concurren,concurrent,21597,"Ts are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21668,Performance,concurren,concurrent,21668,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21726,Performance,concurren,concurrent,21726,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21737,Performance,load,loading,21737,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:24649,Performance,multi-thread,multi-threading,24649,"onst T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 209 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 579 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 470 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 466 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 564 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:25617,Performance,multi-thread,multi-threading,25617,"of the pool used for implicit multi-threading. ; Definition at line 579 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 470 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 466 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 564 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 557 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 206 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 200 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:7735,Safety,safe,safe,7735,"ompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: More...;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). More...;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). More...;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. More...;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. More...;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. More...;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ()",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21205,Safety,safe,safe,21205,"ng over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21241,Safety,safe,safe,21241,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:21915,Safety,safe,safe,21915," the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:22076,Safety,safe,safe,22076,"ition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:22249,Safety,safe,safe,22249,"bal mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:22315,Safety,safe,safety,22315,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:12270,Security,access,access,12270,"down the sources. More...;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. More...;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. More...;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; TBranchProxyDirector This class is used to 'drive' and hold a serie of TBranchProxy objects which represent and give access to the content of TTree object.; A helper class for managing IMT work during TTree:Fill operations.; Namespace for new ROOT classes and functions.; Base class for iterating of hierarchical structure.; VSD Structures.; This is intended to be used as part of a generate Selector class which will hold the directory and its associate ; Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 866 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 109 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 108 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 110 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirector",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:27833,Security,checksum,checksum,27833,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 865 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 840 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 808 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2173,Usability,simpl,simple,2173,"dObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutor;  This class defines an interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v622/namespaceROOT.html:2844,Usability,simpl,simple,2844,"IOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (voi",MatchSource.WIKI,doc/v622/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:11104,Availability,down,down,11104," to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:20018,Availability,avail,available,20018,"861 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5846 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 542 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:23528,Availability,failure,failure,23528,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:29373,Availability,down,down,29373,"ue_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RCo",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:10288,Deployability,update,update,10288,"_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. ;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. ;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. ;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &outpu",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:23342,Deployability,update,updated,23342,"ot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:27365,Deployability,update,update,27365,"string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 865 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 840 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 808 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<ty",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21022,Energy Efficiency,schedul,scheduler,21022,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:23231,Energy Efficiency,power,power,23231,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:1419,Integrability,depend,depend,1419,"amespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLo",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:1598,Integrability,interface,interface,1598,"ith TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indic",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:1762,Integrability,interface,interface,1762,"e  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wr",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2150,Integrability,interface,interfaces,2150," R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2229,Integrability,interface,interface,2229,"tils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2715,Integrability,interface,interface,2715,"More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2777,Integrability,wrap,wrapper,2777,"me task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2900,Integrability,interface,interface,2900,"atures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:3078,Integrability,interface,interface,3078,"TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; typedef std::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:23152,Integrability,rout,routine,23152,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:1438,Modifiability,variab,variable,1438,"amespaces; namespace  CocoaTutorials;  ; namespace  Detail;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLo",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:20992,Modifiability,config,configured,20992,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21792,Modifiability,plug-in,plug-ins,21792,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21864,Modifiability,variab,variable,21864,"hreading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:7515,Performance,multi-thread,multi-threading,7515,"; void Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *)",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:7637,Performance,multi-thread,multi-threading,7637,"forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::v",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:8814,Performance,multi-thread,multi-threading,8814,"licitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. ;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:9316,Performance,multi-thread,multi-threading,9316,"T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. ;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. ;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. ;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. ;  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the v",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:19459,Performance,multi-thread,multi-threading,19459,"Setting::EAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5861 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5846 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 542 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:19655,Performance,multi-thread,multi-threading,19655," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5861 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5846 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 542 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:20095,Performance,multi-thread,multi-threading,20095,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5846 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 542 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Defi",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:20462,Performance,perform,performs,20462,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 542 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:20830,Performance,multi-thread,multi-threading,20830,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21287,Performance,concurren,concurrent,21287,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21453,Performance,concurren,concurrent,21453,"allel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21636,Performance,concurren,concurrent,21636,"Ts are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21707,Performance,concurren,concurrent,21707,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21765,Performance,concurren,concurrent,21765,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21776,Performance,load,loading,21776,"threads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:24688,Performance,multi-thread,multi-threading,24688,"onst T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 203 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 209 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 578 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 469 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 465 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 563 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:25656,Performance,multi-thread,multi-threading,25656,"of the pool used for implicit multi-threading. ; Definition at line 578 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 469 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 465 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 563 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 556 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 206 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 200 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:7812,Safety,safe,safe,7812,"ize);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21244,Safety,safe,safe,21244,"ng over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21280,Safety,safe,safe,21280,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:21954,Safety,safe,safe,21954," the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:22115,Safety,safe,safe,22115,"ition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:22288,Safety,safe,safe,22288,"bal mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:22354,Safety,safe,safety,22354,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:12207,Security,access,access,12207,"d::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; TBranchProxyDirector This class is used to 'drive' and hold a serie of TBranchProxy objects which represent and give access to the content of TTree object.; Namespace for new ROOT classes and functions.; Base class for iterating of hierarchical structure.; VSD Structures.; This is intended to be used as part of a generate Selector class which will hold the directory and its associate ; Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 997 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 110 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirectory *). Definition at line 113 of file Rtypes.h. ◆ Double_v. using ROO",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:27872,Security,checksum,checksum,27872,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 865 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 840 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 808 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2222,Usability,simpl,simple,2222,"tils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTrees, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/namespaceROOT.html:2893,Usability,simpl,simple,2893,"atures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v624/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html
https://root.cern/doc/v624/release-notes.html:605,Availability,recover,recovery,605,". ROOT Version 6.24 Release Notes. ROOT Version 6.24 Release Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CER",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:3102,Availability,error,errors,3102,"CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:5267,Availability,avail,available,5267," to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for mor",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:7172,Availability,avail,available,7172,"ies, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature orig",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:7786,Availability,avail,available,7786,"New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branches to a new TTree.; Snapshot now writes branches coming from friend TTrees even if they have the same name as branches in the main tree (friendname_ is prepended to the name of the output branches). More details at #7181.; Just-in-time compilation of string expre",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:9821,Availability,down,downstream,9821,"o Filter and Define now generates functions that take fundamental types by const value (rather than by non-const reference as before). This will break code that was assigning to column values in string expressions: this is an intended side effect as we want to prevent non-expert users from performing assignments (=) rather than comparisons (==). Expert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See ROOT-11009 for further discussion.; For some TTrees, RDataFrame::GetColumnNames might now returns multiple valid spellings for a given column. For example, leaf ""l"" under branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so th",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10152,Availability,avail,available,10152,"xpert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See ROOT-11009 for further discussion.; For some TTrees, RDataFrame::GetColumnNames might now returns multiple valid spellings for a given column. For example, leaf ""l"" under branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10453,Availability,avail,available,10453,"nder branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the trad",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:11661,Availability,avail,available,11661,"bilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spark backend for example has the following runtime dependencies (ROOT will build just fine without, but the feature will be unavailable without these packages):. pyspark, that in turn has its own set of dependencies:; Java; py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class u",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:16665,Availability,toler,tolerate,16665,"g Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting t",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:21675,Availability,recover,recovery,21675,"(arg*arg * halfBySigmaSq);; + output[i] = RooBatchCompute::fast_exp(arg*arg * halfBySigmaSq);; Unbiased binned fits; When RooFit performs binned fits, it takes the probability density at the bin centre as a proxy for the probability in the bin. This can lead to a bias. To alleviate this, the new class RooBinSamplingPdf has been added to RooFit. Also see arxiv:2012.02746.; More accurate residual and pull distributions; When making residual or pull distributions with RooPlot::residHist or RooPlot::pullHist, the histogram is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in deri",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22034,Availability,recover,recover,22034,"s. To alleviate this, the new class RooBinSamplingPdf has been added to RooFit. Also see arxiv:2012.02746.; More accurate residual and pull distributions; When making residual or pull distributions with RooPlot::residHist or RooPlot::pullHist, the histogram is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loadin",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:24619,Availability,error,errors,24619,"i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26178,Availability,error,error,26178,"be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26285,Availability,error,error,26285,"in volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28448,Availability,recover,recovered,28448,"very specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:31287,Availability,error,error,31287,"ing the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes identically named objects from directory; [ROOT-8133] - TROOT::ProcessLine: TString::Replace out of range; [ROOT-8173] - RooStreamParser not working for float number with negative exponent; [ROOT-8331] - Error in the member function Multiply(const Double_t *vin, Double_t* vout, Double_t w) in TEveTrans of Eve package; [ROOT-8489] - Toy generation using RooCBShape with conditional PDF; [ROOT-8497] - Wrong likelihood is computed for RooProdPdf containing a RooFFTConvPdf; [ROOT-8535] - Non unique UUID; [ROOT-8885] - Cannot create a branch of long, unsigned long, std::size_t types; [ROOT-9062] - $HOME is not automatically extended in TCling; [ROOT-9240] - Compiled program with libNew.so crash; [ROOT-9324] - [cling] segfault when calling cout both from jitted and compiled code; [ROOT-9483] - TMVAGui::mvaeffs crashes when compiled stand-alone; [ROOT-9497] - TCling::Calc() must not abort; [ROOT-9563] - [TreeProcMT] Trees ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:33541,Availability,error,errors,33541,,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:34843,Availability,fault,fault,34843,"ould be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exception on Mac OS; [ROOT-10752] - segmentation violation in TFractionFitter destructor; [ROOT-10753] - [TTreeReader] Wrong entries are loaded in case of TChain+TEntryList; [ROOT-10762] - [MT] Concurrent construction (or destruction?) of two different TThreadedExecutors is racy; [ROOT-10776] - Fail compilation; [ROOT-10779] - HistFactory models that are written to a file, then retrieved with updated histograms find only old histograms; [ROOT-10782] - With gcc10 STL headers don’t include implicitly stdexcept; [ROOT-10784] - Mistake in what is reported in documentation; [ROOT-10790] - [DF] Single-thread Snapshot into a directory also creates a spurious TTree outside of it; [ROOT-10792] - [DF] Snapshot of TClonesArrays read via TTreeReaderArray is broken; [ROOT-10800] - TClass::GetListOfAllPublicMethods() lists deleted copy constructor of std::unique_ptr; [ROOT-10804] - assertion in clang::Sema::LookupSpecialMember; [ROOT-10810] - Segmentation fault in pickling of weighted RooFit datasets; [ROOT-10815] - Error in parsing TFormula expression using pre-defined functions in function names; [ROOT-10822] - [DF] RVecs of non-split branches can read from invalid addresses; [ROOT-10824] - [TTreeReader] Reading entries from a friend with a TTreeIndex results in wrong entries silently read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:35771,Availability,failure,failure,35771,"on in clang::Sema::LookupSpecialMember; [ROOT-10810] - Segmentation fault in pickling of weighted RooFit datasets; [ROOT-10815] - Error in parsing TFormula expression using pre-defined functions in function names; [ROOT-10822] - [DF] RVecs of non-split branches can read from invalid addresses; [ROOT-10824] - [TTreeReader] Reading entries from a friend with a TTreeIndex results in wrong entries silently read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.22/00 Build failure with Clang 7.0.0 on SL7 with -Druntime_cxxmodules:BOOL=ON; [ROOT-10889] - [RDF] Unexpected/broken behaviour of the Display action; [ROOT-10890] - TMath::Gcgs() problem; [ROOT-10891] - [DF] Display of char* branches is broken; [ROOT-10895] - ROOT version 6.20/06: Instantiating TPythia8 brings program to halt; [ROOT-10896] - IMT Snapshot segfault when TTree switches over multiple files; [ROOT-10912] - Regression in standalone roottest: cppyy_backend cannot be imported; [ROOT-10913] - RooCategory doesn’t update its label when its state is dirty.; [ROOT-10917] - prompt: pressing ctrl-R when no root_hist file is present results in a segfault; [ROOT-10925] - Can not compile ROOT macro on Windows; [ROOT-10927] - Dramatic increase of memory usage while reading trees containing histograms; [ROOT-10931] - Polygon doesn’t close when drawing PDF as filled curve; [ROOT-10935] - RooDataSet::read() no longer accepts RooCategory numbers; [ROOT-10936] - Build fails with cuDNN 8; [ROOT-10942] - [DF] ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:38944,Availability,error,error,38944,"T-10832] - Make TH1::GetCumulative account for underflows and overflows; [ROOT-8013] - equalising roofit tutorials for easier digestion; [ROOT-8142] - Provide corrupt line when XML parsing fails; [ROOT-10022] - [DF] Add support for TBranchObjects (e.g. branches containing TH2F); [ROOT-10781] - Performance penalty from RooRealVar not allowing to use hash table on RooLinkedList member; [#6408] - Creating RooDataSet causes SegFault; [#6529] - segfault in RooWorkspace::import; [#6489] - Test Issue; [#6540] - Crash message should point to github; [#6479] - TMVA TMVAGui functions crash in batch mode; [#6553] - TMVA Provide support in MethodPyKeras for tensorflow.keras; [#6403] - [Hist] Bugs in TProfile,TProfile2D::LabelsOption; [#6527] - Double delete error with TTree::ChangeFile and a TFile on the stack; [#6455] - [DF] RDataSource does not early-quit event loops when all Ranges are exhausted; [#6435] - [DF] Jitted Min method breaks with RVec columns; [#6425] - Typo in void TEnv::SetValue(const char *name, double value) implementation; [#6406] - root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; [#6371] - [DF] Display doesn’t work with non-top-level TTree branches; [#6448] - Disable NDEBUG for PR builds; [#6482] - TClass::GetListOfFunctions() fails to enumerate using decls.; [#6393] - PyROOT cannot call templated ctors on Windows; [#6359] - python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion Val && ""isa<> used on a null pointer"" failed.; [#6350] - When in-memory TTree are written, they are not compressed.; [#6453] - Potential null pointer dereference in TPad::Close; [#6449] - Floating point exception in TPad (part 3); [#6578] - Using declaration of TGMainFrame constructor not taken into account; [#6381] - TH3 missing labels; [#6379] - Float",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:40618,Availability,fault,faults,40618,"OT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion Val && ""isa<> used on a null pointer"" failed.; [#6350] - When in-memory TTree are written, they are not compressed.; [#6453] - Potential null pointer dereference in TPad::Close; [#6449] - Floating point exception in TPad (part 3); [#6578] - Using declaration of TGMainFrame constructor not taken into account; [#6381] - TH3 missing labels; [#6379] - Floating point exception in TCanvas; [#6374] - Floating point exception in TPad; [#6642] - THStack behaviour is not aligned with behaviour of other objects when drawing - TopMargin is non-zero; [#6446] - Possible Null pointer dereference in TPad; [#6375] - Segmentation violation in TPaveLabel class; [#6552] - PyROOT (de)serialization using pickle (or dill) fails without pre-import of ROOT for new PyROOT; [#6468] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:40870,Availability,avail,available,40870,"o = clang::UsingDecl; From = clang::Decl]: Assertion Val && ""isa<> used on a null pointer"" failed.; [#6350] - When in-memory TTree are written, they are not compressed.; [#6453] - Potential null pointer dereference in TPad::Close; [#6449] - Floating point exception in TPad (part 3); [#6578] - Using declaration of TGMainFrame constructor not taken into account; [#6381] - TH3 missing labels; [#6379] - Floating point exception in TCanvas; [#6374] - Floating point exception in TPad; [#6642] - THStack behaviour is not aligned with behaviour of other objects when drawing - TopMargin is non-zero; [#6446] - Possible Null pointer dereference in TPad; [#6375] - Segmentation violation in TPaveLabel class; [#6552] - PyROOT (de)serialization using pickle (or dill) fails without pre-import of ROOT for new PyROOT; [#6468] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:41593,Availability,error,error,41593,"] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] -",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:41942,Availability,error,error,41942,"s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:42182,Availability,failure,failures,42182,"ile and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault when reading branch of “automatically loaded” friend; [#6741] - [DF] When dataset is specified as treename/filename, the TTree is read without its friends; [#6470] - PyROOT: virtual C++ method overriden in python ignored with further inherita",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:42417,Availability,error,error,42417,"#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault when reading branch of “automatically loaded” friend; [#6741] - [DF] When dataset is specified as treename/filename, the TTree is read without its friends; [#6470] - PyROOT: virtual C++ method overriden in python ignored with further inheritance chain. [#7058] - [DF] crash when asking for type of aliased columns; [#6848] - [DF] Warnings printed from Snapshot of a TChain when no entry passes upstream Filters; [#6518] - [TreeReader] When looping over a TTree ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:44088,Availability,error,error,44088,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45497,Availability,error,error,45497," [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip te",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45551,Availability,fault,fault,45551,"2] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45944,Availability,error,error,45944,"jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:46314,Availability,down,down,46314,"jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:46534,Availability,error,error,46534,"rward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:46849,Availability,failure,failures,46849,"rward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:47830,Availability,error,error,47830,"-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running FrequentistCalculator scan in RooStats; [#7933] - Memory leak when using MemPoolForRooSets; [#7169] - RDataFrame and CreatePoxy/TTreeReaderValue error for selection on string branch in Filter method; [#8226] - [DF] Crash in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (som",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:48367,Availability,avail,available,48367," of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running FrequentistCalculator scan in RooStats; [#7933] - Memory leak when using MemPoolForRooSets; [#7169] - RDataFrame and CreatePoxy/TTreeReaderValue error for selection on string branch in Filter method; [#8226] - [DF] Crash in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503]",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:48418,Availability,failure,failure,48418," of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running FrequentistCalculator scan in RooStats; [#7933] - Memory leak when using MemPoolForRooSets; [#7169] - RDataFrame and CreatePoxy/TTreeReaderValue error for selection on string branch in Filter method; [#8226] - [DF] Crash in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503]",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:50122,Availability,error,error,50122,"lias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#10170] - Crashes when reading a TTree with a friend; [#8549] - A crash when opening a TTree and its friend on TFile::Close(); [#10131] - Open too many different non-versioned layouts for pair; [#10353] - Thread-safety issue in TClassEdit (StdLen)",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:50249,Availability,down,down,50249,"lias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#10170] - Crashes when reading a TTree with a friend; [#8549] - A crash when opening a TTree and its friend on TFile::Close(); [#10131] - Open too many different non-versioned layouts for pair; [#10353] - Thread-safety issue in TClassEdit (StdLen)",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:974,Deployability,update,update,974,". ROOT Version 6.24 Release Notes. ROOT Version 6.24 Release Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CER",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1105,Deployability,release,release,1105,"e Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1173,Deployability,release,release,1173,"ion. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tade",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1229,Deployability,release,release,1229,"ter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padula",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1285,Deployability,release,release,1285,"taFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Ra",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1341,Deployability,release,release,1341,"es and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sc",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1371,Deployability,patch,patches,1371,"g with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:1426,Deployability,release,released,1426,"VA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:4827,Deployability,upgrade,upgraded,4827,"utor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports t",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:9851,Deployability,patch,patching,9851,"o Filter and Define now generates functions that take fundamental types by const value (rather than by non-const reference as before). This will break code that was assigning to column values in string expressions: this is an intended side effect as we want to prevent non-expert users from performing assignments (=) rather than comparisons (==). Expert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See ROOT-11009 for further discussion.; For some TTrees, RDataFrame::GetColumnNames might now returns multiple valid spellings for a given column. For example, leaf ""l"" under branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so th",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10442,Deployability,release,release,10442,"nder branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the trad",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:16315,Deployability,update,updates,16315,"VA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a no",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:19267,Deployability,update,update,19267,"with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evaluateBatch(); In case you have created a custom PDF which overrides evaluateBatch(), please follow these steps to update your code to the newest version:. Change the signature of the function both in the source and header file:. - RooSpan<double> RooGaussian::evaluateBatch(std::size_t begin, std::size_t batchSize) const; + RooSpan<double> evaluateSpan(RooBatchCompute::RunContext& evalData, const RooArgSet* normSet) const. Include RunContext.h and BracketAdapter.h.; Use getValues() instead of getValBatch() to retrieve a RooSpan for the data of every value. - auto xData = x.getValBatch(begin, batchSize);; + auto xData = x->getValues(evalData,normSet);. Retrieve the number of events by getting the maximum size of the input spans. size_t nEvents=0;; for (auto& i:{xData,meanData,sigmaData}); nEvents = std::max(nEvents,i.size());. Create the output batch by calling RunContext::makeBatch(). - auto output = _batchData.makeWritableBatchUnInit(begin, batchSize);; + auto output = evalData.makeBatch(this, nEvents);. DO NOT use RooSpan::isBatch() and",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22481,Deployability,update,updated,22481,"gly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SU",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:25647,Deployability,release,release,25647,"he old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created fo",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28602,Deployability,update,update,28602,"me. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Ass",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28623,Deployability,update,update,28623,"e taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29046,Deployability,release,release,29046,"en from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release f",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29443,Deployability,install,installation,29443,"wser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29993,Deployability,release,release,29993,"notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:30342,Deployability,update,updated,30342,"ing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:30455,Deployability,release,release,30455,"y of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:30563,Deployability,release,release,30563,"disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:30727,Deployability,integrat,integration,30727,"not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:31520,Deployability,update,update,31520,"ing the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes identically named objects from directory; [ROOT-8133] - TROOT::ProcessLine: TString::Replace out of range; [ROOT-8173] - RooStreamParser not working for float number with negative exponent; [ROOT-8331] - Error in the member function Multiply(const Double_t *vin, Double_t* vout, Double_t w) in TEveTrans of Eve package; [ROOT-8489] - Toy generation using RooCBShape with conditional PDF; [ROOT-8497] - Wrong likelihood is computed for RooProdPdf containing a RooFFTConvPdf; [ROOT-8535] - Non unique UUID; [ROOT-8885] - Cannot create a branch of long, unsigned long, std::size_t types; [ROOT-9062] - $HOME is not automatically extended in TCling; [ROOT-9240] - Compiled program with libNew.so crash; [ROOT-9324] - [cling] segfault when calling cout both from jitted and compiled code; [ROOT-9483] - TMVAGui::mvaeffs crashes when compiled stand-alone; [ROOT-9497] - TCling::Calc() must not abort; [ROOT-9563] - [TreeProcMT] Trees ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:34283,Deployability,update,updated,34283,,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:36286,Deployability,update,update,36286,"read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.22/00 Build failure with Clang 7.0.0 on SL7 with -Druntime_cxxmodules:BOOL=ON; [ROOT-10889] - [RDF] Unexpected/broken behaviour of the Display action; [ROOT-10890] - TMath::Gcgs() problem; [ROOT-10891] - [DF] Display of char* branches is broken; [ROOT-10895] - ROOT version 6.20/06: Instantiating TPythia8 brings program to halt; [ROOT-10896] - IMT Snapshot segfault when TTree switches over multiple files; [ROOT-10912] - Regression in standalone roottest: cppyy_backend cannot be imported; [ROOT-10913] - RooCategory doesn’t update its label when its state is dirty.; [ROOT-10917] - prompt: pressing ctrl-R when no root_hist file is present results in a segfault; [ROOT-10925] - Can not compile ROOT macro on Windows; [ROOT-10927] - Dramatic increase of memory usage while reading trees containing histograms; [ROOT-10931] - Polygon doesn’t close when drawing PDF as filled curve; [ROOT-10935] - RooDataSet::read() no longer accepts RooCategory numbers; [ROOT-10936] - Build fails with cuDNN 8; [ROOT-10942] - [DF] Regression in recognition of nested branch names; [ROOT-10944] - hadd: wrong TH2 sum with x-labels only; [ROOT-10946] - Error messages from RooMomentMorphND; [ROOT-10956] - New jupyroot missing jupyterlab fixes in pyroot_legacy - Causes jsroot to fail in jupyterlab; [ROOT-10962] - Uncaught exceptions from RDataFrame operations exit root prompt.; [ROOT-10963] - [Tree] TLeaf::GetName and TLeaf::GetFullNa",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:43683,Deployability,configurat,configuration,43683,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:44113,Deployability,install,install,44113,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45063,Deployability,patch,patches,45063, - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; ,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45843,Deployability,release,release,45843,"2] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:47222,Deployability,release,release,47222,"or LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running FrequentistCalculator scan in RooStats; [#7933] - Memory leak when using MemPoolForRooSets; [#7169] - RDataFrame and CreatePoxy/TTreeReaderValue error for selection on string branch in Filter method; [#8226] - [DF] Crash in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of t",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:49366,Deployability,release,release,49366,"s; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 de",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:49852,Deployability,release,release,49852," name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O custo",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:50071,Deployability,release,release,50071," causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#10170] - Crashes when reading a TTree with a friend; [#8549] - A crash when opening a TTree and its friend on TFile::Cl",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:51669,Deployability,patch,patches,51669," off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#10170] - Crashes when reading a TTree with a friend; [#8549] - A crash when opening a TTree and its friend on TFile::Close(); [#10131] - Open too many different non-versioned layouts for pair; [#10353] - Thread-safety issue in TClassEdit (StdLen)? [6.24.06]; [#7276] - [RF] ROOT 6.22/06 crashes reading old workspace file; [#10548] - Use of undeclared identifier on Mac ARM; [#10478] - runtime_cxxmodules fails to build with GCC12; [#11080] - Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; [#10645] - [TTreeReader] Cannot read Float16_t branch; [#11260] - TTreeReaderArray does not support Double32_t; [#11383] - Deadlock in ErrorHandler when invoked at library initialization time. HEAD of the v6-24-00-patches branch; These changes will be part of a future 6.24/10. None so far. ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:2937,Energy Efficiency,reduce,reduce,2937," CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:5429,Energy Efficiency,reduce,reduced,5429,"dows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTa",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:5505,Energy Efficiency,reduce,reduced,5505,"th” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:5768,Energy Efficiency,reduce,reduced,5768,"LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._”",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:7023,Energy Efficiency,efficient,efficient,7023,"ies, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature orig",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10344,Energy Efficiency,reduce,reduced,10344,"rees, RDataFrame::GetColumnNames might now returns multiple valid spellings for a given column. For example, leaf ""l"" under branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:13232,Energy Efficiency,charge,charge,13232," py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class using kernel estimation for estimating a density from data.; Improve TF1::GetRandom, TH1::GetRandom and TH1::FillRandom (and same for TF2,TF3, TH2 and TH3 functions) to pass optionally a random number generator instance. This allows to use these function with a user provided random number generator instead of using the default gRandom. Math Libraries. Update the definitions of the physical constants using the recommended 2018 values from NIST.; Use also the new SI definition of base units from 2019, where the Planck constant, the Boltzmann constant, the elementary electric charge and the Avogadro constant are exact numerical values. See https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units. Note that with this new definition the functions TMath::HUncertainty(), TMath::KUncertainty(), TMath::QeUncertainty() and TMath::NaUncertainty() all return a 0.0 value.; Due to some planned major improvements to RVec, the layout of RVec objects will change in a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or writing a ROOT::RVec object from/to a ROOT file. We assume this is an exceedingly rare case, as the ROOT interface typically used to manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All th",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:15520,Energy Efficiency,power,power,15520," every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22296,Energy Efficiency,reduce,reduce,22296,"is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataH",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:24658,Energy Efficiency,allocate,allocates,24658,"i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:25614,Energy Efficiency,power,power-law,25614,"ow supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channe",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:25779,Energy Efficiency,power,power-law,25779,"sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:3450,Integrability,interface,interfaces,3450,"N/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon sepa",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:4856,Integrability,interface,interface,4856,"utor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:6208,Integrability,interface,interfaces,6208,"s or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:8000,Integrability,interface,interface,8000,") concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branches to a new TTree.; Snapshot now writes branches coming from friend TTrees even if they have the same name as branches in the main tree (friendname_ is prepended to the name of the output branches). More details at #7181.; Just-in-time compilation of string expressions passed to Filter and Define now generates functions that take fundamental types by const value (rather than by non-const reference as before). This w",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:11888,Integrability,depend,dependencies,11888,"d support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spark backend for example has the following runtime dependencies (ROOT will build just fine without, but the feature will be unavailable without these packages):. pyspark, that in turn has its own set of dependencies:; Java; py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class using kernel estimation for estimating a density from data.; Improve TF1::GetRandom, TH1::GetRandom and TH1::FillRandom (and same for TF2,TF3, TH2 and TH3 functions) to pass optionally a random number generator instance. This allows to use these func",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:12023,Integrability,depend,dependencies,12023,"is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spark backend for example has the following runtime dependencies (ROOT will build just fine without, but the feature will be unavailable without these packages):. pyspark, that in turn has its own set of dependencies:; Java; py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class using kernel estimation for estimating a density from data.; Improve TF1::GetRandom, TH1::GetRandom and TH1::FillRandom (and same for TF2,TF3, TH2 and TH3 functions) to pass optionally a random number generator instance. This allows to use these function with a user provided random number generator instead of using the default gRandom. Math Libraries. Update the definitions of the physical const",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:12175,Integrability,depend,dependencies,12175,"aFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spark backend for example has the following runtime dependencies (ROOT will build just fine without, but the feature will be unavailable without these packages):. pyspark, that in turn has its own set of dependencies:; Java; py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class using kernel estimation for estimating a density from data.; Improve TF1::GetRandom, TH1::GetRandom and TH1::FillRandom (and same for TF2,TF3, TH2 and TH3 functions) to pass optionally a random number generator instance. This allows to use these function with a user provided random number generator instead of using the default gRandom. Math Libraries. Update the definitions of the physical constants using the recommended 2018 values from NIST.; Use also the new SI definition of base units from 2019, where the ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:13857,Integrability,interface,interface,13857,"h a user provided random number generator instead of using the default gRandom. Math Libraries. Update the definitions of the physical constants using the recommended 2018 values from NIST.; Use also the new SI definition of base units from 2019, where the Planck constant, the Boltzmann constant, the elementary electric charge and the Avogadro constant are exact numerical values. See https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units. Note that with this new definition the functions TMath::HUncertainty(), TMath::KUncertainty(), TMath::QeUncertainty() and TMath::NaUncertainty() all return a 0.0 value.; Due to some planned major improvements to RVec, the layout of RVec objects will change in a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or writing a ROOT::RVec object from/to a ROOT file. We assume this is an exceedingly rare case, as the ROOT interface typically used to manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minu",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:14113,Integrability,interface,interfaces,14113,"NIST.; Use also the new SI definition of base units from 2019, where the Planck constant, the Boltzmann constant, the elementary electric charge and the Avogadro constant are exact numerical values. See https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units. Note that with this new definition the functions TMath::HUncertainty(), TMath::KUncertainty(), TMath::QeUncertainty() and TMath::NaUncertainty() all return a 0.0 value.; Due to some planned major improvements to RVec, the layout of RVec objects will change in a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or writing a ROOT::RVec object from/to a ROOT file. We assume this is an exceedingly rare case, as the ROOT interface typically used to manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed st",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:14935,Integrability,message,message,14935,"orms an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevan",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:14965,Integrability,message,message,14965,"an writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add s",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:15558,Integrability,interface,interface,15558,"was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were sl",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:17189,Integrability,message,message,17189,"ith the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:17414,Integrability,depend,depending,17414,"global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo noteboo",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:23259,Integrability,interface,interface,23259,"e const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SUGGEST_NEW_INTERFACE to switch on deprecation warnings for the functions in question. Similarly, the bin content can now be set using an index, making prior loading of a certain coordinate unnecessary:; for (int i=0 ; i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26945,Integrability,protocol,protocol,26945,"ape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wid",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28711,Integrability,interface,interface,28711," the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:30727,Integrability,integrat,integration,30727,"not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:36902,Integrability,message,messages,36902, with conda ROOT; [ROOT-10886] - 6.22/00 Build failure with Clang 7.0.0 on SL7 with -Druntime_cxxmodules:BOOL=ON; [ROOT-10889] - [RDF] Unexpected/broken behaviour of the Display action; [ROOT-10890] - TMath::Gcgs() problem; [ROOT-10891] - [DF] Display of char* branches is broken; [ROOT-10895] - ROOT version 6.20/06: Instantiating TPythia8 brings program to halt; [ROOT-10896] - IMT Snapshot segfault when TTree switches over multiple files; [ROOT-10912] - Regression in standalone roottest: cppyy_backend cannot be imported; [ROOT-10913] - RooCategory doesn’t update its label when its state is dirty.; [ROOT-10917] - prompt: pressing ctrl-R when no root_hist file is present results in a segfault; [ROOT-10925] - Can not compile ROOT macro on Windows; [ROOT-10927] - Dramatic increase of memory usage while reading trees containing histograms; [ROOT-10931] - Polygon doesn’t close when drawing PDF as filled curve; [ROOT-10935] - RooDataSet::read() no longer accepts RooCategory numbers; [ROOT-10936] - Build fails with cuDNN 8; [ROOT-10942] - [DF] Regression in recognition of nested branch names; [ROOT-10944] - hadd: wrong TH2 sum with x-labels only; [ROOT-10946] - Error messages from RooMomentMorphND; [ROOT-10956] - New jupyroot missing jupyterlab fixes in pyroot_legacy - Causes jsroot to fail in jupyterlab; [ROOT-10962] - Uncaught exceptions from RDataFrame operations exit root prompt.; [ROOT-10963] - [Tree] TLeaf::GetName and TLeaf::GetFullName disagree on leaf name; [ROOT-10964] - README/INSTALL should point to web; [ROOT-10969] - Can not compile ROOT macro on Win10: picking up paths to other SW; [ROOT-10982] - ODR Violation in TMVA; [ROOT-10987] - RooFit’s caching can lead to wrong results when batch computations used.; [ROOT-10993] - ROOT fails in loading nlohmann/json; [ROOT-10994] - TFormula::DoEval and DoEvalVec have a thread safety issue; [ROOT-10995] - Possible data race in TFormula::TFormula() constructor; [ROOT-11000] - rootcling fails for Gaudi classes; [ROOT-11001,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:38704,Integrability,message,message,38704,"la() constructor; [ROOT-11000] - rootcling fails for Gaudi classes; [ROOT-11001] - unable to create TChain on ROOT file; [ROOT-11005] - ROOT crashes when creating a TCanvas with gDebug=1; [ROOT-11009] - RDataFrame Silent “bugs” with assignment in Filter expressions; [ROOT-11013] - “Impossible code path” in TGenCollectionProxy.cxx when using rootcling; [ROOT-11015] - OpenGL rendering is incorrect for “pgon - pgon”; [ROOT-10830] - vector<string> behaviour in loops in PyROOT 6.20 vs 6.22; [ROOT-9559] - [DF] Treat indexed Friend trees; [ROOT-10832] - Make TH1::GetCumulative account for underflows and overflows; [ROOT-8013] - equalising roofit tutorials for easier digestion; [ROOT-8142] - Provide corrupt line when XML parsing fails; [ROOT-10022] - [DF] Add support for TBranchObjects (e.g. branches containing TH2F); [ROOT-10781] - Performance penalty from RooRealVar not allowing to use hash table on RooLinkedList member; [#6408] - Creating RooDataSet causes SegFault; [#6529] - segfault in RooWorkspace::import; [#6489] - Test Issue; [#6540] - Crash message should point to github; [#6479] - TMVA TMVAGui functions crash in batch mode; [#6553] - TMVA Provide support in MethodPyKeras for tensorflow.keras; [#6403] - [Hist] Bugs in TProfile,TProfile2D::LabelsOption; [#6527] - Double delete error with TTree::ChangeFile and a TFile on the stack; [#6455] - [DF] RDataSource does not early-quit event loops when all Ranges are exhausted; [#6435] - [DF] Jitted Min method breaks with RVec columns; [#6425] - Typo in void TEnv::SetValue(const char *name, double value) implementation; [#6406] - root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; [#6371] - [DF] Display doesn’t work with non-top-level TTree branches; [#6448] - Disable NDEBUG for PR builds; [#6482] - TClass::GetListOfFunctions() fails to enumerate using decls.; [#6393] - PyROOT cannot call templated ctors on Windows; [#6359] - python: /workspace/build/projects/ROOT-HEAD/src/ROOT/H",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:41085,Integrability,depend,depending,41085,"79] - Floating point exception in TCanvas; [#6374] - Floating point exception in TPad; [#6642] - THStack behaviour is not aligned with behaviour of other objects when drawing - TopMargin is non-zero; [#6446] - Possible Null pointer dereference in TPad; [#6375] - Segmentation violation in TPaveLabel class; [#6552] - PyROOT (de)serialization using pickle (or dill) fails without pre-import of ROOT for new PyROOT; [#6468] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Te",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:41439,Integrability,depend,dependency,41439,"] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] -",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:41599,Integrability,message,messages,41599,"] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] -",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45815,Integrability,interface,interface,45815,"2] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:46351,Integrability,depend,depends,46351,"jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:4294,Modifiability,variab,variable,4294,"e correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage wh",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:4640,Modifiability,variab,variable,4640,"// does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:4692,Modifiability,variab,variables,4692,"// does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:5054,Modifiability,variab,variable,5054,"tructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entr",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:6334,Modifiability,flexible,flexible,6334,"s gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:7462,Modifiability,variab,variable,7462," no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branche",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:8326,Modifiability,extend,extend,8326," aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branches to a new TTree.; Snapshot now writes branches coming from friend TTrees even if they have the same name as branches in the main tree (friendname_ is prepended to the name of the output branches). More details at #7181.; Just-in-time compilation of string expressions passed to Filter and Define now generates functions that take fundamental types by const value (rather than by non-const reference as before). This will break code that was assigning to column values in string expressions: this is an intended side effect as we want to prevent non-expert users from performing assignments (=) rather than comparisons (==). Expert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See ROOT-11009 for further discussio",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10602,Modifiability,enhance,enhances,10602,"OOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:11875,Modifiability,inherit,inherits,11875,"d support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spark backend for example has the following runtime dependencies (ROOT will build just fine without, but the feature will be unavailable without these packages):. pyspark, that in turn has its own set of dependencies:; Java; py4j. Tests for the Spark backend can be turned ON/OFF with the new build option test_distrdf_pyspark (OFF by default).; Histogram Libraries. Add a new THistRange class for defining a generic bin range and iteration in a 1d and multi-dimensional histogram; Fix a memory leak in TF1::Copy and TFormula::Copy; Enable using automatic differentiation when computing parameter gradient in formula based TF1; Add several fixes and improvements to the TKDE class using kernel estimation for estimating a density from data.; Improve TF1::GetRandom, TH1::GetRandom and TH1::FillRandom (and same for TF2,TF3, TH2 and TH3 functions) to pass optionally a random number generator instance. This allows to use these func",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:24916,Modifiability,variab,variables,24916,"of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:25301,Modifiability,variab,variables,25301,"side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::Ch",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:25402,Modifiability,variab,variables,25402,"side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::Ch",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:27433,Modifiability,variab,variable,27433,"astCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully re",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:27538,Modifiability,variab,variable,27538,"cantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter start",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:27707,Modifiability,variab,variable,27707,"ny other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28248,Modifiability,extend,extend,28248,"very specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29361,Modifiability,variab,variable,29361,"wser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29725,Modifiability,variab,variable,29725," based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correc",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:32364,Modifiability,extend,extended,32364,"ing the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes identically named objects from directory; [ROOT-8133] - TROOT::ProcessLine: TString::Replace out of range; [ROOT-8173] - RooStreamParser not working for float number with negative exponent; [ROOT-8331] - Error in the member function Multiply(const Double_t *vin, Double_t* vout, Double_t w) in TEveTrans of Eve package; [ROOT-8489] - Toy generation using RooCBShape with conditional PDF; [ROOT-8497] - Wrong likelihood is computed for RooProdPdf containing a RooFFTConvPdf; [ROOT-8535] - Non unique UUID; [ROOT-8885] - Cannot create a branch of long, unsigned long, std::size_t types; [ROOT-9062] - $HOME is not automatically extended in TCling; [ROOT-9240] - Compiled program with libNew.so crash; [ROOT-9324] - [cling] segfault when calling cout both from jitted and compiled code; [ROOT-9483] - TMVAGui::mvaeffs crashes when compiled stand-alone; [ROOT-9497] - TCling::Calc() must not abort; [ROOT-9563] - [TreeProcMT] Trees ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:41977,Modifiability,inherit,inheriting,41977,"s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:43157,Modifiability,inherit,inheritance,43157,"inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault when reading branch of “automatically loaded” friend; [#6741] - [DF] When dataset is specified as treename/filename, the TTree is read without its friends; [#6470] - PyROOT: virtual C++ method overriden in python ignored with further inheritance chain. [#7058] - [DF] crash when asking for type of aliased columns; [#6848] - [DF] Warnings printed from Snapshot of a TChain when no entry passes upstream Filters; [#6518] - [TreeReader] When looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector argu",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:43683,Modifiability,config,configuration,43683,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:47308,Modifiability,variab,variable,47308,"n for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running FrequentistCalculator scan in RooStats; [#7933] - Memory leak when using MemPoolForRooSets; [#7169] - RDataFrame and CreatePoxy/TTreeReaderValue error for selection on string branch in Filter method; [#8226] - [DF] Crash in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:49098,Modifiability,extend,extendedTerm,49098,"h RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:49944,Modifiability,extend,extendedTerm,49944,"hout std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#1017",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:3527,Performance,concurren,concurrency,3527,"as been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_L",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:3976,Performance,concurren,concurrency,3976,"duce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the environment variable ROOT_LIBRARY_PATH. On Unix it should contain a colon separated list of paths, on Windows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to en",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:5343,Performance,perform,performance,5343,"dows a semicolon separated list. It is intended to be cross platform and to be specific to ROOT (and thus not interfere with the system’s shared linker). The final “Dynamic Path” is now composed of these sources in order:. ROOT_LIBRARY_PATH environment variable; System specific shared linker environment variables like LD_LIBRARY_PATH, LIBPATH, or PATH.; Setting from rootrc; ROOT’s builtin library directory. Interpreter. cling’s LLVM is upgraded to version 9.0; New interface to enable/disable optional cling features. Currently, it can be used to enable/disable support for redefinitions. See this issue for more information. Multithreading. Fix an uninitialized variable in global read-write lock which could have caused deadlocks or crashes in some rare cases.; Default global read-write lock transitioned to new implementation based on TBB thread local storage when TBB is available on supported platforms (all except Windows). This gives an O(10%) performance improvement for some typical RDataFrame scenarios with 256 threads due to reduced lock contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTa",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:6946,Performance,concurren,concurrently,6946,"re also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame r",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:9094,Performance,perform,performing,9094,"ergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branches to a new TTree.; Snapshot now writes branches coming from friend TTrees even if they have the same name as branches in the main tree (friendname_ is prepended to the name of the output branches). More details at #7181.; Just-in-time compilation of string expressions passed to Filter and Define now generates functions that take fundamental types by const value (rather than by non-const reference as before). This will break code that was assigning to column values in string expressions: this is an intended side effect as we want to prevent non-expert users from performing assignments (=) rather than comparisons (==). Expert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See ROOT-11009 for further discussion.; For some TTrees, RDataFrame::GetColumnNames might now returns multiple valid spellings for a given column. For example, leaf ""l"" under branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-threa",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10033,Performance,multi-thread,multi-thread,10033,"nded side effect as we want to prevent non-expert users from performing assignments (=) rather than comparisons (==). Expert users can resort to compiled callables if they absolutely have to assign to column values (not recommended). See ROOT-11009 for further discussion.; For some TTrees, RDataFrame::GetColumnNames might now returns multiple valid spellings for a given column. For example, leaf ""l"" under branch ""b"" might now be mentioned as ""l"" as well as ""b.l"", while only one of the two spellings might have been recognized before.; Certain RDF-related types in the ROOT::Detail and ROOT::Internal namespaces have been renamed, most notably RCustomColumn is now RDefine. This does not impact code that only makes use of entities in the public ROOT namespace, and should not impact downstream code unless it was patching or reusing internal RDataFrame types. Notable bug fixes and improvements. A critical issue has been fixed that could potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed chang",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:13932,Performance,perform,performs,13932,"h a user provided random number generator instead of using the default gRandom. Math Libraries. Update the definitions of the physical constants using the recommended 2018 values from NIST.; Use also the new SI definition of base units from 2019, where the Planck constant, the Boltzmann constant, the elementary electric charge and the Avogadro constant are exact numerical values. See https://en.wikipedia.org/wiki/2019_redefinition_of_the_SI_base_units. Note that with this new definition the functions TMath::HUncertainty(), TMath::KUncertainty(), TMath::QeUncertainty() and TMath::NaUncertainty() all return a 0.0 value.; Due to some planned major improvements to RVec, the layout of RVec objects will change in a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or writing a ROOT::RVec object from/to a ROOT file. We assume this is an exceedingly rare case, as the ROOT interface typically used to manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minu",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:14832,Performance,optimiz,optimize,14832,"ace typically used to manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of Metho",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:17836,Performance,load,loaded,17836,"ontinue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:17903,Performance,load,loads,17903,"ontinue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:18610,Performance,optimiz,optimized,18610,"ompilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evaluateBatch(); In case you have created a custom PDF which overrides evaluateBatch(), please follow these steps to update your code to the newest version:. Change the signature of the function both in the source and header file:. - RooSpan<double> RooGaussian::evaluateBatch(std::size_t begin, std::size_t batchSize) const; + RooSpan<double> evaluateSpan(RooBatchCompute::RunContext& evalData, const RooArgSet* normSet) const. Include RunContext.h and BracketAdapter.h.; Use getValues() instead",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:18673,Performance,optimiz,optimization,18673,"ompilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evaluateBatch(); In case you have created a custom PDF which overrides evaluateBatch(), please follow these steps to update your code to the newest version:. Change the signature of the function both in the source and header file:. - RooSpan<double> RooGaussian::evaluateBatch(std::size_t begin, std::size_t batchSize) const; + RooSpan<double> evaluateSpan(RooBatchCompute::RunContext& evalData, const RooArgSet* normSet) const. Include RunContext.h and BracketAdapter.h.; Use getValues() instead",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:18701,Performance,multi-thread,multi-threaded,18701,"ompilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evaluateBatch(); In case you have created a custom PDF which overrides evaluateBatch(), please follow these steps to update your code to the newest version:. Change the signature of the function both in the source and header file:. - RooSpan<double> RooGaussian::evaluateBatch(std::size_t begin, std::size_t batchSize) const; + RooSpan<double> evaluateSpan(RooBatchCompute::RunContext& evalData, const RooArgSet* normSet) const. Include RunContext.h and BracketAdapter.h.; Use getValues() instead",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:20908,Performance,perform,performs,20908,"s. size_t nEvents=0;; for (auto& i:{xData,meanData,sigmaData}); nEvents = std::max(nEvents,i.size());. Create the output batch by calling RunContext::makeBatch(). - auto output = _batchData.makeWritableBatchUnInit(begin, batchSize);; + auto output = evalData.makeBatch(this, nEvents);. DO NOT use RooSpan::isBatch() and RooSpan::empty() methods! Instead, distinguish between scalar (RooSpan of size 1) and vector (RooSpan of size>1) parameters as shown below. - const bool batchX = !xData.empty();; + const bool batchX = xData.size()>1;. Append RooBatchCompute:: to the classes that have been moved to the RooBatchCompute Library: RooSpan,BracketAdapterWithMask, BracketAdapter, RunContext. Alternatively, you can write. using namespace RooBatchCompute;. Replace _rf_fast_<function> with RooBatchCompute::fast_<function> and include RooVDTHeaders.h (if applicable). - output[i] = _rf_fast_exp(arg*arg * halfBySigmaSq);; + output[i] = RooBatchCompute::fast_exp(arg*arg * halfBySigmaSq);; Unbiased binned fits; When RooFit performs binned fits, it takes the probability density at the bin centre as a proxy for the probability in the bin. This can lead to a bias. To alleviate this, the new class RooBinSamplingPdf has been added to RooFit. Also see arxiv:2012.02746.; More accurate residual and pull distributions; When making residual or pull distributions with RooPlot::residHist or RooPlot::pullHist, the histogram is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the min",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:23040,Performance,load,loading,23040,"le RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SUGGEST_NEW_INTERFACE to switch on deprecation warnings for the functions in question. Similarly, the bin content can now be set using an index, making prior loading of a certain coordinate unnecessary:; for (int i=0 ; i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.get",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:23605,Performance,load,loading,23605,"s when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SUGGEST_NEW_INTERFACE to switch on deprecation warnings for the functions in question. Similarly, the bin content can now be set using an index, making prior loading of a certain coordinate unnecessary:; for (int i=0 ; i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allo",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26567,Performance,perform,performance,26567,"has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpre",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28488,Performance,load,load,28488,"very specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28926,Performance,load,loader,28926,"as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default i",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28976,Performance,load,loading,28976,"en from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release f",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:33646,Performance,load,load,33646,,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:34024,Performance,load,loaded,34024,,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:37496,Performance,load,loading,37496,T-10936] - Build fails with cuDNN 8; [ROOT-10942] - [DF] Regression in recognition of nested branch names; [ROOT-10944] - hadd: wrong TH2 sum with x-labels only; [ROOT-10946] - Error messages from RooMomentMorphND; [ROOT-10956] - New jupyroot missing jupyterlab fixes in pyroot_legacy - Causes jsroot to fail in jupyterlab; [ROOT-10962] - Uncaught exceptions from RDataFrame operations exit root prompt.; [ROOT-10963] - [Tree] TLeaf::GetName and TLeaf::GetFullName disagree on leaf name; [ROOT-10964] - README/INSTALL should point to web; [ROOT-10969] - Can not compile ROOT macro on Win10: picking up paths to other SW; [ROOT-10982] - ODR Violation in TMVA; [ROOT-10987] - RooFit’s caching can lead to wrong results when batch computations used.; [ROOT-10993] - ROOT fails in loading nlohmann/json; [ROOT-10994] - TFormula::DoEval and DoEvalVec have a thread safety issue; [ROOT-10995] - Possible data race in TFormula::TFormula() constructor; [ROOT-11000] - rootcling fails for Gaudi classes; [ROOT-11001] - unable to create TChain on ROOT file; [ROOT-11005] - ROOT crashes when creating a TCanvas with gDebug=1; [ROOT-11009] - RDataFrame Silent “bugs” with assignment in Filter expressions; [ROOT-11013] - “Impossible code path” in TGenCollectionProxy.cxx when using rootcling; [ROOT-11015] - OpenGL rendering is incorrect for “pgon - pgon”; [ROOT-10830] - vector<string> behaviour in loops in PyROOT 6.20 vs 6.22; [ROOT-9559] - [DF] Treat indexed Friend trees; [ROOT-10832] - Make TH1::GetCumulative account for underflows and overflows; [ROOT-8013] - equalising roofit tutorials for easier digestion; [ROOT-8142] - Provide corrupt line when XML parsing fails; [ROOT-10022] - [DF] Add support for TBranchObjects (e.g. branches containing TH2F); [ROOT-10781] - Performance penalty from RooRealVar not allowing to use hash table on RooLinkedList member; [#6408] - Creating RooDataSet causes SegFault; [#6529] - segfault in RooWorkspace::import; [#6489] - Test Issue; [#6540] - Crash message should p,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:42961,Performance,load,loaded,42961,"inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault when reading branch of “automatically loaded” friend; [#6741] - [DF] When dataset is specified as treename/filename, the TTree is read without its friends; [#6470] - PyROOT: virtual C++ method overriden in python ignored with further inheritance chain. [#7058] - [DF] crash when asking for type of aliased columns; [#6848] - [DF] Warnings printed from Snapshot of a TChain when no entry passes upstream Filters; [#6518] - [TreeReader] When looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector argu",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45121,Performance,load,loading,45121," [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip te",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:46319,Performance,race condition,race condition,46319,"jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:47909,Performance,multi-thread,multi-thread,47909,"-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running FrequentistCalculator scan in RooStats; [#7933] - Memory leak when using MemPoolForRooSets; [#7169] - RDataFrame and CreatePoxy/TTreeReaderValue error for selection on string branch in Filter method; [#8226] - [DF] Crash in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (som",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:605,Safety,recover,recovery,605,". ROOT Version 6.24 Release Notes. ROOT Version 6.24 Release Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CER",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:21675,Safety,recover,recovery,21675,"(arg*arg * halfBySigmaSq);; + output[i] = RooBatchCompute::fast_exp(arg*arg * halfBySigmaSq);; Unbiased binned fits; When RooFit performs binned fits, it takes the probability density at the bin centre as a proxy for the probability in the bin. This can lead to a bias. To alleviate this, the new class RooBinSamplingPdf has been added to RooFit. Also see arxiv:2012.02746.; More accurate residual and pull distributions; When making residual or pull distributions with RooPlot::residHist or RooPlot::pullHist, the histogram is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in deri",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22034,Safety,recover,recover,22034,"s. To alleviate this, the new class RooBinSamplingPdf has been added to RooFit. Also see arxiv:2012.02746.; More accurate residual and pull distributions; When making residual or pull distributions with RooPlot::residHist or RooPlot::pullHist, the histogram is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loadin",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26278,Safety,avoid,avoids,26278,"in volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28448,Safety,recover,recovered,28448,"very specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:32626,Safety,abort,abort,32626," float number with negative exponent; [ROOT-8331] - Error in the member function Multiply(const Double_t *vin, Double_t* vout, Double_t w) in TEveTrans of Eve package; [ROOT-8489] - Toy generation using RooCBShape with conditional PDF; [ROOT-8497] - Wrong likelihood is computed for RooProdPdf containing a RooFFTConvPdf; [ROOT-8535] - Non unique UUID; [ROOT-8885] - Cannot create a branch of long, unsigned long, std::size_t types; [ROOT-9062] - $HOME is not automatically extended in TCling; [ROOT-9240] - Compiled program with libNew.so crash; [ROOT-9324] - [cling] segfault when calling cout both from jitted and compiled code; [ROOT-9483] - TMVAGui::mvaeffs crashes when compiled stand-alone; [ROOT-9497] - TCling::Calc() must not abort; [ROOT-9563] - [TreeProcMT] Trees in subdirectories are not supported (and their usage lead to a crash); [ROOT-9583] - TF1::Random; [ROOT-9674] - [DF] Wrong branch type inference in some cases; [ROOT-9731] - [DF] Cannot read columns holding TVector3 pointers; [ROOT-9975] - [DF] Cannot access certain sub-branches; [ROOT-9977] - [DF] SaveGraph produces an empty graph; [ROOT-10023] - [TTreeReader] Unable to read TBranchObject; [ROOT-10152] - [DF] Cannot analyze friend trees in subdirectories with MT; [ROOT-10215] - RDataFrame can’t Snapshot an std::array; [ROOT-10464] - TBB Deprecation Warning; [ROOT-10468] - Crash when users rootlogon contains std::cout in embedded python; [ROOT-10499] - TROOT::ProcessLine(""cout ..."") crashes when called from compiled code; [ROOT-10623] - Functions TF2::Moment2, TF2::CentralMoment2, and similar for TF3 work only for Formula based object; [ROOT-10639] - [DF] Handle errors in opening Snapshot output files; [ROOT-10663] - ROOT dictionary for ATLAS persistent class can’t load correctly; [ROOT-10692] - CMake should use system default C++ standard; [ROOT-10702] - [TTree] Wrong data could be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exc",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:37579,Safety,safe,safety,37579,T-10936] - Build fails with cuDNN 8; [ROOT-10942] - [DF] Regression in recognition of nested branch names; [ROOT-10944] - hadd: wrong TH2 sum with x-labels only; [ROOT-10946] - Error messages from RooMomentMorphND; [ROOT-10956] - New jupyroot missing jupyterlab fixes in pyroot_legacy - Causes jsroot to fail in jupyterlab; [ROOT-10962] - Uncaught exceptions from RDataFrame operations exit root prompt.; [ROOT-10963] - [Tree] TLeaf::GetName and TLeaf::GetFullName disagree on leaf name; [ROOT-10964] - README/INSTALL should point to web; [ROOT-10969] - Can not compile ROOT macro on Win10: picking up paths to other SW; [ROOT-10982] - ODR Violation in TMVA; [ROOT-10987] - RooFit’s caching can lead to wrong results when batch computations used.; [ROOT-10993] - ROOT fails in loading nlohmann/json; [ROOT-10994] - TFormula::DoEval and DoEvalVec have a thread safety issue; [ROOT-10995] - Possible data race in TFormula::TFormula() constructor; [ROOT-11000] - rootcling fails for Gaudi classes; [ROOT-11001] - unable to create TChain on ROOT file; [ROOT-11005] - ROOT crashes when creating a TCanvas with gDebug=1; [ROOT-11009] - RDataFrame Silent “bugs” with assignment in Filter expressions; [ROOT-11013] - “Impossible code path” in TGenCollectionProxy.cxx when using rootcling; [ROOT-11015] - OpenGL rendering is incorrect for “pgon - pgon”; [ROOT-10830] - vector<string> behaviour in loops in PyROOT 6.20 vs 6.22; [ROOT-9559] - [DF] Treat indexed Friend trees; [ROOT-10832] - Make TH1::GetCumulative account for underflows and overflows; [ROOT-8013] - equalising roofit tutorials for easier digestion; [ROOT-8142] - Provide corrupt line when XML parsing fails; [ROOT-10022] - [DF] Add support for TBranchObjects (e.g. branches containing TH2F); [ROOT-10781] - Performance penalty from RooRealVar not allowing to use hash table on RooLinkedList member; [#6408] - Creating RooDataSet causes SegFault; [#6529] - segfault in RooWorkspace::import; [#6489] - Test Issue; [#6540] - Crash message should p,MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:42083,Safety,safe,safety,42083,"ile and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and tree->StartViewer() is called; [#6840] - TClass for pair sometimes have the wrong offset/size; [#6839] - Compilation fails on macosx 11.0 with arm processor; [#6838] - build/unix/compiledata.sh assumes macOS will always have major version 10; [#6817] - macOS packaging broken in master; [#6856] - error when creating a python class inheriting from a ROOT class, 6.22/02; [#6797] - TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety; [#6483] - [GUI] Crashes when creating TGClient in a standalone application; [#6563] - Test failures on MacOS with Xcode 12; [#6624] - TRandom: signature mismatch between getter and setter; [#6815] - PowerShell version of thisroot.bat; [#6853] - [DF] SaveGraph can be confused by shared upstream Defines; [#6731] - Compilation error on CentOS 7 of root V6.22.02 c++17; [#6974] - pyROOT doesn’t work with ipyparallel; [#6964] - [TTree] GetLeaf ignores the branchname arg if friend trees are present; [#6944] - RDataFrame misidentifies vector<XYZTVector> type of a friend tree with identical branch name to another friend tree; [#6345] - 6.22.00 pyroot regression: Can’t derive from TProfile.; [#6903] - Builtin TBB is broken on MacOS M1; [#7016] - Memory leak during schema evolution of some classes; [#6993] - [TTreeReader] Segfault when reading branch of “automatically loaded” friend; [#6741] - [DF] When dataset is specified as treename/filename, the TTree is read without its friends; [#6470] - PyROOT: virtual C++ method overriden in python ignored with further inherita",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:49908,Safety,unsafe,unsafe,49908,"hout std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#1017",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:51132,Safety,safe,safety,51132," off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is MT unsafe; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative. Release 6.24/08; Published on September 29, 2022; Bugs and Issues fixed in this release. [ROOT-10829] - pure virtual method called error; [#8933] - CMAKE_INSTALL_PYTHONDIR on macOS creates broken symlinks; [#9017] - Access of deleted object during hadd tear down.; [#8072] - Failures with root 6.24.00 on Fedora 33 ppc64le; [#9297] - ROOT 6.24 debug build failed on ppc64le; [#9424] - ROOT 6.24 failed to build with GCC10 or 11 on ppc64le arch; [#9547] - [RF] RooFit crashes when ROOT is built with Clang 13; [#9543] - roottest-root-treeformula-stl-make crashes during process termination; [#8987] - Missing operator= in code generated by MakeProject; [#7754] - Segfault when using schema evolution; [#8428] - I/O customization rule not run on split sub-object of a non-collection object.; [#9899] - TTree incorrectly run I/O customization rules on “new” data members.; [#9939] - Hadd super slow since TFileMerger modification; [#10170] - Crashes when reading a TTree with a friend; [#8549] - A crash when opening a TTree and its friend on TFile::Close(); [#10131] - Open too many different non-versioned layouts for pair; [#10353] - Thread-safety issue in TClassEdit (StdLen)? [6.24.06]; [#7276] - [RF] ROOT 6.22/06 crashes reading old workspace file; [#10548] - Use of undeclared identifier on Mac ARM; [#10478] - runtime_cxxmodules fails to build with GCC12; [#11080] - Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; [#10645] - [TTreeReader] Cannot read Float16_t branch; [#11260] - TTreeReaderArray does not support Double32_t; [#11383] - Deadlock in ErrorHandler when invoked at library initialization time. HEAD of the v6-24-00-patches branch; These changes will be part of a future 6.24/10. None so far. ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:799,Security,secur,security,799,". ROOT Version 6.24 Release Notes. ROOT Version 6.24 Release Notes; 2022-09-29. Introduction; General; Deprecation and Removal; Header Dependency Reduction. Core Libraries; Dynamic Path: ROOT_LIBRARY_PATH; Interpreter; Multithreading. I/O Libraries; TTree Libraries; RDataFrame; New features; Behavior changes; Notable bug fixes and improvements; Distributed computing with RDataFrame. Histogram Libraries; Math Libraries; Minuit2. TMVA; RooFit Libraries; Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; Unbiased binned fits; More accurate residual and pull distributions; Improved recovery from invalid parameters; Modernised RooDataHist; New fully parametrised Crystal Ball shape class. 2D Graphics Libraries; Networking Libraries; Multithreaded support for FastCGI; Better security for THttpServer with webgui; Enabled WLCG Bearer Tokens support in RDavix; Xrootd client support. GUI Libraries; RBrowser improvements. JavaScript ROOT; Major JSROOT update to version 6. Class Reference Guide; Build, Configuration and Testing Infrastructure; PyROOT; Bugs and Issues fixed in this release; Release 6.24/02; RDataFrame; Bugs and Issues fixed in this release. Release 6.24/04; Bugs and Issues fixed in this release. Release 6.24/06; Bugs and Issues fixed in this release. Release 6.24/08; Bugs and Issues fixed in this release. HEAD of the v6-24-00-patches branch. Introduction; ROOT version 6.24/00 was released on April 14, 2022.; For more information, see:; http://root.cern; The following people have contributed to this new version:; Guilherme Amadio, CERN/SFT,; Bertrand Bellenot, CERN/SFT,; Josh Bendavid, CERN/CMS,; Jakob Blomer, CERN/SFT,; Rene Brun, CERN/SFT,; Philippe Canal, FNAL,; Olivier Couet, CERN/SFT,; Anirudh Dagar, CERN-SFT/GSOC,; Hans Dembinski, TU Dortmund/LHCb,; Massimiliano Galli, CERN/SFT,; Andrei Gheata, CERN/SFT,; Hadrien Grasland, IJCLab/LAL,; Enrico Guiraud, CERN/SFT,; Claire Guyot, CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CER",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:2963,Security,expose,exposed,2963," CERN/SFT,; Jonas Hahnfeld, CERN/SFT,; Emmanouil Michalainas, CERN/SFT,; Stephan Hageboeck, CERN/SFT,; Sergey Linev, GSI,; Javier Lopez-Gomez, CERN/SFT,; Pere Mato, CERN/SFT,; Lorenzo Moneta, CERN/SFT,; Alja Mrak-Tadel, UCSD/CMS,; Axel Naumann, CERN/SFT,; Vincenzo Eduardo Padulano, CERN/SFT and UPV,; Danilo Piparo, CERN/SFT,; Fons Rademakers, CERN/SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:10976,Security,expose,expose,10976,"ld potentially result in wrong data being silently read in multi-thread runs when an input TChain contained more than one TTree coming from the same input file. More details are available at #7143.; The start-up time of event loops with large computation graphs with many just-in-time-compiled expressions (e.g. thousands of string Filters and Defines) has been greatly reduced. See the corresponding pull request for more details. The full list of bug fixes for this release is available below.; Distributed computing with RDataFrame; ROOT 6.24 introduces ROOT.RDF.Experimental.Distributed, an experimental python package that enhances RDataFrame with distributed computing capabilities. The new package allows distributing RDataFrame applications through one of the supported distributed backends. The package was designed so that different backends can be easily plugged in. Currently the Apache Spark backend is supported and support for Dask is coming soon. The backend submodules of this package expose their own RDataFrame objects. The only needed change in user code is to substitute ROOT.RDataFrame calls with such backend-specific RDataFrames. For example:; import ROOT. # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame. # It still accepts the same constructor arguments as traditional RDataFrame; df = RDataFrame(""mytree"",""myfile.root""). # Continue the application with the traditional RDataFrame API; The main goal of this package is to support running any RDataFrame application distributedly. Nonetheless, not all RDataFrame operations currently work with this package. The subset that is currently available is:. AsNumpy; Count; Define; Fill; Filter; Graph; Histo[1,2,3]D; Max; Mean; Min; Profile[1,2,3]D; Snapshot; Sum. with support for more operations coming in the future.; Any distributed RDataFrame backend inherits the dependencies of the underlying software needed to distribute the applications. The Spa",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:16605,Security,hash,hash,16605,"rsion embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to full",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:18149,Security,access,access,18149,"RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evalu",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22439,Security,access,access,22439,"gly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SU",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22523,Security,access,accesses,22523,"entres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SUGGEST_NEW_INTERFACE to switch on deprecation warnings for the functions in question. Similar",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22722,Security,access,access,22722,"ved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SUGGEST_NEW_INTERFACE to switch on deprecation warnings for the functions in question. Similarly, the bin content can now be set using an index, making prior loading of a certain coordinate unnecessary:; for (int i=0 ; i<hist",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:22764,Security,access,accesses,22764,"ss information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataHist.get(i), dataHist.weight(i));; To modernise old code, one should replace patterns like h.get(i); h.func() by h.func(i);. One may #define R__SUGGEST_NEW_INTERFACE to switch on deprecation warnings for the functions in question. Similarly, the bin content can now be set using an index, making prior loading of a certain coordinate unnecessary:; for (int i=0 ; i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calc",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26635,Security,secur,security,26635,"Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the toke",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:26772,Security,access,access,26772,"Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the toke",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:27017,Security,secur,secure,27017,"ape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wid",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:27847,Security,secur,security,27847,"ny other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:32918,Security,access,access,32918," float number with negative exponent; [ROOT-8331] - Error in the member function Multiply(const Double_t *vin, Double_t* vout, Double_t w) in TEveTrans of Eve package; [ROOT-8489] - Toy generation using RooCBShape with conditional PDF; [ROOT-8497] - Wrong likelihood is computed for RooProdPdf containing a RooFFTConvPdf; [ROOT-8535] - Non unique UUID; [ROOT-8885] - Cannot create a branch of long, unsigned long, std::size_t types; [ROOT-9062] - $HOME is not automatically extended in TCling; [ROOT-9240] - Compiled program with libNew.so crash; [ROOT-9324] - [cling] segfault when calling cout both from jitted and compiled code; [ROOT-9483] - TMVAGui::mvaeffs crashes when compiled stand-alone; [ROOT-9497] - TCling::Calc() must not abort; [ROOT-9563] - [TreeProcMT] Trees in subdirectories are not supported (and their usage lead to a crash); [ROOT-9583] - TF1::Random; [ROOT-9674] - [DF] Wrong branch type inference in some cases; [ROOT-9731] - [DF] Cannot read columns holding TVector3 pointers; [ROOT-9975] - [DF] Cannot access certain sub-branches; [ROOT-9977] - [DF] SaveGraph produces an empty graph; [ROOT-10023] - [TTreeReader] Unable to read TBranchObject; [ROOT-10152] - [DF] Cannot analyze friend trees in subdirectories with MT; [ROOT-10215] - RDataFrame can’t Snapshot an std::array; [ROOT-10464] - TBB Deprecation Warning; [ROOT-10468] - Crash when users rootlogon contains std::cout in embedded python; [ROOT-10499] - TROOT::ProcessLine(""cout ..."") crashes when called from compiled code; [ROOT-10623] - Functions TF2::Moment2, TF2::CentralMoment2, and similar for TF3 work only for Formula based object; [ROOT-10639] - [DF] Handle errors in opening Snapshot output files; [ROOT-10663] - ROOT dictionary for ATLAS persistent class can’t load correctly; [ROOT-10692] - CMake should use system default C++ standard; [ROOT-10702] - [TTree] Wrong data could be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exc",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:38539,Security,hash,hash,38539,"la() constructor; [ROOT-11000] - rootcling fails for Gaudi classes; [ROOT-11001] - unable to create TChain on ROOT file; [ROOT-11005] - ROOT crashes when creating a TCanvas with gDebug=1; [ROOT-11009] - RDataFrame Silent “bugs” with assignment in Filter expressions; [ROOT-11013] - “Impossible code path” in TGenCollectionProxy.cxx when using rootcling; [ROOT-11015] - OpenGL rendering is incorrect for “pgon - pgon”; [ROOT-10830] - vector<string> behaviour in loops in PyROOT 6.20 vs 6.22; [ROOT-9559] - [DF] Treat indexed Friend trees; [ROOT-10832] - Make TH1::GetCumulative account for underflows and overflows; [ROOT-8013] - equalising roofit tutorials for easier digestion; [ROOT-8142] - Provide corrupt line when XML parsing fails; [ROOT-10022] - [DF] Add support for TBranchObjects (e.g. branches containing TH2F); [ROOT-10781] - Performance penalty from RooRealVar not allowing to use hash table on RooLinkedList member; [#6408] - Creating RooDataSet causes SegFault; [#6529] - segfault in RooWorkspace::import; [#6489] - Test Issue; [#6540] - Crash message should point to github; [#6479] - TMVA TMVAGui functions crash in batch mode; [#6553] - TMVA Provide support in MethodPyKeras for tensorflow.keras; [#6403] - [Hist] Bugs in TProfile,TProfile2D::LabelsOption; [#6527] - Double delete error with TTree::ChangeFile and a TFile on the stack; [#6455] - [DF] RDataSource does not early-quit event loops when all Ranges are exhausted; [#6435] - [DF] Jitted Min method breaks with RVec columns; [#6425] - Typo in void TEnv::SetValue(const char *name, double value) implementation; [#6406] - root7 is turned off by default even if the default C++ standard of the compiler is C++14 or above; [#6371] - [DF] Display doesn’t work with non-top-level TTree branches; [#6448] - Disable NDEBUG for PR builds; [#6482] - TClass::GetListOfFunctions() fails to enumerate using decls.; [#6393] - PyROOT cannot call templated ctors on Windows; [#6359] - python: /workspace/build/projects/ROOT-HEAD/src/ROOT/H",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:40630,Security,access,accessing,40630,"OT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion Val && ""isa<> used on a null pointer"" failed.; [#6350] - When in-memory TTree are written, they are not compressed.; [#6453] - Potential null pointer dereference in TPad::Close; [#6449] - Floating point exception in TPad (part 3); [#6578] - Using declaration of TGMainFrame constructor not taken into account; [#6381] - TH3 missing labels; [#6379] - Floating point exception in TCanvas; [#6374] - Floating point exception in TPad; [#6642] - THStack behaviour is not aligned with behaviour of other objects when drawing - TopMargin is non-zero; [#6446] - Possible Null pointer dereference in TPad; [#6375] - Segmentation violation in TPaveLabel class; [#6552] - PyROOT (de)serialization using pickle (or dill) fails without pre-import of ROOT for new PyROOT; [#6468] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:45240,Security,authenticat,authentication,45240," [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with unsigned num assigned to a not declared item; [#7292] - compilation fails on xrootd: _STAT_VER was not declared; [#7481] - String parse error in RooSimPdfBuilder.cxx; [#7433] - Segmentation fault after quitting Cling in CUDA mode; [#7239] - [RF] Use integral of PDF curves for pull plots and residuals; [#7390] - Must not forward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip te",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:48861,Security,expose,exposed,48861,"h in multi-thread Snapshot in sub-directory; [#8276] - [DF] Possible use after delete of the functor passed to PassAsVec; [#8071] - Problems compiling root 6.24.00 with gcc 11 on Fedora 34; [#8307] - Issue with RooSimultaneous in 6.24.00 ?; [#8295] - TChain::AddClone failing for sub-branches of branch of type with ClassDef; [#7727] - TChain::CopyAddresses:0 warning in RDataFrame Snapshot of TChain with multiple files with objects; [#6520] - Integer types not available for Bulk API; [#8317] - [DF] Compilation failure when a mutable lambda is passed to Foreach; [#8155] - Error opening remote root file LCG_100; [#8280] - ROOT CMake fails if an external package sets a higher minimum CMake version; [#8281] - ROOT 6.24 fails to compile with GCC 11.1 in C++11 mode; [#8180] - ROOT 6.24 breaks Alice O2 due to symbol confusion with system llvm 11; [#8033] - StreamerElement retrieved from file has incorrect element name for (some) arrays.; [#8022] - TBB exposed in public includes of Thread library; [#7905] - sqrt without std:: in Math/GenVector/PxPyPzE4D.h; [#8196] - TUnuranContDist ctor clones the dpdf but does not use the clone causing a segfault later on; [#8011] - Bug in RooAbsPdf::extendedTerm when expected events is negative; [#8499] - Dict type alias fwd decl: underlying type not fwd declared; [#6454] - ROOT fails to parse <boost/shared_ptr.hpp> at runtime on macOS. Release 6.24/04; Published on August 26, 2021; Bugs and Issues fixed in this release. [#8503] - ranluxpp code is using left shift of negative value -1 which is undefined per the C standard; [#8641] - RooStats::HypoTestInverterResult::FindIndex fails if xvalue == 1; [#8767] - [netxng] Crash in on-exit destruction of an TNetXNGFile object; [#8739] - [DF] Cannot read files that don’t have a .root extension with IMT on; [#8713] - [tree] TTreeCache is turned off when fAutoFlush == 0. Release 6.24/06; Published on September 1, 2021; Bugs and Issues fixed in this release. [#8931] - TDirectory::RegisterGDirectory is ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:7368,Testability,log,logging,7368,"asksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMerge",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:7432,Testability,log,logging,7432," no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branche",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:14943,Testability,log,logging,14943,"orms an on-the-fly RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back using certain ROOT interfaces (e.g. TTreeReaderArray, RDataFrame and the experimental RNTuple). All these limitations will be lifted in v6.26.; Portable implementation of the RANLUX++ generator, see RanluxppEngine and our blog post.; Change TRandom3::GetSeed to return the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevan",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:16271,Testability,test,test,16271," state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated w",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:16719,Testability,test,tests,16719,"g Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting t",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:24751,Testability,log,logic,24751,"um, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:25156,Testability,log,logic,25156,"oordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces RooCrystalBall, which implements some common generalizations of the Crystal Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equival",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:27867,Testability,log,login,27867,"ny other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29519,Testability,assert,asserts,29519,"wser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:29559,Testability,assert,asserts,29559,"wser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new cmake variable, CMAKE_INSTALL_PYTHONDIR, has been added: it allows customization of the installation directory of ROOT’s python modules; the developer build option asserts is introduced to enable/disable asserts via the NDEBUG C/CXX flag. Asserts are always enabled for CMAKE_BUILD_TYPE=Debug and dev=ON. The previous behavior of the builds set via the CMAKE_BUILD_TYPE variable has not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:30880,Testability,log,log,30880,"not changed.; CMAKE_CXX_STANDARD, i.e. the C++ standard ROOT is built with, now defaults to the compiler default (or C++11 if the compiler default is older than that) rather than always defaulting to C++11. In turn this means that v6.24 is the first ROOT release for which ROOT’s pre-compiled binaries are not compiled with C++11 but with the default standard in use by the default system compiler. On Ubuntu 20.04, for example, the v6.24 pre-compiled binaries are now compiled with C++14 rather than C++11 as it happened for previous ROOT versions. Also see ROOT-10692. The following builtins have been updated:. VecCore 0.7.0; LZ4 1.9.3; openui5; Xrootd 4.12.8; Zstd 1.4.8. PyROOT. Deprecate TTree.AsMatrix in this release and mark for removal in v6.26. Please use instead RDataFrame.AsNumpy. Bugs and Issues fixed in this release. [ROOT-9790] - [DF] Lazy jitting of Cache and Snapshot; [ROOT-3579] - RooTreeDataStore not Cloning the tree properly (and const correctness); [ROOT-3635] - integration for PDF value in binned fit; [ROOT-3874] - problem with binned likelihood fit in RooFit; [ROOT-5334] - RooFit RooAbsPdf::getLogVal() returns log((double)0) (==inf !). [ROOT-5380] - 2D fit not converging when using RooProdPDF and RooFFTConvPdf; [ROOT-5464] - GetEntries reports warning when friend chain with index; [ROOT-6505] - ROOT fails to read a file with particular branch names interactively; [ROOT-6892] - Memory leak in TSocket::SendProcessIDs; [ROOT-7182] - gSystem->cd has negative effect on TFile with relative path; [ROOT-7199] - Clang error dumping Expr originated by a typo at the prompt; [ROOT-7506] - Problem with axis in TMVAMultiClassGui when showing “Classifier Output Distributions”; [ROOT-7507] - Setting number of signal or background events by hand does not update the numbers; [ROOT-7720] - Bug in the caching optimisation when fitting with a RooProdPdf; [ROOT-7894] - hadd bug for TProfile with alphanumeric bin labels; [ROOT-8095] - TGraph::GetHistogram needlessly removes ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:34768,Testability,assert,assertion,34768,"ould be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exception on Mac OS; [ROOT-10752] - segmentation violation in TFractionFitter destructor; [ROOT-10753] - [TTreeReader] Wrong entries are loaded in case of TChain+TEntryList; [ROOT-10762] - [MT] Concurrent construction (or destruction?) of two different TThreadedExecutors is racy; [ROOT-10776] - Fail compilation; [ROOT-10779] - HistFactory models that are written to a file, then retrieved with updated histograms find only old histograms; [ROOT-10782] - With gcc10 STL headers don’t include implicitly stdexcept; [ROOT-10784] - Mistake in what is reported in documentation; [ROOT-10790] - [DF] Single-thread Snapshot into a directory also creates a spurious TTree outside of it; [ROOT-10792] - [DF] Snapshot of TClonesArrays read via TTreeReaderArray is broken; [ROOT-10800] - TClass::GetListOfAllPublicMethods() lists deleted copy constructor of std::unique_ptr; [ROOT-10804] - assertion in clang::Sema::LookupSpecialMember; [ROOT-10810] - Segmentation fault in pickling of weighted RooFit datasets; [ROOT-10815] - Error in parsing TFormula expression using pre-defined functions in function names; [ROOT-10822] - [DF] RVecs of non-split branches can read from invalid addresses; [ROOT-10824] - [TTreeReader] Reading entries from a friend with a TTreeIndex results in wrong entries silently read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:35251,Testability,test,test,35251,"ould be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exception on Mac OS; [ROOT-10752] - segmentation violation in TFractionFitter destructor; [ROOT-10753] - [TTreeReader] Wrong entries are loaded in case of TChain+TEntryList; [ROOT-10762] - [MT] Concurrent construction (or destruction?) of two different TThreadedExecutors is racy; [ROOT-10776] - Fail compilation; [ROOT-10779] - HistFactory models that are written to a file, then retrieved with updated histograms find only old histograms; [ROOT-10782] - With gcc10 STL headers don’t include implicitly stdexcept; [ROOT-10784] - Mistake in what is reported in documentation; [ROOT-10790] - [DF] Single-thread Snapshot into a directory also creates a spurious TTree outside of it; [ROOT-10792] - [DF] Snapshot of TClonesArrays read via TTreeReaderArray is broken; [ROOT-10800] - TClass::GetListOfAllPublicMethods() lists deleted copy constructor of std::unique_ptr; [ROOT-10804] - assertion in clang::Sema::LookupSpecialMember; [ROOT-10810] - Segmentation fault in pickling of weighted RooFit datasets; [ROOT-10815] - Error in parsing TFormula expression using pre-defined functions in function names; [ROOT-10822] - [DF] RVecs of non-split branches can read from invalid addresses; [ROOT-10824] - [TTreeReader] Reading entries from a friend with a TTreeIndex results in wrong entries silently read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:35547,Testability,assert,assertion,35547,"ould be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exception on Mac OS; [ROOT-10752] - segmentation violation in TFractionFitter destructor; [ROOT-10753] - [TTreeReader] Wrong entries are loaded in case of TChain+TEntryList; [ROOT-10762] - [MT] Concurrent construction (or destruction?) of two different TThreadedExecutors is racy; [ROOT-10776] - Fail compilation; [ROOT-10779] - HistFactory models that are written to a file, then retrieved with updated histograms find only old histograms; [ROOT-10782] - With gcc10 STL headers don’t include implicitly stdexcept; [ROOT-10784] - Mistake in what is reported in documentation; [ROOT-10790] - [DF] Single-thread Snapshot into a directory also creates a spurious TTree outside of it; [ROOT-10792] - [DF] Snapshot of TClonesArrays read via TTreeReaderArray is broken; [ROOT-10800] - TClass::GetListOfAllPublicMethods() lists deleted copy constructor of std::unique_ptr; [ROOT-10804] - assertion in clang::Sema::LookupSpecialMember; [ROOT-10810] - Segmentation fault in pickling of weighted RooFit datasets; [ROOT-10815] - Error in parsing TFormula expression using pre-defined functions in function names; [ROOT-10822] - [DF] RVecs of non-split branches can read from invalid addresses; [ROOT-10824] - [TTreeReader] Reading entries from a friend with a TTreeIndex results in wrong entries silently read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:44465,Testability,log,logarithms,44465,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:46480,Testability,log,logging,46480,"rward declare template specialization with enumerator as template arg; [#7454] - [RF][Docs] Breaking changes of batch computation interface not documented in release notes; [#7558] - AfterImage compilation broken with binutils 2.36; [#7507] - [tree] Possible error in TLeaf::GetLeafCounter; [#7361] - RooFit backend library: force to specific architecture; [#7362] - Incremental build problems; [#7319] - [Hist] Wrong computation in TH3::GetCovariance for diagonal elements; [#7206] - Unable to build with builtin_cling=OFF for LLVM 9; [#7157] - RooFFTConvPdf doesn’t work with RooProdPdf; [#7076] - RNTuple, parallel unzip tear down race condition; [#7021] - cling depends on exact macOS SDK headers; [#6953] - Missing documentation for ROOT.RDF.MakeNumpyDataFrame; [#6421] - Proposal to unify logging in Minuit2; [#7302] - TGraph copy constructor error; [#7212] - TMathText does not display with high value coordinates; [#6997] - Fill attribute is not fully reflected in THStack; [#6360] - [Docs] Missing figures in RDF tutorials 10[5,6,7] on doxygen; [#7093] - Race condition affecting (at least) TEnum::GetEnum; [#7054] - sporadic roottest-python-cmdLineUtils failures; [#6939] - Problems when TFile object is opened and closed on different threads.; [#6715] - [bug] Type overflow in TMessageHandler; [#7281] - Trailing dot dropped in top level branch name. Release 6.24/02; Published on June 28, 2021; RDataFrame. Scaling behavior at high core counts (32+ cores) has been improved (see also PR #8007). Bugs and Issues fixed in this release. [ROOT-9558] - [DF] RDataFrame Snapshot throws for branches with branch name!=variable name; [ROOT-10625] - Issues with RDataFrame if name and leaflist of a TBranch are different; [#6881] - [TTreeReader] Partial leaf/branch names not recognized in cases that TTree::Draw supports; [#7912] - TStreamerInfo Crash - V5 File Backward incompatibility introduced somewhere since 6.22.00; [#7903] - Invalid read in TClassEdit; [#7890] - Memory leak when running ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:3272,Usability,simpl,simply,3272,"SFT,; Jonas Rembser, CERN/SFT,; Andrea Sciandra, SCIPP-UCSC/Atlas,; Oksana Shadura, UNL/CMS,; Enric Tejedor Saavedra, CERN/SFT,; Christian Tacke, GSI,; Matevz Tadel, UCSD/CMS,; Vassil Vassilev, Princeton/CMS,; Wouter Verkerke, NIKHEF/Atlas,; Stefan Wunsch, CERN/SFT; General; Deprecation and Removal. RooAbsReal::evaluateBatch() has been removed in favour of the faster evaluateSpan(). See section “RooFit Libraries” for instructions on how to use RooAbsReal::evaluateSpan().; TTreeProcessorMT::SetMaxTasksPerFilePerWorker has been deprecated in favour of TTreeProcessorMT::SetTasksPerWorkerHint. Header Dependency Reduction; As always, ROOT tries to reduce the amount of code exposed through its headers. To that end, #includes were replaced by forward declarations in several headers. This might cause compilation errors (“missing definition of type…”) in your code, if that code was relying on indirect includes, instead of including the required headers itself. Please correct that simply by including the required header directly.; Core Libraries; Due to internal changes required to comply with the deprecation of Intel TBB’s task_scheduler_init and related interfaces in recent TBB versions, as of v6.24 ROOT will not honor a maximum concurrency level set with tbb::task_scheduler_init but will require instead the usage of tbb::global_control:; //tbb::task_scheduler_init init(2); // does not affect the number of threads ROOT will use anymore. tbb::global_control c(tbb::global_control::max_allowed_parallelism, 2);; ROOT::TThreadExecutor p1; // will use 2 threads; ROOT::TThreadExecutor p2(/*nThreads=*/8); // will still use 2 threads; Note that the preferred way to steer ROOT’s concurrency level is still through ROOT::EnableImplicitMT or by passing the appropriate parameter to executors’ constructors, as in TThreadExecutor::TThreadExecutor.; See the discussion at ROOT-11014 for more context.; Dynamic Path: ROOT_LIBRARY_PATH; A new way to set ROOT’s “Dynamic Path” was added: the envi",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:6447,Usability,guid,guide,6447,"ck contention. I/O Libraries. Exclusive use of the global lock is reduced or migrated to finer grained read and write locks in a few hotspots that occur during file opening/closing or task initialization in RDataFrame. This can lead to O(100x) improvements for some typical RDataFrame scenarios with 256 threads due to massively reduced lock contention. TTree Libraries. TTree now supports the inclusion of leaves of types long and unsigned long (and therefore also std::size_t on most systems) also for branches in “leaflist mode”. The corresponding leaflist letters are ‘G’ and ‘g’.; when looping over a TTree with a friend with a larger number of entries, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:15404,Usability,learn,learning,15404,"the current state element in the contained seed vector of TRandom3. The return value will now change after every call of TRandom3::Rndm (when generating a random number). Before the function was returning the first element of the state, which was changing only after 624 calls to Rndm().; Fix a bug in ROOT::Fit::BinData copy constructor; Fix a bug in applying a correction factor used for the computation of the fit confidence level in ROOT::Fit::FitResult.; TMatrix: optimize implementation of TPrincipal::AddRow that is heavily used by CMS. Minuit2. Add a new improved message logging system. Debug message now can be enabled in Minuit2 when using maximum print level.; When using external provided gradient, compute in MnSeed still numerical gradients to obtain correct step sizes and initial estimate of covariance matrix. This allows to start with a good first state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow f",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:16348,Usability,guid,guide,16348,"VA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a no",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:28226,Usability,simpl,simple,28226,"very specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the token from the contents of $XDG_RUNTIME_DIR/bt_u$ID(this additional location is intended to provide improved security for shared login environments as $XDG_RUNTIME_DIR is defined to be user-specific as opposed to a system-wide directory.).; Otherwise, take the token from /tmp/bt_u$ID. Xrootd client support; ROOT can now be built with Xrootd 5 client libraries.; GUI Libraries; RBrowser improvements. central factory methods to handle browsing, editing and drawing of different classes; simple possibility to extend RBrowser on user-defined classes; support of web-based geometry viewer; better support of TTree drawing; server-side handling of code editor and image viewer widgets; rbrowser content is fully recovered when web-browser is reloaded; load of widgets code only when really required (shorter startup time for RBrowser). JavaScript ROOT; Major JSROOT update to version 6. update all used libraries d3.js, three.js, MathJax.js, openui5; change to Promise based interface for all async methods, remove call-back arguments; change scripts names, core scripts name now JSRoot.core.js; unify function/methods naming conventions, many changes in method names; provide central code loader via JSROOT.require, supporting 4 different loading engines; many nice features and many bug fixes; see JSROOT v6 release notes. Class Reference Guide; One can now select a class’s documentation for a specific version. If a class does not exist in a given version, that version is grayed out, see for instance the documentation for ROOT::Experimental::RNTupleReader.; Build, Configuration and Testing Infrastructure. a new ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v624/release-notes.html:44691,Usability,guid,guide,44691,"en looping over a TTree with a friend with a larger number of entries, the loop spans all entries in the friend; [#7143] - TTreeProcessorMT: Fails when iterating over different treenames within same ROOT file; [#7039] - TExecutor: handling of non-IMT/… case; [#6933] - ROOT 6.22 should reject TBB 2021.1.1 and above during configuration (fails to compile); [#6765] - PyROOT breaks if ROOT objects are unpickled in a multiprocess environment; [#6915] - roottest-python-regression-regression requires OpenGL but still run when it is disable; [#6472] - TThreadExecutor::Map should be able to accept const std::vector arguments; [#6363] - [IMT] ROOT::GetThreadPoolSize does not reflect tbb::global_control settings; [#7055] - Fatal error after running make install when built against LLVM 9; [#7067] - RooFit RooAbsArg::graphVizTree produces invalid dot files for graph titles including spaces; [#7115] - regex_error when selecting pdf components to plot; [#7164] - TGSpeedo mean value calculation; [#7195] - ROOT crash when parameter by value passed to slot: StrDup; [#7240] - [RF] Batch mode returns broken logarithms when -DVDT=OFF; [#7180] - TGCommandLinePlugin Up-Down Arrows and Tab Keys; [#7181] - RDataFrame Snapshot of friend trees; [#7258] - [RF] Update crystal ball shapes in RooFit; [#7086] - [DF] Section of RDF reference guide about RDF+RVec; [#7182] - Range not considered when computing integral of RooParamHistFunc; [#7547] - [DF] Crash in lazy jitted Snapshot; [#7010] - fifo in $CWD causes TCanvas to hang on macOS; [#7676] - hadd reverses order of object cycles; [#6343] - Problem with using namespace std in generated dictionary files; [#7657] - New dictionary-related crash in 6.24.00-patches; [#7718] - PyROOT in root 6.24 branch hangs while loading CMSSW library; [#7090] - Apple M1: bug in jitting argument of type short; [#6802] - Allow to pass Bearer token authentication header to Davix client; [#7345] - Issue building built-in libafterimage; [#6812] - root REPL problem with ",MatchSource.WIKI,doc/v624/release-notes.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v624/release-notes.html
https://root.cern/doc/v626/namespaceROOT.html:13246,Availability,down,down,13246,"r of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:23037,Availability,avail,available,23037,"870 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5855 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:26728,Availability,failure,failure,26728,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 241 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:35649,Availability,down,down,35649,"ue_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RCo",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:12281,Deployability,update,update,12281,"e Range_t > ; RRangeCast< T, true, Range_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, false, Range_t > RangeStaticCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, false, std::span< U > > RangeStaticCast (U(&arr)[N]);  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down t",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:26542,Deployability,update,updated,26542,"ot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 241 of file ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:33218,Deployability,update,update,33218,"n the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 178 of file RRangeCast.hxx. ◆ RangeStaticCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, false, std::span< U > > ROOT::RangeStaticCast ; (; U(&) ; arr[N]). Definition at line 186 of file RRangeCast.hxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 947 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 921 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 887 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24041,Energy Efficiency,schedul,scheduler,24041,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:26431,Energy Efficiency,power,power,26431,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:1609,Integrability,depend,depend,1609," a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGeneric",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:1788,Integrability,interface,interface,1788,"ith TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TM",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:2468,Integrability,interface,interface,2468,"OT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:2969,Integrability,interface,interfaces,2969,"ass  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This cl",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3048,Integrability,interface,interface,3048,"erMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3534,Integrability,interface,interface,3534,"e task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3596,Integrability,wrap,wrapper,3596,"space;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3719,Integrability,interface,interface,3719," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3897,Integrability,interface,interface,3897,"TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; using RVecB = ROOT::VecOps::RVec< bool >;  ; using RVecC = ROOT::VecOps::RVec< c",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:26352,Integrability,rout,routine,26352,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:608,Modifiability,inherit,inherits,608,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-26. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies stat",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:1628,Modifiability,variab,variable,1628," a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGeneric",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24011,Modifiability,config,configured,24011,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24992,Modifiability,plug-in,plug-ins,24992,"quest if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:25064,Modifiability,variab,variable,25064,"nal scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:2362,Performance,queue,queue,2362,"ted R package for ROOT. ;  ; namespace  RDF;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a high level interface for analyses of data stored in TTree, CSV's and other data formats. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadG",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:8831,Performance,multi-thread,multi-threading,8831,"; void Class_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *)",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:8953,Performance,multi-thread,multi-threading,8953,"forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::v",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:10130,Performance,multi-thread,multi-threading,10130,"licitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. ;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:10632,Performance,multi-thread,multi-threading,10632,"T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the size of the pool used for implicit multi-threading. ;  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. ;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. ;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. ;  ; template<typename T , typename Range_t > ; RRangeCast< T, true, Range_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:22478,Performance,multi-thread,multi-threading,22478,"Setting::EAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5870 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5855 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:22674,Performance,multi-thread,multi-threading,22674," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5870 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5855 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:23114,Performance,multi-thread,multi-threading,23114,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5855 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteU",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:23481,Performance,perform,performs,23481,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread sa",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:23849,Performance,multi-thread,multi-threading,23849,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphic",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24152,Performance,multi-thread,multi-threading,24152,"efore usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and de",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24487,Performance,concurren,concurrent,24487,"bjective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24653,Performance,concurren,concurrent,24653,"are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24836,Performance,concurren,concurrent,24836,"threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24907,Performance,concurren,concurrent,24907,"quest if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24965,Performance,concurren,concurrent,24965,"quest if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24976,Performance,load,loading,24976,"quest if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:27888,Performance,multi-thread,multi-threading,27888,"onst T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 663 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 241 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 247 of file TClassTable.cxx. ◆ GetImplicitMTPoolSize(). UInt_t ROOT::GetImplicitMTPoolSize ; (; ). Returns the size of the pool used for implicit multi-threading. ; Definition at line 580 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 468 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 464 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 565 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:28856,Performance,multi-thread,multi-threading,28856,"of the pool used for implicit multi-threading. ; Definition at line 580 of file TROOT.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 468 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 464 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 565 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 558 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 213 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 207 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:9128,Safety,safe,safe,9128,"ize);  ; int CompressionSettings (RCompressionSetting::EAlgorithm algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; UInt_t GetImplicitMTPoolSize ();  Returns the",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24444,Safety,safe,safe,24444,"askets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:24480,Safety,safe,safe,24480,"bjective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:25154,Safety,safe,safe,25154,"citMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:25315,Safety,safe,safe,25315,"ition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:25488,Safety,safe,safe,25488,"bal mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:25554,Safety,safe,safety,25554,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:33725,Security,checksum,checksum,33725,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 947 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 921 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 887 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters used to split the string. ; [in]skipEmptyStrip empty strings from the output. . Definition at line 23 of file StringUtils.cxx. ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReada",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3041,Usability,simpl,simple,3041,"erMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TGenericClassInfo;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v626/namespaceROOT.html:3712,Usability,simpl,simple,3712," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v626/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:13439,Availability,down,down,13439,". ;  ; void RemoveClassAlternate (ROOT::TClassAlt *);  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnost",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:24799,Availability,avail,available,24799,"884 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:28619,Availability,failure,failure,28619,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 660 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 665 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 667 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 664 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 245 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:37507,Availability,down,down,37507,"ue_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RCo",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:12474,Deployability,update,update,12474,"nge_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, false, Range_t > RangeStaticCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, false, std::span< U > > RangeStaticCast (U(&arr)[N]);  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname, TClass *cl);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void RemoveClassAlternate (ROOT::TClassAlt *);  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostrea",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:28433,Deployability,update,updated,28433,"ot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 660 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 665 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 667 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 664 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 245 of file ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:35076,Deployability,update,update,35076,"geStaticCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, false, std::span< U > > ROOT::RangeStaticCast ; (; U(&) ; arr[N]). Definition at line 186 of file RRangeCast.hxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 1012 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 992 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 938 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 958 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:25803,Energy Efficiency,schedul,scheduler,25803,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent ca",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:28322,Energy Efficiency,power,power,28322,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 660 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 665 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 667 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:313,Integrability,message,message,313,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-28. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:1571,Integrability,depend,depend,1571,"es the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForName",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:1758,Integrability,interface,interface,1758,"duce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:2455,Integrability,interface,interface,2455,". ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex cl",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:2927,Integrability,interface,interfaces,2927,"C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This cl",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:3006,Integrability,interface,interface,3006,"ent. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:3492,Integrability,interface,interface,3492," interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:3554,Integrability,wrap,wrapper,3554,". More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:3677,Integrability,interface,interface,3677," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:3855,Integrability,interface,interface,3855,"TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; using RVecB = ROOT::VecOps::RVec< bool >;  ; using RVecC = ROOT::VecOps::RVec< c",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:14304,Integrability,message,message,14304," const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; A space to attach TBranches.; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Differ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:15181,Integrability,depend,dependents,15181," ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; A space to attach TBranches.; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1362 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition a",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:15231,Integrability,depend,depend,15231,". Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; A space to attach TBranches.; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1362 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 113 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirecto",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:28243,Integrability,rout,routine,28243,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 660 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 665 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 667 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:32349,Integrability,message,message,32349,"finition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RangeDynCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, true, Range_t > ROOT::RangeDynCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ; This function can be used for example to cast all objects in a RooAbsCollection when iterating over them. Example: class ClassA {; public:; virtual ~ClassA() {}; };; class ClassB : public ClassA {; };; ; A a1, a2;; B b1, b2, b3;; std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; ; for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; if(b) {; // do something with b; }; }; b#define b(i)Definition RSha256.hxx:100; ROOTThis file contains a specialised ROOT message handler to test for diagnostic in unit tests.Definition EExecutionPolicy.hxx:4; ROOT::RangeDynCastRRangeCast< T, true, Range_t > RangeDynCast(Range_t &&coll)Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each elemen...Definition RRangeCast.hxx:217; vecDefinition civetweb.c:1856; Make sure to not use auto const& in the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 217 of file RRangeCast.hxx. ◆ RangeDynCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, true, std::span< U > > ROOT::RangeDynCast ; (; U(&) ; arr[N]). Definition at line 225 of file RRangeCast.hxx. ◆ RangeStaticCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, false, Range_t > ROOT::RangeStaticCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ; This function can be used fo",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:543,Modifiability,inherit,inherits,543,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-28. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:1590,Modifiability,variab,variable,1590,"es the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForName",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:15599,Modifiability,extend,extended,15599,":task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1362 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 113 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirectory *). Definition at line 114 of file Rtypes.h. ◆ Double_v. using ROOT::Double_v = typedef Double_t. Definition at line 56 of file Types.h. ◆ Float_v. using ROOT::Float_v = typedef Float_t. Definition at line 55 of file Types.h. ◆ Int32_v. using ROOT::Int32_v = typedef Int_t. Definition at line 58 of file Types.h. ◆ Int_v. using ROOT",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:25773,Modifiability,config,configured,25773,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent ca",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26883,Modifiability,plug-in,plug-ins,26883,"numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26955,Modifiability,variab,variable,26955,"g (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:2349,Performance,queue,queue,2349,"space  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWr",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:8994,Performance,multi-thread,multi-threading,8994,"ass_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:9116,Performance,multi-thread,multi-threading,9116,"declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::ve",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:9265,Performance,multi-thread,multi-threading,9265,"nSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString &",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:10763,Performance,multi-thread,multi-threading,10763,"3b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. ;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. ;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. ;  ; template<typename T , typename Range_t > ; RRangeCast< T, true, Range_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:24240,Performance,multi-thread,multi-threading,24240,"EAlgorithm::EValues ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5884 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:24436,Performance,multi-thread,multi-threading,24436," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5884 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:24876,Performance,multi-thread,multi-threading,24876,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteU",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:25243,Performance,perform,performs,25243,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 544 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the R",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:25611,Performance,multi-thread,multi-threading,25611,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of differen",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:25914,Performance,multi-thread,multi-threading,25914,"efore usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad beco",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26180,Performance,multi-thread,multi-threading,26180,"parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26378,Performance,concurren,concurrent,26378,"l and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26544,Performance,concurren,concurrent,26544,"mber of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26727,Performance,concurren,concurrent,26727,"t. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26798,Performance,concurren,concurrent,26798,"numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26856,Performance,concurren,concurrent,26856,"numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26867,Performance,load,loading,26867,"numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:30569,Performance,multi-thread,multi-threading,30569," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 251 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 468 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 464 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 565 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 558 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:9362,Safety,safe,safe,9362,"nSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString &",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26277,Safety,safe,safe,26277,"parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26336,Safety,safe,safe,26336,"a; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:26371,Safety,safe,safe,26371,"l and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:27045,Safety,safe,safe,27045,"eates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:27206,Safety,safe,safe,27206,"ding within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:27379,Safety,safe,safe,27379,"obal mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:27445,Safety,safe,safety,27445,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:35583,Security,checksum,checksum,35583,"a class template (i.e. ; NOT a concrete class). ; Definition at line 1012 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 992 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 938 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 958 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters used to split the string. ; [in]skipEmptyStrip empty strings from the output. . Definition at line 23 of file StringUtils.cxx. ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReada",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:332,Testability,test,test,332,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-28. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:360,Testability,test,tests,360,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-28. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  ROpaqueTaskArena;  ; class  RRangeCast;  Wraps any collection that can be used in range-based loops and applies static_cast<T> or",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:14323,Testability,test,test,14323," const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; A space to attach TBranches.; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Differ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:14351,Testability,test,tests,14351," const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; A space to attach TBranches.; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Differ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:32368,Testability,test,test,32368,"finition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RangeDynCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, true, Range_t > ROOT::RangeDynCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ; This function can be used for example to cast all objects in a RooAbsCollection when iterating over them. Example: class ClassA {; public:; virtual ~ClassA() {}; };; class ClassB : public ClassA {; };; ; A a1, a2;; B b1, b2, b3;; std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; ; for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; if(b) {; // do something with b; }; }; b#define b(i)Definition RSha256.hxx:100; ROOTThis file contains a specialised ROOT message handler to test for diagnostic in unit tests.Definition EExecutionPolicy.hxx:4; ROOT::RangeDynCastRRangeCast< T, true, Range_t > RangeDynCast(Range_t &&coll)Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each elemen...Definition RRangeCast.hxx:217; vecDefinition civetweb.c:1856; Make sure to not use auto const& in the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 217 of file RRangeCast.hxx. ◆ RangeDynCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, true, std::span< U > > ROOT::RangeDynCast ; (; U(&) ; arr[N]). Definition at line 225 of file RRangeCast.hxx. ◆ RangeStaticCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, false, Range_t > ROOT::RangeStaticCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ; This function can be used fo",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:32396,Testability,test,tests,32396,"finition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RangeDynCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, true, Range_t > ROOT::RangeDynCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ; This function can be used for example to cast all objects in a RooAbsCollection when iterating over them. Example: class ClassA {; public:; virtual ~ClassA() {}; };; class ClassB : public ClassA {; };; ; A a1, a2;; B b1, b2, b3;; std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; ; for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; if(b) {; // do something with b; }; }; b#define b(i)Definition RSha256.hxx:100; ROOTThis file contains a specialised ROOT message handler to test for diagnostic in unit tests.Definition EExecutionPolicy.hxx:4; ROOT::RangeDynCastRRangeCast< T, true, Range_t > RangeDynCast(Range_t &&coll)Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each elemen...Definition RRangeCast.hxx:217; vecDefinition civetweb.c:1856; Make sure to not use auto const& in the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 217 of file RRangeCast.hxx. ◆ RangeDynCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, true, std::span< U > > ROOT::RangeDynCast ; (; U(&) ; arr[N]). Definition at line 225 of file RRangeCast.hxx. ◆ RangeStaticCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, false, Range_t > ROOT::RangeStaticCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ; This function can be used fo",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:2999,Usability,simpl,simple,2999,"ent. More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v628/namespaceROOT.html:3670,Usability,simpl,simple,3670," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v628/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:18232,Availability,down,down,18232,"al::RLogChannel & RGeomLog ();  Log channel for Geomviewer diagnostics. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; ROOT::Experimental::RLogChannel & WebGUILog ();  Log channel for WebGUI diagnostics. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:31796,Availability,avail,available,31796,"884 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if R",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:35846,Availability,failure,failure,35846,"OT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 668 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 248 of file TClassTable.cxx. ◆ GetDelayedAddClassAlternate(). std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAdd",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:45054,Availability,down,down,45054," 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WebGUILog(). ROOT::Experimental::RLogChannel & ROOT::WebGUILog ; (; ). Log channel for WebGUI diagnostics. ; Definition at line 24 of file RWebDisplayArgs.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ; Definition at line 641 of file RConversionRuleParser.cxx. ◆ WriteSchemaList(). void ROOT::WriteSchemaList ; (; std::list< SchemaRuleMap_t > & ; rules, . const std::string & ; listName, . std::ostream & ; output . ). Write schema rules. ; Definition at line 765 of file RCo",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:17090,Deployability,update,update,17090,"nge_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, false, Range_t > RangeStaticCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, false, std::span< U > > RangeStaticCast (U(&arr)[N]);  ; TNamed * RegisterClassTemplate (const char *name, const char *file, Int_t line);  Global function to register the implementation file and line of a class template (i.e. ;  ; void RemoveClass (const char *cname, TClass *cl);  Global function called by the dtor of a class's init class (see the ClassImp macro). ;  ; void RemoveClassAlternate (ROOT::TClassAlt *);  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; Experimental::RLogChannel & RGeomLog ();  Log channel for Geomviewer diagnostics. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; ROOT::Experimental::RLogChannel & WebGUILog ();  Log channel for WebGUI diagnostics. ;  ; static void Wr",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:35660,Deployability,update,updated,35660,"ot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ; ). Definition at line 668 of file TClass.h. ◆ GetDelayedAddClass(). std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ; (; ). Definition at line 248 of file ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:42303,Deployability,update,update,42303,"geStaticCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, false, std::span< U > > ROOT::RangeStaticCast ; (; U(&) ; arr[N]). Definition at line 186 of file RRangeCast.hxx. ◆ RegisterClassTemplate(). TNamed * ROOT::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 1005 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 985 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 931 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 951 of file TClassTable.cxx. ◆ RGeomLog(). ROOT::Experimental::RLogChannel & ROOT::RGeomLog ; (; ). Log channel for Geomviewer diagnostics. ; Definition at line 49 of file RGeomData.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:32800,Energy Efficiency,schedul,scheduler,32800,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT ob",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33057,Energy Efficiency,schedul,scheduling,33057,"loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:35549,Energy Efficiency,power,power,35549,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:313,Integrability,message,message,313,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-30. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:2281,Integrability,depend,depend,2281,"or ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RGeomNodeBase;  Base description of geometry node, req",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:2468,Integrability,interface,interface,2468,"aits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RGeomNodeBase;  Base description of geometry node, required only to build hierarchy. More...;  ; class  RGeomNodeInfo;  Node information including rendering data. More...;  ; class  RGeomNodeVisibility;  Custom settings for physical Node visib",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:5156,Integrability,wrap,wrapper,5156,"es static_cast<T> or dynamic_cast<T> to each element. More...;  ; class  RTreeDrawInvokeTimer;  ; class  RTreeDrawMonitoring;  ; class  RTreeViewer;  ; class  RWebBrowserHandle;  Specialized handle to hold information about running browser process Used to correctly cleanup all processes and temporary directories. More...;  ; class  RWebBrowserImp;  ; class  RWebDisplayArgs;  Holds different arguments for starting browser with RWebDisplayHandle::Display() method. More...;  ; class  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This clas",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:5641,Integrability,interface,interface,5641,"lass  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex cl",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6113,Integrability,interface,interfaces,6113,"ager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This cl",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6192,Integrability,interface,interface,6192,"lass More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6678,Integrability,interface,interface,6678," interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6740,Integrability,wrap,wrapper,6740,". More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6863,Integrability,interface,interface,6863," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:7041,Integrability,interface,interface,7041,"TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) (void *);  ; typedef void(* ResetAfterMergeFunc_t) (void *, TFileMergeInfo *);  ; using RFileDialogCallback_t = std::function< void(const std::string &)>;  functi",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:19197,Integrability,message,message,19197,"pedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRe",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:20044,Integrability,depend,dependents,20044,"leClassMap_t gReadRules;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1542 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition a",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:20094,Integrability,depend,depend,20094,"reatorReg newRQt6CreatorReg;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1542 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 113 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirecto",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:35470,Integrability,rout,routine,35470,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:39576,Integrability,message,message,39576,"finition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RangeDynCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, true, Range_t > ROOT::RangeDynCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ; This function can be used for example to cast all objects in a RooAbsCollection when iterating over them. Example: class ClassA {; public:; virtual ~ClassA() {}; };; class ClassB : public ClassA {; };; ; A a1, a2;; B b1, b2, b3;; std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; ; for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; if(b) {; // do something with b; }; }; b#define b(i)Definition RSha256.hxx:100; ROOTThis file contains a specialised ROOT message handler to test for diagnostic in unit tests.Definition EExecutionPolicy.hxx:4; ROOT::RangeDynCastRRangeCast< T, true, Range_t > RangeDynCast(Range_t &&coll)Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each elemen...Definition RRangeCast.hxx:217; vecDefinition civetweb.c:1856; Make sure to not use auto const& in the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 217 of file RRangeCast.hxx. ◆ RangeDynCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, true, std::span< U > > ROOT::RangeDynCast ; (; U(&) ; arr[N]). Definition at line 225 of file RRangeCast.hxx. ◆ RangeStaticCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, false, Range_t > ROOT::RangeStaticCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ; This function can be used fo",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:568,Modifiability,inherit,inherits,568,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-30. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:2300,Modifiability,variab,variable,2300,"or ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RGeomNodeBase;  Base description of geometry node, req",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:2858,Modifiability,config,configured,2858,"s  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ; class  RBrowserTimer;  ; class  RBrowserWidget;  Abstract Web-based widget, which can be used in the RBrowser Used to embed canvas, geometry viewer and potentially any other widgets. More...;  ; class  RBrowserWidgetProvider;  ; struct  RCompressionSetting;  The global settings depend on a global variable named R__ZipMode which can be modified by a global function named R__SetZipMode. More...;  ; class  RDataFrame;  ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python. More...;  ; class  RFileDialog;  Web-based FileDialog. More...;  ; class  RGeoItem;  Representation of single item in the geometry browser. More...;  ; class  RGeomBrowserIter;  Iterator of hierarchical geometry structures. More...;  ; class  RGeomConfig;  Configuration parameters which can be configured on the client Send as is to-from client. More...;  ; class  RGeomDescription;  ; class  RGeomDrawing;  Object with full description for drawing geometry It includes list of visible items and list of nodes required to build them. More...;  ; class  RGeomHierarchy;  ; class  RGeomNode;  Full node description including matrices and other attributes. More...;  ; class  RGeomNodeBase;  Base description of geometry node, required only to build hierarchy. More...;  ; class  RGeomNodeInfo;  Node information including rendering data. More...;  ; class  RGeomNodeVisibility;  Custom settings for physical Node visibility. More...;  ; class  RGeomRawRenderInfo;  Render info with raw data. More...;  ; class  RGeomRenderInfo;  Base class for render info block. More...;  ; class  RGeomShapeRenderInfo;  Render info with shape itself - client can produce shape better. More...;  ; class  RGeomViewer;  ; class  RGeomVisible;  RGeomVisible contains description of visible node It is path to",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:20462,Modifiability,extend,extended,20462,":task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRealSum{Func|Pdf}. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Typedef Documentation. ◆ ColumnNamesPtr_t. using ROOT::ColumnNamesPtr_t = typedef std::shared_ptr<const ColumnNames_t>. Definition at line 1542 of file RDataFrame.cxx. ◆ DelArrFunc_t. typedef void(* ROOT::DelArrFunc_t) (void *). Definition at line 112 of file Rtypes.h. ◆ DelFunc_t. typedef void(* ROOT::DelFunc_t) (void *). Definition at line 111 of file Rtypes.h. ◆ DesFunc_t. typedef void(* ROOT::DesFunc_t) (void *). Definition at line 113 of file Rtypes.h. ◆ DirAutoAdd_t. typedef void(* ROOT::DirAutoAdd_t) (void *, TDirectory *). Definition at line 114 of file Rtypes.h. ◆ Double_v. using ROOT::Double_v = typedef Double_t. Definition at line 55 of file Types.h. ◆ Float_v. using ROOT::Float_v = typedef Float_t. Definition at line 54 of file Types.h. ◆ Int32_v. using ROOT::Int32_v = typedef Int_t. Definition at line 57 of file Types.h. ◆ Int_v. using ROOT",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:32770,Modifiability,config,configured,32770,"The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT ob",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:32938,Modifiability,variab,variable,32938,"loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34110,Modifiability,plug-in,plug-ins,34110,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34182,Modifiability,variab,variable,34182,"g (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHu",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:5535,Performance,queue,queue,5535,"mporary directories. More...;  ; class  RWebBrowserImp;  ; class  RWebDisplayArgs;  Holds different arguments for starting browser with RWebDisplayHandle::Display() method. More...;  ; class  RWebDisplayHandle;  Handle of created web-based display Depending from type of web display, holds handle of started browser process or other display-specific information to correctly stop and cleanup display. More...;  ; class  RWebWindow;  Represents web window, which can be shown in web browser or any other supported environment. More...;  ; class  RWebWindowsManager;  Central instance to create and show web-based windows like Canvas or FitPanel. More...;  ; class  RWebWindowWSHandler;  just wrapper to deliver websockets call-backs to the RWebWindow class More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWr",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:10154,Performance,perform,performed,10154," &, bool, int)>;  ; using RGeomSignalFunc_t = std::function< void(const std::string &)>;  ; using RVecB = ROOT::VecOps::RVec< bool >;  ; using RVecC = ROOT::VecOps::RVec< char >;  ; using RVecD = ROOT::VecOps::RVec< double >;  ; using RVecF = ROOT::VecOps::RVec< float >;  ; using RVecI = ROOT::VecOps::RVec< int >;  ; using RVecL = ROOT::VecOps::RVec< long int >;  ; using RVecLL = ROOT::VecOps::RVec< long long int >;  ; using RVecU = ROOT::VecOps::RVec< unsigned int >;  ; using RVecUL = ROOT::VecOps::RVec< unsigned long int >;  ; using RVecULL = ROOT::VecOps::RVec< unsigned long long int >;  ; typedef std::map< std::string, std::list< SchemaRuleMap_t > > SchemaRuleClassMap_t;  ; typedef std::map< std::string, std::string > SchemaRuleMap_t;  ; typedef std::list< std::pair< ROOT::Internal::TSchemaType, std::string > > SourceTypeList_t;  ; using TDataFrame = ROOT::RDataFrame;  ; using TSeqI = TSeq< int >;  ; using TSeqL = TSeq< long >;  ; using TSeqU = TSeq< unsigned int >;  ; using TSeqUL = TSeq< unsigned long >;  ; using UInt32_v = UInt_t;  ; using UInt_v = UInt_t;  ; using WebWindowConnectCallback_t = std::function< void(unsigned)>;  function signature for connect/disconnect call-backs argument is connection id ;  ; using WebWindowDataCallback_t = std::function< void(unsigned, const std::string &)>;  function signature for call-backs from the window clients first argument is connection id, second is received data ;  ; using WebWindowShowCallback_t = std::function< bool(RWebWindow &, const RWebDisplayArgs &)>;  function signature for catching show calls of arbitrary RWebWindow if returns true, normal show procedure will not be invoked ;  ; using WebWindowWaitFunc_t = std::function< int(double)>;  function signature for waiting call-backs Such callback used when calling thread need to waits for some special data, but wants to run application event loop As argument, spent time in second will be provided Waiting will be performed until function returns non-zero value ;  .",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:13610,Performance,multi-thread,multi-threading,13610,"ass_ShowMembers (TClass *cl, const void *obj, TMemberInspector &);  Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:13732,Performance,multi-thread,multi-threading,13732,"declaration with out a full definition of the TClass class. ;  ; static UInt_t ClassTableHash (const char *name, UInt_t size);  ; int CompressionSettings (RCompressionSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::ve",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:13881,Performance,multi-thread,multi-threading,13881,"nSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString &",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:15379,Performance,multi-thread,multi-threading,15379,"3b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString & GetMacroPath ();  ; TROOT * GetROOT ();  ; void GetRuleIncludes (std::list< std::string > &result);  Get the list of includes specified in the shema rules. ;  ; UInt_t GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; bool HasValidDataMembers (SchemaRuleMap_t &rule, MembersTypeMap_t &members, std::string &error_string);  Check if given rule contains references to valid data members. ;  ; Bool_t IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; template<class T > ; TSeq< T > MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > MakeSeq (T end);  ; bool ParseRule (std::string command, ROOT::Internal::MembersMap_t &result, std::string &error_string);  Parse the schema rule as specified in the LinkDef file. ;  ; void ProcessReadPragma (const char *args, std::string &error_string);  I am being called when a read pragma is encountered. ;  ; void ProcessReadRawPragma (const char *args, std::string &error_string);  I am being called then a readraw pragma is encountered. ;  ; template<typename T , typename Range_t > ; RRangeCast< T, true, Range_t > RangeDynCast (Range_t &&coll);  Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ;  ; template<typename T , typename U , std::size_t N> ; RRangeCast< T, true, std::span< U > > RangeDynCast (U(&arr)[N]);  ; template<typename T , typename Range_t > ; RRangeCast< T, ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:26125,Performance,perform,performed,26125,"on<void(unsigned)>. function signature for connect/disconnect call-backs argument is connection id ; Definition at line 35 of file RWebWindow.hxx. ◆ WebWindowDataCallback_t. using ROOT::WebWindowDataCallback_t = typedef std::function<void(unsigned, const std::string &)>. function signature for call-backs from the window clients first argument is connection id, second is received data ; Definition at line 39 of file RWebWindow.hxx. ◆ WebWindowShowCallback_t. using ROOT::WebWindowShowCallback_t = typedef std::function<bool(RWebWindow &, const RWebDisplayArgs &)>. function signature for catching show calls of arbitrary RWebWindow if returns true, normal show procedure will not be invoked ; Definition at line 34 of file RWebWindowsManager.hxx. ◆ WebWindowWaitFunc_t. using ROOT::WebWindowWaitFunc_t = typedef std::function<int(double)>. function signature for waiting call-backs Such callback used when calling thread need to waits for some special data, but wants to run application event loop As argument, spent time in second will be provided Waiting will be performed until function returns non-zero value ; Definition at line 46 of file RWebWindow.hxx. Enumeration Type Documentation. ◆ ECompressionAlgorithm. enum ROOT::ECompressionAlgorithm. EnumeratorkUseGlobalCompressionSetting Deprecated name, do not use: . kUseGlobalSetting Deprecated name, do not use: . kZLIB Deprecated name, do not use: . kLZMA Deprecated name, do not use: . kOldCompressionAlgo Deprecated name, do not use: . kLZ4 Deprecated name, do not use: . kZSTD Deprecated name, do not use: . kUndefinedCompressionAlgorithm Deprecated name, do not use: . Definition at line 109 of file Compression.h. ◆ EExecutionPolicy. enum class ROOT::EExecutionPolicy. strong . EnumeratorkSequential ; kMultiThread ; kMultiProcess . Definition at line 5 of file EExecutionPolicy.hxx. ◆ EFromHumanReadableSize. enum class ROOT::EFromHumanReadableSize. strong . EnumeratorkSuccess ; kParseFail ; kOverflow . Definition at line 69 of file",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:31237,Performance,multi-thread,multi-threading,31237,"EAlgorithm::EValues ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5884 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:31433,Performance,multi-thread,multi-threading,31433," not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5884 of file TClass.cxx. ◆ CreateClass() [2/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. Enable",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:31873,Performance,multi-thread,multi-threading,31873,"; id, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il . ). Global function called by a class' static Dictionary() method (see the ClassDef macro). ; Definition at line 5869 of file TClass.cxx. ◆ DisableImplicitMT(). void ROOT::DisableImplicitMT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The ma",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:32240,Performance,perform,performs,32240,"MT ; (; ). Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ; Definition at line 556 of file TROOT.cxx. ◆ EnableImplicitMT(). void ROOT::EnableImplicitMT ; (; UInt_t ; numthreads = 0). Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ; Parameters. [in]numthreadsNumber of threads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:32608,Performance,multi-thread,multi-threading,32608,"hreads to use. If not specified or set to zero, the number of threads is automatically decided by the implementation. Any other value is used as a hint. ROOT must be built with the compilation flag imt=ON for this feature to be available. The following objects and methods automatically take advantage of multi-threading if a call to EnableImplicitMT has been made before usage:. RDataFrame internally runs the event-loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/a",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33141,Performance,multi-thread,multi-threading,33141,"ip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad beco",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33407,Performance,multi-thread,multi-threading,33407,"n parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33605,Performance,concurren,concurrent,33605,"eter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33771,Performance,concurren,concurrent,33771,"rnal scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static st",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33954,Performance,concurren,concurrent,33954,"OOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34025,Performance,concurren,concurrent,34025,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34083,Performance,concurren,concurrent,34083,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34094,Performance,load,loading,34094,"uling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::T",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:37796,Performance,multi-thread,multi-threading,37796," ROOT::GetDelayedAddClassAlternate ; (; ). Definition at line 254 of file TClassTable.cxx. ◆ GetMacroPath(). TString & ROOT::GetMacroPath ; (; ). Definition at line 476 of file TROOT.cxx. ◆ GetROOT(). TROOT * ROOT::GetROOT ; (; ). Definition at line 472 of file TROOT.cxx. ◆ GetRuleIncludes(). void ROOT::GetRuleIncludes ; (; std::list< std::string > & ; result). Get the list of includes specified in the shema rules. ; Definition at line 841 of file RConversionRuleParser.cxx. ◆ GetThreadPoolSize(). UInt_t ROOT::GetThreadPoolSize ; (; ). Returns the size of ROOT's thread pool. ; Definition at line 577 of file TROOT.cxx. ◆ HasValidDataMembers(). Bool_t ROOT::HasValidDataMembers ; (; SchemaRuleMap_t & ; rule, . MembersTypeMap_t & ; members, . std::string & ; error_string . ). Check if given rule contains references to valid data members. ; Definition at line 447 of file RConversionRuleParser.cxx. ◆ IsImplicitMTEnabled(). bool ROOT::IsImplicitMTEnabled ; (; ). Returns true if the implicit multi-threading in ROOT is enabled. ; Definition at line 570 of file TROOT.cxx. ◆ MakeSeq() [1/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; begin, . T ; end, . T ; step = 1 . ). Definition at line 215 of file TSeq.hxx. ◆ MakeSeq() [2/2]. template<class T > . TSeq< T > ROOT::MakeSeq ; (; T ; end). Definition at line 209 of file TSeq.hxx. ◆ ParseRule(). Bool_t ROOT::ParseRule ; (; std::string ; rule, . ROOT::Internal::MembersMap_t & ; result, . std::string & ; error_string . ). Parse the schema rule as specified in the LinkDef file. ; Definition at line 103 of file RConversionRuleParser.cxx. ◆ ProcessReadPragma(). void ROOT::ProcessReadPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called when a read pragma is encountered. ; Definition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is enc",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:13978,Safety,safe,safe,13978,"nSetting::EAlgorithm::EValues algorithm, int compressionLevel);  ; int CompressionSettings (ROOT::ECompressionAlgorithm algorithm, int compressionLevel);  Deprecated name, do not use: ;  ; TClass * CreateClass (const char *cname, Version_t id, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; TClass * CreateClass (const char *cname, Version_t id, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il);  Global function called by a class' static Dictionary() method (see the ClassDef macro). ;  ; void DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; static std::string::size_type FindEndSymbol (std::string &command);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (ROOT::Internal::TStringView str, T &value);  ; template<typename T > ; EFromHumanReadableSize FromHumanReadableSize (std::string_view str, T &value);  Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ;  ; template<typename T > ; TClass * GetClass (const T *);  ; template<typename T > ; TClass * GetClass (const T **);  ; template<typename T > ; TClass * GetClass (const T *const *);  ; template<typename T > ; TClass * GetClass (T *);  ; template<typename T > ; TClass * GetClass (T **);  ; std::vector< std::unique_ptr< TClassRec > > & GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & GetDelayedAddClassAlternate ();  ; TString &",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33504,Safety,safe,safe,33504,"n parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33563,Safety,safe,safe,33563,"ows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:33598,Safety,safe,safe,33598,"eter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34272,Safety,safe,safe,34272,"eates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSi",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34433,Safety,safe,safe,34433,"ding within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34606,Safety,safe,safe,34606,"obal mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:34672,Safety,safe,safety,34672,"n ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:42810,Security,checksum,checksum,42810,"a class template (i.e. ; NOT a concrete class). ; Definition at line 1005 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname, . TClass * ; cl . ). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 985 of file TClassTable.cxx. ◆ RemoveClassAlternate(). void ROOT::RemoveClassAlternate ; (; ROOT::TClassAlt * ; alt). Definition at line 931 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 951 of file TClassTable.cxx. ◆ RGeomLog(). ROOT::Experimental::RLogChannel & ROOT::RGeomLog ; (; ). Log channel for Geomviewer diagnostics. ; Definition at line 49 of file RGeomData.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters used to split the string. ; [in]skipEmptyStrip empty strings from the output. . Definition at line 23 of file StringUtils.cxx. ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::st",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:332,Testability,test,test,332,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-30. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:360,Testability,test,tests,360,". ROOT: ROOT Namespace Reference. ; ROOT  ; . v6-30. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; ROOT Namespace ReferenceMath » MathCore | Math » MathMore » Statistical functions. This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; More... Namespaces; namespace  Browsable;  ; namespace  CocoaTutorials;  ; namespace  Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  Details;  ; namespace  ExecutorUtils;  This namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce. ;  ; namespace  Experimental;  ; namespace  Fit;  Namespace for the fitting classes. ;  ; namespace  FoundationUtils;  ; namespace  Geom;  ; namespace  GLTutorials;  ; namespace  Internal;  ; namespace  MacOSX;  ; namespace  Math;  ; namespace  MathMore;  ; namespace  Meta;  ; namespace  Minuit;  ; namespace  Minuit2;  ; namespace  option;  The namespace of The Lean Mean C++ Option Parser. ;  ; namespace  Quartz;  ; namespace  R;  namespace associated R package for ROOT. ;  ; namespace  RDF;  ; namespace  TestSupport;  ; namespace  TF1Helper;  ; namespace  TMetaUtils;  ; namespace  TreeUtils;  ; namespace  TThreadedObjectUtils;  ; namespace  TypeTraits;  ROOT type_traits extensions. ;  ; namespace  v5;  ; namespace  VecOps;  . Classes; class  RBrowser;  Web-based ROOT files and objects browser. More...;  ; class  RBrowserCatchedWidget;  ; class  RBrowserData;  Way to browse (hopefully) everything in ROOT. More...;  ; class  RBrowserDataCleanup;  ; class  RBrowserEditorWidget;  ; class  RBrowserInfoWidget;  ; class  RBrowserReply;  Reply on browser request. More...;  ; class  RBrowserRequest;  Request send from client to get content of path element. More...;  ;",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:19216,Testability,test,test,19216,"pedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRe",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:19244,Testability,test,tests,19244,"pedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  ; struct ROOT::RQt5CreatorReg newRQt5CreatorReg;  ; struct ROOT::RQt6CreatorReg newRQt6CreatorReg;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Difference between RooAddPdf / RooRe",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:39595,Testability,test,test,39595,"finition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RangeDynCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, true, Range_t > ROOT::RangeDynCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ; This function can be used for example to cast all objects in a RooAbsCollection when iterating over them. Example: class ClassA {; public:; virtual ~ClassA() {}; };; class ClassB : public ClassA {; };; ; A a1, a2;; B b1, b2, b3;; std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; ; for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; if(b) {; // do something with b; }; }; b#define b(i)Definition RSha256.hxx:100; ROOTThis file contains a specialised ROOT message handler to test for diagnostic in unit tests.Definition EExecutionPolicy.hxx:4; ROOT::RangeDynCastRRangeCast< T, true, Range_t > RangeDynCast(Range_t &&coll)Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each elemen...Definition RRangeCast.hxx:217; vecDefinition civetweb.c:1856; Make sure to not use auto const& in the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 217 of file RRangeCast.hxx. ◆ RangeDynCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, true, std::span< U > > ROOT::RangeDynCast ; (; U(&) ; arr[N]). Definition at line 225 of file RRangeCast.hxx. ◆ RangeStaticCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, false, Range_t > ROOT::RangeStaticCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ; This function can be used fo",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:39623,Testability,test,tests,39623,"finition at line 885 of file RConversionRuleParser.cxx. ◆ ProcessReadRawPragma(). void ROOT::ProcessReadRawPragma ; (; const char * ; args, . std::string & ; error_string . ). I am being called then a readraw pragma is encountered. ; Definition at line 921 of file RConversionRuleParser.cxx. ◆ RangeDynCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, true, Range_t > ROOT::RangeDynCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each element. ; This function can be used for example to cast all objects in a RooAbsCollection when iterating over them. Example: class ClassA {; public:; virtual ~ClassA() {}; };; class ClassB : public ClassA {; };; ; A a1, a2;; B b1, b2, b3;; std::vector<A const*> vec{&b1, &a1, &b2, &a2, &b3};; ; for(auto *b : ROOT::RangeDynCast<B const*>(vec)) {; if(b) {; // do something with b; }; }; b#define b(i)Definition RSha256.hxx:100; ROOTThis file contains a specialised ROOT message handler to test for diagnostic in unit tests.Definition EExecutionPolicy.hxx:4; ROOT::RangeDynCastRRangeCast< T, true, Range_t > RangeDynCast(Range_t &&coll)Takes any collection that can be used in range-based loops and applies dynamic_cast<T> to each elemen...Definition RRangeCast.hxx:217; vecDefinition civetweb.c:1856; Make sure to not use auto const& in the range-based loop, as this will cause a range-loop-bind-reference warning with the clang compiler. ; Definition at line 217 of file RRangeCast.hxx. ◆ RangeDynCast() [2/2]. template<typename T , typename U , std::size_t N> . RRangeCast< T, true, std::span< U > > ROOT::RangeDynCast ; (; U(&) ; arr[N]). Definition at line 225 of file RRangeCast.hxx. ◆ RangeStaticCast() [1/2]. template<typename T , typename Range_t > . RRangeCast< T, false, Range_t > ROOT::RangeStaticCast ; (; Range_t && ; coll). Takes any collection that can be used in range-based loops and applies static_cast<T> to each element. ; This function can be used fo",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6185,Usability,simpl,simple,6185,"lass More...;  ; class  TBufferMerger;  TBufferMerger is a class to facilitate writing data in parallel from multiple threads, while writing to a single output file. More...;  ; class  TBufferMergerFile;  A TBufferMergerFile is similar to a TMemFile, but when data is written to it, it is appended to the TBufferMerger queue. More...;  ; class  TClassAlt;  ; class  TClassRec;  ; class  TExecutorCRTP;  This class defines an interface to execute the same task multiple times, possibly in parallel and with different arguments every time. More...;  ; class  TForNamespace;  ; class  TIOFeatures;  TIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. Mo",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v630/namespaceROOT.html:6856,Usability,simpl,simple,6856," data written via a TTree. More...;  ; class  TMapDeclIdToTClass;  ; class  TMapTypeToClassRec;  ; class  TMapTypeToTClass;  ; class  TModuleGenerator;  ; class  TNumSlots;  Defines the number of threads in some of ROOT's interfaces. More...;  ; class  TProcessExecutor;  This class provides a simple interface to execute the same task multiple times in parallel, possibly with different arguments every time. More...;  ; class  TReadLockGuard;  ; class  TReentrantRWLock;  ; class  TRWMutexImp;  ; class  TRWSpinLock;  ; class  TRWSpinLockReadGuard;  ; class  TRWSpinLockWriteGuard;  ; class  TSchemaRule;  ; class  TSeq;  A pseudo container class which is a generator of indices. More...;  ; class  TSequentialExecutor;  ; class  TSpinMutex;  A spin mutex class which respects the STL interface for mutexes. More...;  ; class  TThreadedObject;  A wrapper to make object instances thread private, lazily. More...;  ; class  TThreadExecutor;  This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. More...;  ; class  TTreeProcessorMP;  This class provides an interface to process a TTree dataset in parallel with multi-process technology. More...;  ; class  TTreeProcessorMT;  A class to process the entries of a TTree in parallel. More...;  ; class  TVirtualRWMutex;  ; class  TWriteLockGuard;  . Typedefs; using ColumnNamesPtr_t = std::shared_ptr< const ColumnNames_t >;  ; typedef void(* DelArrFunc_t) (void *);  ; typedef void(* DelFunc_t) (void *);  ; typedef void(* DesFunc_t) (void *);  ; typedef void(* DirAutoAdd_t) (void *, TDirectory *);  ; using Double_v = Double_t;  ; using Float_v = Float_t;  ; using Int32_v = Int_t;  ; using Int_v = Int_t;  ; typedef std::map< std::string, ROOT::Internal::TSchemaType > MembersTypeMap_t;  ; typedef Long64_t(* MergeFunc_t) (void *, TCollection *, TFileMergeInfo *);  ; typedef void *(* NewArrFunc_t) (Long_t size, void *arena);  ; typedef void *(* NewFunc_t) ",MatchSource.WIKI,doc/v630/namespaceROOT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html
https://root.cern/doc/v632/civetweb_8c_source.html:1608,Availability,avail,available,1608,"ll; 8 * copies of the Software, and to permit persons to whom the Software is; 9 * furnished to do so, subject to the following conditions:; 10 *; 11 * The above copyright notice and this permission notice shall be included in; 12 * all copies or substantial portions of the Software.; 13 *; 14 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; 15 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; 16 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; 17 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; 18 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; 19 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN; 20 * THE SOFTWARE.; 21 */; 22 ; 23#if defined(__GNUC__) || defined(__MINGW32__); 24#define GCC_VERSION \; 25 (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__); 26#if GCC_VERSION >= 40500; 27/* gcc diagnostic pragmas available */; 28#define GCC_DIAGNOSTIC; 29#endif; 30#endif; 31 ; 32#if defined(GCC_DIAGNOSTIC); 33/* Disable unused macros warnings - not all defines are required; 34 * for all systems and all compilers. */; 35#pragma GCC diagnostic ignored ""-Wunused-macros""; 36/* A padding warning is just plain useless */; 37#pragma GCC diagnostic ignored ""-Wpadded""; 38#endif; 39 ; 40#if defined(__clang__) /* GCC does not (yet) support this pragma */; 41/* We must set some flags for the headers we include. These flags; 42 * are reserved ids according to C99, so we need to disable a; 43 * warning for that. */; 44#pragma GCC diagnostic push; 45#pragma GCC diagnostic ignored ""-Wreserved-id-macro""; 46#endif; 47 ; 48#if defined(_WIN32); 49#if !defined(_CRT_SECURE_NO_WARNINGS); 50#define _CRT_SECURE_NO_WARNINGS /* Disable deprecation warning in VS2005 */; 51#endif; 52#if !defined(_WIN32_WINNT) /* defined for tdm-gcc so we can use getnameinfo */; 53#define _WIN32_WINNT 0x0502; 54#endif; 55#else; 56#if !d",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:5750,Availability,avail,available,5750,"18#if defined(__STDC_VERSION__) && __STDC_VERSION__ > 201100L; 119#define mg_static_assert _Static_assert; 120#elif defined(__cplusplus) && __cplusplus >= 201103L; 121#define mg_static_assert static_assert; 122#else; 123char static_assert_replacement[1];; 124#define mg_static_assert(cond, txt) \; 125 extern char static_assert_replacement[(cond) ? 1 : -1]; 126#endif; 127 ; 128mg_static_assert(sizeof(int) == 4 || sizeof(int) == 8,; 129 ""int data type size check"");; 130mg_static_assert(sizeof(void *) == 4 || sizeof(void *) == 8,; 131 ""pointer data type size check"");; 132mg_static_assert(sizeof(void *) >= sizeof(int), ""data type size check"");; 133 ; 134 ; 135/* Select queue implementation. Diagnosis features originally only implemented; 136 * for the ""ALTERNATIVE_QUEUE"" have been ported to the previous queue; 137 * implementation (NO_ALTERNATIVE_QUEUE) as well. The new configuration value; 138 * ""CONNECTION_QUEUE_SIZE"" is only available for the previous queue; 139 * implementation, since the queue length is independent from the number of; 140 * worker threads there, while the new queue is one element per worker thread.; 141 *; 142 */; 143#if defined(NO_ALTERNATIVE_QUEUE) && defined(ALTERNATIVE_QUEUE); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping be",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:6096,Availability,error,error,6096,"zeof(void *) == 4 || sizeof(void *) == 8,; 131 ""pointer data type size check"");; 132mg_static_assert(sizeof(void *) >= sizeof(int), ""data type size check"");; 133 ; 134 ; 135/* Select queue implementation. Diagnosis features originally only implemented; 136 * for the ""ALTERNATIVE_QUEUE"" have been ported to the previous queue; 137 * implementation (NO_ALTERNATIVE_QUEUE) as well. The new configuration value; 138 * ""CONNECTION_QUEUE_SIZE"" is only available for the previous queue; 139 * implementation, since the queue length is independent from the number of; 140 * worker threads there, while the new queue is one element per worker thread.; 141 *; 142 */; 143#if defined(NO_ALTERNATIVE_QUEUE) && defined(ALTERNATIVE_QUEUE); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if le",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:6628,Availability,error,error,6628,"lementation (NO_ALTERNATIVE_QUEUE) as well. The new configuration value; 138 * ""CONNECTION_QUEUE_SIZE"" is only available for the previous queue; 139 * implementation, since the queue length is independent from the number of; 140 * worker threads there, while the new queue is one element per worker thread.; 141 *; 142 */; 143#if defined(NO_ALTERNATIVE_QUEUE) && defined(ALTERNATIVE_QUEUE); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""S",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:6988,Availability,avail,available,6988,"E); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:7080,Availability,avail,available,7080,"E); 144/* The queues are exclusive or - only one can be used. */; 145#error \; 146 ""Define ALTERNATIVE_QUEUE or NO_ALTERNATIVE_QUEUE (or none of them), but not both""; 147#endif; 148#if !defined(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:7166,Availability,error,error,7166,"ed(NO_ALTERNATIVE_QUEUE) && !defined(ALTERNATIVE_QUEUE); 149/* Use a default implementation */; 150#define NO_ALTERNATIVE_QUEUE; 151#endif; 152 ; 153#if defined(NO_FILESYSTEMS) && !defined(NO_FILES); 154/* File system access:; 155 * NO_FILES = do not serve any files from the file system automatically.; 156 * However, with NO_FILES CivetWeb may still write log files, read access; 157 * control files, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <fcntl.h>; 197 ; 198#include <libc_extensions.h>; 199 ; 200/* Max worker threads is the max of pthreads minus the main application thread; 201 * and minus the main civetweb thread, thus -2; 20",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:7631,Availability,error,error,7631,"iles, default error page files or use API functions like; 158 * mg_send_file in callbacks to send files from the server local; 159 * file system.; 160 * NO_FILES only disables the automatic mapping between URLs and local; 161 * file names.; 162 * NO_FILESYSTEM = do not access any file at all. Useful for embedded; 163 * devices without file system. Logging to files in not available; 164 * (use callbacks instead) and API functions like mg_send_file are not; 165 * available.; 166 * If NO_FILESYSTEM is set, NO_FILES must be set as well.; 167 */; 168#error ""Inconsistent build flags, NO_FILESYSTEMS requires NO_FILES""; 169#endif; 170 ; 171/* DTL -- including winsock2.h works better if lean and mean */; 172#if !defined(WIN32_LEAN_AND_MEAN); 173#define WIN32_LEAN_AND_MEAN; 174#endif; 175 ; 176#if defined(__SYMBIAN32__); 177/* According to https://en.wikipedia.org/wiki/Symbian#History,; 178 * Symbian is no longer maintained since 2014-01-01.; 179 * Support for Symbian has been removed from CivetWeb; 180 */; 181#error ""Symbian is no longer maintained. CivetWeb no longer supports Symbian.""; 182#endif /* __SYMBIAN32__ */; 183 ; 184#if defined(__ZEPHYR__); 185#include <time.h>; 186 ; 187#include <ctype.h>; 188#include <net/socket.h>; 189#include <posix/pthread.h>; 190#include <posix/time.h>; 191#include <stdio.h>; 192#include <stdlib.h>; 193#include <string.h>; 194#include <zephyr.h>; 195 ; 196#include <fcntl.h>; 197 ; 198#include <libc_extensions.h>; 199 ; 200/* Max worker threads is the max of pthreads minus the main application thread; 201 * and minus the main civetweb thread, thus -2; 202 */; 203#define MAX_WORKER_THREADS (CONFIG_MAX_PTHREAD_COUNT - 2); 204 ; 205#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1); 206#define ZEPHYR_STACK_SIZE USE_STACK_SIZE; 207#else; 208#define ZEPHYR_STACK_SIZE (1024 * 16); 209#endif; 210 ; 211K_THREAD_STACK_DEFINE(civetweb_main_stack, ZEPHYR_STACK_SIZE);; 212K_THREAD_STACK_ARRAY_DEFINE(civetweb_worker_stacks,; 213 MAX_WORKER_THREADS,; 214 Z",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:9744,Availability,error,error,9744,"34 DEBUG_TRACE_FUNC(__func__, __LINE__, fmt, __VA_ARGS__); 235 ; 236#define NEED_DEBUG_TRACE_FUNC; 237#if !defined(DEBUG_TRACE_STREAM); 238#define DEBUG_TRACE_STREAM stdout; 239#endif; 240 ; 241#else; 242#define DEBUG_TRACE(fmt, ...) \; 243 do { \; 244 } while (0); 245#endif /* DEBUG */; 246#endif /* DEBUG_TRACE */; 247 ; 248 ; 249#if !defined(DEBUG_ASSERT); 250#if defined(DEBUG); 251#include <stdlib.h>; 252#define DEBUG_ASSERT(cond) \; 253 do { \; 254 if (!(cond)) { \; 255 DEBUG_TRACE(""ASSERTION FAILED: %s"", #cond); \; 256 exit(2); /* Exit with error */ \; 257 } \; 258 } while (0); 259#else; 260#define DEBUG_ASSERT(cond); 261#endif /* DEBUG */; 262#endif; 263 ; 264 ; 265#if defined(__GNUC__) && defined(GCC_INSTRUMENTATION); 266void __cyg_profile_func_enter(void *this_fn, void *call_site); 267 __attribute__((no_instrument_function));; 268 ; 269void __cyg_profile_func_exit(void *this_fn, void *call_site); 270 __attribute__((no_instrument_function));; 271 ; 272void; 273__cyg_profile_func_enter(void *this_fn, void *call_site); 274{; 275 if ((void *)this_fn != (void *)printf) {; 276 printf(""E %p %p\n"", this_fn, call_site);; 277 }; 278}; 279 ; 280void; 281__cyg_profile_func_exit(void *this_fn, void *call_site); 282{; 283 if ((void *)this_fn != (void *)printf) {; 284 printf(""X %p %p\n"", this_fn, call_site);; 285 }; 286}; 287#endif; 288 ; 289 ; 290#if !defined(IGNORE_UNUSED_RESULT); 291#define IGNORE_UNUSED_RESULT(a) ((void)((a) && 1)); 292#endif; 293 ; 294 ; 295#if defined(__GNUC__) || defined(__MINGW32__); 296 ; 297/* GCC unused function attribute seems fundamentally broken.; 298 * Several attempts to tell the compiler ""THIS FUNCTION MAY BE USED; 299 * OR UNUSED"" for individual functions failed.; 300 * Either the compiler creates an ""unused-function"" warning if a; 301 * function is not marked with __attribute__((unused)).; 302 * On the other hand, if the function is marked with this attribute,; 303 * but is used, the compiler raises a completely idiotic; 304 * ""used-but-",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:11300,Availability,error,error,11300,"er(void *this_fn, void *call_site); 274{; 275 if ((void *)this_fn != (void *)printf) {; 276 printf(""E %p %p\n"", this_fn, call_site);; 277 }; 278}; 279 ; 280void; 281__cyg_profile_func_exit(void *this_fn, void *call_site); 282{; 283 if ((void *)this_fn != (void *)printf) {; 284 printf(""X %p %p\n"", this_fn, call_site);; 285 }; 286}; 287#endif; 288 ; 289 ; 290#if !defined(IGNORE_UNUSED_RESULT); 291#define IGNORE_UNUSED_RESULT(a) ((void)((a) && 1)); 292#endif; 293 ; 294 ; 295#if defined(__GNUC__) || defined(__MINGW32__); 296 ; 297/* GCC unused function attribute seems fundamentally broken.; 298 * Several attempts to tell the compiler ""THIS FUNCTION MAY BE USED; 299 * OR UNUSED"" for individual functions failed.; 300 * Either the compiler creates an ""unused-function"" warning if a; 301 * function is not marked with __attribute__((unused)).; 302 * On the other hand, if the function is marked with this attribute,; 303 * but is used, the compiler raises a completely idiotic; 304 * ""used-but-marked-unused"" warning - and; 305 * #pragma GCC diagnostic ignored ""-Wused-but-marked-unused""; 306 * raises error: unknown option after ""#pragma GCC diagnostic"".; 307 * Disable this warning completely, until the GCC guys sober up; 308 * again.; 309 */; 310 ; 311#pragma GCC diagnostic ignored ""-Wunused-function""; 312 ; 313#define FUNCTION_MAY_BE_UNUSED /* __attribute__((unused)) */; 314 ; 315#else; 316#define FUNCTION_MAY_BE_UNUSED; 317#endif; 318 ; 319 ; 320/* Some ANSI #includes are not available on Windows CE and Zephyr */; 321#if !defined(_WIN32_WCE) && !defined(__ZEPHYR__); 322#include <errno.h>; 323#include <fcntl.h>; 324#include <signal.h>; 325#include <stdlib.h>; 326#include <sys/stat.h>; 327#include <sys/types.h>; 328#endif /* !_WIN32_WCE */; 329 ; 330 ; 331#if defined(__clang__); 332/* When using -Weverything, clang does not accept it's own headers; 333 * in a release build configuration. Disable what is too much in; 334 * -Weverything. */; 335#pragma clang diagnostic ignored ""-Wdi",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:11685,Availability,avail,available,11685,"_RESULT(a) ((void)((a) && 1)); 292#endif; 293 ; 294 ; 295#if defined(__GNUC__) || defined(__MINGW32__); 296 ; 297/* GCC unused function attribute seems fundamentally broken.; 298 * Several attempts to tell the compiler ""THIS FUNCTION MAY BE USED; 299 * OR UNUSED"" for individual functions failed.; 300 * Either the compiler creates an ""unused-function"" warning if a; 301 * function is not marked with __attribute__((unused)).; 302 * On the other hand, if the function is marked with this attribute,; 303 * but is used, the compiler raises a completely idiotic; 304 * ""used-but-marked-unused"" warning - and; 305 * #pragma GCC diagnostic ignored ""-Wused-but-marked-unused""; 306 * raises error: unknown option after ""#pragma GCC diagnostic"".; 307 * Disable this warning completely, until the GCC guys sober up; 308 * again.; 309 */; 310 ; 311#pragma GCC diagnostic ignored ""-Wunused-function""; 312 ; 313#define FUNCTION_MAY_BE_UNUSED /* __attribute__((unused)) */; 314 ; 315#else; 316#define FUNCTION_MAY_BE_UNUSED; 317#endif; 318 ; 319 ; 320/* Some ANSI #includes are not available on Windows CE and Zephyr */; 321#if !defined(_WIN32_WCE) && !defined(__ZEPHYR__); 322#include <errno.h>; 323#include <fcntl.h>; 324#include <signal.h>; 325#include <stdlib.h>; 326#include <sys/stat.h>; 327#include <sys/types.h>; 328#endif /* !_WIN32_WCE */; 329 ; 330 ; 331#if defined(__clang__); 332/* When using -Weverything, clang does not accept it's own headers; 333 * in a release build configuration. Disable what is too much in; 334 * -Weverything. */; 335#pragma clang diagnostic ignored ""-Wdisabled-macro-expansion""; 336#endif; 337 ; 338#if defined(__GNUC__) || defined(__MINGW32__); 339/* Who on earth came to the conclusion, using __DATE__ should rise; 340 * an ""expansion of date or time macro is not reproducible""; 341 * warning. That's exactly what was intended by using this macro.; 342 * Just disable this nonsense warning. */; 343 ; 344/* And disabling them does not work either:; 345 * #pragma clang di",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:12639,Availability,error,error,12639," ANSI #includes are not available on Windows CE and Zephyr */; 321#if !defined(_WIN32_WCE) && !defined(__ZEPHYR__); 322#include <errno.h>; 323#include <fcntl.h>; 324#include <signal.h>; 325#include <stdlib.h>; 326#include <sys/stat.h>; 327#include <sys/types.h>; 328#endif /* !_WIN32_WCE */; 329 ; 330 ; 331#if defined(__clang__); 332/* When using -Weverything, clang does not accept it's own headers; 333 * in a release build configuration. Disable what is too much in; 334 * -Weverything. */; 335#pragma clang diagnostic ignored ""-Wdisabled-macro-expansion""; 336#endif; 337 ; 338#if defined(__GNUC__) || defined(__MINGW32__); 339/* Who on earth came to the conclusion, using __DATE__ should rise; 340 * an ""expansion of date or time macro is not reproducible""; 341 * warning. That's exactly what was intended by using this macro.; 342 * Just disable this nonsense warning. */; 343 ; 344/* And disabling them does not work either:; 345 * #pragma clang diagnostic ignored ""-Wno-error=date-time""; 346 * #pragma clang diagnostic ignored ""-Wdate-time""; 347 * So we just have to disable ALL warnings for some lines; 348 * of code.; 349 * This seems to be a known GCC bug, not resolved since 2012:; 350 * https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53431; 351 */; 352#endif; 353 ; 354 ; 355#if defined(__MACH__) /* Apple OSX section */; 356 ; 357#if defined(__clang__); 358#if (__clang_major__ == 3) && ((__clang_minor__ == 7) || (__clang_minor__ == 8)); 359/* Avoid warnings for Xcode 7. It seems it does no longer exist in Xcode 8 */; 360#pragma clang diagnostic ignored ""-Wno-reserved-id-macro""; 361#pragma clang diagnostic ignored ""-Wno-keyword-macro""; 362#endif; 363#endif; 364 ; 365#ifndef CLOCK_MONOTONIC; 366#define CLOCK_MONOTONIC (1); 367#endif; 368#ifndef CLOCK_REALTIME; 369#define CLOCK_REALTIME (2); 370#endif; 371 ; 372#include <mach/clock.h>; 373#include <mach/mach.h>; 374#include <mach/mach_time.h>; 375#include <sys/errno.h>; 376#include <sys/time.h>; 377 ; 378/* clock_gettime is not ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:15523,Availability,error,error,15523,"e_ifo);; 401 DEBUG_ASSERT(mach_status == KERN_SUCCESS);; 402 ; 403 /* appease ""unused variable"" warning for release builds */; 404 (void)mach_status;; 405 ; 406 clock_start_time = now;; 407 }; 408 ; 409 now = (uint64_t)((double)(now - clock_start_time); 410 * (double)timebase_ifo.numer; 411 / (double)timebase_ifo.denom);; 412 ; 413 t->tv_sec = now / 1000000000;; 414 t->tv_nsec = now % 1000000000;; 415 return 0;; 416 }; 417 return -1; /* EINVAL - Clock ID is unknown */; 418}; 419 ; 420/* if clock_gettime is declared, then __CLOCK_AVAILABILITY will be defined */; 421#if defined(__CLOCK_AVAILABILITY); 422/* If we compiled with Mac OSX 10.12 or later, then clock_gettime will be; 423 * declared but it may be NULL at runtime. So we need to check before using; 424 * it. */; 425static int; 426_civet_safe_clock_gettime(int clk_id, struct timespec *t); 427{; 428 if (clock_gettime) {; 429 return clock_gettime(clk_id, t);; 430 }; 431 return _civet_clock_gettime(clk_id, t);; 432}; 433#define clock_gettime _civet_safe_clock_gettime; 434#else; 435#define clock_gettime _civet_clock_gettime; 436#endif; 437 ; 438#endif; 439 ; 440 ; 441#if !defined(_WIN32); 442/* Unix might return different error codes indicating to try again.; 443 * For Linux EAGAIN==EWOULDBLOCK, maybe EAGAIN!=EWOULDBLOCK is history from; 444 * decades ago, but better check both and let the compile optimize it. */; 445#define ERROR_TRY_AGAIN(err) \; 446 (((err) == EAGAIN) || ((err) == EWOULDBLOCK) || ((err) == EINTR)); 447#endif; 448 ; 449#if defined(USE_ZLIB); 450#include ""zconf.h""; 451#include ""zlib.h""; 452#endif; 453 ; 454 ; 455/********************************************************************/; 456/* CivetWeb configuration defines */; 457/********************************************************************/; 458 ; 459/* Maximum number of threads that can be configured.; 460 * The number of threads actually created depends on the ""num_threads""; 461 * configuration parameter, but this is the upper limit. */; 462",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:19327,Availability,error,error,19327,"izeof(size_t) == 4 || sizeof(size_t) == 8,; 522 ""size_t data type size check"");; 523 ; 524 ; 525#if defined(_WIN32) /* WINDOWS include block */; 526#include <malloc.h> /* *alloc( */; 527#include <stdlib.h> /* *alloc( */; 528#include <time.h> /* struct timespec */; 529#include <windows.h>; 530#include <winsock2.h> /* DTL add for SO_EXCLUSIVE */; 531#include <ws2tcpip.h>; 532 ; 533typedef const char *SOCK_OPT_TYPE;; 534 ; 535/* For a detailed description of these *_PATH_MAX defines, see; 536 * https://github.com/civetweb/civetweb/issues/937. */; 537 ; 538/* UTF8_PATH_MAX is a char buffer size for 259 BMP characters in UTF-8 plus; 539 * null termination, rounded up to the next 4 bytes boundary */; 540#define UTF8_PATH_MAX (3 * 260); 541/* UTF16_PATH_MAX is the 16-bit wchar_t buffer size required for 259 BMP; 542 * characters plus termination. (Note: wchar_t is 16 bit on Windows) */; 543#define UTF16_PATH_MAX (260); 544 ; 545#if !defined(_IN_PORT_T); 546#if !defined(in_port_t); 547#define in_port_t u_short; 548#endif; 549#endif; 550 ; 551#if defined(_WIN32_WCE); 552#error ""WinCE support has ended""; 553#endif; 554 ; 555#include <direct.h>; 556#include <io.h>; 557#include <process.h>; 558 ; 559 ; 560#define MAKEUQUAD(lo, hi) \; 561 ((uint64_t)(((uint32_t)(lo)) | ((uint64_t)((uint32_t)(hi))) << 32)); 562#define RATE_DIFF (10000000) /* 100 nsecs */; 563#define EPOCH_DIFF (MAKEUQUAD(0xd53e8000, 0x019db1de)); 564#define SYS2UNIX_TIME(lo, hi) \; 565 ((time_t)((MAKEUQUAD((lo), (hi)) - EPOCH_DIFF) / RATE_DIFF)); 566 ; 567/* Visual Studio 6 does not know __func__ or __FUNCTION__; 568 * The rest of MS compilers use __FUNCTION__, not C99 __func__; 569 * Also use _strtoui64 on modern M$ compilers */; 570#if defined(_MSC_VER); 571#if (_MSC_VER < 1300); 572#define STRX(x) #x; 573#define STR(x) STRX(x); 574#define __func__ __FILE__ "":"" STR(__LINE__); 575#define strtoull(x, y, z) ((unsigned __int64)_atoi64(x)); 576#define strtoll(x, y, z) (_atoi64(x)); 577#else; 578#define __func__ __FU",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:47240,Availability,error,error,47240,"intf DO_NOT_USE_THIS_FUNCTION__USE_mg_snprintf; 1541#if defined(_WIN32); 1542/* vsnprintf must not be used in any system,; 1543 * but this define only works well for Windows. */; 1544#define vsnprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_vsnprintf; 1545#endif; 1546 ; 1547 ; 1548/* mg_init_library counter */; 1549static int mg_init_library_called = 0;; 1550 ; 1551#if !defined(NO_SSL); 1552#if defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) \; 1553 || defined(OPENSSL_API_3_0); 1554static int mg_openssl_initialized = 0;; 1555#endif; 1556#if !defined(OPENSSL_API_1_0) && !defined(OPENSSL_API_1_1) \; 1557 && !defined(OPENSSL_API_3_0) && !defined(USE_MBEDTLS); 1558#error ""Please define OPENSSL_API_1_0 or OPENSSL_API_1_1""; 1559#endif; 1560#if defined(OPENSSL_API_1_0) && defined(OPENSSL_API_1_1) \; 1561 && defined(OPENSSL_API_3_0); 1562#error ""Multiple OPENSSL_API versions defined""; 1563#endif; 1564#if (defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) \; 1565 || defined(OPENSSL_API_3_0)) \; 1566 && defined(USE_MBEDTLS); 1567#error ""Multiple SSL libraries defined""; 1568#endif; 1569#endif; 1570 ; 1571 ; 1572static pthread_key_t sTlsKey; /* Thread local storage index */; 1573static volatile ptrdiff_t thread_idx_max = 0;; 1574 ; 1575#if defined(MG_LEGACY_INTERFACE); 1576#define MG_ALLOW_USING_GET_REQUEST_INFO_FOR_RESPONSE; 1577#endif; 1578 ; 1579struct mg_workerTLS {; 1580 int is_master;; 1581 unsigned long thread_idx;; 1582 void *user_ptr;; 1583#if defined(_WIN32); 1584 HANDLE pthread_cond_helper_mutex;; 1585 struct mg_workerTLS *next_waiting_thread;; 1586#endif; 1587 const char *alpn_proto;; 1588#if defined(MG_ALLOW_USING_GET_REQUEST_INFO_FOR_RESPONSE); 1589 char txtbuf[4];; 1590#endif; 1591};; 1592 ; 1593 ; 1594#if defined(GCC_DIAGNOSTIC); 1595/* Show no warning in case system functions are not used. */; 1596#pragma GCC diagnostic push; 1597#pragma GCC diagnostic ignored ""-Wunused-function""; 1598#endif /* defined(GCC_DIAGNOSTIC) */; 1599#if defined(__clang__); 1600/* Sho",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:47413,Availability,error,error,47413,"intf DO_NOT_USE_THIS_FUNCTION__USE_mg_snprintf; 1541#if defined(_WIN32); 1542/* vsnprintf must not be used in any system,; 1543 * but this define only works well for Windows. */; 1544#define vsnprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_vsnprintf; 1545#endif; 1546 ; 1547 ; 1548/* mg_init_library counter */; 1549static int mg_init_library_called = 0;; 1550 ; 1551#if !defined(NO_SSL); 1552#if defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) \; 1553 || defined(OPENSSL_API_3_0); 1554static int mg_openssl_initialized = 0;; 1555#endif; 1556#if !defined(OPENSSL_API_1_0) && !defined(OPENSSL_API_1_1) \; 1557 && !defined(OPENSSL_API_3_0) && !defined(USE_MBEDTLS); 1558#error ""Please define OPENSSL_API_1_0 or OPENSSL_API_1_1""; 1559#endif; 1560#if defined(OPENSSL_API_1_0) && defined(OPENSSL_API_1_1) \; 1561 && defined(OPENSSL_API_3_0); 1562#error ""Multiple OPENSSL_API versions defined""; 1563#endif; 1564#if (defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) \; 1565 || defined(OPENSSL_API_3_0)) \; 1566 && defined(USE_MBEDTLS); 1567#error ""Multiple SSL libraries defined""; 1568#endif; 1569#endif; 1570 ; 1571 ; 1572static pthread_key_t sTlsKey; /* Thread local storage index */; 1573static volatile ptrdiff_t thread_idx_max = 0;; 1574 ; 1575#if defined(MG_LEGACY_INTERFACE); 1576#define MG_ALLOW_USING_GET_REQUEST_INFO_FOR_RESPONSE; 1577#endif; 1578 ; 1579struct mg_workerTLS {; 1580 int is_master;; 1581 unsigned long thread_idx;; 1582 void *user_ptr;; 1583#if defined(_WIN32); 1584 HANDLE pthread_cond_helper_mutex;; 1585 struct mg_workerTLS *next_waiting_thread;; 1586#endif; 1587 const char *alpn_proto;; 1588#if defined(MG_ALLOW_USING_GET_REQUEST_INFO_FOR_RESPONSE); 1589 char txtbuf[4];; 1590#endif; 1591};; 1592 ; 1593 ; 1594#if defined(GCC_DIAGNOSTIC); 1595/* Show no warning in case system functions are not used. */; 1596#pragma GCC diagnostic push; 1597#pragma GCC diagnostic ignored ""-Wunused-function""; 1598#endif /* defined(GCC_DIAGNOSTIC) */; 1599#if defined(__clang__); 1600/* Sho",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:47609,Availability,error,error,47609,"intf DO_NOT_USE_THIS_FUNCTION__USE_mg_snprintf; 1541#if defined(_WIN32); 1542/* vsnprintf must not be used in any system,; 1543 * but this define only works well for Windows. */; 1544#define vsnprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_vsnprintf; 1545#endif; 1546 ; 1547 ; 1548/* mg_init_library counter */; 1549static int mg_init_library_called = 0;; 1550 ; 1551#if !defined(NO_SSL); 1552#if defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) \; 1553 || defined(OPENSSL_API_3_0); 1554static int mg_openssl_initialized = 0;; 1555#endif; 1556#if !defined(OPENSSL_API_1_0) && !defined(OPENSSL_API_1_1) \; 1557 && !defined(OPENSSL_API_3_0) && !defined(USE_MBEDTLS); 1558#error ""Please define OPENSSL_API_1_0 or OPENSSL_API_1_1""; 1559#endif; 1560#if defined(OPENSSL_API_1_0) && defined(OPENSSL_API_1_1) \; 1561 && defined(OPENSSL_API_3_0); 1562#error ""Multiple OPENSSL_API versions defined""; 1563#endif; 1564#if (defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) \; 1565 || defined(OPENSSL_API_3_0)) \; 1566 && defined(USE_MBEDTLS); 1567#error ""Multiple SSL libraries defined""; 1568#endif; 1569#endif; 1570 ; 1571 ; 1572static pthread_key_t sTlsKey; /* Thread local storage index */; 1573static volatile ptrdiff_t thread_idx_max = 0;; 1574 ; 1575#if defined(MG_LEGACY_INTERFACE); 1576#define MG_ALLOW_USING_GET_REQUEST_INFO_FOR_RESPONSE; 1577#endif; 1578 ; 1579struct mg_workerTLS {; 1580 int is_master;; 1581 unsigned long thread_idx;; 1582 void *user_ptr;; 1583#if defined(_WIN32); 1584 HANDLE pthread_cond_helper_mutex;; 1585 struct mg_workerTLS *next_waiting_thread;; 1586#endif; 1587 const char *alpn_proto;; 1588#if defined(MG_ALLOW_USING_GET_REQUEST_INFO_FOR_RESPONSE); 1589 char txtbuf[4];; 1590#endif; 1591};; 1592 ; 1593 ; 1594#if defined(GCC_DIAGNOSTIC); 1595/* Show no warning in case system functions are not used. */; 1596#pragma GCC diagnostic push; 1597#pragma GCC diagnostic ignored ""-Wunused-function""; 1598#endif /* defined(GCC_DIAGNOSTIC) */; 1599#if defined(__clang__); 1600/* Sho",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:50806,Availability,error,error,50806,"ostic ignored ""-Wunreachable-code""; 1627 /* For every compiler, either ""sizeof(pthread_t) > sizeof(unsigned long)""; 1628 * or not, so one of the two conditions will be unreachable by construction.; 1629 * Unfortunately the C standard does not define a way to check this at; 1630 * compile time, since the #if preprocessor conditions can not use the; 1631 * sizeof operator as an argument. */; 1632#endif; 1633 ; 1634 if (sizeof(pthread_t) > sizeof(unsigned long)) {; 1635 /* This is the problematic case for CRYPTO_set_id_callback:; 1636 * The OS pthread_t can not be cast to unsigned long. */; 1637 struct mg_workerTLS *tls =; 1638 (struct mg_workerTLS *)pthread_getspecific(sTlsKey);; 1639 if (tls == NULL) {; 1640 /* SSL called from an unknown thread: Create some thread index.; 1641 */; 1642 tls = (struct mg_workerTLS *)mg_malloc(sizeof(struct mg_workerTLS));; 1643 tls->is_master = -2; /* -2 means ""3rd party thread"" */; 1644 tls->thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 1645 pthread_setspecific(sTlsKey, tls);; 1646 }; 1647 return tls->thread_idx;; 1648 } else {; 1649 /* pthread_t may be any data type, so a simple cast to unsigned long; 1650 * can rise a warning/error, depending on the platform.; 1651 * Here memcpy is used as an anything-to-anything cast. */; 1652 unsigned long ret = 0;; 1653 pthread_t t = pthread_self();; 1654 memcpy(&ret, &t, sizeof(pthread_t));; 1655 return ret;; 1656 }; 1657 ; 1658#if defined(__clang__); 1659#pragma clang diagnostic pop; 1660#endif; 1661 ; 1662#endif; 1663}; 1664 ; 1665 ; 1666FUNCTION_MAY_BE_UNUSED; 1667static uint64_t; 1668mg_get_current_time_ns(void); 1669{; 1670 struct timespec tsnow;; 1671 clock_gettime(CLOCK_REALTIME, &tsnow);; 1672 return (((uint64_t)tsnow.tv_sec) * 1000000000) + (uint64_t)tsnow.tv_nsec;; 1673}; 1674 ; 1675 ; 1676#if defined(GCC_DIAGNOSTIC); 1677/* Show no warning in case system functions are not used. */; 1678#pragma GCC diagnostic pop; 1679#endif /* defined(GCC_DIAGNOSTIC) */; 1680#if defined(__cla",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:77679,Availability,error,error,77679,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:78074,Availability,error,error,78074,"/* Time (since system start) when the request; 2480 * was received */; 2481 int64_t num_bytes_sent; /* Total bytes sent to client */; 2482 int64_t content_len; /* How many bytes of content can be read; 2483 * !is_chunked: Content-Length header value; 2484 * or -1 (until connection closed,; 2485 * not allowed for a request); 2486 * is_chunked: >= 0, appended gradually; 2487 */; 2488 int64_t consumed_content; /* How many bytes of content have been read */; 2489 int is_chunked; /* Transfer-Encoding is chunked:; 2490 * 0 = not chunked,; 2491 * 1 = chunked, not yet, or some data read,; 2492 * 2 = chunked, has error,; 2493 * 3 = chunked, all data read except trailer,; 2494 * 4 = chunked, all data read; 2495 */; 2496 char *buf; /* Buffer for received data */; 2497 char *path_info; /* PATH_INFO part of the URL */; 2498 ; 2499 int must_close; /* 1 if connection must be closed */; 2500 int accept_gzip; /* 1 if gzip encoding is accepted */; 2501 int in_error_handler; /* 1 if in handler for user defined error; 2502 * pages */; 2503#if defined(USE_WEBSOCKET); 2504 int in_websocket_handling; /* 1 if in read_websocket */; 2505#endif; 2506#if defined(USE_ZLIB) && defined(USE_WEBSOCKET) \; 2507 && defined(MG_EXPERIMENTAL_INTERFACES); 2508 /* Parameters for websocket data compression according to rfc7692 */; 2509 int websocket_deflate_server_max_windows_bits;; 2510 int websocket_deflate_client_max_windows_bits;; 2511 int websocket_deflate_server_no_context_takeover;; 2512 int websocket_deflate_client_no_context_takeover;; 2513 int websocket_deflate_initialized;; 2514 int websocket_deflate_flush;; 2515 z_stream websocket_deflate_state;; 2516 z_stream websocket_inflate_state;; 2517#endif; 2518 int handled_requests; /* Number of requests handled by this connection; 2519 */; 2520 int buf_size; /* Buffer size */; 2521 int request_len; /* Size of the request + headers in a buffer */; 2522 int data_len; /* Total size of data in a buffer */; 2523 int status_code; /* HTTP reply status code, e.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:81319,Availability,error,error,81319,"context *ctx,; 2556 const char *func,; 2557 unsigned line,; 2558 const char *fmt,; 2559 ...) PRINTF_ARGS(5, 6);; 2560 ; 2561 ; 2562#if !defined(NO_THREAD_NAME); 2563#if defined(_WIN32) && defined(_MSC_VER); 2564/* Set the thread name for debugging purposes in Visual Studio; 2565 * http://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx; 2566 */; 2567#pragma pack(push, 8); 2568typedef struct tagTHREADNAME_INFO {; 2569 DWORD dwType; /* Must be 0x1000. */; 2570 LPCSTR szName; /* Pointer to name (in user addr space). */; 2571 DWORD dwThreadID; /* Thread ID (-1=caller thread). */; 2572 DWORD dwFlags; /* Reserved for future use, must be zero. */; 2573} THREADNAME_INFO;; 2574#pragma pack(pop); 2575 ; 2576#elif defined(__linux__); 2577 ; 2578#include <sys/prctl.h>; 2579#include <sys/sendfile.h>; 2580#if defined(ALTERNATIVE_QUEUE); 2581#include <sys/eventfd.h>; 2582#endif /* ALTERNATIVE_QUEUE */; 2583 ; 2584 ; 2585#if defined(ALTERNATIVE_QUEUE); 2586 ; 2587static void *; 2588event_create(void); 2589{; 2590 int evhdl = eventfd(0, EFD_CLOEXEC);; 2591 int *ret;; 2592 ; 2593 if (evhdl == -1) {; 2594 /* Linux uses -1 on error, Windows NULL. */; 2595 /* However, Linux does not return 0 on success either. */; 2596 return 0;; 2597 }; 2598 ; 2599 ret = (int *)mg_malloc(sizeof(int));; 2600 if (ret) {; 2601 *ret = evhdl;; 2602 } else {; 2603 (void)close(evhdl);; 2604 }; 2605 ; 2606 return (void *)ret;; 2607}; 2608 ; 2609 ; 2610static int; 2611event_wait(void *eventhdl); 2612{; 2613 uint64_t u;; 2614 int evhdl, s;; 2615 ; 2616 if (!eventhdl) {; 2617 /* error */; 2618 return 0;; 2619 }; 2620 evhdl = *(int *)eventhdl;; 2621 ; 2622 s = (int)read(evhdl, &u, sizeof(u));; 2623 if (s != sizeof(u)) {; 2624 /* error */; 2625 return 0;; 2626 }; 2627 (void)u; /* the value is not required */; 2628 return 1;; 2629}; 2630 ; 2631 ; 2632static int; 2633event_signal(void *eventhdl); 2634{; 2635 uint64_t u = 1;; 2636 int evhdl, s;; 2637 ; 2638 if (!eventhdl) {; 2639 /* error */; 2640 return 0;; 2641 }; 2642",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:81753,Availability,error,error,81753,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:81905,Availability,error,error,81905,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:82160,Availability,error,error,82160,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:82313,Availability,error,error,82313,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:82498,Availability,error,error,82498,"01 *ret = evhdl;; 2602 } else {; 2603 (void)close(evhdl);; 2604 }; 2605 ; 2606 return (void *)ret;; 2607}; 2608 ; 2609 ; 2610static int; 2611event_wait(void *eventhdl); 2612{; 2613 uint64_t u;; 2614 int evhdl, s;; 2615 ; 2616 if (!eventhdl) {; 2617 /* error */; 2618 return 0;; 2619 }; 2620 evhdl = *(int *)eventhdl;; 2621 ; 2622 s = (int)read(evhdl, &u, sizeof(u));; 2623 if (s != sizeof(u)) {; 2624 /* error */; 2625 return 0;; 2626 }; 2627 (void)u; /* the value is not required */; 2628 return 1;; 2629}; 2630 ; 2631 ; 2632static int; 2633event_signal(void *eventhdl); 2634{; 2635 uint64_t u = 1;; 2636 int evhdl, s;; 2637 ; 2638 if (!eventhdl) {; 2639 /* error */; 2640 return 0;; 2641 }; 2642 evhdl = *(int *)eventhdl;; 2643 ; 2644 s = (int)write(evhdl, &u, sizeof(u));; 2645 if (s != sizeof(u)) {; 2646 /* error */; 2647 return 0;; 2648 }; 2649 return 1;; 2650}; 2651 ; 2652 ; 2653static void; 2654event_destroy(void *eventhdl); 2655{; 2656 int evhdl;; 2657 ; 2658 if (!eventhdl) {; 2659 /* error */; 2660 return;; 2661 }; 2662 evhdl = *(int *)eventhdl;; 2663 ; 2664 close(evhdl);; 2665 mg_free(eventhdl);; 2666}; 2667 ; 2668 ; 2669#endif; 2670 ; 2671#endif; 2672 ; 2673 ; 2674#if !defined(__linux__) && !defined(_WIN32) && defined(ALTERNATIVE_QUEUE); 2675 ; 2676struct posix_event {; 2677 pthread_mutex_t mutex;; 2678 pthread_cond_t cond;; 2679 int signaled;; 2680};; 2681 ; 2682 ; 2683static void *; 2684event_create(void); 2685{; 2686 struct posix_event *ret = mg_malloc(sizeof(struct posix_event));; 2687 if (ret == 0) {; 2688 /* out of memory */; 2689 return 0;; 2690 }; 2691 if (0 != pthread_mutex_init(&(ret->mutex), NULL)) {; 2692 /* pthread mutex not available */; 2693 mg_free(ret);; 2694 return 0;; 2695 }; 2696 if (0 != pthread_cond_init(&(ret->cond), NULL)) {; 2697 /* pthread cond not available */; 2698 pthread_mutex_destroy(&(ret->mutex));; 2699 mg_free(ret);; 2700 return 0;; 2701 }; 2702 ret->signaled = 0;; 2703 return (void *)ret;; 2704}; 2705 ; 2706 ; 2707static int; 2708e",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:83167,Availability,avail,available,83167,"40 return 0;; 2641 }; 2642 evhdl = *(int *)eventhdl;; 2643 ; 2644 s = (int)write(evhdl, &u, sizeof(u));; 2645 if (s != sizeof(u)) {; 2646 /* error */; 2647 return 0;; 2648 }; 2649 return 1;; 2650}; 2651 ; 2652 ; 2653static void; 2654event_destroy(void *eventhdl); 2655{; 2656 int evhdl;; 2657 ; 2658 if (!eventhdl) {; 2659 /* error */; 2660 return;; 2661 }; 2662 evhdl = *(int *)eventhdl;; 2663 ; 2664 close(evhdl);; 2665 mg_free(eventhdl);; 2666}; 2667 ; 2668 ; 2669#endif; 2670 ; 2671#endif; 2672 ; 2673 ; 2674#if !defined(__linux__) && !defined(_WIN32) && defined(ALTERNATIVE_QUEUE); 2675 ; 2676struct posix_event {; 2677 pthread_mutex_t mutex;; 2678 pthread_cond_t cond;; 2679 int signaled;; 2680};; 2681 ; 2682 ; 2683static void *; 2684event_create(void); 2685{; 2686 struct posix_event *ret = mg_malloc(sizeof(struct posix_event));; 2687 if (ret == 0) {; 2688 /* out of memory */; 2689 return 0;; 2690 }; 2691 if (0 != pthread_mutex_init(&(ret->mutex), NULL)) {; 2692 /* pthread mutex not available */; 2693 mg_free(ret);; 2694 return 0;; 2695 }; 2696 if (0 != pthread_cond_init(&(ret->cond), NULL)) {; 2697 /* pthread cond not available */; 2698 pthread_mutex_destroy(&(ret->mutex));; 2699 mg_free(ret);; 2700 return 0;; 2701 }; 2702 ret->signaled = 0;; 2703 return (void *)ret;; 2704}; 2705 ; 2706 ; 2707static int; 2708event_wait(void *eventhdl); 2709{; 2710 struct posix_event *ev = (struct posix_event *)eventhdl;; 2711 pthread_mutex_lock(&(ev->mutex));; 2712 while (!ev->signaled) {; 2713 pthread_cond_wait(&(ev->cond), &(ev->mutex));; 2714 }; 2715 ev->signaled = 0;; 2716 pthread_mutex_unlock(&(ev->mutex));; 2717 return 1;; 2718}; 2719 ; 2720 ; 2721static int; 2722event_signal(void *eventhdl); 2723{; 2724 struct posix_event *ev = (struct posix_event *)eventhdl;; 2725 pthread_mutex_lock(&(ev->mutex));; 2726 pthread_cond_signal(&(ev->cond));; 2727 ev->signaled = 1;; 2728 pthread_mutex_unlock(&(ev->mutex));; 2729 return 1;; 2730}; 2731 ; 2732 ; 2733static void; 2734event_destroy(voi",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:83306,Availability,avail,available,83306,"* error */; 2647 return 0;; 2648 }; 2649 return 1;; 2650}; 2651 ; 2652 ; 2653static void; 2654event_destroy(void *eventhdl); 2655{; 2656 int evhdl;; 2657 ; 2658 if (!eventhdl) {; 2659 /* error */; 2660 return;; 2661 }; 2662 evhdl = *(int *)eventhdl;; 2663 ; 2664 close(evhdl);; 2665 mg_free(eventhdl);; 2666}; 2667 ; 2668 ; 2669#endif; 2670 ; 2671#endif; 2672 ; 2673 ; 2674#if !defined(__linux__) && !defined(_WIN32) && defined(ALTERNATIVE_QUEUE); 2675 ; 2676struct posix_event {; 2677 pthread_mutex_t mutex;; 2678 pthread_cond_t cond;; 2679 int signaled;; 2680};; 2681 ; 2682 ; 2683static void *; 2684event_create(void); 2685{; 2686 struct posix_event *ret = mg_malloc(sizeof(struct posix_event));; 2687 if (ret == 0) {; 2688 /* out of memory */; 2689 return 0;; 2690 }; 2691 if (0 != pthread_mutex_init(&(ret->mutex), NULL)) {; 2692 /* pthread mutex not available */; 2693 mg_free(ret);; 2694 return 0;; 2695 }; 2696 if (0 != pthread_cond_init(&(ret->cond), NULL)) {; 2697 /* pthread cond not available */; 2698 pthread_mutex_destroy(&(ret->mutex));; 2699 mg_free(ret);; 2700 return 0;; 2701 }; 2702 ret->signaled = 0;; 2703 return (void *)ret;; 2704}; 2705 ; 2706 ; 2707static int; 2708event_wait(void *eventhdl); 2709{; 2710 struct posix_event *ev = (struct posix_event *)eventhdl;; 2711 pthread_mutex_lock(&(ev->mutex));; 2712 while (!ev->signaled) {; 2713 pthread_cond_wait(&(ev->cond), &(ev->mutex));; 2714 }; 2715 ev->signaled = 0;; 2716 pthread_mutex_unlock(&(ev->mutex));; 2717 return 1;; 2718}; 2719 ; 2720 ; 2721static int; 2722event_signal(void *eventhdl); 2723{; 2724 struct posix_event *ev = (struct posix_event *)eventhdl;; 2725 pthread_mutex_lock(&(ev->mutex));; 2726 pthread_cond_signal(&(ev->cond));; 2727 ev->signaled = 1;; 2728 pthread_mutex_unlock(&(ev->mutex));; 2729 return 1;; 2730}; 2731 ; 2732 ; 2733static void; 2734event_destroy(void *eventhdl); 2735{; 2736 struct posix_event *ev = (struct posix_event *)eventhdl;; 2737 pthread_cond_destroy(&(ev->cond));; 2738 pthread_m",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:88143,Availability,error,error,88143,"onn; /* not used */; 2840 ; 2841 if ((c == NULL) || (c[0] == 0)) {; 2842 /* Null pointer or empty path --> suspicious */; 2843 return 1;; 2844 }; 2845 ; 2846#if defined(_WIN32); 2847 while (*c) {; 2848 if (*c < 32) {; 2849 /* Control character */; 2850 return 1;; 2851 }; 2852 if ((*c == '>') || (*c == '<') || (*c == '|')) {; 2853 /* stdin/stdout redirection character */; 2854 return 1;; 2855 }; 2856 if ((*c == '*') || (*c == '?')) {; 2857 /* Wildcard character */; 2858 return 1;; 2859 }; 2860 if (*c == '""') {; 2861 /* Windows quotation */; 2862 return 1;; 2863 }; 2864 c++;; 2865 }; 2866#endif; 2867 ; 2868 /* Nothing suspicious found */; 2869 return 0;; 2870}; 2871 ; 2872 ; 2873/* mg_fopen will open a file either in memory or on the disk.; 2874 * The input parameter path is a string in UTF-8 encoding.; 2875 * The input parameter mode is MG_FOPEN_MODE_*; 2876 * On success, fp will be set in the output struct mg_file.; 2877 * All status members will also be set.; 2878 * The function returns 1 on success, 0 on error. */; 2879static int; 2880mg_fopen(const struct mg_connection *conn,; 2881 const char *path,; 2882 int mode,; 2883 struct mg_file *filep); 2884{; 2885 int found;; 2886 ; 2887 if (!filep) {; 2888 return 0;; 2889 }; 2890 filep->access.fp = NULL;; 2891 ; 2892 if (mg_path_suspicious(conn, path)) {; 2893 return 0;; 2894 }; 2895 ; 2896 /* filep is initialized in mg_stat: all fields with memset to,; 2897 * some fields like size and modification date with values */; 2898 found = mg_stat(conn, path, &(filep->stat));; 2899 ; 2900 if ((mode == MG_FOPEN_MODE_READ) && (!found)) {; 2901 /* file does not exist and will not be created */; 2902 return 0;; 2903 }; 2904 ; 2905#if defined(_WIN32); 2906 {; 2907 wchar_t wbuf[UTF16_PATH_MAX];; 2908 path_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));; 2909 switch (mode) {; 2910 case MG_FOPEN_MODE_READ:; 2911 filep->access.fp = _wfopen(wbuf, L""rb"");; 2912 break;; 2913 case MG_FOPEN_MODE_WRITE:; 2914 filep->access.fp = _wfopen(wbuf, L",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:92398,Availability,error,errors,92398," if USE_SERVER_STATS is not; 3016 * defined */; 3017 ; 3018 if ((p = (char *)mg_malloc_ctx(len + 1, ctx)) != NULL) {; 3019 mg_strlcpy(p, ptr, len + 1);; 3020 }; 3021 ; 3022 return p;; 3023}; 3024 ; 3025 ; 3026static char *; 3027mg_strdup_ctx(const char *str, struct mg_context *ctx); 3028{; 3029 return mg_strndup_ctx(str, strlen(str), ctx);; 3030}; 3031 ; 3032static char *; 3033mg_strdup(const char *str); 3034{; 3035 return mg_strndup_ctx(str, strlen(str), NULL);; 3036}; 3037 ; 3038 ; 3039static const char *; 3040mg_strcasestr(const char *big_str, const char *small_str); 3041{; 3042 size_t i, big_len = strlen(big_str), small_len = strlen(small_str);; 3043 ; 3044 if (big_len >= small_len) {; 3045 for (i = 0; i <= (big_len - small_len); i++) {; 3046 if (mg_strncasecmp(big_str + i, small_str, small_len) == 0) {; 3047 return big_str + i;; 3048 }; 3049 }; 3050 }; 3051 ; 3052 return NULL;; 3053}; 3054 ; 3055 ; 3056/* Return null terminated string of given maximum length.; 3057 * Report errors if length is exceeded. */; 3058static void; 3059mg_vsnprintf(const struct mg_connection *conn,; 3060 int *truncated,; 3061 char *buf,; 3062 size_t buflen,; 3063 const char *fmt,; 3064 va_list ap); 3065{; 3066 int n, ok;; 3067 ; 3068 if (buflen == 0) {; 3069 if (truncated) {; 3070 *truncated = 1;; 3071 }; 3072 return;; 3073 }; 3074 ; 3075#if defined(__clang__); 3076#pragma clang diagnostic push; 3077#pragma clang diagnostic ignored ""-Wformat-nonliteral""; 3078 /* Using fmt as a non-literal is intended here, since it is mostly called; 3079 * indirectly by mg_snprintf */; 3080#endif; 3081 ; 3082 n = (int)vsnprintf_impl(buf, buflen, fmt, ap);; 3083 ok = (n >= 0) && ((size_t)n < buflen);; 3084 ; 3085#if defined(__clang__); 3086#pragma clang diagnostic pop; 3087#endif; 3088 ; 3089 if (ok) {; 3090 if (truncated) {; 3091 *truncated = 0;; 3092 }; 3093 } else {; 3094 if (truncated) {; 3095 *truncated = 1;; 3096 }; 3097 mg_cry_internal(conn,; 3098 ""truncating vsnprintf buffer: [%.*s]"",; 3099 (int)",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:99689,Availability,error,error,99689,"ULL);; 3313 if (tm != NULL) {; 3314#else; 3315 struct tm _tm;; 3316 struct tm *tm = &_tm;; 3317 ; 3318 if (t != NULL) {; 3319 gmtime_r(t, tm);; 3320#endif; 3321 strftime(buf, buf_len, ""%a, %d %b %Y %H:%M:%S GMT"", tm);; 3322 } else {; 3323 mg_strlcpy(buf, ""Thu, 01 Jan 1970 00:00:00 GMT"", buf_len);; 3324 buf[buf_len - 1] = '\0';; 3325 }; 3326}; 3327 ; 3328 ; 3329/* difftime for struct timespec. Return value is in seconds. */; 3330static double; 3331mg_difftimespec(const struct timespec *ts_now, const struct timespec *ts_before); 3332{; 3333 return (double)(ts_now->tv_nsec - ts_before->tv_nsec) * 1.0E-9; 3334 + (double)(ts_now->tv_sec - ts_before->tv_sec);; 3335}; 3336 ; 3337 ; 3338#if defined(MG_EXTERNAL_FUNCTION_mg_cry_internal_impl); 3339static void mg_cry_internal_impl(const struct mg_connection *conn,; 3340 const char *func,; 3341 unsigned line,; 3342 const char *fmt,; 3343 va_list ap);; 3344#include ""external_mg_cry_internal_impl.inl""; 3345#elif !defined(NO_FILESYSTEMS); 3346 ; 3347/* Print error message to the opened error log stream. */; 3348static void; 3349mg_cry_internal_impl(const struct mg_connection *conn,; 3350 const char *func,; 3351 unsigned line,; 3352 const char *fmt,; 3353 va_list ap); 3354{; 3355 char buf[MG_BUF_LEN], src_addr[IP_ADDR_STR_LEN];; 3356 struct mg_file fi;; 3357 time_t timestamp;; 3358 ; 3359 /* Unused, in the RELEASE build */; 3360 (void)func;; 3361 (void)line;; 3362 ; 3363#if defined(GCC_DIAGNOSTIC); 3364#pragma GCC diagnostic push; 3365#pragma GCC diagnostic ignored ""-Wformat-nonliteral""; 3366#endif; 3367 ; 3368 IGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));; 3369 ; 3370#if defined(GCC_DIAGNOSTIC); 3371#pragma GCC diagnostic pop; 3372#endif; 3373 ; 3374 buf[sizeof(buf) - 1] = 0;; 3375 ; 3376 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3377 ; 3378 if (!conn) {; 3379 puts(buf);; 3380 return;; 3381 }; 3382 ; 3383 /* Do not lock when getting the callback value, here and below.; 3384 * I suppose this i",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:99717,Availability,error,error,99717,"ULL);; 3313 if (tm != NULL) {; 3314#else; 3315 struct tm _tm;; 3316 struct tm *tm = &_tm;; 3317 ; 3318 if (t != NULL) {; 3319 gmtime_r(t, tm);; 3320#endif; 3321 strftime(buf, buf_len, ""%a, %d %b %Y %H:%M:%S GMT"", tm);; 3322 } else {; 3323 mg_strlcpy(buf, ""Thu, 01 Jan 1970 00:00:00 GMT"", buf_len);; 3324 buf[buf_len - 1] = '\0';; 3325 }; 3326}; 3327 ; 3328 ; 3329/* difftime for struct timespec. Return value is in seconds. */; 3330static double; 3331mg_difftimespec(const struct timespec *ts_now, const struct timespec *ts_before); 3332{; 3333 return (double)(ts_now->tv_nsec - ts_before->tv_nsec) * 1.0E-9; 3334 + (double)(ts_now->tv_sec - ts_before->tv_sec);; 3335}; 3336 ; 3337 ; 3338#if defined(MG_EXTERNAL_FUNCTION_mg_cry_internal_impl); 3339static void mg_cry_internal_impl(const struct mg_connection *conn,; 3340 const char *func,; 3341 unsigned line,; 3342 const char *fmt,; 3343 va_list ap);; 3344#include ""external_mg_cry_internal_impl.inl""; 3345#elif !defined(NO_FILESYSTEMS); 3346 ; 3347/* Print error message to the opened error log stream. */; 3348static void; 3349mg_cry_internal_impl(const struct mg_connection *conn,; 3350 const char *func,; 3351 unsigned line,; 3352 const char *fmt,; 3353 va_list ap); 3354{; 3355 char buf[MG_BUF_LEN], src_addr[IP_ADDR_STR_LEN];; 3356 struct mg_file fi;; 3357 time_t timestamp;; 3358 ; 3359 /* Unused, in the RELEASE build */; 3360 (void)func;; 3361 (void)line;; 3362 ; 3363#if defined(GCC_DIAGNOSTIC); 3364#pragma GCC diagnostic push; 3365#pragma GCC diagnostic ignored ""-Wformat-nonliteral""; 3366#endif; 3367 ; 3368 IGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));; 3369 ; 3370#if defined(GCC_DIAGNOSTIC); 3371#pragma GCC diagnostic pop; 3372#endif; 3373 ; 3374 buf[sizeof(buf) - 1] = 0;; 3375 ; 3376 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3377 ; 3378 if (!conn) {; 3379 puts(buf);; 3380 return;; 3381 }; 3382 ; 3383 /* Do not lock when getting the callback value, here and below.; 3384 * I suppose this i",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:101394,Availability,error,error,101394,"0;; 3375 ; 3376 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3377 ; 3378 if (!conn) {; 3379 puts(buf);; 3380 return;; 3381 }; 3382 ; 3383 /* Do not lock when getting the callback value, here and below.; 3384 * I suppose this is fine, since function cannot disappear in the; 3385 * same way string option can. */; 3386 if ((conn->phys_ctx->callbacks.log_message == NULL); 3387 || (conn->phys_ctx->callbacks.log_message(conn, buf) == 0)) {; 3388 ; 3389 if (conn->dom_ctx->config[ERROR_LOG_FILE] != NULL) {; 3390 if (mg_fopen(conn,; 3391 conn->dom_ctx->config[ERROR_LOG_FILE],; 3392 MG_FOPEN_MODE_APPEND,; 3393 &fi); 3394 == 0) {; 3395 fi.access.fp = NULL;; 3396 }; 3397 } else {; 3398 fi.access.fp = NULL;; 3399 }; 3400 ; 3401 if (fi.access.fp != NULL) {; 3402 flockfile(fi.access.fp);; 3403 timestamp = time(NULL);; 3404 ; 3405 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3406 fprintf(fi.access.fp,; 3407 ""[%010lu] [error] [client %s] "",; 3408 (unsigned long)timestamp,; 3409 src_addr);; 3410 ; 3411 if (conn->request_info.request_method != NULL) {; 3412 fprintf(fi.access.fp,; 3413 ""%s %s: "",; 3414 conn->request_info.request_method,; 3415 conn->request_info.request_uri; 3416 ? conn->request_info.request_uri; 3417 : """");; 3418 }; 3419 ; 3420 fprintf(fi.access.fp, ""%s"", buf);; 3421 fputc('\n', fi.access.fp);; 3422 fflush(fi.access.fp);; 3423 funlockfile(fi.access.fp);; 3424 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3425 * mg_cry here anyway ;-) */; 3426 }; 3427 }; 3428}; 3429#else; 3430#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3431#endif /* Externally provided function */; 3432 ; 3433 ; 3434/* Construct fake connection structure. Used for logging, if connection; 3435 * is not applicable at the moment of logging. */; 3436static struct mg_connection *; 3437fake_connection(struct mg_connection *fc, struct mg_context *ctx); 3438{; 3439 static const struct mg_connection conn_z",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:101896,Availability,error,errors,101896," {; 3388 ; 3389 if (conn->dom_ctx->config[ERROR_LOG_FILE] != NULL) {; 3390 if (mg_fopen(conn,; 3391 conn->dom_ctx->config[ERROR_LOG_FILE],; 3392 MG_FOPEN_MODE_APPEND,; 3393 &fi); 3394 == 0) {; 3395 fi.access.fp = NULL;; 3396 }; 3397 } else {; 3398 fi.access.fp = NULL;; 3399 }; 3400 ; 3401 if (fi.access.fp != NULL) {; 3402 flockfile(fi.access.fp);; 3403 timestamp = time(NULL);; 3404 ; 3405 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3406 fprintf(fi.access.fp,; 3407 ""[%010lu] [error] [client %s] "",; 3408 (unsigned long)timestamp,; 3409 src_addr);; 3410 ; 3411 if (conn->request_info.request_method != NULL) {; 3412 fprintf(fi.access.fp,; 3413 ""%s %s: "",; 3414 conn->request_info.request_method,; 3415 conn->request_info.request_uri; 3416 ? conn->request_info.request_uri; 3417 : """");; 3418 }; 3419 ; 3420 fprintf(fi.access.fp, ""%s"", buf);; 3421 fputc('\n', fi.access.fp);; 3422 fflush(fi.access.fp);; 3423 funlockfile(fi.access.fp);; 3424 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3425 * mg_cry here anyway ;-) */; 3426 }; 3427 }; 3428}; 3429#else; 3430#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3431#endif /* Externally provided function */; 3432 ; 3433 ; 3434/* Construct fake connection structure. Used for logging, if connection; 3435 * is not applicable at the moment of logging. */; 3436static struct mg_connection *; 3437fake_connection(struct mg_connection *fc, struct mg_context *ctx); 3438{; 3439 static const struct mg_connection conn_zero = {0};; 3440 *fc = conn_zero;; 3441 fc->phys_ctx = ctx;; 3442 fc->dom_ctx = &(ctx->dd);; 3443 return fc;; 3444}; 3445 ; 3446 ; 3447static void; 3448mg_cry_internal_wrap(const struct mg_connection *conn,; 3449 struct mg_context *ctx,; 3450 const char *func,; 3451 unsigned line,; 3452 const char *fmt,; 3453 ...); 3454{; 3455 va_list ap;; 3456 va_start(ap, fmt);; 3457 if (!conn && ctx) {; 3458 struct mg_connection fc;; 3459 mg_cry_internal_impl(fak",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:101992,Availability,error,error,101992,"DE_APPEND,; 3393 &fi); 3394 == 0) {; 3395 fi.access.fp = NULL;; 3396 }; 3397 } else {; 3398 fi.access.fp = NULL;; 3399 }; 3400 ; 3401 if (fi.access.fp != NULL) {; 3402 flockfile(fi.access.fp);; 3403 timestamp = time(NULL);; 3404 ; 3405 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3406 fprintf(fi.access.fp,; 3407 ""[%010lu] [error] [client %s] "",; 3408 (unsigned long)timestamp,; 3409 src_addr);; 3410 ; 3411 if (conn->request_info.request_method != NULL) {; 3412 fprintf(fi.access.fp,; 3413 ""%s %s: "",; 3414 conn->request_info.request_method,; 3415 conn->request_info.request_uri; 3416 ? conn->request_info.request_uri; 3417 : """");; 3418 }; 3419 ; 3420 fprintf(fi.access.fp, ""%s"", buf);; 3421 fputc('\n', fi.access.fp);; 3422 fflush(fi.access.fp);; 3423 funlockfile(fi.access.fp);; 3424 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3425 * mg_cry here anyway ;-) */; 3426 }; 3427 }; 3428}; 3429#else; 3430#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3431#endif /* Externally provided function */; 3432 ; 3433 ; 3434/* Construct fake connection structure. Used for logging, if connection; 3435 * is not applicable at the moment of logging. */; 3436static struct mg_connection *; 3437fake_connection(struct mg_connection *fc, struct mg_context *ctx); 3438{; 3439 static const struct mg_connection conn_zero = {0};; 3440 *fc = conn_zero;; 3441 fc->phys_ctx = ctx;; 3442 fc->dom_ctx = &(ctx->dd);; 3443 return fc;; 3444}; 3445 ; 3446 ; 3447static void; 3448mg_cry_internal_wrap(const struct mg_connection *conn,; 3449 struct mg_context *ctx,; 3450 const char *func,; 3451 unsigned line,; 3452 const char *fmt,; 3453 ...); 3454{; 3455 va_list ap;; 3456 va_start(ap, fmt);; 3457 if (!conn && ctx) {; 3458 struct mg_connection fc;; 3459 mg_cry_internal_impl(fake_connection(&fc, ctx), func, line, fmt, ap);; 3460 } else {; 3461 mg_cry_internal_impl(conn, func, line, fmt, ap);; 3462 }; 3463 va_end(ap);; 3464}; 3465 ; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:117671,Availability,alive,alive,117671,"attern[i] == '$') {; 3940 return (str[j] == '\0') ? j : -1;; 3941 } else if (pattern[i] == '*') {; 3942 i++;; 3943 if (pattern[i] == '*') {; 3944 i++;; 3945 len = (ptrdiff_t)strlen(str + j);; 3946 } else {; 3947 len = (ptrdiff_t)strcspn(str + j, ""/"");; 3948 }; 3949 if (i == (ptrdiff_t)pattern_len) {; 3950 return j + len;; 3951 }; 3952 do {; 3953 res = match_prefix(pattern + i,; 3954 (pattern_len - (size_t)i),; 3955 str + j + len);; 3956 } while (res == -1 && len-- > 0);; 3957 return (res == -1) ? -1 : j + res + len;; 3958 } else if (lowercase(&pattern[i]) != lowercase(&str[j])) {; 3959 return -1;; 3960 }; 3961 }; 3962 return (ptrdiff_t)j;; 3963}; 3964 ; 3965 ; 3966static ptrdiff_t; 3967match_prefix_strlen(const char *pattern, const char *str); 3968{; 3969 if (pattern == NULL) {; 3970 return -1;; 3971 }; 3972 return match_prefix(pattern, strlen(pattern), str);; 3973}; 3974 ; 3975 ; 3976/* HTTP 1.1 assumes keep alive if ""Connection:"" header is not set; 3977 * This function must tolerate situations when connection info is not; 3978 * set up, for example if request parsing failed. */; 3979static int; 3980should_keep_alive(const struct mg_connection *conn); 3981{; 3982 const char *http_version;; 3983 const char *header;; 3984 ; 3985 /* First satisfy needs of the server */; 3986 if ((conn == NULL) || conn->must_close) {; 3987 /* Close, if civetweb framework needs to close */; 3988 return 0;; 3989 }; 3990 ; 3991 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3992 /* Close, if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:117739,Availability,toler,tolerate,117739,"attern[i] == '$') {; 3940 return (str[j] == '\0') ? j : -1;; 3941 } else if (pattern[i] == '*') {; 3942 i++;; 3943 if (pattern[i] == '*') {; 3944 i++;; 3945 len = (ptrdiff_t)strlen(str + j);; 3946 } else {; 3947 len = (ptrdiff_t)strcspn(str + j, ""/"");; 3948 }; 3949 if (i == (ptrdiff_t)pattern_len) {; 3950 return j + len;; 3951 }; 3952 do {; 3953 res = match_prefix(pattern + i,; 3954 (pattern_len - (size_t)i),; 3955 str + j + len);; 3956 } while (res == -1 && len-- > 0);; 3957 return (res == -1) ? -1 : j + res + len;; 3958 } else if (lowercase(&pattern[i]) != lowercase(&str[j])) {; 3959 return -1;; 3960 }; 3961 }; 3962 return (ptrdiff_t)j;; 3963}; 3964 ; 3965 ; 3966static ptrdiff_t; 3967match_prefix_strlen(const char *pattern, const char *str); 3968{; 3969 if (pattern == NULL) {; 3970 return -1;; 3971 }; 3972 return match_prefix(pattern, strlen(pattern), str);; 3973}; 3974 ; 3975 ; 3976/* HTTP 1.1 assumes keep alive if ""Connection:"" header is not set; 3977 * This function must tolerate situations when connection info is not; 3978 * set up, for example if request parsing failed. */; 3979static int; 3980should_keep_alive(const struct mg_connection *conn); 3981{; 3982 const char *http_version;; 3983 const char *header;; 3984 ; 3985 /* First satisfy needs of the server */; 3986 if ((conn == NULL) || conn->must_close) {; 3987 /* Close, if civetweb framework needs to close */; 3988 return 0;; 3989 }; 3990 ; 3991 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3992 /* Close, if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:118276,Availability,alive,alive,118276,"tern[i]) != lowercase(&str[j])) {; 3959 return -1;; 3960 }; 3961 }; 3962 return (ptrdiff_t)j;; 3963}; 3964 ; 3965 ; 3966static ptrdiff_t; 3967match_prefix_strlen(const char *pattern, const char *str); 3968{; 3969 if (pattern == NULL) {; 3970 return -1;; 3971 }; 3972 return match_prefix(pattern, strlen(pattern), str);; 3973}; 3974 ; 3975 ; 3976/* HTTP 1.1 assumes keep alive if ""Connection:"" header is not set; 3977 * This function must tolerate situations when connection info is not; 3978 * set up, for example if request parsing failed. */; 3979static int; 3980should_keep_alive(const struct mg_connection *conn); 3981{; 3982 const char *http_version;; 3983 const char *header;; 3984 ; 3985 /* First satisfy needs of the server */; 3986 if ((conn == NULL) || conn->must_close) {; 3987 /* Close, if civetweb framework needs to close */; 3988 return 0;; 3989 }; 3990 ; 3991 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3992 /* Close, if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http_version, ""1.1""))) {; 4009 /* HTTP 1.1 default is keep alive */; 4010 return 1;; 4011 }; 4012 ; 4013 /* HTTP 1.0 (and earlier) default is to close the connection */; 4014 return 0;; 4015}; 4016 ; 4017 ; 4018static int; 4019should_decode_url(const struct mg_connection *conn); 4020{; 4021 if (!conn || !conn->dom_ctx) {; 4022 return 0;; 4023 }; 4024 ; 4025 return (mg_strcasecmp(conn->dom_ctx->config[DECODE_URL], ""yes"") == 0);; 4026}; 4027 ; 4028 ; 4029static int; 4030should_decode_query_string(const struct mg_connection *conn); 4031{; 4032 if (!conn ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:118555,Availability,alive,alive,118555,"tern[i]) != lowercase(&str[j])) {; 3959 return -1;; 3960 }; 3961 }; 3962 return (ptrdiff_t)j;; 3963}; 3964 ; 3965 ; 3966static ptrdiff_t; 3967match_prefix_strlen(const char *pattern, const char *str); 3968{; 3969 if (pattern == NULL) {; 3970 return -1;; 3971 }; 3972 return match_prefix(pattern, strlen(pattern), str);; 3973}; 3974 ; 3975 ; 3976/* HTTP 1.1 assumes keep alive if ""Connection:"" header is not set; 3977 * This function must tolerate situations when connection info is not; 3978 * set up, for example if request parsing failed. */; 3979static int; 3980should_keep_alive(const struct mg_connection *conn); 3981{; 3982 const char *http_version;; 3983 const char *header;; 3984 ; 3985 /* First satisfy needs of the server */; 3986 if ((conn == NULL) || conn->must_close) {; 3987 /* Close, if civetweb framework needs to close */; 3988 return 0;; 3989 }; 3990 ; 3991 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3992 /* Close, if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http_version, ""1.1""))) {; 4009 /* HTTP 1.1 default is keep alive */; 4010 return 1;; 4011 }; 4012 ; 4013 /* HTTP 1.0 (and earlier) default is to close the connection */; 4014 return 0;; 4015}; 4016 ; 4017 ; 4018static int; 4019should_decode_url(const struct mg_connection *conn); 4020{; 4021 if (!conn || !conn->dom_ctx) {; 4022 return 0;; 4023 }; 4024 ; 4025 return (mg_strcasecmp(conn->dom_ctx->config[DECODE_URL], ""yes"") == 0);; 4026}; 4027 ; 4028 ; 4029static int; 4030should_decode_query_string(const struct mg_connection *conn); 4031{; 4032 if (!conn ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:118804,Availability,alive,alive,118804,"st parsing failed. */; 3979static int; 3980should_keep_alive(const struct mg_connection *conn); 3981{; 3982 const char *http_version;; 3983 const char *header;; 3984 ; 3985 /* First satisfy needs of the server */; 3986 if ((conn == NULL) || conn->must_close) {; 3987 /* Close, if civetweb framework needs to close */; 3988 return 0;; 3989 }; 3990 ; 3991 if (mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"") != 0) {; 3992 /* Close, if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http_version, ""1.1""))) {; 4009 /* HTTP 1.1 default is keep alive */; 4010 return 1;; 4011 }; 4012 ; 4013 /* HTTP 1.0 (and earlier) default is to close the connection */; 4014 return 0;; 4015}; 4016 ; 4017 ; 4018static int; 4019should_decode_url(const struct mg_connection *conn); 4020{; 4021 if (!conn || !conn->dom_ctx) {; 4022 return 0;; 4023 }; 4024 ; 4025 return (mg_strcasecmp(conn->dom_ctx->config[DECODE_URL], ""yes"") == 0);; 4026}; 4027 ; 4028 ; 4029static int; 4030should_decode_query_string(const struct mg_connection *conn); 4031{; 4032 if (!conn || !conn->dom_ctx) {; 4033 return 0;; 4034 }; 4035 ; 4036 return (mg_strcasecmp(conn->dom_ctx->config[DECODE_QUERY_STRING], ""yes""); 4037 == 0);; 4038}; 4039 ; 4040 ; 4041static const char *; 4042suggest_connection_header(const struct mg_connection *conn); 4043{; 4044 return should_keep_alive(conn) ? ""keep-alive"" : ""close"";; 4045}; 4046 ; 4047 ; 4048#include ""response.inl""; 4049 ; 4050 ; 4051static void; 4052send_no_cache_header(struct mg_connection *conn); 4053{; 4054 /* Send all current and obsolete cache opt-out d",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:119609,Availability,alive,alive,119609,", if keep alive is not enabled */; 3993 return 0;; 3994 }; 3995 ; 3996 /* Check explicit wish of the client */; 3997 header = mg_get_header(conn, ""Connection"");; 3998 if (header) {; 3999 /* If there is a connection header from the client, obey */; 4000 if (header_has_option(header, ""keep-alive"")) {; 4001 return 1;; 4002 }; 4003 return 0;; 4004 }; 4005 ; 4006 /* Use default of the standard */; 4007 http_version = get_http_version(conn);; 4008 if (http_version && (0 == strcmp(http_version, ""1.1""))) {; 4009 /* HTTP 1.1 default is keep alive */; 4010 return 1;; 4011 }; 4012 ; 4013 /* HTTP 1.0 (and earlier) default is to close the connection */; 4014 return 0;; 4015}; 4016 ; 4017 ; 4018static int; 4019should_decode_url(const struct mg_connection *conn); 4020{; 4021 if (!conn || !conn->dom_ctx) {; 4022 return 0;; 4023 }; 4024 ; 4025 return (mg_strcasecmp(conn->dom_ctx->config[DECODE_URL], ""yes"") == 0);; 4026}; 4027 ; 4028 ; 4029static int; 4030should_decode_query_string(const struct mg_connection *conn); 4031{; 4032 if (!conn || !conn->dom_ctx) {; 4033 return 0;; 4034 }; 4035 ; 4036 return (mg_strcasecmp(conn->dom_ctx->config[DECODE_QUERY_STRING], ""yes""); 4037 == 0);; 4038}; 4039 ; 4040 ; 4041static const char *; 4042suggest_connection_header(const struct mg_connection *conn); 4043{; 4044 return should_keep_alive(conn) ? ""keep-alive"" : ""close"";; 4045}; 4046 ; 4047 ; 4048#include ""response.inl""; 4049 ; 4050 ; 4051static void; 4052send_no_cache_header(struct mg_connection *conn); 4053{; 4054 /* Send all current and obsolete cache opt-out directives. */; 4055 mg_response_header_add(conn,; 4056 ""Cache-Control"",; 4057 ""no-cache, no-store, ""; 4058 ""must-revalidate, private, max-age=0"",; 4059 -1);; 4060 mg_response_header_add(conn, ""Expires"", ""0"", -1);; 4061 ; 4062 if (conn->protocol_type == PROTOCOL_TYPE_HTTP1) {; 4063 /* Obsolete, but still send it for HTTP/1.0 */; 4064 mg_response_header_add(conn, ""Pragma"", ""no-cache"", -1);; 4065 }; 4066}; 4067 ; 4068 ; 4069static void; 4070s",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:128849,Availability,error,error,128849,".4 */; 4283 case 504:; 4284 return ""Gateway Time-out""; /* RFC2616 Section 10.5.5 */; 4285 case 505:; 4286 return ""HTTP Version not supported""; /* RFC2616 Section 10.5.6 */; 4287 case 506:; 4288 return ""Variant Also Negotiates""; /* RFC 2295, Section 8.1 */; 4289 case 507:; 4290 return ""Insufficient Storage""; /* RFC2518 Section 10.6, RFC4918; 4291 * Section 11.5 */; 4292 case 508:; 4293 return ""Loop Detected""; /* RFC5842 Section 7.1 */; 4294 ; 4295 case 510:; 4296 return ""Not Extended""; /* RFC 2774, Section 7 */; 4297 case 511:; 4298 return ""Network Authentication Required""; /* RFC 6585, Section 6 */; 4299 ; 4300 /* Other status codes, not shown in the IANA HTTP status code; 4301 * assignment.; 4302 * E.g., ""de facto"" standards due to common use, ... */; 4303 case 418:; 4304 return ""I am a teapot""; /* RFC2324 Section 2.3.2 */; 4305 case 419:; 4306 return ""Authentication Timeout""; /* common use */; 4307 case 420:; 4308 return ""Enhance Your Calm""; /* common use */; 4309 case 440:; 4310 return ""Login Timeout""; /* common use */; 4311 case 509:; 4312 return ""Bandwidth Limit Exceeded""; /* common use */; 4313 ; 4314 default:; 4315 /* This error code is unknown. This should not happen. */; 4316 if (conn) {; 4317 mg_cry_internal(conn,; 4318 ""Unknown HTTP response code: %u"",; 4319 response_code);; 4320 }; 4321 ; 4322 /* Return at least a category according to RFC 2616 Section 10. */; 4323 if (response_code >= 100 && response_code < 200) {; 4324 /* Unknown informational status code */; 4325 return ""Information"";; 4326 }; 4327 if (response_code >= 200 && response_code < 300) {; 4328 /* Unknown success code */; 4329 return ""Success"";; 4330 }; 4331 if (response_code >= 300 && response_code < 400) {; 4332 /* Unknown redirection code */; 4333 return ""Redirection"";; 4334 }; 4335 if (response_code >= 400 && response_code < 500) {; 4336 /* Unknown request error code */; 4337 return ""Client Error"";; 4338 }; 4339 if (response_code >= 500 && response_code < 600) {; 4340 /* Unknown server er",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:129568,Availability,error,error,129568,"ode: %u"",; 4319 response_code);; 4320 }; 4321 ; 4322 /* Return at least a category according to RFC 2616 Section 10. */; 4323 if (response_code >= 100 && response_code < 200) {; 4324 /* Unknown informational status code */; 4325 return ""Information"";; 4326 }; 4327 if (response_code >= 200 && response_code < 300) {; 4328 /* Unknown success code */; 4329 return ""Success"";; 4330 }; 4331 if (response_code >= 300 && response_code < 400) {; 4332 /* Unknown redirection code */; 4333 return ""Redirection"";; 4334 }; 4335 if (response_code >= 400 && response_code < 500) {; 4336 /* Unknown request error code */; 4337 return ""Client Error"";; 4338 }; 4339 if (response_code >= 500 && response_code < 600) {; 4340 /* Unknown server error code */; 4341 return ""Server Error"";; 4342 }; 4343 ; 4344 /* Response code not even within reasonable range */; 4345 return """";; 4346 }; 4347}; 4348 ; 4349 ; 4350static int; 4351mg_send_http_error_impl(struct mg_connection *conn,; 4352 int status,; 4353 const char *fmt,; 4354 va_list args); 4355{; 4356 char errmsg_buf[MG_BUF_LEN];; 4357 va_list ap;; 4358 int has_body;; 4359 ; 4360#if !defined(NO_FILESYSTEMS); 4361 char path_buf[UTF8_PATH_MAX];; 4362 int len, i, page_handler_found, scope, truncated;; 4363 const char *error_handler = NULL;; 4364 struct mg_file error_page_file = STRUCT_FILE_INITIALIZER;; 4365 const char *error_page_file_ext, *tstr;; 4366#endif /* NO_FILESYSTEMS */; 4367 int handled_by_callback = 0;; 4368 ; 4369 if ((conn == NULL) || (fmt == NULL)) {; 4370 return -2;; 4371 }; 4372 ; 4373 /* Set status (for log) */; 4374 conn->status_code = status;; 4375 ; 4376 /* Errors 1xx, 204 and 304 MUST NOT send a body */; 4377 has_body = ((status > 199) && (status != 204) && (status != 304));; 4378 ; 4379 /* Prepare message in buf, if required */; 4380 if (has_body; 4381 || (!conn->in_error_handler; 4382 && (conn->phys_ctx->callbacks.http_error != NULL))) {; 4383 /* Store error message in errmsg_buf */; 4384 va_copy(ap, args);; 4385 mg_vsnprintf(co",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:129700,Availability,error,error,129700,"ode: %u"",; 4319 response_code);; 4320 }; 4321 ; 4322 /* Return at least a category according to RFC 2616 Section 10. */; 4323 if (response_code >= 100 && response_code < 200) {; 4324 /* Unknown informational status code */; 4325 return ""Information"";; 4326 }; 4327 if (response_code >= 200 && response_code < 300) {; 4328 /* Unknown success code */; 4329 return ""Success"";; 4330 }; 4331 if (response_code >= 300 && response_code < 400) {; 4332 /* Unknown redirection code */; 4333 return ""Redirection"";; 4334 }; 4335 if (response_code >= 400 && response_code < 500) {; 4336 /* Unknown request error code */; 4337 return ""Client Error"";; 4338 }; 4339 if (response_code >= 500 && response_code < 600) {; 4340 /* Unknown server error code */; 4341 return ""Server Error"";; 4342 }; 4343 ; 4344 /* Response code not even within reasonable range */; 4345 return """";; 4346 }; 4347}; 4348 ; 4349 ; 4350static int; 4351mg_send_http_error_impl(struct mg_connection *conn,; 4352 int status,; 4353 const char *fmt,; 4354 va_list args); 4355{; 4356 char errmsg_buf[MG_BUF_LEN];; 4357 va_list ap;; 4358 int has_body;; 4359 ; 4360#if !defined(NO_FILESYSTEMS); 4361 char path_buf[UTF8_PATH_MAX];; 4362 int len, i, page_handler_found, scope, truncated;; 4363 const char *error_handler = NULL;; 4364 struct mg_file error_page_file = STRUCT_FILE_INITIALIZER;; 4365 const char *error_page_file_ext, *tstr;; 4366#endif /* NO_FILESYSTEMS */; 4367 int handled_by_callback = 0;; 4368 ; 4369 if ((conn == NULL) || (fmt == NULL)) {; 4370 return -2;; 4371 }; 4372 ; 4373 /* Set status (for log) */; 4374 conn->status_code = status;; 4375 ; 4376 /* Errors 1xx, 204 and 304 MUST NOT send a body */; 4377 has_body = ((status > 199) && (status != 204) && (status != 304));; 4378 ; 4379 /* Prepare message in buf, if required */; 4380 if (has_body; 4381 || (!conn->in_error_handler; 4382 && (conn->phys_ctx->callbacks.http_error != NULL))) {; 4383 /* Store error message in errmsg_buf */; 4384 va_copy(ap, args);; 4385 mg_vsnprintf(co",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:130899,Availability,error,error,130899,"357 va_list ap;; 4358 int has_body;; 4359 ; 4360#if !defined(NO_FILESYSTEMS); 4361 char path_buf[UTF8_PATH_MAX];; 4362 int len, i, page_handler_found, scope, truncated;; 4363 const char *error_handler = NULL;; 4364 struct mg_file error_page_file = STRUCT_FILE_INITIALIZER;; 4365 const char *error_page_file_ext, *tstr;; 4366#endif /* NO_FILESYSTEMS */; 4367 int handled_by_callback = 0;; 4368 ; 4369 if ((conn == NULL) || (fmt == NULL)) {; 4370 return -2;; 4371 }; 4372 ; 4373 /* Set status (for log) */; 4374 conn->status_code = status;; 4375 ; 4376 /* Errors 1xx, 204 and 304 MUST NOT send a body */; 4377 has_body = ((status > 199) && (status != 204) && (status != 304));; 4378 ; 4379 /* Prepare message in buf, if required */; 4380 if (has_body; 4381 || (!conn->in_error_handler; 4382 && (conn->phys_ctx->callbacks.http_error != NULL))) {; 4383 /* Store error message in errmsg_buf */; 4384 va_copy(ap, args);; 4385 mg_vsnprintf(conn, NULL, errmsg_buf, sizeof(errmsg_buf), fmt, ap);; 4386 va_end(ap);; 4387 /* In a debug build, print all html errors */; 4388 DEBUG_TRACE(""Error %i - [%s]"", status, errmsg_buf);; 4389 }; 4390 ; 4391 /* If there is a http_error callback, call it.; 4392 * But don't do it recursively, if callback calls mg_send_http_error again.; 4393 */; 4394 if (!conn->in_error_handler; 4395 && (conn->phys_ctx->callbacks.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:131088,Availability,error,errors,131088,"357 va_list ap;; 4358 int has_body;; 4359 ; 4360#if !defined(NO_FILESYSTEMS); 4361 char path_buf[UTF8_PATH_MAX];; 4362 int len, i, page_handler_found, scope, truncated;; 4363 const char *error_handler = NULL;; 4364 struct mg_file error_page_file = STRUCT_FILE_INITIALIZER;; 4365 const char *error_page_file_ext, *tstr;; 4366#endif /* NO_FILESYSTEMS */; 4367 int handled_by_callback = 0;; 4368 ; 4369 if ((conn == NULL) || (fmt == NULL)) {; 4370 return -2;; 4371 }; 4372 ; 4373 /* Set status (for log) */; 4374 conn->status_code = status;; 4375 ; 4376 /* Errors 1xx, 204 and 304 MUST NOT send a body */; 4377 has_body = ((status > 199) && (status != 204) && (status != 304));; 4378 ; 4379 /* Prepare message in buf, if required */; 4380 if (has_body; 4381 || (!conn->in_error_handler; 4382 && (conn->phys_ctx->callbacks.http_error != NULL))) {; 4383 /* Store error message in errmsg_buf */; 4384 va_copy(ap, args);; 4385 mg_vsnprintf(conn, NULL, errmsg_buf, sizeof(errmsg_buf), fmt, ap);; 4386 va_end(ap);; 4387 /* In a debug build, print all html errors */; 4388 DEBUG_TRACE(""Error %i - [%s]"", status, errmsg_buf);; 4389 }; 4390 ; 4391 /* If there is a http_error callback, call it.; 4392 * But don't do it recursively, if callback calls mg_send_http_error again.; 4393 */; 4394 if (!conn->in_error_handler; 4395 && (conn->phys_ctx->callbacks.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:131830,Availability,error,error,131830," args);; 4385 mg_vsnprintf(conn, NULL, errmsg_buf, sizeof(errmsg_buf), fmt, ap);; 4386 va_end(ap);; 4387 /* In a debug build, print all html errors */; 4388 DEBUG_TRACE(""Error %i - [%s]"", status, errmsg_buf);; 4389 }; 4390 ; 4391 /* If there is a http_error callback, call it.; 4392 * But don't do it recursively, if callback calls mg_send_http_error again.; 4393 */; 4394 if (!conn->in_error_handler; 4395 && (conn->phys_ctx->callbacks.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 444",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:131955,Availability,error,error,131955," args);; 4385 mg_vsnprintf(conn, NULL, errmsg_buf, sizeof(errmsg_buf), fmt, ap);; 4386 va_end(ap);; 4387 /* In a debug build, print all html errors */; 4388 DEBUG_TRACE(""Error %i - [%s]"", status, errmsg_buf);; 4389 }; 4390 ; 4391 /* If there is a http_error callback, call it.; 4392 * But don't do it recursively, if callback calls mg_send_http_error again.; 4393 */; 4394 if (!conn->in_error_handler; 4395 && (conn->phys_ctx->callbacks.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 444",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:132307,Availability,error,error,132307," args);; 4385 mg_vsnprintf(conn, NULL, errmsg_buf, sizeof(errmsg_buf), fmt, ap);; 4386 va_end(ap);; 4387 /* In a debug build, print all html errors */; 4388 DEBUG_TRACE(""Error %i - [%s]"", status, errmsg_buf);; 4389 }; 4390 ; 4391 /* If there is a http_error callback, call it.; 4392 * But don't do it recursively, if callback calls mg_send_http_error again.; 4393 */; 4394 if (!conn->in_error_handler; 4395 && (conn->phys_ctx->callbacks.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 444",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:132323,Availability,error,error,132323,"backs.http_error != NULL)) {; 4396 /* Mark in_error_handler to avoid recursion and call user callback. */; 4397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strl",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:132519,Availability,error,error,132519,"397 conn->in_error_handler = 1;; 4398 handled_by_callback =; 4399 (conn->phys_ctx->callbacks.http_error(conn, status, errmsg_buf); 4400 == 0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 };",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:132542,Availability,error,error,132542,"0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:132587,Availability,error,errors,132587,"0);; 4401 conn->in_error_handler = 0;; 4402 }; 4403 ; 4404 if (!handled_by_callback) {; 4405 /* Check for recursion */; 4406 if (conn->in_error_handler) {; 4407 DEBUG_TRACE(; 4408 ""Recursion when handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:132807,Availability,error,errors,132807,"hen handling error %u - fall back to default"",; 4409 status);; 4410#if !defined(NO_FILESYSTEMS); 4411 } else {; 4412 /* Send user defined error pages, if defined */; 4413 error_handler = conn->dom_ctx->config[ERROR_PAGES];; 4414 error_page_file_ext = conn->dom_ctx->config[INDEX_FILES];; 4415 page_handler_found = 0;; 4416 ; 4417 if (error_handler != NULL) {; 4418 for (scope = 1; (scope <= 3) && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while (tstr) {; 4469 for (i = 1;; 4470 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4471 i++) {; 4472 /* buffer overrun is not possible here, since; 4473 * (i < 32) && (len < sizeof(path_buf) -",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:133182,Availability,redundant,redundant,133182," && !page_handler_found; scope++) {; 4419 switch (scope) {; 4420 case 1: /* Handler for specific error, e.g. 404 error */; 4421 mg_snprintf(conn,; 4422 &truncated,; 4423 path_buf,; 4424 sizeof(path_buf) - 32,; 4425 ""%serror%03u."",; 4426 error_handler,; 4427 status);; 4428 break;; 4429 case 2: /* Handler for error group, e.g., 5xx error; 4430 * handler; 4431 * for all server errors (500-599) */; 4432 mg_snprintf(conn,; 4433 &truncated,; 4434 path_buf,; 4435 sizeof(path_buf) - 32,; 4436 ""%serror%01uxx."",; 4437 error_handler,; 4438 status / 100);; 4439 break;; 4440 default: /* Handler for all errors */; 4441 mg_snprintf(conn,; 4442 &truncated,; 4443 path_buf,; 4444 sizeof(path_buf) - 32,; 4445 ""%serror."",; 4446 error_handler);; 4447 break;; 4448 }; 4449 ; 4450 /* String truncation in buf may only occur if; 4451 * error_handler is too long. This string is; 4452 * from the config, not from a client. */; 4453 (void)truncated;; 4454 ; 4455 /* The following code is redundant, but it should avoid; 4456 * false positives in static source code analyzers and; 4457 * vulnerability scanners.; 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while (tstr) {; 4469 for (i = 1;; 4470 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4471 i++) {; 4472 /* buffer overrun is not possible here, since; 4473 * (i < 32) && (len < sizeof(path_buf) - 32); 4474 * ==> (i + len) < sizeof(path_buf) */; 4475 path_buf[len + i - 1] = tstr[i];; 4476 }; 4477 /* buffer overrun is not possible here, since; 4478 * (i <= 32) && (len < sizeof(path_buf) - 32); 4479 * ==> (i + len) <= sizeof(path_buf) */; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:134186,Availability,error,error,134186," 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while (tstr) {; 4469 for (i = 1;; 4470 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4471 i++) {; 4472 /* buffer overrun is not possible here, since; 4473 * (i < 32) && (len < sizeof(path_buf) - 32); 4474 * ==> (i + len) < sizeof(path_buf) */; 4475 path_buf[len + i - 1] = tstr[i];; 4476 }; 4477 /* buffer overrun is not possible here, since; 4478 * (i <= 32) && (len < sizeof(path_buf) - 32); 4479 * ==> (i + len) <= sizeof(path_buf) */; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 cons",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:134303,Availability,error,error,134303," 4458 */; 4459 path_buf[sizeof(path_buf) - 32] = 0;; 4460 len = (int)strlen(path_buf);; 4461 if (len > (int)sizeof(path_buf) - 32) {; 4462 len = (int)sizeof(path_buf) - 32;; 4463 }; 4464 ; 4465 /* Start with the file extenstion from the configuration. */; 4466 tstr = strchr(error_page_file_ext, '.');; 4467 ; 4468 while (tstr) {; 4469 for (i = 1;; 4470 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4471 i++) {; 4472 /* buffer overrun is not possible here, since; 4473 * (i < 32) && (len < sizeof(path_buf) - 32); 4474 * ==> (i + len) < sizeof(path_buf) */; 4475 path_buf[len + i - 1] = tstr[i];; 4476 }; 4477 /* buffer overrun is not possible here, since; 4478 * (i <= 32) && (len < sizeof(path_buf) - 32); 4479 * ==> (i + len) <= sizeof(path_buf) */; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 cons",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:134788,Availability,error,error,134788," = 1;; 4470 (i < 32) && (tstr[i] != 0) && (tstr[i] != ',');; 4471 i++) {; 4472 /* buffer overrun is not possible here, since; 4473 * (i < 32) && (len < sizeof(path_buf) - 32); 4474 * ==> (i + len) < sizeof(path_buf) */; 4475 path_buf[len + i - 1] = tstr[i];; 4476 }; 4477 /* buffer overrun is not possible here, since; 4478 * (i <= 32) && (len < sizeof(path_buf) - 32); 4479 * ==> (i + len) <= sizeof(path_buf) */; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 const char *status_text = mg_get_response_code_text(conn, status);; 4524 mg_printf(conn, ""Error %d: %s\n"", status, status_text);; 4525 mg_write(conn, errmsg_buf, strlen(errmsg_buf));; 4526 ; 4527 } else {; 4528 /* No body allowed. Close the connection. */; 4529 DEBUG_TRACE(""Error %i"", status);; 4530 }; 4531 }; 4532 return 0;; 4533}; 4534 ; 453",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:134813,Availability,error,error,134813,"buf) - 32); 4474 * ==> (i + len) < sizeof(path_buf) */; 4475 path_buf[len + i - 1] = tstr[i];; 4476 }; 4477 /* buffer overrun is not possible here, since; 4478 * (i <= 32) && (len < sizeof(path_buf) - 32); 4479 * ==> (i + len) <= sizeof(path_buf) */; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 const char *status_text = mg_get_response_code_text(conn, status);; 4524 mg_printf(conn, ""Error %d: %s\n"", status, status_text);; 4525 mg_write(conn, errmsg_buf, strlen(errmsg_buf));; 4526 ; 4527 } else {; 4528 /* No body allowed. Close the connection. */; 4529 DEBUG_TRACE(""Error %i"", status);; 4530 }; 4531 }; 4532 return 0;; 4533}; 4534 ; 4535 ; 4536int; 4537mg_send_http_error(struct mg_connection *conn, int status, const char *fmt, ...); 4538{; 4539 va_list ap;; 4540 int ret;; 4541 ; 4542 va_start(ap, f",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:135255,Availability,error,errors,135255,"*/; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 const char *status_text = mg_get_response_code_text(conn, status);; 4524 mg_printf(conn, ""Error %d: %s\n"", status, status_text);; 4525 mg_write(conn, errmsg_buf, strlen(errmsg_buf));; 4526 ; 4527 } else {; 4528 /* No body allowed. Close the connection. */; 4529 DEBUG_TRACE(""Error %i"", status);; 4530 }; 4531 }; 4532 return 0;; 4533}; 4534 ; 4535 ; 4536int; 4537mg_send_http_error(struct mg_connection *conn, int status, const char *fmt, ...); 4538{; 4539 va_list ap;; 4540 int ret;; 4541 ; 4542 va_start(ap, fmt);; 4543 ret = mg_send_http_error_impl(conn, status, fmt, ap);; 4544 va_end(ap);; 4545 ; 4546 return ret;; 4547}; 4548 ; 4549 ; 4550int; 4551mg_send_http_ok(struct mg_connection *conn,; 4552 const char *mime_type,; 4553 long long content_length",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:135278,Availability,error,error,135278,"*/; 4480 path_buf[len + i - 1] = 0;; 4481 ; 4482 if (mg_stat(conn, path_buf, &error_page_file.stat)) {; 4483 DEBUG_TRACE(""Check error page %s - found"",; 4484 path_buf);; 4485 page_handler_found = 1;; 4486 break;; 4487 }; 4488 DEBUG_TRACE(""Check error page %s - not found"",; 4489 path_buf);; 4490 ; 4491 /* Continue with the next file extenstion from the; 4492 * configuration (if there is a next one). */; 4493 tstr = strchr(tstr + i, '.');; 4494 }; 4495 }; 4496 }; 4497 ; 4498 if (page_handler_found) {; 4499 conn->in_error_handler = 1;; 4500 handle_file_based_request(conn, path_buf, &error_page_file);; 4501 conn->in_error_handler = 0;; 4502 return 0;; 4503 }; 4504#endif /* NO_FILESYSTEMS */; 4505 }; 4506 ; 4507 /* No custom error page. Send default error page. */; 4508 conn->must_close = 1;; 4509 mg_response_header_start(conn, status);; 4510 send_no_cache_header(conn);; 4511 send_additional_header(conn);; 4512 if (has_body) {; 4513 mg_response_header_add(conn,; 4514 ""Content-Type"",; 4515 ""text/plain; charset=utf-8"",; 4516 -1);; 4517 }; 4518 mg_response_header_send(conn);; 4519 ; 4520 /* HTTP responses 1xx, 204 and 304 MUST NOT send a body */; 4521 if (has_body) {; 4522 /* For other errors, send a generic error message. */; 4523 const char *status_text = mg_get_response_code_text(conn, status);; 4524 mg_printf(conn, ""Error %d: %s\n"", status, status_text);; 4525 mg_write(conn, errmsg_buf, strlen(errmsg_buf));; 4526 ; 4527 } else {; 4528 /* No body allowed. Close the connection. */; 4529 DEBUG_TRACE(""Error %i"", status);; 4530 }; 4531 }; 4532 return 0;; 4533}; 4534 ; 4535 ; 4536int; 4537mg_send_http_error(struct mg_connection *conn, int status, const char *fmt, ...); 4538{; 4539 va_list ap;; 4540 int ret;; 4541 ; 4542 va_start(ap, fmt);; 4543 ret = mg_send_http_error_impl(conn, status, fmt, ap);; 4544 va_end(ap);; 4545 ; 4546 return ret;; 4547}; 4548 ; 4549 ; 4550int; 4551mg_send_http_ok(struct mg_connection *conn,; 4552 const char *mime_type,; 4553 long long content_length",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:138063,Availability,error,error,138063,"ue */; 4582 mg_response_header_add(conn, ""Content-Length"", len, -1);; 4583 }; 4584 }; 4585 mg_response_header_send(conn);; 4586 ; 4587 return 0;; 4588}; 4589 ; 4590 ; 4591int; 4592mg_send_http_redirect(struct mg_connection *conn,; 4593 const char *target_url,; 4594 int redirect_code); 4595{; 4596 /* Send a 30x redirect response.; 4597 *; 4598 * Redirect types (status codes):; 4599 *; 4600 * Status | Perm/Temp | Method | Version; 4601 * 301 | permanent | POST->GET undefined | HTTP/1.0; 4602 * 302 | temporary | POST->GET undefined | HTTP/1.0; 4603 * 303 | temporary | always use GET | HTTP/1.1; 4604 * 307 | temporary | always keep method | HTTP/1.1; 4605 * 308 | permanent | always keep method | HTTP/1.1; 4606 */; 4607 const char *redirect_text;; 4608 int ret;; 4609 size_t content_len = 0;; 4610#if defined(MG_SEND_REDIRECT_BODY); 4611 char reply[MG_BUF_LEN];; 4612#endif; 4613 ; 4614 /* In case redirect_code=0, use 307. */; 4615 if (redirect_code == 0) {; 4616 redirect_code = 307;; 4617 }; 4618 ; 4619 /* In case redirect_code is none of the above, return error. */; 4620 if ((redirect_code != 301) && (redirect_code != 302); 4621 && (redirect_code != 303) && (redirect_code != 307); 4622 && (redirect_code != 308)) {; 4623 /* Parameter error */; 4624 return -2;; 4625 }; 4626 ; 4627 /* Get proper text for response code */; 4628 redirect_text = mg_get_response_code_text(conn, redirect_code);; 4629 ; 4630 /* If target_url is not defined, redirect to ""/"". */; 4631 if ((target_url == NULL) || (*target_url == 0)) {; 4632 target_url = ""/"";; 4633 }; 4634 ; 4635#if defined(MG_SEND_REDIRECT_BODY); 4636 /* TODO: condition name? */; 4637 ; 4638 /* Prepare a response body with a hyperlink.; 4639 *; 4640 * According to RFC2616 (and RFC1945 before):; 4641 * Unless the request method was HEAD, the entity of the; 4642 * response SHOULD contain a short hypertext note with a hyperlink to; 4643 * the new URI(s).; 4644 *; 4645 * However, this response body is not useful in M2M communication.; 46",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:138244,Availability,error,error,138244," redirect_code); 4595{; 4596 /* Send a 30x redirect response.; 4597 *; 4598 * Redirect types (status codes):; 4599 *; 4600 * Status | Perm/Temp | Method | Version; 4601 * 301 | permanent | POST->GET undefined | HTTP/1.0; 4602 * 302 | temporary | POST->GET undefined | HTTP/1.0; 4603 * 303 | temporary | always use GET | HTTP/1.1; 4604 * 307 | temporary | always keep method | HTTP/1.1; 4605 * 308 | permanent | always keep method | HTTP/1.1; 4606 */; 4607 const char *redirect_text;; 4608 int ret;; 4609 size_t content_len = 0;; 4610#if defined(MG_SEND_REDIRECT_BODY); 4611 char reply[MG_BUF_LEN];; 4612#endif; 4613 ; 4614 /* In case redirect_code=0, use 307. */; 4615 if (redirect_code == 0) {; 4616 redirect_code = 307;; 4617 }; 4618 ; 4619 /* In case redirect_code is none of the above, return error. */; 4620 if ((redirect_code != 301) && (redirect_code != 302); 4621 && (redirect_code != 303) && (redirect_code != 307); 4622 && (redirect_code != 308)) {; 4623 /* Parameter error */; 4624 return -2;; 4625 }; 4626 ; 4627 /* Get proper text for response code */; 4628 redirect_text = mg_get_response_code_text(conn, redirect_code);; 4629 ; 4630 /* If target_url is not defined, redirect to ""/"". */; 4631 if ((target_url == NULL) || (*target_url == 0)) {; 4632 target_url = ""/"";; 4633 }; 4634 ; 4635#if defined(MG_SEND_REDIRECT_BODY); 4636 /* TODO: condition name? */; 4637 ; 4638 /* Prepare a response body with a hyperlink.; 4639 *; 4640 * According to RFC2616 (and RFC1945 before):; 4641 * Unless the request method was HEAD, the entity of the; 4642 * response SHOULD contain a short hypertext note with a hyperlink to; 4643 * the new URI(s).; 4644 *; 4645 * However, this response body is not useful in M2M communication.; 4646 * Probably the original reason in the RFC was, clients not supporting; 4647 * a 30x HTTP redirect could still show the HTML page and let the user; 4648 * press the link. Since current browsers support 30x HTTP, the additional; 4649 * HTML body does not seem to make ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:150180,Availability,error,error,150180,"ist. This is not always a problem here. */; 5001 return;; 5002 }; 5003 }; 5004 if ((long_len >= ARRAY_SIZE(wbuf2)) || (fcompare(wbuf, wbuf2) != 0)) {; 5005 /* Short name is used. */; 5006 wbuf[0] = L'\0';; 5007 }; 5008}; 5009 ; 5010 ; 5011#if !defined(NO_FILESYSTEMS); 5012/* Get file information, return 1 if file exists, 0 if not */; 5013static int; 5014mg_stat(const struct mg_connection *conn,; 5015 const char *path,; 5016 struct mg_file_stat *filep); 5017{; 5018 wchar_t wbuf[UTF16_PATH_MAX];; 5019 WIN32_FILE_ATTRIBUTE_DATA info;; 5020 time_t creation_time;; 5021 size_t len;; 5022 ; 5023 if (!filep) {; 5024 return 0;; 5025 }; 5026 memset(filep, 0, sizeof(*filep));; 5027 ; 5028 if (mg_path_suspicious(conn, path)) {; 5029 return 0;; 5030 }; 5031 ; 5032 path_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));; 5033 /* Windows happily opens files with some garbage at the end of file name.; 5034 * For example, fopen(""a.cgi "", ""r"") on Windows successfully opens; 5035 * ""a.cgi"", despite one would expect an error back. */; 5036 len = strlen(path);; 5037 if ((len > 0) && (path[len - 1] != ' ') && (path[len - 1] != '.'); 5038 && (GetFileAttributesExW(wbuf, GetFileExInfoStandard, &info) != 0)) {; 5039 filep->size = MAKEUQUAD(info.nFileSizeLow, info.nFileSizeHigh);; 5040 filep->last_modified =; 5041 SYS2UNIX_TIME(info.ftLastWriteTime.dwLowDateTime,; 5042 info.ftLastWriteTime.dwHighDateTime);; 5043 ; 5044 /* On Windows, the file creation time can be higher than the; 5045 * modification time, e.g. when a file is copied.; 5046 * Since the Last-Modified timestamp is used for caching; 5047 * it should be based on the most recent timestamp. */; 5048 creation_time = SYS2UNIX_TIME(info.ftCreationTime.dwLowDateTime,; 5049 info.ftCreationTime.dwHighDateTime);; 5050 if (creation_time > filep->last_modified) {; 5051 filep->last_modified = creation_time;; 5052 }; 5053 ; 5054 filep->is_directory = info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY;; 5055 return 1;; 5056 }; 5057 ; 5058 return 0;; 5",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:155141,Availability,error,errors,155141,"LOUT; 5180#undef POLLERR; 5181#define POLLIN (1) /* Data ready - read will not block. */; 5182#define POLLPRI (2) /* Priority data ready. */; 5183#define POLLOUT (4) /* Send queue not full - write will not block. */; 5184#define POLLERR (8) /* Error event */; 5185 ; 5186FUNCTION_MAY_BE_UNUSED; 5187static int; 5188poll(struct mg_pollfd *pfd, unsigned int n, int milliseconds); 5189{; 5190 struct timeval tv;; 5191 fd_set rset;; 5192 fd_set wset;; 5193 fd_set eset;; 5194 unsigned int i;; 5195 int result;; 5196 SOCKET maxfd = 0;; 5197 ; 5198 memset(&tv, 0, sizeof(tv));; 5199 tv.tv_sec = milliseconds / 1000;; 5200 tv.tv_usec = (milliseconds % 1000) * 1000;; 5201 FD_ZERO(&rset);; 5202 FD_ZERO(&wset);; 5203 FD_ZERO(&eset);; 5204 ; 5205 for (i = 0; i < n; i++) {; 5206 if (pfd[i].events & (POLLIN | POLLOUT | POLLERR)) {; 5207 if (pfd[i].events & POLLIN) {; 5208 FD_SET(pfd[i].fd, &rset);; 5209 }; 5210 if (pfd[i].events & POLLOUT) {; 5211 FD_SET(pfd[i].fd, &wset);; 5212 }; 5213 /* Check for errors for any FD in the set */; 5214 FD_SET(pfd[i].fd, &eset);; 5215 }; 5216 pfd[i].revents = 0;; 5217 ; 5218 if (pfd[i].fd > maxfd) {; 5219 maxfd = pfd[i].fd;; 5220 }; 5221 }; 5222 ; 5223 if ((result = select((int)maxfd + 1, &rset, &wset, &eset, &tv)) > 0) {; 5224 for (i = 0; i < n; i++) {; 5225 if (FD_ISSET(pfd[i].fd, &rset)) {; 5226 pfd[i].revents |= POLLIN;; 5227 }; 5228 if (FD_ISSET(pfd[i].fd, &wset)) {; 5229 pfd[i].revents |= POLLOUT;; 5230 }; 5231 if (FD_ISSET(pfd[i].fd, &eset)) {; 5232 pfd[i].revents |= POLLERR;; 5233 }; 5234 }; 5235 }; 5236 ; 5237 /* We should subtract the time used in select from remaining; 5238 * ""milliseconds"", in particular if called from mg_poll with a; 5239 * timeout quantum.; 5240 * Unfortunately, the remaining time is not stored in ""tv"" in all; 5241 * implementations, so the result in ""tv"" must be considered undefined.; 5242 * See http://man7.org/linux/man-pages/man2/select.2.html */; 5243 ; 5244 return result;; 5245}; 5246#endif /* HAVE_POLL */; 5247 ; 5248",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:157997,Availability,error,error,157997,"read((void(__cdecl *)(void *))f, 0, p) == ((uintptr_t)(-1L))); 5281 ? -1; 5282 : 0);; 5283#endif /* defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1) */; 5284}; 5285 ; 5286 ; 5287/* Start a thread storing the thread context. */; 5288static int; 5289mg_start_thread_with_id(unsigned(__stdcall *f)(void *),; 5290 void *p,; 5291 pthread_t *threadidptr); 5292{; 5293 uintptr_t uip;; 5294 HANDLE threadhandle;; 5295 int result = -1;; 5296 ; 5297 uip = _beginthreadex(NULL, 0, f, p, 0, NULL);; 5298 threadhandle = (HANDLE)uip;; 5299 if ((uip != 0) && (threadidptr != NULL)) {; 5300 *threadidptr = threadhandle;; 5301 result = 0;; 5302 }; 5303 ; 5304 return result;; 5305}; 5306 ; 5307 ; 5308/* Wait for a thread to finish. */; 5309static int; 5310mg_join_thread(pthread_t threadid); 5311{; 5312 int result;; 5313 DWORD dwevent;; 5314 ; 5315 result = -1;; 5316 dwevent = WaitForSingleObject(threadid, (DWORD)INFINITE);; 5317 if (dwevent == WAIT_FAILED) {; 5318 DEBUG_TRACE(""WaitForSingleObject() failed, error %d"", ERRNO);; 5319 } else {; 5320 if (dwevent == WAIT_OBJECT_0) {; 5321 CloseHandle(threadid);; 5322 result = 0;; 5323 }; 5324 }; 5325 ; 5326 return result;; 5327}; 5328 ; 5329#if !defined(NO_SSL_DL) && !defined(NO_SSL); 5330/* If SSL is loaded dynamically, dlopen/dlclose is required. */; 5331/* Create substitutes for POSIX functions in Win32. */; 5332 ; 5333#if defined(GCC_DIAGNOSTIC); 5334/* Show no warning in case system functions are not used. */; 5335#pragma GCC diagnostic push; 5336#pragma GCC diagnostic ignored ""-Wunused-function""; 5337#endif; 5338 ; 5339 ; 5340FUNCTION_MAY_BE_UNUSED; 5341static HANDLE; 5342dlopen(const char *dll_name, int flags); 5343{; 5344 wchar_t wbuf[UTF16_PATH_MAX];; 5345 (void)flags;; 5346 path_to_unicode(NULL, dll_name, wbuf, ARRAY_SIZE(wbuf));; 5347 return LoadLibraryW(wbuf);; 5348}; 5349 ; 5350 ; 5351FUNCTION_MAY_BE_UNUSED; 5352static int; 5353dlclose(void *handle); 5354{; 5355 int result;; 5356 ; 5357 if (FreeLibrary((HMODULE)handle) != 0) {; 5358 re",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:163038,Availability,error,error,163038," for additional arguments; 5495 */; 5496 interp_arg =; 5497 conn->dom_ctx->config[CGI_INTERPRETER_ARGS + cgi_config_idx];; 5498 } else {; 5499 /* Otherwise, the interpreter must be stated in the first line of the; 5500 * CGI script file, after a #! (shebang) mark. */; 5501 buf[0] = buf[1] = '\0';; 5502 ; 5503 /* Get the full script path */; 5504 mg_snprintf(; 5505 conn, &truncated, cmdline, sizeof(cmdline), ""%s/%s"", dir, prog);; 5506 ; 5507 if (truncated) {; 5508 pi.hProcess = (pid_t)-1;; 5509 goto spawn_cleanup;; 5510 }; 5511 ; 5512 /* Open the script file, to read the first line */; 5513 if (mg_fopen(conn, cmdline, MG_FOPEN_MODE_READ, &file)) {; 5514 ; 5515 /* Read the first line of the script into the buffer */; 5516 mg_fgets(buf, sizeof(buf), &file);; 5517 (void)mg_fclose(&file.access); /* ignore error on read only file */; 5518 buf[sizeof(buf) - 1] = '\0';; 5519 }; 5520 ; 5521 if ((buf[0] == '#') && (buf[1] == '!')) {; 5522 trim_trailing_whitespaces(buf + 2);; 5523 } else {; 5524 buf[2] = '\0';; 5525 }; 5526 interp = buf + 2;; 5527 }; 5528 ; 5529 GetFullPathNameA(dir, sizeof(full_dir), full_dir, NULL);; 5530 ; 5531 if (interp[0] != '\0') {; 5532 /* This is an interpreted script file. We must call the interpreter. */; 5533 if ((interp_arg != 0) && (interp_arg[0] != 0)) {; 5534 mg_snprintf(conn,; 5535 &truncated,; 5536 cmdline,; 5537 sizeof(cmdline),; 5538 ""\""%s\"" %s \""%s\\%s\"""",; 5539 interp,; 5540 interp_arg,; 5541 full_dir,; 5542 prog);; 5543 } else {; 5544 mg_snprintf(conn,; 5545 &truncated,; 5546 cmdline,; 5547 sizeof(cmdline),; 5548 ""\""%s\"" \""%s\\%s\"""",; 5549 interp,; 5550 full_dir,; 5551 prog);; 5552 }; 5553 } else {; 5554 /* This is (probably) a compiled program. We call it directly. */; 5555 mg_snprintf(conn,; 5556 &truncated,; 5557 cmdline,; 5558 sizeof(cmdline),; 5559 ""\""%s\\%s\"""",; 5560 full_dir,; 5561 prog);; 5562 }; 5563 ; 5564 if (truncated) {; 5565 pi.hProcess = (pid_t)-1;; 5566 goto spawn_cleanup;; 5567 }; 5568 ; 5569 DEBUG_TRACE(""Running [%s]"", ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:170089,Availability,error,error,170089,"e the child-side immediately. */; 5760 set_close_on_exec(fdin[1], conn, NULL); /* stdin write */; 5761 set_close_on_exec(fdout[0], conn, NULL); /* stdout read */; 5762 set_close_on_exec(fderr[0], conn, NULL); /* stderr read */; 5763 } else {; 5764 /* Child */; 5765 if (chdir(dir) != 0) {; 5766 mg_cry_internal(; 5767 conn, ""%s: chdir(%s): %s"", __func__, dir, strerror(ERRNO));; 5768 } else if (dup2(fdin[0], 0) == -1) {; 5769 mg_cry_internal(conn,; 5770 ""%s: dup2(%d, 0): %s"",; 5771 __func__,; 5772 fdin[0],; 5773 strerror(ERRNO));; 5774 } else if (dup2(fdout[1], 1) == -1) {; 5775 mg_cry_internal(conn,; 5776 ""%s: dup2(%d, 1): %s"",; 5777 __func__,; 5778 fdout[1],; 5779 strerror(ERRNO));; 5780 } else if (dup2(fderr[1], 2) == -1) {; 5781 mg_cry_internal(conn,; 5782 ""%s: dup2(%d, 2): %s"",; 5783 __func__,; 5784 fderr[1],; 5785 strerror(ERRNO));; 5786 } else {; 5787 struct sigaction sa;; 5788 ; 5789 /* Keep stderr and stdout in two different pipes.; 5790 * Stdout will be sent back to the client,; 5791 * stderr should go into a server error log. */; 5792 (void)close(fdin[0]);; 5793 (void)close(fdout[1]);; 5794 (void)close(fderr[1]);; 5795 ; 5796 /* Close write end fdin and read end fdout and fderr */; 5797 (void)close(fdin[1]);; 5798 (void)close(fdout[0]);; 5799 (void)close(fderr[0]);; 5800 ; 5801 /* After exec, all signal handlers are restored to their default; 5802 * values, with one exception of SIGCHLD. According to; 5803 * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler; 5804 * will leave unchanged after exec if it was set to be ignored.; 5805 * Restore it to default action. */; 5806 memset(&sa, 0, sizeof(sa));; 5807 sa.sa_handler = SIG_DFL;; 5808 sigaction(SIGCHLD, &sa, NULL);; 5809 ; 5810 interp = conn->dom_ctx->config[CGI_INTERPRETER + cgi_config_idx];; 5811 if (interp == NULL) {; 5812 /* no interpreter configured, call the programm directly */; 5813 (void)execle(prog, prog, NULL, envp);; 5814 mg_cry_internal(conn,; 5815 ""%s: execle(%s): %s"",; 5816 __func__,;",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:173965,Availability,error,error,173965,"ndom number generators. */; 5893 lfsr = (lfsr >> 1); 5894 | ((((lfsr >> 0) ^ (lfsr >> 1) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1); 5895 << 63);; 5896 lcg = lcg * 6364136223846793005LL + 1442695040888963407LL;; 5897 }; 5898 ; 5899 /* Combining two pseudo-random number generators and a high resolution; 5900 * part; 5901 * of the current server time will make it hard (impossible?) to guess; 5902 * the; 5903 * next number. */; 5904 return (lfsr ^ lcg ^ now);; 5905}; 5906 ; 5907 ; 5908static int; 5909mg_poll(struct mg_pollfd *pfd,; 5910 unsigned int n,; 5911 int milliseconds,; 5912 const stop_flag_t *stop_flag); 5913{; 5914 /* Call poll, but only for a maximum time of a few seconds.; 5915 * This will allow to stop the server after some seconds, instead; 5916 * of having to wait for a long socket timeout. */; 5917 int ms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5918 ; 5919 int check_pollerr = 0;; 5920 if ((n == 1) && ((pfd[0].events & POLLERR) == 0)) {; 5921 /* If we wait for only one file descriptor, wait on error as well */; 5922 pfd[0].events |= POLLERR;; 5923 check_pollerr = 1;; 5924 }; 5925 ; 5926 do {; 5927 int result;; 5928 ; 5929 if (!STOP_FLAG_IS_ZERO(&*stop_flag)) {; 5930 /* Shut down signal */; 5931 return -2;; 5932 }; 5933 ; 5934 if ((milliseconds >= 0) && (milliseconds < ms_now)) {; 5935 ms_now = milliseconds;; 5936 }; 5937 ; 5938 result = poll(pfd, n, ms_now);; 5939 if (result != 0) {; 5940 /* Poll returned either success (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:174149,Availability,down,down,174149,"rs and a high resolution; 5900 * part; 5901 * of the current server time will make it hard (impossible?) to guess; 5902 * the; 5903 * next number. */; 5904 return (lfsr ^ lcg ^ now);; 5905}; 5906 ; 5907 ; 5908static int; 5909mg_poll(struct mg_pollfd *pfd,; 5910 unsigned int n,; 5911 int milliseconds,; 5912 const stop_flag_t *stop_flag); 5913{; 5914 /* Call poll, but only for a maximum time of a few seconds.; 5915 * This will allow to stop the server after some seconds, instead; 5916 * of having to wait for a long socket timeout. */; 5917 int ms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5918 ; 5919 int check_pollerr = 0;; 5920 if ((n == 1) && ((pfd[0].events & POLLERR) == 0)) {; 5921 /* If we wait for only one file descriptor, wait on error as well */; 5922 pfd[0].events |= POLLERR;; 5923 check_pollerr = 1;; 5924 }; 5925 ; 5926 do {; 5927 int result;; 5928 ; 5929 if (!STOP_FLAG_IS_ZERO(&*stop_flag)) {; 5930 /* Shut down signal */; 5931 return -2;; 5932 }; 5933 ; 5934 if ((milliseconds >= 0) && (milliseconds < ms_now)) {; 5935 ms_now = milliseconds;; 5936 }; 5937 ; 5938 result = poll(pfd, n, ms_now);; 5939 if (result != 0) {; 5940 /* Poll returned either success (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKE",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:174407,Availability,error,error,174407,"rs and a high resolution; 5900 * part; 5901 * of the current server time will make it hard (impossible?) to guess; 5902 * the; 5903 * next number. */; 5904 return (lfsr ^ lcg ^ now);; 5905}; 5906 ; 5907 ; 5908static int; 5909mg_poll(struct mg_pollfd *pfd,; 5910 unsigned int n,; 5911 int milliseconds,; 5912 const stop_flag_t *stop_flag); 5913{; 5914 /* Call poll, but only for a maximum time of a few seconds.; 5915 * This will allow to stop the server after some seconds, instead; 5916 * of having to wait for a long socket timeout. */; 5917 int ms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5918 ; 5919 int check_pollerr = 0;; 5920 if ((n == 1) && ((pfd[0].events & POLLERR) == 0)) {; 5921 /* If we wait for only one file descriptor, wait on error as well */; 5922 pfd[0].events |= POLLERR;; 5923 check_pollerr = 1;; 5924 }; 5925 ; 5926 do {; 5927 int result;; 5928 ; 5929 if (!STOP_FLAG_IS_ZERO(&*stop_flag)) {; 5930 /* Shut down signal */; 5931 return -2;; 5932 }; 5933 ; 5934 if ((milliseconds >= 0) && (milliseconds < ms_now)) {; 5935 ms_now = milliseconds;; 5936 }; 5937 ; 5938 result = poll(pfd, n, ms_now);; 5939 if (result != 0) {; 5940 /* Poll returned either success (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKE",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:174610,Availability,error,error,174610,"seconds.; 5915 * This will allow to stop the server after some seconds, instead; 5916 * of having to wait for a long socket timeout. */; 5917 int ms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5918 ; 5919 int check_pollerr = 0;; 5920 if ((n == 1) && ((pfd[0].events & POLLERR) == 0)) {; 5921 /* If we wait for only one file descriptor, wait on error as well */; 5922 pfd[0].events |= POLLERR;; 5923 check_pollerr = 1;; 5924 }; 5925 ; 5926 do {; 5927 int result;; 5928 ; 5929 if (!STOP_FLAG_IS_ZERO(&*stop_flag)) {; 5930 /* Shut down signal */; 5931 return -2;; 5932 }; 5933 ; 5934 if ((milliseconds >= 0) && (milliseconds < ms_now)) {; 5935 ms_now = milliseconds;; 5936 }; 5937 ; 5938 result = poll(pfd, n, ms_now);; 5939 if (result != 0) {; 5940 /* Poll returned either success (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKET sock,; 5974 SSL *ssl,; 5975 const char *buf,; 5976 int len,; 5977 double timeout); 5978{; 5979 uint64_t start = 0, now = 0, timeout_ns = 0;; 5980 int n, err;; 5981 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5982 ; 5983#if defined(_WIN32); 5984 typedef int len_t;; 5985#else; 5986 typedef size_t len_t;; 5987#endif; 5988 ; 5989 if (timeout > 0) {; 5990 now = mg_get_current_",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:175109,Availability,error,error,175109,"ccess (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKET sock,; 5974 SSL *ssl,; 5975 const char *buf,; 5976 int len,; 5977 double timeout); 5978{; 5979 uint64_t start = 0, now = 0, timeout_ns = 0;; 5980 int n, err;; 5981 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5982 ; 5983#if defined(_WIN32); 5984 typedef int len_t;; 5985#else; 5986 typedef size_t len_t;; 5987#endif; 5988 ; 5989 if (timeout > 0) {; 5990 now = mg_get_current_time_ns();; 5991 start = now;; 5992 timeout_ns = (uint64_t)(timeout * 1.0E9);; 5993 }; 5994 ; 5995 if (ctx == NULL) {; 5996 return -2;; 5997 }; 5998 ; 5999#if defined(NO_SSL) && !defined(USE_MBEDTLS); 6000 if (ssl) {; 6001 return -2;; 6002 }; 6003#endif; 6004 ; 6005 /* Try to read until it succeeds, fails, times out, or the server; 6006 * shuts down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 602",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:175956,Availability,down,down,175956," > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKET sock,; 5974 SSL *ssl,; 5975 const char *buf,; 5976 int len,; 5977 double timeout); 5978{; 5979 uint64_t start = 0, now = 0, timeout_ns = 0;; 5980 int n, err;; 5981 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5982 ; 5983#if defined(_WIN32); 5984 typedef int len_t;; 5985#else; 5986 typedef size_t len_t;; 5987#endif; 5988 ; 5989 if (timeout > 0) {; 5990 now = mg_get_current_time_ns();; 5991 start = now;; 5992 timeout_ns = (uint64_t)(timeout * 1.0E9);; 5993 }; 5994 ; 5995 if (ctx == NULL) {; 5996 return -2;; 5997 }; 5998 ; 5999#if defined(NO_SSL) && !defined(USE_MBEDTLS); 6000 if (ssl) {; 6001 return -2;; 6002 }; 6003#endif; 6004 ; 6005 /* Try to read until it succeeds, fails, times out, or the server; 6006 * shuts down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:176334,Availability,error,error,176334,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:176823,Availability,error,error,176823,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:177807,Availability,error,error,177807,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:177864,Availability,error,error,177864,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:177909,Availability,error,error,177909,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:177941,Availability,error,error,177941,"down. */; 6007 for (;;) {; 6008 ; 6009#if defined(USE_MBEDTLS); 6010 if (ssl != NULL) {; 6011 n = mbed_ssl_write(ssl, (const unsigned char *)buf, len);; 6012 if (n <= 0) {; 6013 if ((n == MBEDTLS_ERR_SSL_WANT_READ); 6014 || (n == MBEDTLS_ERR_SSL_WANT_WRITE); 6015 || n == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6016 n = 0;; 6017 } else {; 6018 fprintf(stderr, ""SSL write failed, error %d\n"", n);; 6019 return -2;; 6020 }; 6021 } else {; 6022 err = 0;; 6023 }; 6024 } else; 6025#elif !defined(NO_SSL); 6026 if (ssl != NULL) {; 6027 ERR_clear_error();; 6028 n = SSL_write(ssl, buf, len);; 6029 if (n <= 0) {; 6030 err = SSL_get_error(ssl, n);; 6031 if ((err == SSL_ERROR_SYSCALL) && (n == -1)) {; 6032 err = ERRNO;; 6033 } else if ((err == SSL_ERROR_WANT_READ); 6034 || (err == SSL_ERROR_WANT_WRITE)) {; 6035 n = 0;; 6036 } else {; 6037 DEBUG_TRACE(""SSL_write() failed, error %d"", err);; 6038 ERR_clear_error();; 6039 return -2;; 6040 }; 6041 ERR_clear_error();; 6042 } else {; 6043 err = 0;; 6044 }; 6045 } else; 6046#endif; 6047 ; 6048 if (fp != NULL) {; 6049 n = (int)fwrite(buf, 1, (size_t)len, fp);; 6050 if (ferror(fp)) {; 6051 n = -1;; 6052 err = ERRNO;; 6053 } else {; 6054 err = 0;; 6055 }; 6056 } else {; 6057 n = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);; 6058 err = (n < 0) ? ERRNO : 0;; 6059#if defined(_WIN32); 6060 if (err == WSAEWOULDBLOCK) {; 6061 err = 0;; 6062 n = 0;; 6063 }; 6064#else; 6065 if (ERROR_TRY_AGAIN(err)) {; 6066 err = 0;; 6067 n = 0;; 6068 }; 6069#endif; 6070 if (n < 0) {; 6071 /* shutdown of the socket at client side */; 6072 return -2;; 6073 }; 6074 }; 6075 ; 6076 if (!STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6077 return -2;; 6078 }; 6079 ; 6080 if ((n > 0) || ((n == 0) && (len == 0))) {; 6081 /* some data has been read, or no data was requested */; 6082 return n;; 6083 }; 6084 if (n < 0) {; 6085 /* socket error - check errno */; 6086 DEBUG_TRACE(""send() failed, error %d"", err);; 6087 ; 6088 /* TODO (mid): error handling depending on the error code.; 608",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:179899,Availability,error,error,179899," start) > timeout_ns) {; 6123 /* Timeout */; 6124 break;; 6125 }; 6126 }; 6127 }; 6128 ; 6129 (void)err; /* Avoid unused warning if NO_SSL is set and DEBUG_TRACE is not; 6130 used */; 6131 ; 6132 return -1;; 6133}; 6134 ; 6135 ; 6136static int; 6137push_all(struct mg_context *ctx,; 6138 FILE *fp,; 6139 SOCKET sock,; 6140 SSL *ssl,; 6141 const char *buf,; 6142 int len); 6143{; 6144 double timeout = -1.0;; 6145 int n, nwritten = 0;; 6146 ; 6147 if (ctx == NULL) {; 6148 return -1;; 6149 }; 6150 ; 6151 if (ctx->dd.config[REQUEST_TIMEOUT]) {; 6152 timeout = atoi(ctx->dd.config[REQUEST_TIMEOUT]) / 1000.0;; 6153 }; 6154 if (timeout <= 0.0) {; 6155 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6156 / 1000.0;; 6157 }; 6158 ; 6159 while ((len > 0) && STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6160 n = push_inner(ctx, fp, sock, ssl, buf + nwritten, len, timeout);; 6161 if (n < 0) {; 6162 if (nwritten == 0) {; 6163 nwritten = -1; /* Propagate the error */; 6164 }; 6165 break;; 6166 } else if (n == 0) {; 6167 break; /* No more data to write */; 6168 } else {; 6169 nwritten += n;; 6170 len -= n;; 6171 }; 6172 }; 6173 ; 6174 return nwritten;; 6175}; 6176 ; 6177 ; 6178/* Read from IO channel - opened file descriptor, socket, or SSL descriptor.; 6179 * Return value:; 6180 * >=0 .. number of bytes successfully read; 6181 * -1 .. timeout; 6182 * -2 .. error; 6183 */; 6184static int; 6185pull_inner(FILE *fp,; 6186 struct mg_connection *conn,; 6187 char *buf,; 6188 int len,; 6189 double timeout); 6190{; 6191 int nread, err = 0;; 6192 ; 6193#if defined(_WIN32); 6194 typedef int len_t;; 6195#else; 6196 typedef size_t len_t;; 6197#endif; 6198 ; 6199 /* We need an additional wait loop around this, because in some cases; 6200 * with TLSwe may get data from the socket but not from SSL_read.; 6201 * In this case we need to repeat at least once.; 6202 */; 6203 ; 6204 if (fp != NULL) {; 6205 /* Use read() instead of fread(), because if we're reading from the; 6206 * CGI pipe",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:180305,Availability,error,error,180305,") / 1000.0;; 6153 }; 6154 if (timeout <= 0.0) {; 6155 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6156 / 1000.0;; 6157 }; 6158 ; 6159 while ((len > 0) && STOP_FLAG_IS_ZERO(&ctx->stop_flag)) {; 6160 n = push_inner(ctx, fp, sock, ssl, buf + nwritten, len, timeout);; 6161 if (n < 0) {; 6162 if (nwritten == 0) {; 6163 nwritten = -1; /* Propagate the error */; 6164 }; 6165 break;; 6166 } else if (n == 0) {; 6167 break; /* No more data to write */; 6168 } else {; 6169 nwritten += n;; 6170 len -= n;; 6171 }; 6172 }; 6173 ; 6174 return nwritten;; 6175}; 6176 ; 6177 ; 6178/* Read from IO channel - opened file descriptor, socket, or SSL descriptor.; 6179 * Return value:; 6180 * >=0 .. number of bytes successfully read; 6181 * -1 .. timeout; 6182 * -2 .. error; 6183 */; 6184static int; 6185pull_inner(FILE *fp,; 6186 struct mg_connection *conn,; 6187 char *buf,; 6188 int len,; 6189 double timeout); 6190{; 6191 int nread, err = 0;; 6192 ; 6193#if defined(_WIN32); 6194 typedef int len_t;; 6195#else; 6196 typedef size_t len_t;; 6197#endif; 6198 ; 6199 /* We need an additional wait loop around this, because in some cases; 6200 * with TLSwe may get data from the socket but not from SSL_read.; 6201 * In this case we need to repeat at least once.; 6202 */; 6203 ; 6204 if (fp != NULL) {; 6205 /* Use read() instead of fread(), because if we're reading from the; 6206 * CGI pipe, fread() may block until IO buffer is filled up. We; 6207 * cannot afford to block and must pass all read bytes immediately; 6208 * to the client. */; 6209 nread = (int)read(fileno(fp), buf, (size_t)len);; 6210 ; 6211 err = (nread < 0) ? ERRNO : 0;; 6212 if ((nread == 0) && (len > 0)) {; 6213 /* Should get data, but got EOL */; 6214 return -2;; 6215 }; 6216 ; 6217#if defined(USE_MBEDTLS); 6218 } else if (conn->ssl != NULL) {; 6219 struct mg_pollfd pfd[1];; 6220 int to_read;; 6221 int pollres;; 6222 ; 6223 to_read = mbedtls_ssl_get_bytes_avail(conn->ssl);; 6224 ; 6225 if (to_read > 0) {; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:181618,Availability,avail,available,181618,",; 6186 struct mg_connection *conn,; 6187 char *buf,; 6188 int len,; 6189 double timeout); 6190{; 6191 int nread, err = 0;; 6192 ; 6193#if defined(_WIN32); 6194 typedef int len_t;; 6195#else; 6196 typedef size_t len_t;; 6197#endif; 6198 ; 6199 /* We need an additional wait loop around this, because in some cases; 6200 * with TLSwe may get data from the socket but not from SSL_read.; 6201 * In this case we need to repeat at least once.; 6202 */; 6203 ; 6204 if (fp != NULL) {; 6205 /* Use read() instead of fread(), because if we're reading from the; 6206 * CGI pipe, fread() may block until IO buffer is filled up. We; 6207 * cannot afford to block and must pass all read bytes immediately; 6208 * to the client. */; 6209 nread = (int)read(fileno(fp), buf, (size_t)len);; 6210 ; 6211 err = (nread < 0) ? ERRNO : 0;; 6212 if ((nread == 0) && (len > 0)) {; 6213 /* Should get data, but got EOL */; 6214 return -2;; 6215 }; 6216 ; 6217#if defined(USE_MBEDTLS); 6218 } else if (conn->ssl != NULL) {; 6219 struct mg_pollfd pfd[1];; 6220 int to_read;; 6221 int pollres;; 6222 ; 6223 to_read = mbedtls_ssl_get_bytes_avail(conn->ssl);; 6224 ; 6225 if (to_read > 0) {; 6226 /* We already know there is no more data buffered in conn->buf; 6227 * but there is more available in the SSL layer. So don't poll; 6228 * conn->client.sock yet. */; 6229 ; 6230 pollres = 1;; 6231 if (to_read > len); 6232 to_read = len;; 6233 } else {; 6234 pfd[0].fd = conn->client.sock;; 6235 pfd[0].events = POLLIN;; 6236 ; 6237 to_read = len;; 6238 ; 6239 pollres = mg_poll(pfd,; 6240 1,; 6241 (int)(timeout * 1000.0),; 6242 &(conn->phys_ctx->stop_flag));; 6243 ; 6244 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6245 return -2;; 6246 }; 6247 }; 6248 ; 6249 if (pollres > 0) {; 6250 nread = mbed_ssl_read(conn->ssl, (unsigned char *)buf, to_read);; 6251 if (nread <= 0) {; 6252 if ((nread == MBEDTLS_ERR_SSL_WANT_READ); 6253 || (nread == MBEDTLS_ERR_SSL_WANT_WRITE); 6254 || nread == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:182437,Availability,error,error,182437,"il(conn->ssl);; 6224 ; 6225 if (to_read > 0) {; 6226 /* We already know there is no more data buffered in conn->buf; 6227 * but there is more available in the SSL layer. So don't poll; 6228 * conn->client.sock yet. */; 6229 ; 6230 pollres = 1;; 6231 if (to_read > len); 6232 to_read = len;; 6233 } else {; 6234 pfd[0].fd = conn->client.sock;; 6235 pfd[0].events = POLLIN;; 6236 ; 6237 to_read = len;; 6238 ; 6239 pollres = mg_poll(pfd,; 6240 1,; 6241 (int)(timeout * 1000.0),; 6242 &(conn->phys_ctx->stop_flag));; 6243 ; 6244 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6245 return -2;; 6246 }; 6247 }; 6248 ; 6249 if (pollres > 0) {; 6250 nread = mbed_ssl_read(conn->ssl, (unsigned char *)buf, to_read);; 6251 if (nread <= 0) {; 6252 if ((nread == MBEDTLS_ERR_SSL_WANT_READ); 6253 || (nread == MBEDTLS_ERR_SSL_WANT_WRITE); 6254 || nread == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6255 nread = 0;; 6256 } else {; 6257 fprintf(stderr, ""SSL read failed, error %d\n"", nread);; 6258 return -2;; 6259 }; 6260 } else {; 6261 err = 0;; 6262 }; 6263 ; 6264 } else if (pollres < 0) {; 6265 /* Error */; 6266 return -2;; 6267 } else {; 6268 /* pollres = 0 means timeout */; 6269 nread = 0;; 6270 }; 6271 ; 6272#elif !defined(NO_SSL); 6273 } else if (conn->ssl != NULL) {; 6274 int ssl_pending;; 6275 struct mg_pollfd pfd[1];; 6276 int pollres;; 6277 ; 6278 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6279 /* We already know there is no more data buffered in conn->buf; 6280 * but there is more available in the SSL layer. So don't poll; 6281 * conn->client.sock yet. */; 6282 if (ssl_pending > len) {; 6283 ssl_pending = len;; 6284 }; 6285 pollres = 1;; 6286 } else {; 6287 pfd[0].fd = conn->client.sock;; 6288 pfd[0].events = POLLIN;; 6289 pollres = mg_poll(pfd,; 6290 1,; 6291 (int)(timeout * 1000.0),; 6292 &(conn->phys_ctx->stop_flag));; 6293 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6294 return -2;; 6295 }; 6296 }; 6297 if (pollres > 0) {; 6298 ERR_clear_error();; 6299 nre",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:182977,Availability,avail,available,182977,"il(conn->ssl);; 6224 ; 6225 if (to_read > 0) {; 6226 /* We already know there is no more data buffered in conn->buf; 6227 * but there is more available in the SSL layer. So don't poll; 6228 * conn->client.sock yet. */; 6229 ; 6230 pollres = 1;; 6231 if (to_read > len); 6232 to_read = len;; 6233 } else {; 6234 pfd[0].fd = conn->client.sock;; 6235 pfd[0].events = POLLIN;; 6236 ; 6237 to_read = len;; 6238 ; 6239 pollres = mg_poll(pfd,; 6240 1,; 6241 (int)(timeout * 1000.0),; 6242 &(conn->phys_ctx->stop_flag));; 6243 ; 6244 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6245 return -2;; 6246 }; 6247 }; 6248 ; 6249 if (pollres > 0) {; 6250 nread = mbed_ssl_read(conn->ssl, (unsigned char *)buf, to_read);; 6251 if (nread <= 0) {; 6252 if ((nread == MBEDTLS_ERR_SSL_WANT_READ); 6253 || (nread == MBEDTLS_ERR_SSL_WANT_WRITE); 6254 || nread == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS) {; 6255 nread = 0;; 6256 } else {; 6257 fprintf(stderr, ""SSL read failed, error %d\n"", nread);; 6258 return -2;; 6259 }; 6260 } else {; 6261 err = 0;; 6262 }; 6263 ; 6264 } else if (pollres < 0) {; 6265 /* Error */; 6266 return -2;; 6267 } else {; 6268 /* pollres = 0 means timeout */; 6269 nread = 0;; 6270 }; 6271 ; 6272#elif !defined(NO_SSL); 6273 } else if (conn->ssl != NULL) {; 6274 int ssl_pending;; 6275 struct mg_pollfd pfd[1];; 6276 int pollres;; 6277 ; 6278 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6279 /* We already know there is no more data buffered in conn->buf; 6280 * but there is more available in the SSL layer. So don't poll; 6281 * conn->client.sock yet. */; 6282 if (ssl_pending > len) {; 6283 ssl_pending = len;; 6284 }; 6285 pollres = 1;; 6286 } else {; 6287 pfd[0].fd = conn->client.sock;; 6288 pfd[0].events = POLLIN;; 6289 pollres = mg_poll(pfd,; 6290 1,; 6291 (int)(timeout * 1000.0),; 6292 &(conn->phys_ctx->stop_flag));; 6293 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6294 return -2;; 6295 }; 6296 }; 6297 if (pollres > 0) {; 6298 ERR_clear_error();; 6299 nre",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:183830,Availability,error,errors,183830,"uct mg_pollfd pfd[1];; 6276 int pollres;; 6277 ; 6278 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6279 /* We already know there is no more data buffered in conn->buf; 6280 * but there is more available in the SSL layer. So don't poll; 6281 * conn->client.sock yet. */; 6282 if (ssl_pending > len) {; 6283 ssl_pending = len;; 6284 }; 6285 pollres = 1;; 6286 } else {; 6287 pfd[0].fd = conn->client.sock;; 6288 pfd[0].events = POLLIN;; 6289 pollres = mg_poll(pfd,; 6290 1,; 6291 (int)(timeout * 1000.0),; 6292 &(conn->phys_ctx->stop_flag));; 6293 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6294 return -2;; 6295 }; 6296 }; 6297 if (pollres > 0) {; 6298 ERR_clear_error();; 6299 nread =; 6300 SSL_read(conn->ssl, buf, (ssl_pending > 0) ? ssl_pending : len);; 6301 if (nread <= 0) {; 6302 err = SSL_get_error(conn->ssl, nread);; 6303 if ((err == SSL_ERROR_SYSCALL) && (nread == -1)) {; 6304 err = ERRNO;; 6305 } else if ((err == SSL_ERROR_WANT_READ); 6306 || (err == SSL_ERROR_WANT_WRITE)) {; 6307 nread = 0;; 6308 } else {; 6309 /* All errors should return -2 */; 6310 DEBUG_TRACE(""SSL_read() failed, error %d"", err);; 6311 ERR_clear_error();; 6312 return -2;; 6313 }; 6314 ERR_clear_error();; 6315 } else {; 6316 err = 0;; 6317 }; 6318 } else if (pollres < 0) {; 6319 /* Error */; 6320 return -2;; 6321 } else {; 6322 /* pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 63",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:183895,Availability,error,error,183895,"uct mg_pollfd pfd[1];; 6276 int pollres;; 6277 ; 6278 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6279 /* We already know there is no more data buffered in conn->buf; 6280 * but there is more available in the SSL layer. So don't poll; 6281 * conn->client.sock yet. */; 6282 if (ssl_pending > len) {; 6283 ssl_pending = len;; 6284 }; 6285 pollres = 1;; 6286 } else {; 6287 pfd[0].fd = conn->client.sock;; 6288 pfd[0].events = POLLIN;; 6289 pollres = mg_poll(pfd,; 6290 1,; 6291 (int)(timeout * 1000.0),; 6292 &(conn->phys_ctx->stop_flag));; 6293 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6294 return -2;; 6295 }; 6296 }; 6297 if (pollres > 0) {; 6298 ERR_clear_error();; 6299 nread =; 6300 SSL_read(conn->ssl, buf, (ssl_pending > 0) ? ssl_pending : len);; 6301 if (nread <= 0) {; 6302 err = SSL_get_error(conn->ssl, nread);; 6303 if ((err == SSL_ERROR_SYSCALL) && (nread == -1)) {; 6304 err = ERRNO;; 6305 } else if ((err == SSL_ERROR_WANT_READ); 6306 || (err == SSL_ERROR_WANT_WRITE)) {; 6307 nread = 0;; 6308 } else {; 6309 /* All errors should return -2 */; 6310 DEBUG_TRACE(""SSL_read() failed, error %d"", err);; 6311 ERR_clear_error();; 6312 return -2;; 6313 }; 6314 ERR_clear_error();; 6315 } else {; 6316 err = 0;; 6317 }; 6318 } else if (pollres < 0) {; 6319 /* Error */; 6320 return -2;; 6321 } else {; 6322 /* pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 63",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:184785,Availability,error,error,184785,"pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 6348 /* error callint poll */; 6349 return -2;; 6350 } else {; 6351 /* pollres = 0 means timeout */; 6352 nread = 0;; 6353 }; 6354 }; 6355 ; 6356 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6357 return -2;; 6358 }; 6359 ; 6360 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6361 /* some data has been read, or no data was requested */; 6362 return nread;; 6363 }; 6364 ; 6365 if (nread < 0) {; 6366 /* socket error - check errno */; 6367#if defined(_WIN32); 6368 if (err == WSAEWOULDBLOCK) {; 6369 /* TODO (low): check if this is still required */; 6370 /* standard case if called from close_socket_gracefully */; 6371 return -2;; 6372 } else if (err == WSAETIMEDOUT) {; 6373 /* TODO (low): check if this is still required */; 6374 /* timeout is handled by the while loop */; 6375 return 0;; 6376 } else if (err == WSAECONNABORTED) {; 6377 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:185202,Availability,error,error,185202,"pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 6348 /* error callint poll */; 6349 return -2;; 6350 } else {; 6351 /* pollres = 0 means timeout */; 6352 nread = 0;; 6353 }; 6354 }; 6355 ; 6356 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6357 return -2;; 6358 }; 6359 ; 6360 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6361 /* some data has been read, or no data was requested */; 6362 return nread;; 6363 }; 6364 ; 6365 if (nread < 0) {; 6366 /* socket error - check errno */; 6367#if defined(_WIN32); 6368 if (err == WSAEWOULDBLOCK) {; 6369 /* TODO (low): check if this is still required */; 6370 /* standard case if called from close_socket_gracefully */; 6371 return -2;; 6372 } else if (err == WSAETIMEDOUT) {; 6373 /* TODO (low): check if this is still required */; 6374 /* timeout is handled by the while loop */; 6375 return 0;; 6376 } else if (err == WSAECONNABORTED) {; 6377 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:185749,Availability,error,error,185749,"lres = 0 means timeout */; 6352 nread = 0;; 6353 }; 6354 }; 6355 ; 6356 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6357 return -2;; 6358 }; 6359 ; 6360 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6361 /* some data has been read, or no data was requested */; 6362 return nread;; 6363 }; 6364 ; 6365 if (nread < 0) {; 6366 /* socket error - check errno */; 6367#if defined(_WIN32); 6368 if (err == WSAEWOULDBLOCK) {; 6369 /* TODO (low): check if this is still required */; 6370 /* standard case if called from close_socket_gracefully */; 6371 return -2;; 6372 } else if (err == WSAETIMEDOUT) {; 6373 /* TODO (low): check if this is still required */; 6374 /* timeout is handled by the while loop */; 6375 return 0;; 6376 } else if (err == WSAECONNABORTED) {; 6377 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN(err)) {; 6390 /* TODO (low): check if this is still required */; 6391 /* EAGAIN/EWOULDBLOCK:; 6392 * standard case if called from close_socket_gracefully; 6393 * => should return -1 */; 6394 /* or timeout occurred; 6395 * => the code must stay in the while loop */; 6396 ; 6397 /* EINTR can be generated on a socket with a timeout set even; 6398 * when SA_RESTART is effective for all relevant signals; 6399 * (see signal(7)).; 6400 * => stay in the while loop */; 6401 } else {; 6402 DEBUG_TRACE(""recv() failed, error %d"", err);; 6403 return -2;; 6404 }; 6405#endif; 6406 }; 6407 ; 6408 /* Timeout occurred, but no data available. */; 6409 return -1;; 6410}; 6411 ; 6412 ; 6413static int; 6414pull_all(FILE *fp, struct mg_connection ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:186631,Availability,error,error,186631,"//www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN(err)) {; 6390 /* TODO (low): check if this is still required */; 6391 /* EAGAIN/EWOULDBLOCK:; 6392 * standard case if called from close_socket_gracefully; 6393 * => should return -1 */; 6394 /* or timeout occurred; 6395 * => the code must stay in the while loop */; 6396 ; 6397 /* EINTR can be generated on a socket with a timeout set even; 6398 * when SA_RESTART is effective for all relevant signals; 6399 * (see signal(7)).; 6400 * => stay in the while loop */; 6401 } else {; 6402 DEBUG_TRACE(""recv() failed, error %d"", err);; 6403 return -2;; 6404 }; 6405#endif; 6406 }; 6407 ; 6408 /* Timeout occurred, but no data available. */; 6409 return -1;; 6410}; 6411 ; 6412 ; 6413static int; 6414pull_all(FILE *fp, struct mg_connection *conn, char *buf, int len); 6415{; 6416 int n, nread = 0;; 6417 double timeout = -1.0;; 6418 uint64_t start_time = 0, now = 0, timeout_ns = 0;; 6419 ; 6420 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 6421 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 6422 }; 6423 if (timeout <= 0.0) {; 6424 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6425 / 1000.0;; 6426 }; 6427 start_time = mg_get_current_time_ns();; 6428 timeout_ns = (uint64_t)(timeout * 1.0E9);; 6429 ; 6430 while ((len > 0) && STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6431 n = pull_inner(fp, conn, buf + nread, len, timeout);; 6432 if (n == -2) {; 6433 if (nread == 0) {; 6434 nread = -1; /* Propagate the error */; 6435 }; 6436 break;; 6437 } else if (n == -1) {; 6438 /* timeo",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:186739,Availability,avail,available,186739,"//www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN(err)) {; 6390 /* TODO (low): check if this is still required */; 6391 /* EAGAIN/EWOULDBLOCK:; 6392 * standard case if called from close_socket_gracefully; 6393 * => should return -1 */; 6394 /* or timeout occurred; 6395 * => the code must stay in the while loop */; 6396 ; 6397 /* EINTR can be generated on a socket with a timeout set even; 6398 * when SA_RESTART is effective for all relevant signals; 6399 * (see signal(7)).; 6400 * => stay in the while loop */; 6401 } else {; 6402 DEBUG_TRACE(""recv() failed, error %d"", err);; 6403 return -2;; 6404 }; 6405#endif; 6406 }; 6407 ; 6408 /* Timeout occurred, but no data available. */; 6409 return -1;; 6410}; 6411 ; 6412 ; 6413static int; 6414pull_all(FILE *fp, struct mg_connection *conn, char *buf, int len); 6415{; 6416 int n, nread = 0;; 6417 double timeout = -1.0;; 6418 uint64_t start_time = 0, now = 0, timeout_ns = 0;; 6419 ; 6420 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 6421 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 6422 }; 6423 if (timeout <= 0.0) {; 6424 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6425 / 1000.0;; 6426 }; 6427 start_time = mg_get_current_time_ns();; 6428 timeout_ns = (uint64_t)(timeout * 1.0E9);; 6429 ; 6430 while ((len > 0) && STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6431 n = pull_inner(fp, conn, buf + nread, len, timeout);; 6432 if (n == -2) {; 6433 if (nread == 0) {; 6434 nread = -1; /* Propagate the error */; 6435 }; 6436 break;; 6437 } else if (n == -1) {; 6438 /* timeo",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:187575,Availability,error,error,187575,"signals; 6399 * (see signal(7)).; 6400 * => stay in the while loop */; 6401 } else {; 6402 DEBUG_TRACE(""recv() failed, error %d"", err);; 6403 return -2;; 6404 }; 6405#endif; 6406 }; 6407 ; 6408 /* Timeout occurred, but no data available. */; 6409 return -1;; 6410}; 6411 ; 6412 ; 6413static int; 6414pull_all(FILE *fp, struct mg_connection *conn, char *buf, int len); 6415{; 6416 int n, nread = 0;; 6417 double timeout = -1.0;; 6418 uint64_t start_time = 0, now = 0, timeout_ns = 0;; 6419 ; 6420 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 6421 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 6422 }; 6423 if (timeout <= 0.0) {; 6424 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6425 / 1000.0;; 6426 }; 6427 start_time = mg_get_current_time_ns();; 6428 timeout_ns = (uint64_t)(timeout * 1.0E9);; 6429 ; 6430 while ((len > 0) && STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6431 n = pull_inner(fp, conn, buf + nread, len, timeout);; 6432 if (n == -2) {; 6433 if (nread == 0) {; 6434 nread = -1; /* Propagate the error */; 6435 }; 6436 break;; 6437 } else if (n == -1) {; 6438 /* timeout */; 6439 if (timeout >= 0.0) {; 6440 now = mg_get_current_time_ns();; 6441 if ((now - start_time) <= timeout_ns) {; 6442 continue;; 6443 }; 6444 }; 6445 break;; 6446 } else if (n == 0) {; 6447 break; /* No more data to read */; 6448 } else {; 6449 nread += n;; 6450 len -= n;; 6451 }; 6452 }; 6453 ; 6454 return nread;; 6455}; 6456 ; 6457 ; 6458static void; 6459discard_unread_request_data(struct mg_connection *conn); 6460{; 6461 char buf[MG_BUF_LEN];; 6462 ; 6463 while (mg_read(conn, buf, sizeof(buf)) > 0); 6464 ;; 6465}; 6466 ; 6467 ; 6468static int; 6469mg_read_inner(struct mg_connection *conn, void *buf, size_t len); 6470{; 6471 int64_t content_len, n, buffered_len, nread;; 6472 int64_t len64 =; 6473 (int64_t)((len > INT_MAX) ? INT_MAX : len); /* since the return value is; 6474 * int, we may not read more; 6475 * bytes */; 6476 const char *body;; 64",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:191324,Availability,error,error,191324,"t, update statistics and call access log */; 6536static void; 6537handle_request_stat_log(struct mg_connection *conn); 6538{; 6539#if defined(USE_SERVER_STATS); 6540 struct timespec tnow;; 6541 conn->conn_state = 4; /* processing */; 6542#endif; 6543 ; 6544 handle_request(conn);; 6545 ; 6546 ; 6547#if defined(USE_SERVER_STATS); 6548 conn->conn_state = 5; /* processed */; 6549 ; 6550 clock_gettime(CLOCK_MONOTONIC, &tnow);; 6551 conn->processing_time = mg_difftimespec(&tnow, &(conn->req_time));; 6552 ; 6553 mg_atomic_add64(&(conn->phys_ctx->total_data_read), conn->consumed_content);; 6554 mg_atomic_add64(&(conn->phys_ctx->total_data_written),; 6555 conn->num_bytes_sent);; 6556#endif; 6557 ; 6558 DEBUG_TRACE(""%s"", ""handle_request done"");; 6559 ; 6560 if (conn->phys_ctx->callbacks.end_request != NULL) {; 6561 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6562 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6563 }; 6564 log_access(conn);; 6565}; 6566 ; 6567 ; 6568#if defined(USE_HTTP2); 6569#if defined(NO_SSL); 6570#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6571#endif; 6572#define USE_ALPN; 6573#include ""mod_http2.inl""; 6574/* Not supported with HTTP/2 */; 6575#define HTTP1_only \; 6576 { \; 6577 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) { \; 6578 http2_must_use_http1(conn); \; 6579 return; \; 6580 } \; 6581 }; 6582#else; 6583#define HTTP1_only; 6584#endif; 6585 ; 6586 ; 6587int; 6588mg_read(struct mg_connection *conn, void *buf, size_t len); 6589{; 6590 if (len > INT_MAX) {; 6591 len = INT_MAX;; 6592 }; 6593 ; 6594 if (conn == NULL) {; 6595 return 0;; 6596 }; 6597 ; 6598 if (conn->is_chunked) {; 6599 size_t all_read = 0;; 6600 ; 6601 while (len > 0) {; 6602 if (conn->is_chunked >= 3) {; 6603 /* No more data left to read */; 6604 return 0;; 6605 }; 6606 if (conn->is_chunked != 1) {; 6607 /* Has error */; 6608 return -1;; 6609 }; 6610 ; 6611 if (conn->consumed_content != conn->content_len) {; 6612 /* copy from the current chunk */; 6613",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:192134,Availability,error,error,192134,"cks.end_request != NULL) {; 6561 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6562 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6563 }; 6564 log_access(conn);; 6565}; 6566 ; 6567 ; 6568#if defined(USE_HTTP2); 6569#if defined(NO_SSL); 6570#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6571#endif; 6572#define USE_ALPN; 6573#include ""mod_http2.inl""; 6574/* Not supported with HTTP/2 */; 6575#define HTTP1_only \; 6576 { \; 6577 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) { \; 6578 http2_must_use_http1(conn); \; 6579 return; \; 6580 } \; 6581 }; 6582#else; 6583#define HTTP1_only; 6584#endif; 6585 ; 6586 ; 6587int; 6588mg_read(struct mg_connection *conn, void *buf, size_t len); 6589{; 6590 if (len > INT_MAX) {; 6591 len = INT_MAX;; 6592 }; 6593 ; 6594 if (conn == NULL) {; 6595 return 0;; 6596 }; 6597 ; 6598 if (conn->is_chunked) {; 6599 size_t all_read = 0;; 6600 ; 6601 while (len > 0) {; 6602 if (conn->is_chunked >= 3) {; 6603 /* No more data left to read */; 6604 return 0;; 6605 }; 6606 if (conn->is_chunked != 1) {; 6607 /* Has error */; 6608 return -1;; 6609 }; 6610 ; 6611 if (conn->consumed_content != conn->content_len) {; 6612 /* copy from the current chunk */; 6613 int read_ret = mg_read_inner(conn, (char *)buf + all_read, len);; 6614 ; 6615 if (read_ret < 1) {; 6616 /* read error */; 6617 conn->is_chunked = 2;; 6618 return -1;; 6619 }; 6620 ; 6621 all_read += (size_t)read_ret;; 6622 len -= (size_t)read_ret;; 6623 ; 6624 if (conn->consumed_content == conn->content_len) {; 6625 /* Add data bytes in the current chunk have been read,; 6626 * so we are expecting \r\n now. */; 6627 char x[2];; 6628 conn->content_len += 2;; 6629 if ((mg_read_inner(conn, x, 2) != 2) || (x[0] != '\r'); 6630 || (x[1] != '\n')) {; 6631 /* Protocol violation */; 6632 conn->is_chunked = 2;; 6633 return -1;; 6634 }; 6635 }; 6636 ; 6637 } else {; 6638 /* fetch a new chunk */; 6639 size_t i;; 6640 char lenbuf[64];; 6641 char *end = NULL;; 6642 unsigned long chunkSi",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:192390,Availability,error,error,192390,"cks.end_request != NULL) {; 6561 conn->phys_ctx->callbacks.end_request(conn, conn->status_code);; 6562 DEBUG_TRACE(""%s"", ""end_request callback done"");; 6563 }; 6564 log_access(conn);; 6565}; 6566 ; 6567 ; 6568#if defined(USE_HTTP2); 6569#if defined(NO_SSL); 6570#error ""HTTP2 requires ALPN, APLN requires SSL/TLS""; 6571#endif; 6572#define USE_ALPN; 6573#include ""mod_http2.inl""; 6574/* Not supported with HTTP/2 */; 6575#define HTTP1_only \; 6576 { \; 6577 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) { \; 6578 http2_must_use_http1(conn); \; 6579 return; \; 6580 } \; 6581 }; 6582#else; 6583#define HTTP1_only; 6584#endif; 6585 ; 6586 ; 6587int; 6588mg_read(struct mg_connection *conn, void *buf, size_t len); 6589{; 6590 if (len > INT_MAX) {; 6591 len = INT_MAX;; 6592 }; 6593 ; 6594 if (conn == NULL) {; 6595 return 0;; 6596 }; 6597 ; 6598 if (conn->is_chunked) {; 6599 size_t all_read = 0;; 6600 ; 6601 while (len > 0) {; 6602 if (conn->is_chunked >= 3) {; 6603 /* No more data left to read */; 6604 return 0;; 6605 }; 6606 if (conn->is_chunked != 1) {; 6607 /* Has error */; 6608 return -1;; 6609 }; 6610 ; 6611 if (conn->consumed_content != conn->content_len) {; 6612 /* copy from the current chunk */; 6613 int read_ret = mg_read_inner(conn, (char *)buf + all_read, len);; 6614 ; 6615 if (read_ret < 1) {; 6616 /* read error */; 6617 conn->is_chunked = 2;; 6618 return -1;; 6619 }; 6620 ; 6621 all_read += (size_t)read_ret;; 6622 len -= (size_t)read_ret;; 6623 ; 6624 if (conn->consumed_content == conn->content_len) {; 6625 /* Add data bytes in the current chunk have been read,; 6626 * so we are expecting \r\n now. */; 6627 char x[2];; 6628 conn->content_len += 2;; 6629 if ((mg_read_inner(conn, x, 2) != 2) || (x[0] != '\r'); 6630 || (x[1] != '\n')) {; 6631 /* Protocol violation */; 6632 conn->is_chunked = 2;; 6633 return -1;; 6634 }; 6635 }; 6636 ; 6637 } else {; 6638 /* fetch a new chunk */; 6639 size_t i;; 6640 char lenbuf[64];; 6641 char *end = NULL;; 6642 unsigned long chunkSi",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:193968,Availability,alive,alive,193968," 6639 size_t i;; 6640 char lenbuf[64];; 6641 char *end = NULL;; 6642 unsigned long chunkSize = 0;; 6643 ; 6644 for (i = 0; i < (sizeof(lenbuf) - 1); i++) {; 6645 conn->content_len++;; 6646 if (mg_read_inner(conn, lenbuf + i, 1) != 1) {; 6647 lenbuf[i] = 0;; 6648 }; 6649 if ((i > 0) && (lenbuf[i] == '\r'); 6650 && (lenbuf[i - 1] != '\r')) {; 6651 continue;; 6652 }; 6653 if ((i > 1) && (lenbuf[i] == '\n'); 6654 && (lenbuf[i - 1] == '\r')) {; 6655 lenbuf[i + 1] = 0;; 6656 chunkSize = strtoul(lenbuf, &end, 16);; 6657 if (chunkSize == 0) {; 6658 /* regular end of content */; 6659 conn->is_chunked = 3;; 6660 }; 6661 break;; 6662 }; 6663 if (!isxdigit((unsigned char)lenbuf[i])) {; 6664 /* illegal character for chunk length */; 6665 conn->is_chunked = 2;; 6666 return -1;; 6667 }; 6668 }; 6669 if ((end == NULL) || (*end != '\r')) {; 6670 /* chunksize not set correctly */; 6671 conn->is_chunked = 2;; 6672 return -1;; 6673 }; 6674 if (chunkSize == 0) {; 6675 /* try discarding trailer for keep-alive */; 6676 conn->content_len += 2;; 6677 if ((mg_read_inner(conn, lenbuf, 2) == 2); 6678 && (lenbuf[0] == '\r') && (lenbuf[1] == '\n')) {; 6679 conn->is_chunked = 4;; 6680 }; 6681 break;; 6682 }; 6683 ; 6684 /* append a new chunk */; 6685 conn->content_len += (int64_t)chunkSize;; 6686 }; 6687 }; 6688 ; 6689 return (int)all_read;; 6690 }; 6691 return mg_read_inner(conn, buf, len);; 6692}; 6693 ; 6694 ; 6695int; 6696mg_write(struct mg_connection *conn, const void *buf, size_t len); 6697{; 6698 time_t now;; 6699 int n, total, allowed;; 6700 ; 6701 if (conn == NULL) {; 6702 return 0;; 6703 }; 6704 if (len > INT_MAX) {; 6705 return -1;; 6706 }; 6707 ; 6708 /* Mark connection as ""data sent"" */; 6709 conn->request_state = 10;; 6710#if defined(USE_HTTP2); 6711 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 6712 http2_data_frame_head(conn, len, 0);; 6713 }; 6714#endif; 6715 ; 6716 if (conn->throttle > 0) {; 6717 if ((now = time(NULL)) != conn->last_throttle_time) {; 6718 conn->last_throttl",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:199511,Availability,error,error,199511,"iant, and vsnprintf() returns -1 if; 6866 * buffer is too small. Also, older versions of msvcrt.dll do not have; 6867 * _vscprintf(). However, if size is 0, vsnprintf() behaves correctly.; 6868 * Therefore, we make two passes: on first pass, get required message; 6869 * length.; 6870 * On second pass, actually print the message. */; 6871 va_copy(ap_copy, ap);; 6872 len = vsnprintf_impl(NULL, 0, fmt, ap_copy);; 6873 va_end(ap_copy);; 6874 ; 6875 if (len < 0) {; 6876 /* C runtime is not standard compliant, vsnprintf() returned -1.; 6877 * Switch to alternative code path that uses incremental; 6878 * allocations.; 6879 */; 6880 va_copy(ap_copy, ap);; 6881 len = alloc_vprintf2(out_buf, fmt, ap_copy);; 6882 va_end(ap_copy);; 6883 ; 6884 } else if ((size_t)(len) >= prealloc_size) {; 6885 /* The pre-allocated buffer not large enough. */; 6886 /* Allocate a new buffer. */; 6887 *out_buf = (char *)mg_malloc((size_t)(len) + 1);; 6888 if (!*out_buf) {; 6889 /* Allocation failed. Return -1 as ""out of memory"" error. */; 6890 return -1;; 6891 }; 6892 /* Buffer allocation successful. Store the string there. */; 6893 va_copy(ap_copy, ap);; 6894 IGNORE_UNUSED_RESULT(; 6895 vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));; 6896 va_end(ap_copy);; 6897 ; 6898 } else {; 6899 /* The pre-allocated buffer is large enough.; 6900 * Use it to store the string and return the address. */; 6901 va_copy(ap_copy, ap);; 6902 IGNORE_UNUSED_RESULT(; 6903 vsnprintf_impl(prealloc_buf, prealloc_size, fmt, ap_copy));; 6904 va_end(ap_copy);; 6905 *out_buf = prealloc_buf;; 6906 }; 6907 ; 6908 return len;; 6909}; 6910 ; 6911 ; 6912#if defined(GCC_DIAGNOSTIC); 6913/* Enable format-nonliteral warning again. */; 6914#pragma GCC diagnostic pop; 6915#endif; 6916 ; 6917 ; 6918static int; 6919mg_vprintf(struct mg_connection *conn, const char *fmt, va_list ap); 6920{; 6921 char mem[MG_BUF_LEN];; 6922 char *buf = NULL;; 6923 int len;; 6924 ; 6925 if ((len = alloc_vprintf(&buf, mem, sizeof(mem), fmt, ap)) ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:203424,Availability,error,error,203424,"97 return mg_get_var2(data, data_len, name, dst, dst_len, 0);; 6998}; 6999 ; 7000 ; 7001int; 7002mg_get_var2(const char *data,; 7003 size_t data_len,; 7004 const char *name,; 7005 char *dst,; 7006 size_t dst_len,; 7007 size_t occurrence); 7008{; 7009 const char *p, *e, *s;; 7010 size_t name_len;; 7011 int len;; 7012 ; 7013 if ((dst == NULL) || (dst_len == 0)) {; 7014 len = -2;; 7015 } else if ((data == NULL) || (name == NULL) || (data_len == 0)) {; 7016 len = -1;; 7017 dst[0] = '\0';; 7018 } else {; 7019 name_len = strlen(name);; 7020 e = data + data_len;; 7021 len = -1;; 7022 dst[0] = '\0';; 7023 ; 7024 /* data is ""var1=val1&var2=val2..."". Find variable first */; 7025 for (p = data; p + name_len < e; p++) {; 7026 if (((p == data) || (p[-1] == '&')) && (p[name_len] == '='); 7027 && !mg_strncasecmp(name, p, name_len) && 0 == occurrence--) {; 7028 /* Point p to variable value */; 7029 p += name_len + 1;; 7030 ; 7031 /* Point s to the end of the value */; 7032 s = (const char *)memchr(p, '&', (size_t)(e - p));; 7033 if (s == NULL) {; 7034 s = e;; 7035 }; 7036 DEBUG_ASSERT(s >= p);; 7037 if (s < p) {; 7038 return -3;; 7039 }; 7040 ; 7041 /* Decode variable into destination buffer */; 7042 len = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);; 7043 ; 7044 /* Redirect error code from -1 to -2 (destination buffer too; 7045 * small). */; 7046 if (len == -1) {; 7047 len = -2;; 7048 }; 7049 break;; 7050 }; 7051 }; 7052 }; 7053 ; 7054 return len;; 7055}; 7056 ; 7057 ; 7058/* split a string ""key1=val1&key2=val2"" into key/value pairs */; 7059int; 7060mg_split_form_urlencoded(char *data,; 7061 struct mg_header *form_fields,; 7062 unsigned num_form_fields); 7063{; 7064 char *b;; 7065 int i;; 7066 int num = 0;; 7067 ; 7068 if (data == NULL) {; 7069 /* parameter error */; 7070 return -1;; 7071 }; 7072 ; 7073 if ((form_fields == NULL) && (num_form_fields == 0)) {; 7074 /* determine the number of expected fields */; 7075 if (data[0] == 0) {; 7076 return 0;; 7077 }; 7078 /* count ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:203917,Availability,error,error,203917,"emchr(p, '&', (size_t)(e - p));; 7033 if (s == NULL) {; 7034 s = e;; 7035 }; 7036 DEBUG_ASSERT(s >= p);; 7037 if (s < p) {; 7038 return -3;; 7039 }; 7040 ; 7041 /* Decode variable into destination buffer */; 7042 len = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);; 7043 ; 7044 /* Redirect error code from -1 to -2 (destination buffer too; 7045 * small). */; 7046 if (len == -1) {; 7047 len = -2;; 7048 }; 7049 break;; 7050 }; 7051 }; 7052 }; 7053 ; 7054 return len;; 7055}; 7056 ; 7057 ; 7058/* split a string ""key1=val1&key2=val2"" into key/value pairs */; 7059int; 7060mg_split_form_urlencoded(char *data,; 7061 struct mg_header *form_fields,; 7062 unsigned num_form_fields); 7063{; 7064 char *b;; 7065 int i;; 7066 int num = 0;; 7067 ; 7068 if (data == NULL) {; 7069 /* parameter error */; 7070 return -1;; 7071 }; 7072 ; 7073 if ((form_fields == NULL) && (num_form_fields == 0)) {; 7074 /* determine the number of expected fields */; 7075 if (data[0] == 0) {; 7076 return 0;; 7077 }; 7078 /* count number of & to return the number of key-value-pairs */; 7079 num = 1;; 7080 while (*data) {; 7081 if (*data == '&') {; 7082 num++;; 7083 }; 7084 data++;; 7085 }; 7086 return num;; 7087 }; 7088 ; 7089 if ((form_fields == NULL) || ((int)num_form_fields <= 0)) {; 7090 /* parameter error */; 7091 return -1;; 7092 }; 7093 ; 7094 for (i = 0; i < (int)num_form_fields; i++) {; 7095 /* extract key-value pairs from input data */; 7096 while ((*data == ' ') || (*data == '\t')) {; 7097 /* skip initial spaces */; 7098 data++;; 7099 }; 7100 if (*data == 0) {; 7101 /* end of string reached */; 7102 break;; 7103 }; 7104 form_fields[num].name = data;; 7105 ; 7106 /* find & or = */; 7107 b = data;; 7108 while ((*b != 0) && (*b != '&') && (*b != '=')) {; 7109 b++;; 7110 }; 7111 ; 7112 if (*b == 0) {; 7113 /* last key without value */; 7114 form_fields[num].value = NULL;; 7115 } else if (*b == '&') {; 7116 /* mid key without value */; 7117 form_fields[num].value = NULL;; 7118 } else {; 7119 /* te",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:204415,Availability,error,error,204415,"emchr(p, '&', (size_t)(e - p));; 7033 if (s == NULL) {; 7034 s = e;; 7035 }; 7036 DEBUG_ASSERT(s >= p);; 7037 if (s < p) {; 7038 return -3;; 7039 }; 7040 ; 7041 /* Decode variable into destination buffer */; 7042 len = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);; 7043 ; 7044 /* Redirect error code from -1 to -2 (destination buffer too; 7045 * small). */; 7046 if (len == -1) {; 7047 len = -2;; 7048 }; 7049 break;; 7050 }; 7051 }; 7052 }; 7053 ; 7054 return len;; 7055}; 7056 ; 7057 ; 7058/* split a string ""key1=val1&key2=val2"" into key/value pairs */; 7059int; 7060mg_split_form_urlencoded(char *data,; 7061 struct mg_header *form_fields,; 7062 unsigned num_form_fields); 7063{; 7064 char *b;; 7065 int i;; 7066 int num = 0;; 7067 ; 7068 if (data == NULL) {; 7069 /* parameter error */; 7070 return -1;; 7071 }; 7072 ; 7073 if ((form_fields == NULL) && (num_form_fields == 0)) {; 7074 /* determine the number of expected fields */; 7075 if (data[0] == 0) {; 7076 return 0;; 7077 }; 7078 /* count number of & to return the number of key-value-pairs */; 7079 num = 1;; 7080 while (*data) {; 7081 if (*data == '&') {; 7082 num++;; 7083 }; 7084 data++;; 7085 }; 7086 return num;; 7087 }; 7088 ; 7089 if ((form_fields == NULL) || ((int)num_form_fields <= 0)) {; 7090 /* parameter error */; 7091 return -1;; 7092 }; 7093 ; 7094 for (i = 0; i < (int)num_form_fields; i++) {; 7095 /* extract key-value pairs from input data */; 7096 while ((*data == ' ') || (*data == '\t')) {; 7097 /* skip initial spaces */; 7098 data++;; 7099 }; 7100 if (*data == 0) {; 7101 /* end of string reached */; 7102 break;; 7103 }; 7104 form_fields[num].name = data;; 7105 ; 7106 /* find & or = */; 7107 b = data;; 7108 while ((*b != 0) && (*b != '&') && (*b != '=')) {; 7109 b++;; 7110 }; 7111 ; 7112 if (*b == 0) {; 7113 /* last key without value */; 7114 form_fields[num].value = NULL;; 7115 } else if (*b == '&') {; 7116 /* mid key without value */; 7117 form_fields[num].value = NULL;; 7118 } else {; 7119 /* te",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:208493,Availability,error,error,208493,"217 b = ((i + 1) >= src_len) ? 0 : src[i + 1];; 7218 c = ((i + 2) >= src_len) ? 0 : src[i + 2];; 7219 ; 7220 dst[j++] = b64[a >> 2];; 7221 dst[j++] = b64[((a & 3) << 4) | (b >> 4)];; 7222 if (i + 1 < src_len) {; 7223 dst[j++] = b64[(b & 15) << 2 | (c >> 6)];; 7224 }; 7225 if (i + 2 < src_len) {; 7226 dst[j++] = b64[c & 63];; 7227 }; 7228 }; 7229 while (j % 4 != 0) {; 7230 dst[j++] = '=';; 7231 }; 7232 dst[j++] = '\0';; 7233}; 7234#endif; 7235 ; 7236 ; 7237#if defined(USE_LUA); 7238static unsigned char; 7239b64reverse(char letter); 7240{; 7241 if ((letter >= 'A') && (letter <= 'Z')) {; 7242 return letter - 'A';; 7243 }; 7244 if ((letter >= 'a') && (letter <= 'z')) {; 7245 return letter - 'a' + 26;; 7246 }; 7247 if ((letter >= '0') && (letter <= '9')) {; 7248 return letter - '0' + 52;; 7249 }; 7250 if (letter == '+') {; 7251 return 62;; 7252 }; 7253 if (letter == '/') {; 7254 return 63;; 7255 }; 7256 if (letter == '=') {; 7257 return 255; /* normal end */; 7258 }; 7259 return 254; /* error */; 7260}; 7261 ; 7262 ; 7263static int; 7264base64_decode(const unsigned char *src, int src_len, char *dst, size_t *dst_len); 7265{; 7266 int i;; 7267 unsigned char a, b, c, d;; 7268 ; 7269 *dst_len = 0;; 7270 ; 7271 for (i = 0; i < src_len; i += 4) {; 7272 a = b64reverse(src[i]);; 7273 if (a >= 254) {; 7274 return i;; 7275 }; 7276 ; 7277 b = b64reverse(((i + 1) >= src_len) ? 0 : src[i + 1]);; 7278 if (b >= 254) {; 7279 return i + 1;; 7280 }; 7281 ; 7282 c = b64reverse(((i + 2) >= src_len) ? 0 : src[i + 2]);; 7283 if (c == 254) {; 7284 return i + 2;; 7285 }; 7286 ; 7287 d = b64reverse(((i + 3) >= src_len) ? 0 : src[i + 3]);; 7288 if (d == 254) {; 7289 return i + 3;; 7290 }; 7291 ; 7292 dst[(*dst_len)++] = (a << 2) + (b >> 4);; 7293 if (c != 255) {; 7294 dst[(*dst_len)++] = (b << 4) + (c >> 2);; 7295 if (d != 255) {; 7296 dst[(*dst_len)++] = (c << 6) + d;; 7297 }; 7298 }; 7299 }; 7300 return -1;; 7301}; 7302#endif; 7303 ; 7304 ; 7305static int; 7306is_put_or_delete_method(const stru",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:225137,Availability,error,error,225137," 7761 const unsigned char c = (unsigned char)buf[i];; 7762 ; 7763 if ((c < 128) && ((char)c != '\r') && ((char)c != '\n'); 7764 && !isprint(c)) {; 7765 /* abort scan as soon as one malformed character is found */; 7766 return -1;; 7767 }; 7768 ; 7769 if (i < buflen - 1) {; 7770 if ((buf[i] == '\n') && (buf[i + 1] == '\n')) {; 7771 /* Two newline, no carriage return - not standard compliant,; 7772 * but it should be accepted */; 7773 return i + 2;; 7774 }; 7775 }; 7776 ; 7777 if (i < buflen - 3) {; 7778 if ((buf[i] == '\r') && (buf[i + 1] == '\n') && (buf[i + 2] == '\r'); 7779 && (buf[i + 3] == '\n')) {; 7780 /* Two \r\n - standard compliant */; 7781 return i + 4;; 7782 }; 7783 }; 7784 }; 7785 ; 7786 return 0;; 7787}; 7788 ; 7789 ; 7790#if !defined(NO_CACHING); 7791/* Convert month to the month number. Return -1 on error, or month number */; 7792static int; 7793get_month_index(const char *s); 7794{; 7795 size_t i;; 7796 ; 7797 for (i = 0; i < ARRAY_SIZE(month_names); i++) {; 7798 if (!strcmp(s, month_names[i])) {; 7799 return (int)i;; 7800 }; 7801 }; 7802 ; 7803 return -1;; 7804}; 7805 ; 7806 ; 7807/* Parse UTC date-time string, and return the corresponding time_t value. */; 7808static time_t; 7809parse_date_string(const char *datetime); 7810{; 7811 char month_str[32] = {0};; 7812 int second, minute, hour, day, month, year;; 7813 time_t result = (time_t)0;; 7814 struct tm tm;; 7815 ; 7816 if ((sscanf(datetime,; 7817 ""%d/%3s/%d %d:%d:%d"",; 7818 &day,; 7819 month_str,; 7820 &year,; 7821 &hour,; 7822 &minute,; 7823 &second); 7824 == 6); 7825 || (sscanf(datetime,; 7826 ""%d %3s %d %d:%d:%d"",; 7827 &day,; 7828 month_str,; 7829 &year,; 7830 &hour,; 7831 &minute,; 7832 &second); 7833 == 6); 7834 || (sscanf(datetime,; 7835 ""%*3s, %d %3s %d %d:%d:%d"",; 7836 &day,; 7837 month_str,; 7838 &year,; 7839 &hour,; 7840 &minute,; 7841 &second); 7842 == 6); 7843 || (sscanf(datetime,; 7844 ""%d-%3s-%d %d:%d:%d"",; 7845 &day,; 7846 month_str,; 7847 &year,; 7848 &hour,; 7849 &minute,; 7850 &",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:227180,Availability,error,error,227180,"7838 &year,; 7839 &hour,; 7840 &minute,; 7841 &second); 7842 == 6); 7843 || (sscanf(datetime,; 7844 ""%d-%3s-%d %d:%d:%d"",; 7845 &day,; 7846 month_str,; 7847 &year,; 7848 &hour,; 7849 &minute,; 7850 &second); 7851 == 6)) {; 7852 month = get_month_index(month_str);; 7853 if ((month >= 0) && (year >= 1970)) {; 7854 memset(&tm, 0, sizeof(tm));; 7855 tm.tm_year = year - 1900;; 7856 tm.tm_mon = month;; 7857 tm.tm_mday = day;; 7858 tm.tm_hour = hour;; 7859 tm.tm_min = minute;; 7860 tm.tm_sec = second;; 7861 result = timegm(&tm);; 7862 }; 7863 }; 7864 ; 7865 return result;; 7866}; 7867#endif /* !NO_CACHING */; 7868 ; 7869 ; 7870/* Pre-process URIs according to RFC + protect against directory disclosure; 7871 * attacks by removing '..', excessive '/' and '\' characters */; 7872static void; 7873remove_dot_segments(char *inout); 7874{; 7875 /* Windows backend protection; 7876 * (https://tools.ietf.org/html/rfc3986#section-7.3): Replace backslash; 7877 * in URI by slash */; 7878 char *out_end = inout;; 7879 char *in = inout;; 7880 ; 7881 if (!in) {; 7882 /* Param error. */; 7883 return;; 7884 }; 7885 ; 7886 while (*in) {; 7887 if (*in == '\\') {; 7888 *in = '/';; 7889 }; 7890 in++;; 7891 }; 7892 ; 7893 /* Algorithm ""remove_dot_segments"" from; 7894 * https://tools.ietf.org/html/rfc3986#section-5.2.4 */; 7895 /* Step 1:; 7896 * The input buffer is initialized.; 7897 * The output buffer is initialized to the empty string.; 7898 */; 7899 in = inout;; 7900 ; 7901 /* Step 2:; 7902 * While the input buffer is not empty, loop as follows:; 7903 */; 7904 /* Less than out_end of the inout buffer is used as output, so keep; 7905 * condition: out_end <= in */; 7906 while (*in) {; 7907 /* Step 2a:; 7908 * If the input buffer begins with a prefix of ""../"" or ""./"",; 7909 * then remove that prefix from the input buffer;; 7910 */; 7911 if (!strncmp(in, ""../"", 3)) {; 7912 in += 3;; 7913 } else if (!strncmp(in, ""./"", 2)) {; 7914 in += 2;; 7915 }; 7916 /* otherwise */; 7917 /* Step 2b:; 7918 * if th",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:245034,Availability,error,error,245034,"r even the same) files. It is not difficult to provide a file or files; 8485 * s.t. they force civetweb; 8486 * to infinitely recurse and then crash.; 8487 */; 8488#define INITIAL_DEPTH 9; 8489#if INITIAL_DEPTH <= 0; 8490#error Bad INITIAL_DEPTH for recursion, set to at least 1; 8491#endif; 8492 ; 8493#if !defined(NO_FILESYSTEMS); 8494struct read_auth_file_struct {; 8495 struct mg_connection *conn;; 8496 struct ah ah;; 8497 const char *domain;; 8498 char buf[256 + 256 + 40];; 8499 const char *f_user;; 8500 const char *f_domain;; 8501 const char *f_ha1;; 8502};; 8503 ; 8504 ; 8505static int; 8506read_auth_file(struct mg_file *filep,; 8507 struct read_auth_file_struct *workdata,; 8508 int depth); 8509{; 8510 int is_authorized = 0;; 8511 struct mg_file fp;; 8512 size_t l;; 8513 ; 8514 if (!filep || !workdata || (0 == depth)) {; 8515 return 0;; 8516 }; 8517 ; 8518 /* Loop over passwords file */; 8519 while (mg_fgets(workdata->buf, sizeof(workdata->buf), filep) != NULL) {; 8520 l = strlen(workdata->buf);; 8521 while (l > 0) {; 8522 if (isspace((unsigned char)workdata->buf[l - 1]); 8523 || iscntrl((unsigned char)workdata->buf[l - 1])) {; 8524 l--;; 8525 workdata->buf[l] = 0;; 8526 } else; 8527 break;; 8528 }; 8529 if (l < 1) {; 8530 continue;; 8531 }; 8532 ; 8533 workdata->f_user = workdata->buf;; 8534 ; 8535 if (workdata->f_user[0] == ':') {; 8536 /* user names may not contain a ':' and may not be empty,; 8537 * so lines starting with ':' may be used for a special purpose; 8538 */; 8539 if (workdata->f_user[1] == '#') {; 8540 /* :# is a comment */; 8541 continue;; 8542 } else if (!strncmp(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will r",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:246682,Availability,error,error,246682,"f, sizeof(workdata->buf), filep) != NULL) {; 8520 l = strlen(workdata->buf);; 8521 while (l > 0) {; 8522 if (isspace((unsigned char)workdata->buf[l - 1]); 8523 || iscntrl((unsigned char)workdata->buf[l - 1])) {; 8524 l--;; 8525 workdata->buf[l] = 0;; 8526 } else; 8527 break;; 8528 }; 8529 if (l < 1) {; 8530 continue;; 8531 }; 8532 ; 8533 workdata->f_user = workdata->buf;; 8534 ; 8535 if (workdata->f_user[0] == ':') {; 8536 /* user names may not contain a ':' and may not be empty,; 8537 * so lines starting with ':' may be used for a special purpose; 8538 */; 8539 if (workdata->f_user[1] == '#') {; 8540 /* :# is a comment */; 8541 continue;; 8542 } else if (!strncmp(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will reset it back; 8553 * to 0.; 8554 */; 8555 if (is_authorized) {; 8556 return is_authorized;; 8557 }; 8558 } else {; 8559 mg_cry_internal(workdata->conn,; 8560 ""%s: cannot open authorization file: %s"",; 8561 __func__,; 8562 workdata->buf);; 8563 }; 8564 continue;; 8565 }; 8566 /* everything is invalid for the moment (might change in the; 8567 * future) */; 8568 mg_cry_internal(workdata->conn,; 8569 ""%s: syntax error in authorization file: %s"",; 8570 __func__,; 8571 workdata->buf);; 8572 continue;; 8573 }; 8574 ; 8575 workdata->f_domain = strchr(workdata->f_user, ':');; 8576 if (workdata->f_domain == NULL) {; 8577 mg_cry_internal(workdata->conn,; 8578 ""%s: syntax error in authorization file: %s"",; 8579 __func__,; 8580 workdata->buf);; 8581 continue;; 8582 }; 8583 *(char *)(workdata->f_domain) = 0;; 8584 (workdata->f_domain)++;; 8585 ; 8586 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8587 if (workdata->f_ha1 == NULL) {; 8",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:247224,Availability,error,error,247224,"p(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will reset it back; 8553 * to 0.; 8554 */; 8555 if (is_authorized) {; 8556 return is_authorized;; 8557 }; 8558 } else {; 8559 mg_cry_internal(workdata->conn,; 8560 ""%s: cannot open authorization file: %s"",; 8561 __func__,; 8562 workdata->buf);; 8563 }; 8564 continue;; 8565 }; 8566 /* everything is invalid for the moment (might change in the; 8567 * future) */; 8568 mg_cry_internal(workdata->conn,; 8569 ""%s: syntax error in authorization file: %s"",; 8570 __func__,; 8571 workdata->buf);; 8572 continue;; 8573 }; 8574 ; 8575 workdata->f_domain = strchr(workdata->f_user, ':');; 8576 if (workdata->f_domain == NULL) {; 8577 mg_cry_internal(workdata->conn,; 8578 ""%s: syntax error in authorization file: %s"",; 8579 __func__,; 8580 workdata->buf);; 8581 continue;; 8582 }; 8583 *(char *)(workdata->f_domain) = 0;; 8584 (workdata->f_domain)++;; 8585 ; 8586 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8587 if (workdata->f_ha1 == NULL) {; 8588 mg_cry_internal(workdata->conn,; 8589 ""%s: syntax error in authorization file: %s"",; 8590 __func__,; 8591 workdata->buf);; 8592 continue;; 8593 }; 8594 *(char *)(workdata->f_ha1) = 0;; 8595 (workdata->f_ha1)++;; 8596 ; 8597 if (!strcmp(workdata->ah.user, workdata->f_user); 8598 && !strcmp(workdata->domain, workdata->f_domain)) {; 8599 return check_password(workdata->conn->request_info.request_method,; 8600 workdata->f_ha1,; 8601 workdata->ah.uri,; 8602 workdata->ah.nonce,; 8603 workdata->ah.nc,; 8604 workdata->ah.cnonce,; 8605 workdata->ah.qop,; 8606 workdata->ah.response);; 8607 }; 8608 }; 8609 ; 8610 return is_authorized;; 8611}; 8612 ; 8613 ; 8614/* Autho",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:247481,Availability,error,error,247481,"p(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will reset it back; 8553 * to 0.; 8554 */; 8555 if (is_authorized) {; 8556 return is_authorized;; 8557 }; 8558 } else {; 8559 mg_cry_internal(workdata->conn,; 8560 ""%s: cannot open authorization file: %s"",; 8561 __func__,; 8562 workdata->buf);; 8563 }; 8564 continue;; 8565 }; 8566 /* everything is invalid for the moment (might change in the; 8567 * future) */; 8568 mg_cry_internal(workdata->conn,; 8569 ""%s: syntax error in authorization file: %s"",; 8570 __func__,; 8571 workdata->buf);; 8572 continue;; 8573 }; 8574 ; 8575 workdata->f_domain = strchr(workdata->f_user, ':');; 8576 if (workdata->f_domain == NULL) {; 8577 mg_cry_internal(workdata->conn,; 8578 ""%s: syntax error in authorization file: %s"",; 8579 __func__,; 8580 workdata->buf);; 8581 continue;; 8582 }; 8583 *(char *)(workdata->f_domain) = 0;; 8584 (workdata->f_domain)++;; 8585 ; 8586 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8587 if (workdata->f_ha1 == NULL) {; 8588 mg_cry_internal(workdata->conn,; 8589 ""%s: syntax error in authorization file: %s"",; 8590 __func__,; 8591 workdata->buf);; 8592 continue;; 8593 }; 8594 *(char *)(workdata->f_ha1) = 0;; 8595 (workdata->f_ha1)++;; 8596 ; 8597 if (!strcmp(workdata->ah.user, workdata->f_user); 8598 && !strcmp(workdata->domain, workdata->f_domain)) {; 8599 return check_password(workdata->conn->request_info.request_method,; 8600 workdata->f_ha1,; 8601 workdata->ah.uri,; 8602 workdata->ah.nonce,; 8603 workdata->ah.nc,; 8604 workdata->ah.cnonce,; 8605 workdata->ah.qop,; 8606 workdata->ah.response);; 8607 }; 8608 }; 8609 ; 8610 return is_authorized;; 8611}; 8612 ; 8613 ; 8614/* Autho",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:247805,Availability,error,error,247805,"p(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will reset it back; 8553 * to 0.; 8554 */; 8555 if (is_authorized) {; 8556 return is_authorized;; 8557 }; 8558 } else {; 8559 mg_cry_internal(workdata->conn,; 8560 ""%s: cannot open authorization file: %s"",; 8561 __func__,; 8562 workdata->buf);; 8563 }; 8564 continue;; 8565 }; 8566 /* everything is invalid for the moment (might change in the; 8567 * future) */; 8568 mg_cry_internal(workdata->conn,; 8569 ""%s: syntax error in authorization file: %s"",; 8570 __func__,; 8571 workdata->buf);; 8572 continue;; 8573 }; 8574 ; 8575 workdata->f_domain = strchr(workdata->f_user, ':');; 8576 if (workdata->f_domain == NULL) {; 8577 mg_cry_internal(workdata->conn,; 8578 ""%s: syntax error in authorization file: %s"",; 8579 __func__,; 8580 workdata->buf);; 8581 continue;; 8582 }; 8583 *(char *)(workdata->f_domain) = 0;; 8584 (workdata->f_domain)++;; 8585 ; 8586 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8587 if (workdata->f_ha1 == NULL) {; 8588 mg_cry_internal(workdata->conn,; 8589 ""%s: syntax error in authorization file: %s"",; 8590 __func__,; 8591 workdata->buf);; 8592 continue;; 8593 }; 8594 *(char *)(workdata->f_ha1) = 0;; 8595 (workdata->f_ha1)++;; 8596 ; 8597 if (!strcmp(workdata->ah.user, workdata->f_user); 8598 && !strcmp(workdata->domain, workdata->f_domain)) {; 8599 return check_password(workdata->conn->request_info.request_method,; 8600 workdata->f_ha1,; 8601 workdata->ah.uri,; 8602 workdata->ah.nonce,; 8603 workdata->ah.nc,; 8604 workdata->ah.cnonce,; 8605 workdata->ah.qop,; 8606 workdata->ah.response);; 8607 }; 8608 }; 8609 ; 8610 return is_authorized;; 8611}; 8612 ; 8613 ; 8614/* Autho",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:251040,Availability,error,error,251040,"; 8677 ; 8678 if (!conn || !conn->dom_ctx) {; 8679 return 0;; 8680 }; 8681 ; 8682 list = conn->dom_ctx->config[PROTECT_URI];; 8683 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8684 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8685 mg_snprintf(conn,; 8686 &truncated,; 8687 fname,; 8688 sizeof(fname),; 8689 ""%.*s"",; 8690 (int)filename_vec.len,; 8691 filename_vec.ptr);; 8692 ; 8693 if (truncated; 8694 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8695 mg_cry_internal(conn,; 8696 ""%s: cannot open %s: %s"",; 8697 __func__,; 8698 fname,; 8699 strerror(errno));; 8700 }; 8701 break;; 8702 }; 8703 }; 8704 ; 8705 if (!is_file_opened(&file.access)) {; 8706 open_auth_file(conn, path, &file);; 8707 }; 8708 ; 8709 if (is_file_opened(&file.access)) {; 8710 authorized = authorize(conn, &file, NULL);; 8711 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8712 }; 8713 ; 8714 return authorized;; 8715#else; 8716 (void)conn;; 8717 (void)path;; 8718 return 1;; 8719#endif /* NO_FILESYSTEMS */; 8720}; 8721 ; 8722 ; 8723/* Internal function. Assumes conn is valid */; 8724static void; 8725send_authorization_request(struct mg_connection *conn, const char *realm); 8726{; 8727 uint64_t nonce = (uint64_t)(conn->phys_ctx->start_time);; 8728 int trunc = 0;; 8729 char buf[128];; 8730 ; 8731 if (!realm) {; 8732 realm = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8733 }; 8734 ; 8735 mg_lock_context(conn->phys_ctx);; 8736 nonce += conn->dom_ctx->nonce_count;; 8737 ++conn->dom_ctx->nonce_count;; 8738 mg_unlock_context(conn->phys_ctx);; 8739 ; 8740 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8741 conn->must_close = 1;; 8742 ; 8743 /* Create 401 response */; 8744 mg_response_header_start(conn, 401);; 8745 send_no_cache_header(conn);; 8746 send_additional_header(conn);; 8747 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 8748 ; 8749 /* Content for ""WWW-Authenticate"" header */; 8750 mg_snprintf(conn,; 8751 &trunc,",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:253349,Availability,error,error,253349,"checks.; 8771 */; 8772int; 8773mg_send_digest_access_authentication_request(struct mg_connection *conn,; 8774 const char *realm); 8775{; 8776 if (conn && conn->dom_ctx) {; 8777 send_authorization_request(conn, realm);; 8778 return 0;; 8779 }; 8780 return -1;; 8781}; 8782 ; 8783 ; 8784#if !defined(NO_FILES); 8785static int; 8786is_authorized_for_put(struct mg_connection *conn); 8787{; 8788 if (conn) {; 8789 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8790 const char *passfile = conn->dom_ctx->config[PUT_DELETE_PASSWORDS_FILE];; 8791 int ret = 0;; 8792 ; 8793 if (passfile != NULL; 8794 && mg_fopen(conn, passfile, MG_FOPEN_MODE_READ, &file)) {; 8795 ret = authorize(conn, &file, NULL);; 8796 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8797 }; 8798 ; 8799 return ret;; 8800 }; 8801 return 0;; 8802}; 8803#endif; 8804 ; 8805 ; 8806static int; 8807modify_passwords_file(const char *fname,; 8808 const char *domain,; 8809 const char *user,; 8810 const char *pass,; 8811 const char *ha1); 8812{; 8813 int found, i;; 8814 char line[512], u[512] = """", d[512] = """", ha1buf[33],; 8815 tmp[UTF8_PATH_MAX + 8];; 8816 FILE *fp, *fp2;; 8817 ; 8818 found = 0;; 8819 fp = fp2 = NULL;; 8820 ; 8821 /* Regard empty password as no password - remove user record. */; 8822 if ((pass != NULL) && (pass[0] == '\0')) {; 8823 pass = NULL;; 8824 }; 8825 ; 8826 /* Other arguments must not be empty */; 8827 if ((fname == NULL) || (domain == NULL) || (user == NULL)) {; 8828 return 0;; 8829 }; 8830 ; 8831 /* Using the given file format, user name and domain must not contain; 8832 * ':'; 8833 */; 8834 if (strchr(user, ':') != NULL) {; 8835 return 0;; 8836 }; 8837 if (strchr(domain, ':') != NULL) {; 8838 return 0;; 8839 }; 8840 ; 8841 /* Do not allow control characters like newline in user name and domain.; 8842 * Do not allow excessively long names either. */; 8843 for (i = 0; ((i < 255) && (user[i] != 0)); i++) {; 8844 if (iscntrl((unsigned char)user[i])) {; 8845 return 0;; 8846 }; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:265184,Availability,error,error,265184,"fd[1];; 9203 int pollres;; 9204 int ms_wait = 10000; /* 10 second timeout */; 9205 stop_flag_t nonstop;; 9206 STOP_FLAG_ASSIGN(&nonstop, 0);; 9207 ; 9208 /* For a non-blocking socket, the connect sequence is:; 9209 * 1) call connect (will not block); 9210 * 2) wait until the socket is ready for writing (select or poll); 9211 * 3) check connection state with getsockopt; 9212 */; 9213 pfd[0].fd = *sock;; 9214 pfd[0].events = POLLOUT;; 9215 pollres = mg_poll(pfd, 1, ms_wait, ctx ? &(ctx->stop_flag) : &nonstop);; 9216 ; 9217 if (pollres != 1) {; 9218 /* Not connected */; 9219 mg_snprintf(NULL,; 9220 NULL, /* No truncation check for ebuf */; 9221 ebuf,; 9222 ebuf_len,; 9223 ""connect(%s:%d): timeout"",; 9224 host,; 9225 port);; 9226 closesocket(*sock);; 9227 *sock = INVALID_SOCKET;; 9228 return 0;; 9229 }; 9230 ; 9231#if defined(_WIN32); 9232 ret = getsockopt(*sock, SOL_SOCKET, SO_ERROR, (char *)psockerr, &len);; 9233#else; 9234 ret = getsockopt(*sock, SOL_SOCKET, SO_ERROR, psockerr, &len);; 9235#endif; 9236 ; 9237 if ((ret == 0) && (sockerr == 0)) {; 9238 conn_ret = 0;; 9239 }; 9240 }; 9241 ; 9242 if (conn_ret != 0) {; 9243 /* Not connected */; 9244 mg_snprintf(NULL,; 9245 NULL, /* No truncation check for ebuf */; 9246 ebuf,; 9247 ebuf_len,; 9248 ""connect(%s:%d): error %s"",; 9249 host,; 9250 port,; 9251 strerror(sockerr));; 9252 closesocket(*sock);; 9253 *sock = INVALID_SOCKET;; 9254 return 0;; 9255 }; 9256 ; 9257 return 1;; 9258}; 9259 ; 9260 ; 9261int; 9262mg_url_encode(const char *src, char *dst, size_t dst_len); 9263{; 9264 static const char *dont_escape = ""._-$,;~()"";; 9265 static const char *hex = ""0123456789abcdef"";; 9266 char *pos = dst;; 9267 const char *end = dst + dst_len - 1;; 9268 ; 9269 for (; ((*src != '\0') && (pos < end)); src++, pos++) {; 9270 if (isalnum((unsigned char)*src); 9271 || (strchr(dont_escape, *src) != NULL)) {; 9272 *pos = *src;; 9273 } else if (pos + 2 < end) {; 9274 pos[0] = '%';; 9275 pos[1] = hex[(unsigned char)*src >> 4];; 9276 pos[2] = ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:266136,Availability,error,error,266136,"len);; 9233#else; 9234 ret = getsockopt(*sock, SOL_SOCKET, SO_ERROR, psockerr, &len);; 9235#endif; 9236 ; 9237 if ((ret == 0) && (sockerr == 0)) {; 9238 conn_ret = 0;; 9239 }; 9240 }; 9241 ; 9242 if (conn_ret != 0) {; 9243 /* Not connected */; 9244 mg_snprintf(NULL,; 9245 NULL, /* No truncation check for ebuf */; 9246 ebuf,; 9247 ebuf_len,; 9248 ""connect(%s:%d): error %s"",; 9249 host,; 9250 port,; 9251 strerror(sockerr));; 9252 closesocket(*sock);; 9253 *sock = INVALID_SOCKET;; 9254 return 0;; 9255 }; 9256 ; 9257 return 1;; 9258}; 9259 ; 9260 ; 9261int; 9262mg_url_encode(const char *src, char *dst, size_t dst_len); 9263{; 9264 static const char *dont_escape = ""._-$,;~()"";; 9265 static const char *hex = ""0123456789abcdef"";; 9266 char *pos = dst;; 9267 const char *end = dst + dst_len - 1;; 9268 ; 9269 for (; ((*src != '\0') && (pos < end)); src++, pos++) {; 9270 if (isalnum((unsigned char)*src); 9271 || (strchr(dont_escape, *src) != NULL)) {; 9272 *pos = *src;; 9273 } else if (pos + 2 < end) {; 9274 pos[0] = '%';; 9275 pos[1] = hex[(unsigned char)*src >> 4];; 9276 pos[2] = hex[(unsigned char)*src & 0xf];; 9277 pos += 2;; 9278 } else {; 9279 break;; 9280 }; 9281 }; 9282 ; 9283 *pos = '\0';; 9284 return (*src == '\0') ? (int)(pos - dst) : -1;; 9285}; 9286 ; 9287/* Return 0 on success, non-zero if an error occurs. */; 9288 ; 9289static int; 9290print_dir_entry(struct de *de); 9291{; 9292 size_t namesize, escsize, i;; 9293 char *href, *esc, *p;; 9294 char size[64], mod[64];; 9295#if defined(REENTRANT_TIME); 9296 struct tm _tm;; 9297 struct tm *tm = &_tm;; 9298#else; 9299 struct tm *tm;; 9300#endif; 9301 ; 9302 /* Estimate worst case size for encoding and escaping */; 9303 namesize = strlen(de->file_name) + 1;; 9304 escsize = de->file_name[strcspn(de->file_name, ""&<>"")] ? namesize * 5 : 0;; 9305 href = (char *)mg_malloc(namesize * 3 + escsize);; 9306 if (href == NULL) {; 9307 return -1;; 9308 }; 9309 mg_url_encode(de->file_name, href, namesize * 3);; 9310 esc = NULL;; 9311",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:279185,Availability,avail,available,279185,"ntries[i].file_name);; 9717 }; 9718 mg_free(data.entries);; 9719 }; 9720 ; 9721 mg_printf(conn, ""%s"", ""</table></pre></body></html>"");; 9722 conn->status_code = 200;; 9723}; 9724#endif /* NO_FILESYSTEMS */; 9725 ; 9726 ; 9727/* Send len bytes from the opened file to the client. */; 9728static void; 9729send_file_data(struct mg_connection *conn,; 9730 struct mg_file *filep,; 9731 int64_t offset,; 9732 int64_t len); 9733{; 9734 char buf[MG_BUF_LEN];; 9735 int to_read, num_read, num_written;; 9736 int64_t size;; 9737 ; 9738 if (!filep || !conn) {; 9739 return;; 9740 }; 9741 ; 9742 /* Sanity check the offset */; 9743 size = (filep->stat.size > INT64_MAX) ? INT64_MAX; 9744 : (int64_t)(filep->stat.size);; 9745 offset = (offset < 0) ? 0 : ((offset > size) ? size : offset);; 9746 ; 9747 if (len > 0 && filep->access.fp != NULL) {; 9748 /* file stored on disk */; 9749#if defined(__linux__); 9750 /* sendfile is only available for Linux */; 9751 if ((conn->ssl == 0) && (conn->throttle == 0); 9752 && (!mg_strcasecmp(conn->dom_ctx->config[ALLOW_SENDFILE_CALL],; 9753 ""yes""))) {; 9754 off_t sf_offs = (off_t)offset;; 9755 ssize_t sf_sent;; 9756 int sf_file = fileno(filep->access.fp);; 9757 int loop_cnt = 0;; 9758 ; 9759 do {; 9760 /* 2147479552 (0x7FFFF000) is a limit found by experiment on; 9761 * 64 bit Linux (2^31 minus one memory page of 4k?). */; 9762 size_t sf_tosend =; 9763 (size_t)((len < 0x7FFFF000) ? len : 0x7FFFF000);; 9764 sf_sent =; 9765 sendfile(conn->client.sock, sf_file, &sf_offs, sf_tosend);; 9766 if (sf_sent > 0) {; 9767 len -= sf_sent;; 9768 offset += sf_sent;; 9769 } else if (loop_cnt == 0) {; 9770 /* This file can not be sent using sendfile.; 9771 * This might be the case for pseudo-files in the; 9772 * /sys/ and /proc/ file system.; 9773 * Use the regular user mode copy code instead. */; 9774 break;; 9775 } else if (sf_sent == 0) {; 9776 /* No error, but 0 bytes sent. May be EOF? */; 9777 return;; 9778 }; 9779 loop_cnt++;; 9780 ; 9781 } while ((len > 0) && (sf_",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:280147,Availability,error,error,280147,"*/; 9749#if defined(__linux__); 9750 /* sendfile is only available for Linux */; 9751 if ((conn->ssl == 0) && (conn->throttle == 0); 9752 && (!mg_strcasecmp(conn->dom_ctx->config[ALLOW_SENDFILE_CALL],; 9753 ""yes""))) {; 9754 off_t sf_offs = (off_t)offset;; 9755 ssize_t sf_sent;; 9756 int sf_file = fileno(filep->access.fp);; 9757 int loop_cnt = 0;; 9758 ; 9759 do {; 9760 /* 2147479552 (0x7FFFF000) is a limit found by experiment on; 9761 * 64 bit Linux (2^31 minus one memory page of 4k?). */; 9762 size_t sf_tosend =; 9763 (size_t)((len < 0x7FFFF000) ? len : 0x7FFFF000);; 9764 sf_sent =; 9765 sendfile(conn->client.sock, sf_file, &sf_offs, sf_tosend);; 9766 if (sf_sent > 0) {; 9767 len -= sf_sent;; 9768 offset += sf_sent;; 9769 } else if (loop_cnt == 0) {; 9770 /* This file can not be sent using sendfile.; 9771 * This might be the case for pseudo-files in the; 9772 * /sys/ and /proc/ file system.; 9773 * Use the regular user mode copy code instead. */; 9774 break;; 9775 } else if (sf_sent == 0) {; 9776 /* No error, but 0 bytes sent. May be EOF? */; 9777 return;; 9778 }; 9779 loop_cnt++;; 9780 ; 9781 } while ((len > 0) && (sf_sent >= 0));; 9782 ; 9783 if (sf_sent > 0) {; 9784 return; /* OK */; 9785 }; 9786 ; 9787 /* sf_sent<0 means error, thus fall back to the classic way */; 9788 /* This is always the case, if sf_file is not a ""normal"" file,; 9789 * e.g., for sending data from the output of a CGI process. */; 9790 offset = (int64_t)sf_offs;; 9791 }; 9792#endif; 9793 if ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {; 9794 mg_cry_internal(conn,; 9795 ""%s: fseeko() failed: %s"",; 9796 __func__,; 9797 strerror(ERRNO));; 9798 mg_send_http_error(; 9799 conn,; 9800 500,; 9801 ""%s"",; 9802 ""Error: Unable to access file at requested position."");; 9803 } else {; 9804 while (len > 0) {; 9805 /* Calculate how much to read from the file in the buffer */; 9806 to_read = sizeof(buf);; 9807 if ((int64_t)to_read > len) {; 9808 to_read = (int)len;; 9809 }; 9810 ; 9811",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:280374,Availability,error,error,280374," ""yes""))) {; 9754 off_t sf_offs = (off_t)offset;; 9755 ssize_t sf_sent;; 9756 int sf_file = fileno(filep->access.fp);; 9757 int loop_cnt = 0;; 9758 ; 9759 do {; 9760 /* 2147479552 (0x7FFFF000) is a limit found by experiment on; 9761 * 64 bit Linux (2^31 minus one memory page of 4k?). */; 9762 size_t sf_tosend =; 9763 (size_t)((len < 0x7FFFF000) ? len : 0x7FFFF000);; 9764 sf_sent =; 9765 sendfile(conn->client.sock, sf_file, &sf_offs, sf_tosend);; 9766 if (sf_sent > 0) {; 9767 len -= sf_sent;; 9768 offset += sf_sent;; 9769 } else if (loop_cnt == 0) {; 9770 /* This file can not be sent using sendfile.; 9771 * This might be the case for pseudo-files in the; 9772 * /sys/ and /proc/ file system.; 9773 * Use the regular user mode copy code instead. */; 9774 break;; 9775 } else if (sf_sent == 0) {; 9776 /* No error, but 0 bytes sent. May be EOF? */; 9777 return;; 9778 }; 9779 loop_cnt++;; 9780 ; 9781 } while ((len > 0) && (sf_sent >= 0));; 9782 ; 9783 if (sf_sent > 0) {; 9784 return; /* OK */; 9785 }; 9786 ; 9787 /* sf_sent<0 means error, thus fall back to the classic way */; 9788 /* This is always the case, if sf_file is not a ""normal"" file,; 9789 * e.g., for sending data from the output of a CGI process. */; 9790 offset = (int64_t)sf_offs;; 9791 }; 9792#endif; 9793 if ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {; 9794 mg_cry_internal(conn,; 9795 ""%s: fseeko() failed: %s"",; 9796 __func__,; 9797 strerror(ERRNO));; 9798 mg_send_http_error(; 9799 conn,; 9800 500,; 9801 ""%s"",; 9802 ""Error: Unable to access file at requested position."");; 9803 } else {; 9804 while (len > 0) {; 9805 /* Calculate how much to read from the file in the buffer */; 9806 to_read = sizeof(buf);; 9807 if ((int64_t)to_read > len) {; 9808 to_read = (int)len;; 9809 }; 9810 ; 9811 /* Read from file, exit the loop on error */; 9812 if ((num_read =; 9813 (int)fread(buf, 1, (size_t)to_read, filep->access.fp)); 9814 <= 0) {; 9815 break;; 9816 }; 9817 ; 9818 /* Send read bytes to the cli",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:281165,Availability,error,error,281165,"stead. */; 9774 break;; 9775 } else if (sf_sent == 0) {; 9776 /* No error, but 0 bytes sent. May be EOF? */; 9777 return;; 9778 }; 9779 loop_cnt++;; 9780 ; 9781 } while ((len > 0) && (sf_sent >= 0));; 9782 ; 9783 if (sf_sent > 0) {; 9784 return; /* OK */; 9785 }; 9786 ; 9787 /* sf_sent<0 means error, thus fall back to the classic way */; 9788 /* This is always the case, if sf_file is not a ""normal"" file,; 9789 * e.g., for sending data from the output of a CGI process. */; 9790 offset = (int64_t)sf_offs;; 9791 }; 9792#endif; 9793 if ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {; 9794 mg_cry_internal(conn,; 9795 ""%s: fseeko() failed: %s"",; 9796 __func__,; 9797 strerror(ERRNO));; 9798 mg_send_http_error(; 9799 conn,; 9800 500,; 9801 ""%s"",; 9802 ""Error: Unable to access file at requested position."");; 9803 } else {; 9804 while (len > 0) {; 9805 /* Calculate how much to read from the file in the buffer */; 9806 to_read = sizeof(buf);; 9807 if ((int64_t)to_read > len) {; 9808 to_read = (int)len;; 9809 }; 9810 ; 9811 /* Read from file, exit the loop on error */; 9812 if ((num_read =; 9813 (int)fread(buf, 1, (size_t)to_read, filep->access.fp)); 9814 <= 0) {; 9815 break;; 9816 }; 9817 ; 9818 /* Send read bytes to the client, exit the loop on error */; 9819 if ((num_written = mg_write(conn, buf, (size_t)num_read)); 9820 != num_read) {; 9821 break;; 9822 }; 9823 ; 9824 /* Both read and were successful, adjust counters */; 9825 len -= num_written;; 9826 }; 9827 }; 9828 }; 9829}; 9830 ; 9831 ; 9832static int; 9833parse_range_header(const char *header, int64_t *a, int64_t *b); 9834{; 9835 return sscanf(header,; 9836 ""bytes=%"" INT64_FMT ""-%"" INT64_FMT,; 9837 a,; 9838 b); // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 9839 // to an integer value, but function will not report; 9840 // conversion errors; consider using 'strtol' instead; 9841}; 9842 ; 9843 ; 9844static void; 9845construct_etag(char *buf, size_t buf_len, const struct mg_file_stat *fil",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:281356,Availability,error,error,281356,"_,; 9797 strerror(ERRNO));; 9798 mg_send_http_error(; 9799 conn,; 9800 500,; 9801 ""%s"",; 9802 ""Error: Unable to access file at requested position."");; 9803 } else {; 9804 while (len > 0) {; 9805 /* Calculate how much to read from the file in the buffer */; 9806 to_read = sizeof(buf);; 9807 if ((int64_t)to_read > len) {; 9808 to_read = (int)len;; 9809 }; 9810 ; 9811 /* Read from file, exit the loop on error */; 9812 if ((num_read =; 9813 (int)fread(buf, 1, (size_t)to_read, filep->access.fp)); 9814 <= 0) {; 9815 break;; 9816 }; 9817 ; 9818 /* Send read bytes to the client, exit the loop on error */; 9819 if ((num_written = mg_write(conn, buf, (size_t)num_read)); 9820 != num_read) {; 9821 break;; 9822 }; 9823 ; 9824 /* Both read and were successful, adjust counters */; 9825 len -= num_written;; 9826 }; 9827 }; 9828 }; 9829}; 9830 ; 9831 ; 9832static int; 9833parse_range_header(const char *header, int64_t *a, int64_t *b); 9834{; 9835 return sscanf(header,; 9836 ""bytes=%"" INT64_FMT ""-%"" INT64_FMT,; 9837 a,; 9838 b); // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 9839 // to an integer value, but function will not report; 9840 // conversion errors; consider using 'strtol' instead; 9841}; 9842 ; 9843 ; 9844static void; 9845construct_etag(char *buf, size_t buf_len, const struct mg_file_stat *filestat); 9846{; 9847 if ((filestat != NULL) && (buf != NULL)) {; 9848 mg_snprintf(NULL,; 9849 NULL, /* All calls to construct_etag use 64 byte buffer */; 9850 buf,; 9851 buf_len,; 9852 ""\""%lx.%"" INT64_FMT ""\"""",; 9853 (unsigned long)filestat->last_modified,; 9854 filestat->size);; 9855 }; 9856}; 9857 ; 9858 ; 9859static void; 9860fclose_on_exec(struct mg_file_access *filep, struct mg_connection *conn); 9861{; 9862 if (filep != NULL && filep->fp != NULL) {; 9863#if defined(_WIN32); 9864 (void)conn; /* Unused. */; 9865#else; 9866 if (fcntl(fileno(filep->fp), F_SETFD, FD_CLOEXEC) != 0) {; 9867 mg_cry_internal(conn,; 9868 ""%s: fcntl(F_SETFD FD_CLOEXEC) failed: %s"",; 9869 __func__",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:281925,Availability,error,errors,281925,"_,; 9797 strerror(ERRNO));; 9798 mg_send_http_error(; 9799 conn,; 9800 500,; 9801 ""%s"",; 9802 ""Error: Unable to access file at requested position."");; 9803 } else {; 9804 while (len > 0) {; 9805 /* Calculate how much to read from the file in the buffer */; 9806 to_read = sizeof(buf);; 9807 if ((int64_t)to_read > len) {; 9808 to_read = (int)len;; 9809 }; 9810 ; 9811 /* Read from file, exit the loop on error */; 9812 if ((num_read =; 9813 (int)fread(buf, 1, (size_t)to_read, filep->access.fp)); 9814 <= 0) {; 9815 break;; 9816 }; 9817 ; 9818 /* Send read bytes to the client, exit the loop on error */; 9819 if ((num_written = mg_write(conn, buf, (size_t)num_read)); 9820 != num_read) {; 9821 break;; 9822 }; 9823 ; 9824 /* Both read and were successful, adjust counters */; 9825 len -= num_written;; 9826 }; 9827 }; 9828 }; 9829}; 9830 ; 9831 ; 9832static int; 9833parse_range_header(const char *header, int64_t *a, int64_t *b); 9834{; 9835 return sscanf(header,; 9836 ""bytes=%"" INT64_FMT ""-%"" INT64_FMT,; 9837 a,; 9838 b); // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 9839 // to an integer value, but function will not report; 9840 // conversion errors; consider using 'strtol' instead; 9841}; 9842 ; 9843 ; 9844static void; 9845construct_etag(char *buf, size_t buf_len, const struct mg_file_stat *filestat); 9846{; 9847 if ((filestat != NULL) && (buf != NULL)) {; 9848 mg_snprintf(NULL,; 9849 NULL, /* All calls to construct_etag use 64 byte buffer */; 9850 buf,; 9851 buf_len,; 9852 ""\""%lx.%"" INT64_FMT ""\"""",; 9853 (unsigned long)filestat->last_modified,; 9854 filestat->size);; 9855 }; 9856}; 9857 ; 9858 ; 9859static void; 9860fclose_on_exec(struct mg_file_access *filep, struct mg_connection *conn); 9861{; 9862 if (filep != NULL && filep->fp != NULL) {; 9863#if defined(_WIN32); 9864 (void)conn; /* Unused. */; 9865#else; 9866 if (fcntl(fileno(filep->fp), F_SETFD, FD_CLOEXEC) != 0) {; 9867 mg_cry_internal(conn,; 9868 ""%s: fcntl(F_SETFD FD_CLOEXEC) failed: %s"",; 9869 __func__",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:287094,Availability,error,error,287094," }; 9984 ; 9985 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {; 9986 mg_send_http_error(conn,; 9987 500,; 9988 ""Error: Cannot open file\nfopen(%s): %s"",; 9989 path,; 9990 strerror(ERRNO));; 9991 return;; 9992 }; 9993 ; 9994 fclose_on_exec(&filep->access, conn);; 9995 ; 9996 /* If ""Range"" request was made: parse header, send only selected part; 9997 * of the file. */; 9998 r1 = r2 = 0;; 9999 if ((range_hdr != NULL); 10000 && ((n = parse_range_header(range_hdr, &r1, &r2)) > 0) && (r1 >= 0); 10001 && (r2 >= 0)) {; 10002 /* actually, range requests don't play well with a pre-gzipped; 10003 * file (since the range is specified in the uncompressed space) */; 10004 if (filep->stat.is_gzipped) {; 10005 mg_send_http_error(; 10006 conn,; 10007 416, /* 416 = Range Not Satisfiable */; 10008 ""%s"",; 10009 ""Error: Range requests in gzipped files are not supported"");; 10010 (void)mg_fclose(; 10011 &filep->access); /* ignore error on read only file */; 10012 return;; 10013 }; 10014 conn->status_code = 206;; 10015 cl = (n == 2) ? (((r2 > cl) ? cl : r2) - r1 + 1) : (cl - r1);; 10016 mg_snprintf(conn,; 10017 NULL, /* range buffer is big enough */; 10018 range,; 10019 sizeof(range),; 10020 ""bytes ""; 10021 ""%"" INT64_FMT ""-%"" INT64_FMT ""/%"" INT64_FMT,; 10022 r1,; 10023 r1 + cl - 1,; 10024 filep->stat.size);; 10025 ; 10026#if defined(USE_ZLIB); 10027 /* Do not compress ranges. */; 10028 allow_on_the_fly_compression = 0;; 10029#endif; 10030 }; 10031 ; 10032 /* Do not compress small files. Small files do not benefit from file; 10033 * compression, but there is still some overhead. */; 10034#if defined(USE_ZLIB); 10035 if (filep->stat.size < MG_FILE_COMPRESSION_SIZE_LIMIT) {; 10036 /* File is below the size limit. */; 10037 allow_on_the_fly_compression = 0;; 10038 }; 10039#endif; 10040 ; 10041 /* Standard CORS header */; 10042 cors_orig_cfg = conn->dom_ctx->config[ACCESS_CONTROL_ALLOW_ORIGIN];; 10043 origin_hdr = mg_get_header(conn, ""Origin"");; 10044 if (cors_orig_cfg && *cors_orig_c",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:291620,Availability,error,error,291620,"8#endif; 10099 {; 10100 /* Without on-the-fly compression, we know the content-length; 10101 * and we can use ranges (with on-the-fly compression we cannot).; 10102 * So we send these response headers only in this case. */; 10103 char len[32];; 10104 int trunc = 0;; 10105 mg_snprintf(conn, &trunc, len, sizeof(len), ""%"" INT64_FMT, cl);; 10106 ; 10107 if (!trunc) {; 10108 mg_response_header_add(conn, ""Content-Length"", len, -1);; 10109 }; 10110 ; 10111 mg_response_header_add(conn, ""Accept-Ranges"", ""bytes"", -1);; 10112 }; 10113 ; 10114 if (encoding) {; 10115 mg_response_header_add(conn, ""Content-Encoding"", encoding, -1);; 10116 }; 10117 if (range[0] != 0) {; 10118 mg_response_header_add(conn, ""Content-Range"", range, -1);; 10119 }; 10120 ; 10121 /* The code above does not add any header starting with X- to make; 10122 * sure no one of the additional_headers is included twice */; 10123 if ((additional_headers != NULL) && (*additional_headers != 0)) {; 10124 mg_response_header_add_lines(conn, additional_headers);; 10125 }; 10126 ; 10127 /* Send all headers */; 10128 mg_response_header_send(conn);; 10129 ; 10130 if (!is_head_request) {; 10131#if defined(USE_ZLIB); 10132 if (allow_on_the_fly_compression) {; 10133 /* Compress and send */; 10134 send_compressed_data(conn, filep);; 10135 } else; 10136#endif; 10137 {; 10138 /* Send file directly */; 10139 send_file_data(conn, filep, r1, cl);; 10140 }; 10141 }; 10142 (void)mg_fclose(&filep->access); /* ignore error on read only file */; 10143}; 10144 ; 10145 ; 10146int; 10147mg_send_file_body(struct mg_connection *conn, const char *path); 10148{; 10149 struct mg_file file = STRUCT_FILE_INITIALIZER;; 10150 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 10151 return -1;; 10152 }; 10153 fclose_on_exec(&file.access, conn);; 10154 send_file_data(conn, &file, 0, INT64_MAX);; 10155 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 10156 return 0; /* >= 0 for OK */; 10157}; 10158#endif /* NO_FILESYSTEMS */;",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:292044,Availability,error,errors,292044,"lines(conn, additional_headers);; 10125 }; 10126 ; 10127 /* Send all headers */; 10128 mg_response_header_send(conn);; 10129 ; 10130 if (!is_head_request) {; 10131#if defined(USE_ZLIB); 10132 if (allow_on_the_fly_compression) {; 10133 /* Compress and send */; 10134 send_compressed_data(conn, filep);; 10135 } else; 10136#endif; 10137 {; 10138 /* Send file directly */; 10139 send_file_data(conn, filep, r1, cl);; 10140 }; 10141 }; 10142 (void)mg_fclose(&filep->access); /* ignore error on read only file */; 10143}; 10144 ; 10145 ; 10146int; 10147mg_send_file_body(struct mg_connection *conn, const char *path); 10148{; 10149 struct mg_file file = STRUCT_FILE_INITIALIZER;; 10150 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 10151 return -1;; 10152 }; 10153 fclose_on_exec(&file.access, conn);; 10154 send_file_data(conn, &file, 0, INT64_MAX);; 10155 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 10156 return 0; /* >= 0 for OK */; 10157}; 10158#endif /* NO_FILESYSTEMS */; 10159 ; 10160 ; 10161#if !defined(NO_CACHING); 10162/* Return True if we should reply 304 Not Modified. */; 10163static int; 10164is_not_modified(const struct mg_connection *conn,; 10165 const struct mg_file_stat *filestat); 10166{; 10167 char etag[64];; 10168 const char *ims = mg_get_header(conn, ""If-Modified-Since"");; 10169 const char *inm = mg_get_header(conn, ""If-None-Match"");; 10170 construct_etag(etag, sizeof(etag), filestat);; 10171 ; 10172 return ((inm != NULL) && !mg_strcasecmp(etag, inm)); 10173 || ((ims != NULL); 10174 && (filestat->last_modified <= parse_date_string(ims)));; 10175}; 10176 ; 10177 ; 10178static void; 10179handle_not_modified_static_file_request(struct mg_connection *conn,; 10180 struct mg_file *filep); 10181{; 10182 char lm[64], etag[64];; 10183 ; 10184 if ((conn == NULL) || (filep == NULL)) {; 10185 return;; 10186 }; 10187 ; 10188 gmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);; 10189 construct_etag(etag, sizeof(etag), &filep->stat);",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:297791,Availability,error,error,297791,"->consumed_content != 0) {; 10326 mg_cry_internal(conn, ""%s: Contents already consumed"", __func__);; 10327 return -11;; 10328 }; 10329 ; 10330 ret = put_dir(conn, path);; 10331 if (ret < 0) {; 10332 /* -1 for path too long,; 10333 * -2 for path can not be created. */; 10334 return ret;; 10335 }; 10336 if (ret != 1) {; 10337 /* Return 0 means, path itself is a directory. */; 10338 return 0;; 10339 }; 10340 ; 10341 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10342 return -12;; 10343 }; 10344 ; 10345 ret = mg_read(conn, buf, sizeof(buf));; 10346 while (ret > 0) {; 10347 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10348 if (n != ret) {; 10349 (void)mg_fclose(; 10350 &fi.access); /* File is bad and will be removed anyway. */; 10351 remove_bad_file(conn, path);; 10352 return -13;; 10353 }; 10354 len += ret;; 10355 ret = mg_read(conn, buf, sizeof(buf));; 10356 }; 10357 ; 10358 /* File is open for writing. If fclose fails, there was probably an; 10359 * error flushing the buffer to disk, so the file on disk might be; 10360 * broken. Delete it and return an error to the caller. */; 10361 if (mg_fclose(&fi.access) != 0) {; 10362 remove_bad_file(conn, path);; 10363 return -14;; 10364 }; 10365 ; 10366 return len;; 10367}; 10368#endif /* NO_FILESYSTEMS */; 10369 ; 10370 ; 10371/* Parse a buffer:; 10372 * Forward the string pointer till the end of a word, then; 10373 * terminate it and forward till the begin of the next word.; 10374 */; 10375static int; 10376skip_to_end_of_word_and_terminate(char **ppw, int eol); 10377{; 10378 /* Forward until a space is found - use isgraph here */; 10379 /* See http://www.cplusplus.com/reference/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {; 10381 (*ppw)++;; 10382 }; 10383 ; 10384 /* Check end of word */; 10385 if (eol) {; 10386 /* must be a end of line */; 10387 if ((**ppw != '\r') && (**ppw != '\n')) {; 10388 return -1;; 10389 }; 10390 } else {; 10391 /* must be a end of a word, but not a line */; 10392 if (",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:297896,Availability,error,error,297896,", __func__);; 10327 return -11;; 10328 }; 10329 ; 10330 ret = put_dir(conn, path);; 10331 if (ret < 0) {; 10332 /* -1 for path too long,; 10333 * -2 for path can not be created. */; 10334 return ret;; 10335 }; 10336 if (ret != 1) {; 10337 /* Return 0 means, path itself is a directory. */; 10338 return 0;; 10339 }; 10340 ; 10341 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10342 return -12;; 10343 }; 10344 ; 10345 ret = mg_read(conn, buf, sizeof(buf));; 10346 while (ret > 0) {; 10347 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10348 if (n != ret) {; 10349 (void)mg_fclose(; 10350 &fi.access); /* File is bad and will be removed anyway. */; 10351 remove_bad_file(conn, path);; 10352 return -13;; 10353 }; 10354 len += ret;; 10355 ret = mg_read(conn, buf, sizeof(buf));; 10356 }; 10357 ; 10358 /* File is open for writing. If fclose fails, there was probably an; 10359 * error flushing the buffer to disk, so the file on disk might be; 10360 * broken. Delete it and return an error to the caller. */; 10361 if (mg_fclose(&fi.access) != 0) {; 10362 remove_bad_file(conn, path);; 10363 return -14;; 10364 }; 10365 ; 10366 return len;; 10367}; 10368#endif /* NO_FILESYSTEMS */; 10369 ; 10370 ; 10371/* Parse a buffer:; 10372 * Forward the string pointer till the end of a word, then; 10373 * terminate it and forward till the begin of the next word.; 10374 */; 10375static int; 10376skip_to_end_of_word_and_terminate(char **ppw, int eol); 10377{; 10378 /* Forward until a space is found - use isgraph here */; 10379 /* See http://www.cplusplus.com/reference/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {; 10381 (*ppw)++;; 10382 }; 10383 ; 10384 /* Check end of word */; 10385 if (eol) {; 10386 /* must be a end of line */; 10387 if ((**ppw != '\r') && (**ppw != '\n')) {; 10388 return -1;; 10389 }; 10390 } else {; 10391 /* must be a end of a word, but not a line */; 10392 if (**ppw != ' ') {; 10393 return -1;; 10394 }; 10395 }; 10396 ; 10397 /* Terminate and for",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:299482,Availability,error,error,299482,"e/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {; 10381 (*ppw)++;; 10382 }; 10383 ; 10384 /* Check end of word */; 10385 if (eol) {; 10386 /* must be a end of line */; 10387 if ((**ppw != '\r') && (**ppw != '\n')) {; 10388 return -1;; 10389 }; 10390 } else {; 10391 /* must be a end of a word, but not a line */; 10392 if (**ppw != ' ') {; 10393 return -1;; 10394 }; 10395 }; 10396 ; 10397 /* Terminate and forward to the next word */; 10398 do {; 10399 **ppw = 0;; 10400 (*ppw)++;; 10401 } while (isspace((unsigned char)**ppw));; 10402 ; 10403 /* Check after term */; 10404 if (!eol) {; 10405 /* if it's not the end of line, there must be a next word */; 10406 if (!isgraph((unsigned char)**ppw)) {; 10407 return -1;; 10408 }; 10409 }; 10410 ; 10411 /* ok */; 10412 return 1;; 10413}; 10414 ; 10415 ; 10416/* Parse HTTP headers from the given buffer, advance buf pointer; 10417 * to the point where parsing stopped.; 10418 * All parameters must be valid pointers (not NULL).; 10419 * Return <0 on error. */; 10420static int; 10421parse_http_headers(char **buf, struct mg_header hdr[MG_MAX_HEADERS]); 10422{; 10423 int i;; 10424 int num_headers = 0;; 10425 ; 10426 for (i = 0; i < (int)MG_MAX_HEADERS; i++) {; 10427 char *dp = *buf;; 10428 ; 10429 /* Skip all ASCII characters (>SPACE, <127), to find a ':' */; 10430 while ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {; 10431 dp++;; 10432 }; 10433 if (dp == *buf) {; 10434 /* End of headers reached. */; 10435 break;; 10436 }; 10437 ; 10438 /* Drop all spaces after header name before : */; 10439 while (*dp == ' ') {; 10440 *dp = 0;; 10441 dp++;; 10442 }; 10443 if (*dp != ':') {; 10444 /* This is not a valid field. */; 10445 return -1;; 10446 }; 10447 ; 10448 /* End of header key (*dp == ':') */; 10449 /* Truncate here and set the key name */; 10450 *dp = 0;; 10451 hdr[i].name = *buf;; 10452 ; 10453 /* Skip all spaces */; 10454 do {; 10455 dp++;; 10456 } while ((*dp == ' ') || (*dp == '\t'));; 10457 ; 10458 /* The rest of the lin",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:305121,Availability,error,error,305121," known to the server. The list of all known; 10574 * HTTP methods can be found here at; 10575 * http://www.iana.org/assignments/http-methods/http-methods.xhtml; 10576 */; 10577 const struct mg_http_method_info *m = http_methods;; 10578 ; 10579 while (m->name) {; 10580 if (!strcmp(m->name, method)) {; 10581 return m;; 10582 }; 10583 m++;; 10584 }; 10585 return NULL;; 10586}; 10587 ; 10588 ; 10589static int; 10590is_valid_http_method(const char *method); 10591{; 10592 return (get_http_method_info(method) != NULL);; 10593}; 10594 ; 10595 ; 10596/* Parse HTTP request, fill in mg_request_info structure.; 10597 * This function modifies the buffer by NUL-terminating; 10598 * HTTP request components, header names and header values.; 10599 * Parameters:; 10600 * buf (in/out): pointer to the HTTP header to parse and split; 10601 * len (in): length of HTTP header buffer; 10602 * re (out): parsed header as mg_request_info; 10603 * buf and ri must be valid pointers (not NULL), len>0.; 10604 * Returns <0 on error. */; 10605static int; 10606parse_http_request(char *buf, int len, struct mg_request_info *ri); 10607{; 10608 int request_length;; 10609 int init_skip = 0;; 10610 ; 10611 /* Reset attributes. DO NOT TOUCH is_ssl, remote_addr,; 10612 * remote_port */; 10613 ri->remote_user = ri->request_method = ri->request_uri = ri->http_version =; 10614 NULL;; 10615 ri->num_headers = 0;; 10616 ; 10617 /* RFC says that all initial whitespaces should be ignored */; 10618 /* This included all leading \r and \n (isspace) */; 10619 /* See table: http://www.cplusplus.com/reference/cctype/ */; 10620 while ((len > 0) && isspace((unsigned char)*buf)) {; 10621 buf++;; 10622 len--;; 10623 init_skip++;; 10624 }; 10625 ; 10626 if (len == 0) {; 10627 /* Incomplete request */; 10628 return 0;; 10629 }; 10630 ; 10631 /* Control characters are not allowed, including zero */; 10632 if (iscntrl((unsigned char)*buf)) {; 10633 return -1;; 10634 }; 10635 ; 10636 /* Find end of HTTP header */; 10637 request_le",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:312217,Availability,error,error,312217,"000.0;; 10829 }; 10830 }; 10831 ; 10832 request_len = get_http_header_len(buf, *nread);; 10833 ; 10834 while (request_len == 0) {; 10835 /* Full request not yet received */; 10836 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 10837 /* Server is to be stopped. */; 10838 return -1;; 10839 }; 10840 ; 10841 if (*nread >= bufsiz) {; 10842 /* Request too long */; 10843 return -2;; 10844 }; 10845 ; 10846 n = pull_inner(; 10847 fp, conn, buf + *nread, bufsiz - *nread, request_timeout);; 10848 if (n == -2) {; 10849 /* Receive error */; 10850 return -1;; 10851 }; 10852 ; 10853 /* update clock after every read request */; 10854 clock_gettime(CLOCK_MONOTONIC, &last_action_time);; 10855 ; 10856 if (n > 0) {; 10857 *nread += n;; 10858 request_len = get_http_header_len(buf, *nread);; 10859 }; 10860 ; 10861 if ((request_len == 0) && (request_timeout >= 0)) {; 10862 if (mg_difftimespec(&last_action_time, &(conn->req_time)); 10863 > request_timeout) {; 10864 /* Timeout */; 10865 return -1;; 10866 }; 10867 }; 10868 }; 10869 ; 10870 return request_len;; 10871}; 10872 ; 10873 ; 10874#if !defined(NO_CGI) || !defined(NO_FILES); 10875static int; 10876forward_body_data(struct mg_connection *conn, FILE *fp, SOCKET sock, SSL *ssl); 10877{; 10878 const char *expect;; 10879 char buf[MG_BUF_LEN];; 10880 int success = 0;; 10881 ; 10882 if (!conn) {; 10883 return 0;; 10884 }; 10885 ; 10886 expect = mg_get_header(conn, ""Expect"");; 10887 DEBUG_ASSERT(fp != NULL);; 10888 if (!fp) {; 10889 mg_send_http_error(conn, 500, ""%s"", ""Error: NULL File"");; 10890 return 0;; 10891 }; 10892 ; 10893 if ((expect != NULL) && (mg_strcasecmp(expect, ""100-continue"") != 0)) {; 10894 /* Client sent an ""Expect: xyz"" header and xyz is not 100-continue.; 10895 */; 10896 mg_send_http_error(conn, 417, ""Error: Can not fulfill expectation"");; 10897 } else {; 10898 if (expect != NULL) {; 10899 (void)mg_printf(conn, ""%s"", ""HTTP/1.1 100 Continue\r\n\r\n"");; 10900 conn->status_code = 100;; 10901 } else {; 10902 conn->status",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:314196,Availability,error,error,314196,"char buf[MG_BUF_LEN];; 10880 int success = 0;; 10881 ; 10882 if (!conn) {; 10883 return 0;; 10884 }; 10885 ; 10886 expect = mg_get_header(conn, ""Expect"");; 10887 DEBUG_ASSERT(fp != NULL);; 10888 if (!fp) {; 10889 mg_send_http_error(conn, 500, ""%s"", ""Error: NULL File"");; 10890 return 0;; 10891 }; 10892 ; 10893 if ((expect != NULL) && (mg_strcasecmp(expect, ""100-continue"") != 0)) {; 10894 /* Client sent an ""Expect: xyz"" header and xyz is not 100-continue.; 10895 */; 10896 mg_send_http_error(conn, 417, ""Error: Can not fulfill expectation"");; 10897 } else {; 10898 if (expect != NULL) {; 10899 (void)mg_printf(conn, ""%s"", ""HTTP/1.1 100 Continue\r\n\r\n"");; 10900 conn->status_code = 100;; 10901 } else {; 10902 conn->status_code = 200;; 10903 }; 10904 ; 10905 DEBUG_ASSERT(conn->consumed_content == 0);; 10906 ; 10907 if (conn->consumed_content != 0) {; 10908 mg_send_http_error(conn, 500, ""%s"", ""Error: Size mismatch"");; 10909 return 0;; 10910 }; 10911 ; 10912 for (;;) {; 10913 int nread = mg_read(conn, buf, sizeof(buf));; 10914 if (nread <= 0) {; 10915 success = (nread == 0);; 10916 break;; 10917 }; 10918 if (push_all(conn->phys_ctx, fp, sock, ssl, buf, nread) != nread) {; 10919 break;; 10920 }; 10921 }; 10922 ; 10923 /* Each error code path in this function must send an error */; 10924 if (!success) {; 10925 /* NOTE: Maybe some data has already been sent. */; 10926 /* TODO (low): If some data has been sent, a correct error; 10927 * reply can no longer be sent, so just close the connection */; 10928 mg_send_http_error(conn, 500, ""%s"", """");; 10929 }; 10930 }; 10931 ; 10932 return success;; 10933}; 10934#endif; 10935 ; 10936 ; 10937#if defined(USE_TIMERS); 10938 ; 10939#define TIMER_API static; 10940#include ""timer.inl""; 10941 ; 10942#endif /* USE_TIMERS */; 10943 ; 10944 ; 10945#if !defined(NO_CGI); 10946/* This structure helps to create an environment for the spawned CGI; 10947 * program.; 10948 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10949 * last elem",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:314242,Availability,error,error,314242,"char buf[MG_BUF_LEN];; 10880 int success = 0;; 10881 ; 10882 if (!conn) {; 10883 return 0;; 10884 }; 10885 ; 10886 expect = mg_get_header(conn, ""Expect"");; 10887 DEBUG_ASSERT(fp != NULL);; 10888 if (!fp) {; 10889 mg_send_http_error(conn, 500, ""%s"", ""Error: NULL File"");; 10890 return 0;; 10891 }; 10892 ; 10893 if ((expect != NULL) && (mg_strcasecmp(expect, ""100-continue"") != 0)) {; 10894 /* Client sent an ""Expect: xyz"" header and xyz is not 100-continue.; 10895 */; 10896 mg_send_http_error(conn, 417, ""Error: Can not fulfill expectation"");; 10897 } else {; 10898 if (expect != NULL) {; 10899 (void)mg_printf(conn, ""%s"", ""HTTP/1.1 100 Continue\r\n\r\n"");; 10900 conn->status_code = 100;; 10901 } else {; 10902 conn->status_code = 200;; 10903 }; 10904 ; 10905 DEBUG_ASSERT(conn->consumed_content == 0);; 10906 ; 10907 if (conn->consumed_content != 0) {; 10908 mg_send_http_error(conn, 500, ""%s"", ""Error: Size mismatch"");; 10909 return 0;; 10910 }; 10911 ; 10912 for (;;) {; 10913 int nread = mg_read(conn, buf, sizeof(buf));; 10914 if (nread <= 0) {; 10915 success = (nread == 0);; 10916 break;; 10917 }; 10918 if (push_all(conn->phys_ctx, fp, sock, ssl, buf, nread) != nread) {; 10919 break;; 10920 }; 10921 }; 10922 ; 10923 /* Each error code path in this function must send an error */; 10924 if (!success) {; 10925 /* NOTE: Maybe some data has already been sent. */; 10926 /* TODO (low): If some data has been sent, a correct error; 10927 * reply can no longer be sent, so just close the connection */; 10928 mg_send_http_error(conn, 500, ""%s"", """");; 10929 }; 10930 }; 10931 ; 10932 return success;; 10933}; 10934#endif; 10935 ; 10936 ; 10937#if defined(USE_TIMERS); 10938 ; 10939#define TIMER_API static; 10940#include ""timer.inl""; 10941 ; 10942#endif /* USE_TIMERS */; 10943 ; 10944 ; 10945#if !defined(NO_CGI); 10946/* This structure helps to create an environment for the spawned CGI; 10947 * program.; 10948 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10949 * last elem",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:314392,Availability,error,error,314392," } else {; 10898 if (expect != NULL) {; 10899 (void)mg_printf(conn, ""%s"", ""HTTP/1.1 100 Continue\r\n\r\n"");; 10900 conn->status_code = 100;; 10901 } else {; 10902 conn->status_code = 200;; 10903 }; 10904 ; 10905 DEBUG_ASSERT(conn->consumed_content == 0);; 10906 ; 10907 if (conn->consumed_content != 0) {; 10908 mg_send_http_error(conn, 500, ""%s"", ""Error: Size mismatch"");; 10909 return 0;; 10910 }; 10911 ; 10912 for (;;) {; 10913 int nread = mg_read(conn, buf, sizeof(buf));; 10914 if (nread <= 0) {; 10915 success = (nread == 0);; 10916 break;; 10917 }; 10918 if (push_all(conn->phys_ctx, fp, sock, ssl, buf, nread) != nread) {; 10919 break;; 10920 }; 10921 }; 10922 ; 10923 /* Each error code path in this function must send an error */; 10924 if (!success) {; 10925 /* NOTE: Maybe some data has already been sent. */; 10926 /* TODO (low): If some data has been sent, a correct error; 10927 * reply can no longer be sent, so just close the connection */; 10928 mg_send_http_error(conn, 500, ""%s"", """");; 10929 }; 10930 }; 10931 ; 10932 return success;; 10933}; 10934#endif; 10935 ; 10936 ; 10937#if defined(USE_TIMERS); 10938 ; 10939#define TIMER_API static; 10940#include ""timer.inl""; 10941 ; 10942#endif /* USE_TIMERS */; 10943 ; 10944 ; 10945#if !defined(NO_CGI); 10946/* This structure helps to create an environment for the spawned CGI; 10947 * program.; 10948 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10949 * last element must be NULL.; 10950 * However, on Windows there is a requirement that all these; 10951 * VARIABLE=VALUE\0; 10952 * strings must reside in a contiguous buffer. The end of the buffer is; 10953 * marked by two '\0' characters.; 10954 * We satisfy both worlds: we create an envp array (which is vars), all; 10955 * entries are actually pointers inside buf. */; 10956struct cgi_environment {; 10957 struct mg_connection *conn;; 10958 /* Data block */; 10959 char *buf; /* Environment buffer */; 10960 size_t buflen; /* Space available in buf */; 10961",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:315485,Availability,avail,available,315485,"0936 ; 10937#if defined(USE_TIMERS); 10938 ; 10939#define TIMER_API static; 10940#include ""timer.inl""; 10941 ; 10942#endif /* USE_TIMERS */; 10943 ; 10944 ; 10945#if !defined(NO_CGI); 10946/* This structure helps to create an environment for the spawned CGI; 10947 * program.; 10948 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10949 * last element must be NULL.; 10950 * However, on Windows there is a requirement that all these; 10951 * VARIABLE=VALUE\0; 10952 * strings must reside in a contiguous buffer. The end of the buffer is; 10953 * marked by two '\0' characters.; 10954 * We satisfy both worlds: we create an envp array (which is vars), all; 10955 * entries are actually pointers inside buf. */; 10956struct cgi_environment {; 10957 struct mg_connection *conn;; 10958 /* Data block */; 10959 char *buf; /* Environment buffer */; 10960 size_t buflen; /* Space available in buf */; 10961 size_t bufused; /* Space taken in buf */; 10962 /* Index block */; 10963 char **var; /* char **envp */; 10964 size_t varlen; /* Number of variables available in var */; 10965 size_t varused; /* Number of variables stored in var */; 10966};; 10967 ; 10968 ; 10969static void addenv(struct cgi_environment *env,; 10970 PRINTF_FORMAT_STRING(const char *fmt),; 10971 ...) PRINTF_ARGS(2, 3);; 10972 ; 10973/* Append VARIABLE=VALUE\0 string to the buffer, and add a respective; 10974 * pointer into the vars array. Assumes env != NULL and fmt != NULL. */; 10975static void; 10976addenv(struct cgi_environment *env, const char *fmt, ...); 10977{; 10978 size_t i, n, space;; 10979 int truncated = 0;; 10980 char *added;; 10981 va_list ap;; 10982 ; 10983 if ((env->varlen - env->varused) < 2) {; 10984 mg_cry_internal(env->conn,; 10985 ""%s: Cannot register CGI variable [%s]"",; 10986 __func__,; 10987 fmt);; 10988 return;; 10989 }; 10990 ; 10991 /* Calculate how much space is left in the buffer */; 10992 space = (env->buflen - env->bufused);; 10993 ; 10994 do {; 10995 /* Space for ""\0\0"" is ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:315660,Availability,avail,available,315660,"0936 ; 10937#if defined(USE_TIMERS); 10938 ; 10939#define TIMER_API static; 10940#include ""timer.inl""; 10941 ; 10942#endif /* USE_TIMERS */; 10943 ; 10944 ; 10945#if !defined(NO_CGI); 10946/* This structure helps to create an environment for the spawned CGI; 10947 * program.; 10948 * Environment is an array of ""VARIABLE=VALUE\0"" ASCII strings,; 10949 * last element must be NULL.; 10950 * However, on Windows there is a requirement that all these; 10951 * VARIABLE=VALUE\0; 10952 * strings must reside in a contiguous buffer. The end of the buffer is; 10953 * marked by two '\0' characters.; 10954 * We satisfy both worlds: we create an envp array (which is vars), all; 10955 * entries are actually pointers inside buf. */; 10956struct cgi_environment {; 10957 struct mg_connection *conn;; 10958 /* Data block */; 10959 char *buf; /* Environment buffer */; 10960 size_t buflen; /* Space available in buf */; 10961 size_t bufused; /* Space taken in buf */; 10962 /* Index block */; 10963 char **var; /* char **envp */; 10964 size_t varlen; /* Number of variables available in var */; 10965 size_t varused; /* Number of variables stored in var */; 10966};; 10967 ; 10968 ; 10969static void addenv(struct cgi_environment *env,; 10970 PRINTF_FORMAT_STRING(const char *fmt),; 10971 ...) PRINTF_ARGS(2, 3);; 10972 ; 10973/* Append VARIABLE=VALUE\0 string to the buffer, and add a respective; 10974 * pointer into the vars array. Assumes env != NULL and fmt != NULL. */; 10975static void; 10976addenv(struct cgi_environment *env, const char *fmt, ...); 10977{; 10978 size_t i, n, space;; 10979 int truncated = 0;; 10980 char *added;; 10981 va_list ap;; 10982 ; 10983 if ((env->varlen - env->varused) < 2) {; 10984 mg_cry_internal(env->conn,; 10985 ""%s: Cannot register CGI variable [%s]"",; 10986 __func__,; 10987 fmt);; 10988 return;; 10989 }; 10990 ; 10991 /* Calculate how much space is left in the buffer */; 10992 space = (env->buflen - env->bufused);; 10993 ; 10994 do {; 10995 /* Space for ""\0\0"" is ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:318064,Availability,error,error,318064,"Cannot register CGI variable [%s]"",; 10986 __func__,; 10987 fmt);; 10988 return;; 10989 }; 10990 ; 10991 /* Calculate how much space is left in the buffer */; 10992 space = (env->buflen - env->bufused);; 10993 ; 10994 do {; 10995 /* Space for ""\0\0"" is always needed. */; 10996 if (space <= 2) {; 10997 /* Allocate new buffer */; 10998 n = env->buflen + CGI_ENVIRONMENT_SIZE;; 10999 added = (char *)mg_realloc_ctx(env->buf, n, env->conn->phys_ctx);; 11000 if (!added) {; 11001 /* Out of memory */; 11002 mg_cry_internal(; 11003 env->conn,; 11004 ""%s: Cannot allocate memory for CGI variable [%s]"",; 11005 __func__,; 11006 fmt);; 11007 return;; 11008 }; 11009 /* Retarget pointers */; 11010 env->buf = added;; 11011 env->buflen = n;; 11012 for (i = 0, n = 0; i < env->varused; i++) {; 11013 env->var[i] = added + n;; 11014 n += strlen(added + n) + 1;; 11015 }; 11016 space = (env->buflen - env->bufused);; 11017 }; 11018 ; 11019 /* Make a pointer to the free space int the buffer */; 11020 added = env->buf + env->bufused;; 11021 ; 11022 /* Copy VARIABLE=VALUE\0 string into the free space */; 11023 va_start(ap, fmt);; 11024 mg_vsnprintf(env->conn, &truncated, added, space - 1, fmt, ap);; 11025 va_end(ap);; 11026 ; 11027 /* Do not add truncated strings to the environment */; 11028 if (truncated) {; 11029 /* Reallocate the buffer */; 11030 space = 0;; 11031 }; 11032 } while (truncated);; 11033 ; 11034 /* Calculate number of bytes added to the environment */; 11035 n = strlen(added) + 1;; 11036 env->bufused += n;; 11037 ; 11038 /* Append a pointer to the added string into the envp array */; 11039 env->var[env->varused] = added;; 11040 env->varused++;; 11041}; 11042 ; 11043/* Return 0 on success, non-zero if an error occurs. */; 11044 ; 11045static int; 11046prepare_cgi_environment(struct mg_connection *conn,; 11047 const char *prog,; 11048 struct cgi_environment *env,; 11049 unsigned char cgi_config_idx); 11050{; 11051 const char *s;; 11052 struct vec var_vec;; 11053 char *p, src_addr[",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:322121,Availability,error,error,322121,"11135 conn->path_info);; 11136 }; 11137 ; 11138 addenv(env, ""HTTPS=%s"", (conn->ssl == NULL) ? ""off"" : ""on"");; 11139 ; 11140 if ((s = mg_get_header(conn, ""Content-Type"")) != NULL) {; 11141 addenv(env, ""CONTENT_TYPE=%s"", s);; 11142 }; 11143 if (conn->request_info.query_string != NULL) {; 11144 addenv(env, ""QUERY_STRING=%s"", conn->request_info.query_string);; 11145 }; 11146 if ((s = mg_get_header(conn, ""Content-Length"")) != NULL) {; 11147 addenv(env, ""CONTENT_LENGTH=%s"", s);; 11148 }; 11149 if ((s = getenv(""PATH"")) != NULL) {; 11150 addenv(env, ""PATH=%s"", s);; 11151 }; 11152 if (conn->path_info != NULL) {; 11153 addenv(env, ""PATH_INFO=%s"", conn->path_info);; 11154 }; 11155 ; 11156 if (conn->status_code > 0) {; 11157 /* CGI error handler should show the status code */; 11158 addenv(env, ""STATUS=%d"", conn->status_code);; 11159 }; 11160 ; 11161#if defined(_WIN32); 11162 if ((s = getenv(""COMSPEC"")) != NULL) {; 11163 addenv(env, ""COMSPEC=%s"", s);; 11164 }; 11165 if ((s = getenv(""SYSTEMROOT"")) != NULL) {; 11166 addenv(env, ""SYSTEMROOT=%s"", s);; 11167 }; 11168 if ((s = getenv(""SystemDrive"")) != NULL) {; 11169 addenv(env, ""SystemDrive=%s"", s);; 11170 }; 11171 if ((s = getenv(""ProgramFiles"")) != NULL) {; 11172 addenv(env, ""ProgramFiles=%s"", s);; 11173 }; 11174 if ((s = getenv(""ProgramFiles(x86)"")) != NULL) {; 11175 addenv(env, ""ProgramFiles(x86)=%s"", s);; 11176 }; 11177#else; 11178 if ((s = getenv(""LD_LIBRARY_PATH"")) != NULL) {; 11179 addenv(env, ""LD_LIBRARY_PATH=%s"", s);; 11180 }; 11181#endif /* _WIN32 */; 11182 ; 11183 if ((s = getenv(""PERLLIB"")) != NULL) {; 11184 addenv(env, ""PERLLIB=%s"", s);; 11185 }; 11186 ; 11187 if (conn->request_info.remote_user != NULL) {; 11188 addenv(env, ""REMOTE_USER=%s"", conn->request_info.remote_user);; 11189 addenv(env, ""%s"", ""AUTH_TYPE=Digest"");; 11190 }; 11191 ; 11192 /* Add all headers as HTTP_* variables */; 11193 for (i = 0; i < conn->request_info.num_headers; i++) {; 11194 ; 11195 (void)mg_snprintf(conn,; 11196 &truncated,; 11197 http_var_na",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:331989,Availability,error,error,331989,"n[1] = -1;; 11443 ; 11444 /* Now read CGI reply into a buffer. We need to set correct; 11445 * status code, thus we need to see all HTTP headers first.; 11446 * Do not send anything back to client, until we buffer in all; 11447 * HTTP headers. */; 11448 data_len = 0;; 11449 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11450 if (buf == NULL) {; 11451 mg_send_http_error(conn,; 11452 500,; 11453 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11454 (unsigned int)buflen);; 11455 mg_cry_internal(; 11456 conn,; 11457 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11458 ""bytes)"",; 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 bu",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:332137,Availability,error,error,332137,"o not send anything back to client, until we buffer in all; 11447 * HTTP headers. */; 11448 data_len = 0;; 11449 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11450 if (buf == NULL) {; 11451 mg_send_http_error(conn,; 11452 500,; 11453 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11454 (unsigned int)buflen);; 11455 mg_cry_internal(; 11456 conn,; 11457 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11458 ""bytes)"",; 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:332166,Availability,error,error,332166,"o not send anything back to client, until we buffer in all; 11447 * HTTP headers. */; 11448 data_len = 0;; 11449 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11450 if (buf == NULL) {; 11451 mg_send_http_error(conn,; 11452 500,; 11453 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11454 (unsigned int)buflen);; 11455 mg_cry_internal(; 11456 conn,; 11457 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11458 ""bytes)"",; 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:332271,Availability,error,error,332271,"o not send anything back to client, until we buffer in all; 11447 * HTTP headers. */; 11448 data_len = 0;; 11449 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11450 if (buf == NULL) {; 11451 mg_send_http_error(conn,; 11452 500,; 11453 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11454 (unsigned int)buflen);; 11455 mg_cry_internal(; 11456 conn,; 11457 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11458 ""bytes)"",; 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:332366,Availability,error,error,332366,"0,; 11453 ""Error: Not enough memory for CGI buffer (%u bytes)"",; 11454 (unsigned int)buflen);; 11455 mg_cry_internal(; 11456 conn,; 11457 ""Error: CGI program \""%s\"": Not enough memory for buffer (%u ""; 11458 ""bytes)"",; 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11512 ri.num_headers = parse_http_headers(&pbuf, ri.http_headers);; 11513 ; 11514 /* Make up and send the status line */; 11515 status_text = ""OK"";; 11516 if ((status = get_header(ri.http_headers, ri.num_headers, ""Status"")); 11517 != ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:332569,Availability,error,error,332569," 11459 prog,; 11460 (unsigned int)buflen);; 11461 goto done;; 11462 }; 11463 ; 11464 DEBUG_TRACE(""CGI: %s"", ""wait for response"");; 11465 headers_len = read_message(out, conn, buf, (int)buflen, &data_len);; 11466 DEBUG_TRACE(""CGI: response: %li"", (signed long)headers_len);; 11467 ; 11468 if (headers_len <= 0) {; 11469 ; 11470 /* Could not parse the CGI response. Check if some error message on; 11471 * stderr. */; 11472 i = pull_all(err, conn, buf, (int)buflen);; 11473 if (i > 0) {; 11474 /* CGI program explicitly sent an error */; 11475 /* Write the error message to the internal log */; 11476 mg_cry_internal(conn,; 11477 ""Error: CGI program \""%s\"" sent error ""; 11478 ""message: [%.*s]"",; 11479 prog,; 11480 i,; 11481 buf);; 11482 /* Don't send the error message back to the client */; 11483 mg_send_http_error(conn,; 11484 500,; 11485 ""Error: CGI program \""%s\"" failed."",; 11486 prog);; 11487 } else {; 11488 /* CGI program did not explicitly send an error, but a broken; 11489 * respon header */; 11490 mg_cry_internal(conn,; 11491 ""Error: CGI program sent malformed or too big ""; 11492 ""(>%u bytes) HTTP headers: [%.*s]"",; 11493 (unsigned)buflen,; 11494 data_len,; 11495 buf);; 11496 ; 11497 mg_send_http_error(conn,; 11498 500,; 11499 ""Error: CGI program sent malformed or too big ""; 11500 ""(>%u bytes) HTTP headers: [%.*s]"",; 11501 (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11512 ri.num_headers = parse_http_headers(&pbuf, ri.http_headers);; 11513 ; 11514 /* Make up and send the status line */; 11515 status_text = ""OK"";; 11516 if ((status = get_header(ri.http_headers, ri.num_headers, ""Status"")); 11517 != NULL) {; 11518 conn->status_code = atoi(status);; 11519 status_text = status;; 11520 while (isdigit((unsigned char)*status_text) || *status_text == ' ') {; 11521 status_text++;; 11522 }; 11523 } else if (get_header(ri.h",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:333906,Availability,alive,alive,333906," (unsigned)buflen,; 11502 data_len,; 11503 buf);; 11504 }; 11505 ; 11506 /* in both cases, abort processing CGI */; 11507 goto done;; 11508 }; 11509 ; 11510 pbuf = buf;; 11511 buf[headers_len - 1] = '\0';; 11512 ri.num_headers = parse_http_headers(&pbuf, ri.http_headers);; 11513 ; 11514 /* Make up and send the status line */; 11515 status_text = ""OK"";; 11516 if ((status = get_header(ri.http_headers, ri.num_headers, ""Status"")); 11517 != NULL) {; 11518 conn->status_code = atoi(status);; 11519 status_text = status;; 11520 while (isdigit((unsigned char)*status_text) || *status_text == ' ') {; 11521 status_text++;; 11522 }; 11523 } else if (get_header(ri.http_headers, ri.num_headers, ""Location""); 11524 != NULL) {; 11525 conn->status_code = 307;; 11526 } else {; 11527 conn->status_code = 200;; 11528 }; 11529 connection_state =; 11530 get_header(ri.http_headers, ri.num_headers, ""Connection"");; 11531 if (!header_has_option(connection_state, ""keep-alive"")) {; 11532 conn->must_close = 1;; 11533 }; 11534 ; 11535 DEBUG_TRACE(""CGI: response %u %s"", conn->status_code, status_text);; 11536 ; 11537 (void)mg_printf(conn, ""HTTP/1.1 %d %s\r\n"", conn->status_code, status_text);; 11538 ; 11539 /* Send headers */; 11540 for (i = 0; i < ri.num_headers; i++) {; 11541 DEBUG_TRACE(""CGI header: %s: %s"",; 11542 ri.http_headers[i].name,; 11543 ri.http_headers[i].value);; 11544 mg_printf(conn,; 11545 ""%s: %s\r\n"",; 11546 ri.http_headers[i].name,; 11547 ri.http_headers[i].value);; 11548 }; 11549 mg_write(conn, ""\r\n"", 2);; 11550 ; 11551 /* Send chunk of data that may have been read after the headers */; 11552 mg_write(conn, buf + headers_len, (size_t)(data_len - headers_len));; 11553 ; 11554 /* Read the rest of CGI output and send to the client */; 11555 DEBUG_TRACE(""CGI: %s"", ""forward all data"");; 11556 send_file_data(conn, &fout, 0, INT64_MAX);; 11557 DEBUG_TRACE(""CGI: %s"", ""all data sent"");; 11558 ; 11559done:; 11560 mg_free(blk.var);; 11561 mg_free(blk.buf);; 11562 ; 11563 if (pid != (pid_t)-1",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:340690,Availability,error,error,340690,"ot create directory\nput_dir(%s): %s"",; 11746 path,; 11747 strerror(ERRNO));; 11748 return;; 11749 }; 11750 ; 11751 /* A file should be created or overwritten. */; 11752 /* Currently CivetWeb does not nead read+write access. */; 11753 if (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file); 11754 || file.access.fp == NULL) {; 11755 (void)mg_fclose(&file.access);; 11756 mg_send_http_error(conn,; 11757 500,; 11758 ""Error: Can not create file\nfopen(%s): %s"",; 11759 path,; 11760 strerror(ERRNO));; 11761 return;; 11762 }; 11763 ; 11764 fclose_on_exec(&file.access, conn);; 11765 range = mg_get_header(conn, ""Content-Range"");; 11766 r1 = r2 = 0;; 11767 if ((range != NULL) && parse_range_header(range, &r1, &r2) > 0) {; 11768 conn->status_code = 206; /* Partial content */; 11769 fseeko(file.access.fp, r1, SEEK_SET);; 11770 }; 11771 ; 11772 if (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {; 11773 /* forward_body_data failed.; 11774 * The error code has already been sent to the client,; 11775 * and conn->status_code is already set. */; 11776 (void)mg_fclose(&file.access);; 11777 return;; 11778 }; 11779 ; 11780 if (mg_fclose(&file.access) != 0) {; 11781 /* fclose failed. This might have different reasons, but a likely; 11782 * one is ""no space on disk"", http 507. */; 11783 conn->status_code = 507;; 11784 }; 11785 ; 11786 /* Create response (status_code has been set before) */; 11787 mg_response_header_start(conn, conn->status_code);; 11788 send_no_cache_header(conn);; 11789 send_additional_header(conn);; 11790 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11791 ; 11792 /* Send all headers - there is no body */; 11793 mg_response_header_send(conn);; 11794}; 11795 ; 11796 ; 11797static void; 11798delete_file(struct mg_connection *conn, const char *path); 11799{; 11800 struct de de;; 11801 memset(&de.file, 0, sizeof(de.file));; 11802 if (!mg_stat(conn, path, &de.file)) {; 11803 /* mg_stat returns 0 if the file does not exist */; 11804 mg_send_http_err",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:342112,Availability,error,error,342112,"; 11784 }; 11785 ; 11786 /* Create response (status_code has been set before) */; 11787 mg_response_header_start(conn, conn->status_code);; 11788 send_no_cache_header(conn);; 11789 send_additional_header(conn);; 11790 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11791 ; 11792 /* Send all headers - there is no body */; 11793 mg_response_header_send(conn);; 11794}; 11795 ; 11796 ; 11797static void; 11798delete_file(struct mg_connection *conn, const char *path); 11799{; 11800 struct de de;; 11801 memset(&de.file, 0, sizeof(de.file));; 11802 if (!mg_stat(conn, path, &de.file)) {; 11803 /* mg_stat returns 0 if the file does not exist */; 11804 mg_send_http_error(conn,; 11805 404,; 11806 ""Error: Cannot delete file\nFile %s not found"",; 11807 path);; 11808 return;; 11809 }; 11810 ; 11811 if (de.file.is_directory) {; 11812 if (remove_directory(conn, path)) {; 11813 /* Delete is successful: Return 204 without content. */; 11814 mg_send_http_error(conn, 204, ""%s"", """");; 11815 } else {; 11816 /* Delete is not successful: Return 500 (Server error). */; 11817 mg_send_http_error(conn, 500, ""Error: Could not delete %s"", path);; 11818 }; 11819 return;; 11820 }; 11821 ; 11822 /* This is an existing file (not a directory).; 11823 * Check if write permission is granted. */; 11824 if (access(path, W_OK) != 0) {; 11825 /* File is read only */; 11826 mg_send_http_error(; 11827 conn,; 11828 403,; 11829 ""Error: Delete not possible\nDeleting %s is not allowed"",; 11830 path);; 11831 return;; 11832 }; 11833 ; 11834 /* Try to delete it. */; 11835 if (mg_remove(conn, path) == 0) {; 11836 /* Delete was successful: Return 204 without content. */; 11837 mg_response_header_start(conn, 204);; 11838 send_no_cache_header(conn);; 11839 send_additional_header(conn);; 11840 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11841 mg_response_header_send(conn);; 11842 ; 11843 } else {; 11844 /* Delete not successful (file locked). */; 11845 mg_send_http_error(conn,; 11846 423,; 11847 """,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:345854,Availability,error,errors,345854,"e);; 11913 }; 11914 ; 11915 } else {; 11916 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11917 return;; 11918 }; 11919 ; 11920 if (truncated) {; 11921 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11922 return;; 11923 }; 11924 ; 11925 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11926 mg_cry_internal(conn,; 11927 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11928 tag,; 11929 path,; 11930 strerror(ERRNO));; 11931 } else {; 11932 fclose_on_exec(&file.access, conn);; 11933 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11934 > 0) {; 11935 send_ssi_file(conn, path, &file, include_level + 1);; 11936 } else {; 11937 send_file_data(conn, &file, 0, INT64_MAX);; 11938 }; 11939 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11940 }; 11941}; 11942 ; 11943 ; 11944#if !defined(NO_POPEN); 11945static void; 11946do_ssi_exec(struct mg_connection *conn, char *tag); 11947{; 11948 char cmd[1024] = """";; 11949 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11950 ; 11951 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11952 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11953 } else {; 11954 cmd[1023] = 0;; 11955 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11956 mg_cry_internal(conn,; 11957 ""Cannot SSI #exec: [%s]: %s"",; 11958 cmd,; 11959 strerror(ERRNO));; 11960 } else {; 11961 send_file_data(conn, &file, 0, INT64_MAX);; 11962 pclose(file.access.fp);; 11963 }; 11964 }; 11965}; 11966#endif /* !NO_POPEN */; 11967 ; 11968 ; 11969static int; 11970mg_fgetc(struct mg_file *filep); 11971{; 11972 if (filep == NULL) {; 11973 return EOF;; 11974 }; 11975 ; 11976 if (filep->access.fp != NULL) {; 11977 return fgetc(filep->access.fp);; 11978 } else {; 11979 return EOF;; 11980 }; 11981}; 11982 ; 11983 ; 11984static void; 11985send_ssi_file(struct mg_connection *conn,; 11986 const char *path,; 11987 struct mg_file *filep,; 11988 int include_level); 11989{; 11990 char buf[MG_BUF_LEN];; 11991 ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:351702,Availability,error,errors,351702,"als"";; 12117 cors4 = cors_cred_cfg;; 12118 } else {; 12119 cors3 = cors4 = """";; 12120 }; 12121 ; 12122 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {; 12123 /* File exists (precondition for calling this function),; 12124 * but can not be opened by the server. */; 12125 mg_send_http_error(conn,; 12126 500,; 12127 ""Error: Cannot read file\nfopen(%s): %s"",; 12128 path,; 12129 strerror(ERRNO));; 12130 } else {; 12131 /* Set ""must_close"" for HTTP/1.x, since we do not know the; 12132 * content length */; 12133 conn->must_close = 1;; 12134 gmt_time_string(date, sizeof(date), &curtime);; 12135 fclose_on_exec(&filep->access, conn);; 12136 ; 12137 /* 200 OK response */; 12138 mg_response_header_start(conn, 200);; 12139 send_no_cache_header(conn);; 12140 send_additional_header(conn);; 12141 mg_response_header_add(conn, ""Content-Type"", ""text/html"", -1);; 12142 if (cors1[0]) {; 12143 mg_response_header_add(conn, cors1, cors2, -1);; 12144 }; 12145 if (cors3[0]) {; 12146 mg_response_header_add(conn, cors3, cors4, -1);; 12147 }; 12148 mg_response_header_send(conn);; 12149 ; 12150 /* Header sent, now send body */; 12151 send_ssi_file(conn, path, filep, 0);; 12152 (void)mg_fclose(&filep->access); /* Ignore errors for readonly files */; 12153 }; 12154}; 12155#endif /* NO_FILESYSTEMS */; 12156 ; 12157 ; 12158#if !defined(NO_FILES); 12159static void; 12160send_options(struct mg_connection *conn); 12161{; 12162 if (!conn) {; 12163 return;; 12164 }; 12165 ; 12166 /* We do not set a ""Cache-Control"" header here, but leave the default.; 12167 * Since browsers do not send an OPTIONS request, we can not test the; 12168 * effect anyway. */; 12169 ; 12170 mg_response_header_start(conn, 200);; 12171 mg_response_header_add(conn, ""Content-Type"", ""text/html"", -1);; 12172 if (conn->protocol_type == PROTOCOL_TYPE_HTTP1) {; 12173 /* Use the same as before */; 12174 mg_response_header_add(; 12175 conn,; 12176 ""Allow"",; 12177 ""GET, POST, HEAD, CONNECT, PUT, DELETE, OPTIONS, PROPFIND, MKCOL"",; 121",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:360007,Availability,error,error,360007,"PING); 12409/* Configuration of the maximum number of websocket PINGs that might; 12410 * stay unanswered before the connection is considered broken.; 12411 * Note: The name of this define may still change (until it is; 12412 * defined as a compile parameter in a documentation).; 12413 */; 12414#define MG_MAX_UNANSWERED_PING (5); 12415#endif; 12416 ; 12417 ; 12418static void; 12419read_websocket(struct mg_connection *conn,; 12420 mg_websocket_data_handler ws_data_handler,; 12421 void *callback_data); 12422{; 12423 /* Pointer to the beginning of the portion of the incoming websocket; 12424 * message queue.; 12425 * The original websocket upgrade request is never removed, so the queue; 12426 * begins after it. */; 12427 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12428 int n, error, exit_by_callback;; 12429 int ret;; 12430 ; 12431 /* body_len is the length of the entire queue in bytes; 12432 * len is the length of the current message; 12433 * data_len is the length of the current message's data payload; 12434 * header_len is the length of the current message's header */; 12435 size_t i, len, mask_len = 0, header_len, body_len;; 12436 uint64_t data_len = 0;; 12437 ; 12438 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12439 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12440 */; 12441 unsigned char mask[4];; 12442 ; 12443 /* data points to the place where the message is stored when passed to; 12444 * the websocket_data callback. This is either mem on the stack, or a; 12445 * dynamically allocated buffer if it is too large. */; 12446 unsigned char mem[4096];; 12447 unsigned char mop; /* mask flag and opcode */; 12448 ; 12449 ; 12450 /* Variables used for connection monitoring */; 12451 double timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(c",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:360418,Availability,mask,masking,360418,"PING); 12409/* Configuration of the maximum number of websocket PINGs that might; 12410 * stay unanswered before the connection is considered broken.; 12411 * Note: The name of this define may still change (until it is; 12412 * defined as a compile parameter in a documentation).; 12413 */; 12414#define MG_MAX_UNANSWERED_PING (5); 12415#endif; 12416 ; 12417 ; 12418static void; 12419read_websocket(struct mg_connection *conn,; 12420 mg_websocket_data_handler ws_data_handler,; 12421 void *callback_data); 12422{; 12423 /* Pointer to the beginning of the portion of the incoming websocket; 12424 * message queue.; 12425 * The original websocket upgrade request is never removed, so the queue; 12426 * begins after it. */; 12427 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12428 int n, error, exit_by_callback;; 12429 int ret;; 12430 ; 12431 /* body_len is the length of the entire queue in bytes; 12432 * len is the length of the current message; 12433 * data_len is the length of the current message's data payload; 12434 * header_len is the length of the current message's header */; 12435 size_t i, len, mask_len = 0, header_len, body_len;; 12436 uint64_t data_len = 0;; 12437 ; 12438 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12439 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12440 */; 12441 unsigned char mask[4];; 12442 ; 12443 /* data points to the place where the message is stored when passed to; 12444 * the websocket_data callback. This is either mem on the stack, or a; 12445 * dynamically allocated buffer if it is too large. */; 12446 unsigned char mem[4096];; 12447 unsigned char mop; /* mask flag and opcode */; 12448 ; 12449 ; 12450 /* Variables used for connection monitoring */; 12451 double timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(c",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:360598,Availability,mask,mask,360598,"nn,; 12420 mg_websocket_data_handler ws_data_handler,; 12421 void *callback_data); 12422{; 12423 /* Pointer to the beginning of the portion of the incoming websocket; 12424 * message queue.; 12425 * The original websocket upgrade request is never removed, so the queue; 12426 * begins after it. */; 12427 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12428 int n, error, exit_by_callback;; 12429 int ret;; 12430 ; 12431 /* body_len is the length of the entire queue in bytes; 12432 * len is the length of the current message; 12433 * data_len is the length of the current message's data payload; 12434 * header_len is the length of the current message's header */; 12435 size_t i, len, mask_len = 0, header_len, body_len;; 12436 uint64_t data_len = 0;; 12437 ; 12438 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12439 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12440 */; 12441 unsigned char mask[4];; 12442 ; 12443 /* data points to the place where the message is stored when passed to; 12444 * the websocket_data callback. This is either mem on the stack, or a; 12445 * dynamically allocated buffer if it is too large. */; 12446 unsigned char mem[4096];; 12447 unsigned char mop; /* mask flag and opcode */; 12448 ; 12449 ; 12450 /* Variables used for connection monitoring */; 12451 double timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = a",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:360891,Availability,mask,mask,360891,"2427 unsigned char *buf = (unsigned char *)conn->buf + conn->request_len;; 12428 int n, error, exit_by_callback;; 12429 int ret;; 12430 ; 12431 /* body_len is the length of the entire queue in bytes; 12432 * len is the length of the current message; 12433 * data_len is the length of the current message's data payload; 12434 * header_len is the length of the current message's header */; 12435 size_t i, len, mask_len = 0, header_len, body_len;; 12436 uint64_t data_len = 0;; 12437 ; 12438 /* ""The masking key is a 32-bit value chosen at random by the client.""; 12439 * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5; 12440 */; 12441 unsigned char mask[4];; 12442 ; 12443 /* data points to the place where the message is stored when passed to; 12444 * the websocket_data callback. This is either mem on the stack, or a; 12445 * dynamically allocated buffer if it is too large. */; 12446 unsigned char mem[4096];; 12447 unsigned char mop; /* mask flag and opcode */; 12448 ; 12449 ; 12450 /* Variables used for connection monitoring */; 12451 double timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12469 }; 12470 ; 12471 /* Enter data processing loop */; 12472 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12473 conn->request_info.remote_addr,; 12474 conn->request_info.remote_port);; 12475 conn->in_websocket_h",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:362103,Availability,error,error,362103,"e timeout = -1.0;; 12452 int enable_ping_pong = 0;; 12453 int ping_count = 0;; 12454 ; 12455 if (conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG]) {; 12456 enable_ping_pong =; 12457 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_WEBSOCKET_PING_PONG],; 12458 ""yes"");; 12459 }; 12460 ; 12461 if (conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) {; 12462 timeout = atoi(conn->dom_ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;; 12463 }; 12464 if ((timeout <= 0.0) && (conn->dom_ctx->config[REQUEST_TIMEOUT])) {; 12465 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 12466 }; 12467 if (timeout <= 0.0) {; 12468 timeout = atof(config_options[REQUEST_TIMEOUT].default_value) / 1000.0;; 12469 }; 12470 ; 12471 /* Enter data processing loop */; 12472 DEBUG_TRACE(""Websocket connection %s:%u start data processing loop"",; 12473 conn->request_info.remote_addr,; 12474 conn->request_info.remote_port);; 12475 conn->in_websocket_handling = 1;; 12476 mg_set_thread_name(""wsock"");; 12477 ; 12478 /* Loop continuously, reading messages from the socket, invoking the; 12479 * callback, and waiting repeatedly until an error occurs. */; 12480 while (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12481 && (!conn->must_close)) {; 12482 header_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 1",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:363876,Availability,mask,mask,363876,"ader_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 10 + mask_len;; 12501 data_len = (((uint64_t)ntohl(l1)) << 32) + ntohl(l2);; 12502 ; 12503 if (data_len > (uint64_t)0x7FFF0000ul) {; 12504 /* no can do */; 12505 mg_cry_internal(; 12506 conn,; 12507 ""%s"",; 12508 ""websocket out of memory; closing connection"");; 12509 break;; 12510 }; 12511 }; 12512 }; 12513 ; 12514 if ((header_len > 0) && (body_len >= header_len)) {; 12515 /* Allocate space to hold websocket payload */; 12516 unsigned char *data = mem;; 12517 ; 12518 if ((size_t)data_len > (size_t)sizeof(mem)) {; 12519 data = (unsigned char *)mg_malloc_ctx((size_t)data_len,; 12520 conn->phys_ctx);; 12521 if (data == NULL) {; 12522 /* Allocation failed, exit the loop and then close the; 12523 * connection */; 12524 mg_cry_internal(; 12525 conn,; 12526 ""%s"",; 12527 ""websocket out of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:363966,Availability,mask,mask,363966,"ader_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 10 + mask_len;; 12501 data_len = (((uint64_t)ntohl(l1)) << 32) + ntohl(l2);; 12502 ; 12503 if (data_len > (uint64_t)0x7FFF0000ul) {; 12504 /* no can do */; 12505 mg_cry_internal(; 12506 conn,; 12507 ""%s"",; 12508 ""websocket out of memory; closing connection"");; 12509 break;; 12510 }; 12511 }; 12512 }; 12513 ; 12514 if ((header_len > 0) && (body_len >= header_len)) {; 12515 /* Allocate space to hold websocket payload */; 12516 unsigned char *data = mem;; 12517 ; 12518 if ((size_t)data_len > (size_t)sizeof(mem)) {; 12519 data = (unsigned char *)mg_malloc_ctx((size_t)data_len,; 12520 conn->phys_ctx);; 12521 if (data == NULL) {; 12522 /* Allocation failed, exit the loop and then close the; 12523 * connection */; 12524 mg_cry_internal(; 12525 conn,; 12526 ""%s"",; 12527 ""websocket out of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364008,Availability,mask,mask,364008,"ader_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 10 + mask_len;; 12501 data_len = (((uint64_t)ntohl(l1)) << 32) + ntohl(l2);; 12502 ; 12503 if (data_len > (uint64_t)0x7FFF0000ul) {; 12504 /* no can do */; 12505 mg_cry_internal(; 12506 conn,; 12507 ""%s"",; 12508 ""websocket out of memory; closing connection"");; 12509 break;; 12510 }; 12511 }; 12512 }; 12513 ; 12514 if ((header_len > 0) && (body_len >= header_len)) {; 12515 /* Allocate space to hold websocket payload */; 12516 unsigned char *data = mem;; 12517 ; 12518 if ((size_t)data_len > (size_t)sizeof(mem)) {; 12519 data = (unsigned char *)mg_malloc_ctx((size_t)data_len,; 12520 conn->phys_ctx);; 12521 if (data == NULL) {; 12522 /* Allocation failed, exit the loop and then close the; 12523 * connection */; 12524 mg_cry_internal(; 12525 conn,; 12526 ""%s"",; 12527 ""websocket out of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364046,Availability,mask,mask,364046,"ader_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 10 + mask_len;; 12501 data_len = (((uint64_t)ntohl(l1)) << 32) + ntohl(l2);; 12502 ; 12503 if (data_len > (uint64_t)0x7FFF0000ul) {; 12504 /* no can do */; 12505 mg_cry_internal(; 12506 conn,; 12507 ""%s"",; 12508 ""websocket out of memory; closing connection"");; 12509 break;; 12510 }; 12511 }; 12512 }; 12513 ; 12514 if ((header_len > 0) && (body_len >= header_len)) {; 12515 /* Allocate space to hold websocket payload */; 12516 unsigned char *data = mem;; 12517 ; 12518 if ((size_t)data_len > (size_t)sizeof(mem)) {; 12519 data = (unsigned char *)mg_malloc_ctx((size_t)data_len,; 12520 conn->phys_ctx);; 12521 if (data == NULL) {; 12522 /* Allocation failed, exit the loop and then close the; 12523 * connection */; 12524 mg_cry_internal(; 12525 conn,; 12526 ""%s"",; 12527 ""websocket out of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364062,Availability,mask,mask,364062,"ader_len = 0;; 12483 DEBUG_ASSERT(conn->data_len >= conn->request_len);; 12484 if ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {; 12485 len = buf[1] & 127;; 12486 mask_len = (buf[1] & 128) ? 4 : 0;; 12487 if ((len < 126) && (body_len >= mask_len)) {; 12488 /* inline 7-bit length field */; 12489 data_len = len;; 12490 header_len = 2 + mask_len;; 12491 } else if ((len == 126) && (body_len >= (4 + mask_len))) {; 12492 /* 16-bit length field */; 12493 header_len = 4 + mask_len;; 12494 data_len = ((((size_t)buf[2]) << 8) + buf[3]);; 12495 } else if (body_len >= (10 + mask_len)) {; 12496 /* 64-bit length field */; 12497 uint32_t l1, l2;; 12498 memcpy(&l1, &buf[2], 4); /* Use memcpy for alignment */; 12499 memcpy(&l2, &buf[6], 4);; 12500 header_len = 10 + mask_len;; 12501 data_len = (((uint64_t)ntohl(l1)) << 32) + ntohl(l2);; 12502 ; 12503 if (data_len > (uint64_t)0x7FFF0000ul) {; 12504 /* no can do */; 12505 mg_cry_internal(; 12506 conn,; 12507 ""%s"",; 12508 ""websocket out of memory; closing connection"");; 12509 break;; 12510 }; 12511 }; 12512 }; 12513 ; 12514 if ((header_len > 0) && (body_len >= header_len)) {; 12515 /* Allocate space to hold websocket payload */; 12516 unsigned char *data = mem;; 12517 ; 12518 if ((size_t)data_len > (size_t)sizeof(mem)) {; 12519 data = (unsigned char *)mg_malloc_ctx((size_t)data_len,; 12520 conn->phys_ctx);; 12521 if (data == NULL) {; 12522 /* Allocation failed, exit the loop and then close the; 12523 * connection */; 12524 mg_cry_internal(; 12525 conn,; 12526 ""%s"",; 12527 ""websocket out of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364371,Availability,mask,mask,364371,"t of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place. */; 12541 DEBUG_ASSERT(body_len >= header_len);; 12542 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12543 mop = buf[0]; /* current mask and opcode */; 12544 /* Overflow case */; 12545 len = body_len - header_len;; 12546 memcpy(data, buf + header_len, len);; 12547 error = 0;; 12548 while ((uint64_t)len < data_len) {; 12549 n = pull_inner(NULL,; 12550 conn,; 12551 (char *)(data + len),; 12552 (int)(data_len - len),; 12553 timeout);; 12554 if (n <= -2) {; 12555 error = 1;; 12556 break;; 12557 } else if (n > 0) {; 12558 len += (size_t)n;; 12559 } else {; 12560 /* Timeout: should retry */; 12561 /* TODO: retry condition */; 12562 }; 12563 }; 12564 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Ma",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364504,Availability,error,error,364504,"t of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place. */; 12541 DEBUG_ASSERT(body_len >= header_len);; 12542 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12543 mop = buf[0]; /* current mask and opcode */; 12544 /* Overflow case */; 12545 len = body_len - header_len;; 12546 memcpy(data, buf + header_len, len);; 12547 error = 0;; 12548 while ((uint64_t)len < data_len) {; 12549 n = pull_inner(NULL,; 12550 conn,; 12551 (char *)(data + len),; 12552 (int)(data_len - len),; 12553 timeout);; 12554 if (n <= -2) {; 12555 error = 1;; 12556 break;; 12557 } else if (n > 0) {; 12558 len += (size_t)n;; 12559 } else {; 12560 /* Timeout: should retry */; 12561 /* TODO: retry condition */; 12562 }; 12563 }; 12564 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Ma",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364703,Availability,error,error,364703,"t of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place. */; 12541 DEBUG_ASSERT(body_len >= header_len);; 12542 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12543 mop = buf[0]; /* current mask and opcode */; 12544 /* Overflow case */; 12545 len = body_len - header_len;; 12546 memcpy(data, buf + header_len, len);; 12547 error = 0;; 12548 while ((uint64_t)len < data_len) {; 12549 n = pull_inner(NULL,; 12550 conn,; 12551 (char *)(data + len),; 12552 (int)(data_len - len),; 12553 timeout);; 12554 if (n <= -2) {; 12555 error = 1;; 12556 break;; 12557 } else if (n > 0) {; 12558 len += (size_t)n;; 12559 } else {; 12560 /* Timeout: should retry */; 12561 /* TODO: retry condition */; 12562 }; 12563 }; 12564 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Ma",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:364895,Availability,error,error,364895,"t of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place. */; 12541 DEBUG_ASSERT(body_len >= header_len);; 12542 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12543 mop = buf[0]; /* current mask and opcode */; 12544 /* Overflow case */; 12545 len = body_len - header_len;; 12546 memcpy(data, buf + header_len, len);; 12547 error = 0;; 12548 while ((uint64_t)len < data_len) {; 12549 n = pull_inner(NULL,; 12550 conn,; 12551 (char *)(data + len),; 12552 (int)(data_len - len),; 12553 timeout);; 12554 if (n <= -2) {; 12555 error = 1;; 12556 break;; 12557 } else if (n > 0) {; 12558 len += (size_t)n;; 12559 } else {; 12560 /* Timeout: should retry */; 12561 /* TODO: retry condition */; 12562 }; 12563 }; 12564 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Ma",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:365202,Availability,mask,mask,365202,"t of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place. */; 12541 DEBUG_ASSERT(body_len >= header_len);; 12542 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12543 mop = buf[0]; /* current mask and opcode */; 12544 /* Overflow case */; 12545 len = body_len - header_len;; 12546 memcpy(data, buf + header_len, len);; 12547 error = 0;; 12548 while ((uint64_t)len < data_len) {; 12549 n = pull_inner(NULL,; 12550 conn,; 12551 (char *)(data + len),; 12552 (int)(data_len - len),; 12553 timeout);; 12554 if (n <= -2) {; 12555 error = 1;; 12556 break;; 12557 } else if (n > 0) {; 12558 len += (size_t)n;; 12559 } else {; 12560 /* Timeout: should retry */; 12561 /* TODO: retry condition */; 12562 }; 12563 }; 12564 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Ma",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:365879,Availability,mask,mask,365879,"4 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Mark the queue as advanced */; 12596 conn->data_len -= (int)len;; 12597 }; 12598 ; 12599 /* Apply mask if necessary */; 12600 if (mask_len > 0) {; 12601 for (i = 0; i < (size_t)data_len; i++) {; 12602 data[i] ^= mask[i & 3];; 12603 }; 12604 }; 12605 ; 12606 exit_by_callback = 0;; 12607 if (enable_ping_pong && ((mop & 0xF) == MG_WEBSOCKET_OPCODE_PONG)) {; 12608 /* filter PONG messages */; 12609 DEBUG_TRACE(""PONG from %s:%u"",; 12610 conn->request_info.remote_addr,; 12611 conn->request_info.remote_port);; 12612 /* No unanwered PINGs left */; 12613 ping_count = 0;; 12614 } else if (enable_ping_pong; 12615 && ((mop & 0xF) == MG_WEBSOCKET_OPCODE_PING)) {; 12616 /* reply PING messages */; 12617 DEBUG_TRACE(""Reply PING from %s:%u"",; 12618 conn->request_info.remote_addr,; 12619 conn->request_info.remote_port);; 12620 ret = mg_websocket_write(conn,; 12621 MG_WEBSOCKET_OPCODE_PONG,; 12622 (char *)data,; 12623 (size_t)data_len);; 12624 if (ret <= 0) {; 12625 /* Error: send failed */; 12626 DEBUG_TRACE(""Reply PONG failed (%i)"", ret);; 12627 break;; 12628 }; 12629 ; 12630 ; 12631 } else {; 12632 /* Exit t",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:365993,Availability,mask,mask,365993,"4 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Mark the queue as advanced */; 12596 conn->data_len -= (int)len;; 12597 }; 12598 ; 12599 /* Apply mask if necessary */; 12600 if (mask_len > 0) {; 12601 for (i = 0; i < (size_t)data_len; i++) {; 12602 data[i] ^= mask[i & 3];; 12603 }; 12604 }; 12605 ; 12606 exit_by_callback = 0;; 12607 if (enable_ping_pong && ((mop & 0xF) == MG_WEBSOCKET_OPCODE_PONG)) {; 12608 /* filter PONG messages */; 12609 DEBUG_TRACE(""PONG from %s:%u"",; 12610 conn->request_info.remote_addr,; 12611 conn->request_info.remote_port);; 12612 /* No unanwered PINGs left */; 12613 ping_count = 0;; 12614 } else if (enable_ping_pong; 12615 && ((mop & 0xF) == MG_WEBSOCKET_OPCODE_PING)) {; 12616 /* reply PING messages */; 12617 DEBUG_TRACE(""Reply PING from %s:%u"",; 12618 conn->request_info.remote_addr,; 12619 conn->request_info.remote_port);; 12620 ret = mg_websocket_write(conn,; 12621 MG_WEBSOCKET_OPCODE_PONG,; 12622 (char *)data,; 12623 (size_t)data_len);; 12624 if (ret <= 0) {; 12625 /* Error: send failed */; 12626 DEBUG_TRACE(""Reply PONG failed (%i)"", ret);; 12627 break;; 12628 }; 12629 ; 12630 ; 12631 } else {; 12632 /* Exit t",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:368900,Availability,error,error,368900," bytes; 12654 data[data_len] = '\x00';; 12655 data[data_len + 1] = '\x00';; 12656 data[data_len + 2] = '\xff';; 12657 data[data_len + 3] = '\xff';; 12658 do {; 12659 if (inflate_buf_size_old == 0) {; 12660 new_mem =; 12661 (Bytef *)mg_calloc(inflate_buf_size,; 12662 sizeof(Bytef));; 12663 } else {; 12664 inflate_buf_size *= 2;; 12665 new_mem =; 12666 (Bytef *)mg_realloc(inflated,; 12667 inflate_buf_size);; 12668 }; 12669 if (new_mem == NULL) {; 12670 mg_cry_internal(; 12671 conn,; 12672 ""Out of memory: Cannot allocate ""; 12673 ""inflate buffer of %lu bytes"",; 12674 (unsigned long)inflate_buf_size);; 12675 exit_by_callback = 1;; 12676 break;; 12677 }; 12678 inflated = new_mem;; 12679 conn->websocket_inflate_state.avail_out =; 12680 (uInt)(inflate_buf_size; 12681 - inflate_buf_size_old);; 12682 conn->websocket_inflate_state.next_out =; 12683 inflated + inflate_buf_size_old;; 12684 ret = inflate(&conn->websocket_inflate_state,; 12685 Z_SYNC_FLUSH);; 12686 if (ret == Z_NEED_DICT || ret == Z_DATA_ERROR; 12687 || ret == Z_MEM_ERROR) {; 12688 mg_cry_internal(; 12689 conn,; 12690 ""ZLIB inflate error: %i %s"",; 12691 ret,; 12692 (conn->websocket_inflate_state.msg; 12693 ? conn->websocket_inflate_state.msg; 12694 : ""<no error message>""));; 12695 exit_by_callback = 1;; 12696 break;; 12697 }; 12698 inflate_buf_size_old = inflate_buf_size;; 12699 ; 12700 } while (conn->websocket_inflate_state.avail_out; 12701 == 0);; 12702 inflate_buf_size -=; 12703 conn->websocket_inflate_state.avail_out;; 12704 if (!ws_data_handler(conn,; 12705 mop,; 12706 (char *)inflated,; 12707 inflate_buf_size,; 12708 callback_data)) {; 12709 exit_by_callback = 1;; 12710 }; 12711 mg_free(inflated);; 12712 }; 12713 } else; 12714#endif; 12715 if (!ws_data_handler(conn,; 12716 mop,; 12717 (char *)data,; 12718 (size_t)data_len,; 12719 callback_data)) {; 12720 exit_by_callback = 1;; 12721 }; 12722 }; 12723 }; 12724 ; 12725 /* It a buffer has been allocated, free it again */; 12726 if (data != mem) {; 12727 mg_fre",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:369026,Availability,error,error,369026," inflate_buf_size *= 2;; 12665 new_mem =; 12666 (Bytef *)mg_realloc(inflated,; 12667 inflate_buf_size);; 12668 }; 12669 if (new_mem == NULL) {; 12670 mg_cry_internal(; 12671 conn,; 12672 ""Out of memory: Cannot allocate ""; 12673 ""inflate buffer of %lu bytes"",; 12674 (unsigned long)inflate_buf_size);; 12675 exit_by_callback = 1;; 12676 break;; 12677 }; 12678 inflated = new_mem;; 12679 conn->websocket_inflate_state.avail_out =; 12680 (uInt)(inflate_buf_size; 12681 - inflate_buf_size_old);; 12682 conn->websocket_inflate_state.next_out =; 12683 inflated + inflate_buf_size_old;; 12684 ret = inflate(&conn->websocket_inflate_state,; 12685 Z_SYNC_FLUSH);; 12686 if (ret == Z_NEED_DICT || ret == Z_DATA_ERROR; 12687 || ret == Z_MEM_ERROR) {; 12688 mg_cry_internal(; 12689 conn,; 12690 ""ZLIB inflate error: %i %s"",; 12691 ret,; 12692 (conn->websocket_inflate_state.msg; 12693 ? conn->websocket_inflate_state.msg; 12694 : ""<no error message>""));; 12695 exit_by_callback = 1;; 12696 break;; 12697 }; 12698 inflate_buf_size_old = inflate_buf_size;; 12699 ; 12700 } while (conn->websocket_inflate_state.avail_out; 12701 == 0);; 12702 inflate_buf_size -=; 12703 conn->websocket_inflate_state.avail_out;; 12704 if (!ws_data_handler(conn,; 12705 mop,; 12706 (char *)inflated,; 12707 inflate_buf_size,; 12708 callback_data)) {; 12709 exit_by_callback = 1;; 12710 }; 12711 mg_free(inflated);; 12712 }; 12713 } else; 12714#endif; 12715 if (!ws_data_handler(conn,; 12716 mop,; 12717 (char *)data,; 12718 (size_t)data_len,; 12719 callback_data)) {; 12720 exit_by_callback = 1;; 12721 }; 12722 }; 12723 }; 12724 ; 12725 /* It a buffer has been allocated, free it again */; 12726 if (data != mem) {; 12727 mg_free(data);; 12728 }; 12729 ; 12730 if (exit_by_callback) {; 12731 DEBUG_TRACE(""Callback requests to close connection from %s:%u"",; 12732 conn->request_info.remote_addr,; 12733 conn->request_info.remote_port);; 12734 break;; 12735 }; 12736 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12737 /* ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:370444,Availability,avail,available,370444,"llback = 1;; 12710 }; 12711 mg_free(inflated);; 12712 }; 12713 } else; 12714#endif; 12715 if (!ws_data_handler(conn,; 12716 mop,; 12717 (char *)data,; 12718 (size_t)data_len,; 12719 callback_data)) {; 12720 exit_by_callback = 1;; 12721 }; 12722 }; 12723 }; 12724 ; 12725 /* It a buffer has been allocated, free it again */; 12726 if (data != mem) {; 12727 mg_free(data);; 12728 }; 12729 ; 12730 if (exit_by_callback) {; 12731 DEBUG_TRACE(""Callback requests to close connection from %s:%u"",; 12732 conn->request_info.remote_addr,; 12733 conn->request_info.remote_port);; 12734 break;; 12735 }; 12736 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12737 /* Opcode == 8, connection close */; 12738 DEBUG_TRACE(""Message requests to close connection from %s:%u"",; 12739 conn->request_info.remote_addr,; 12740 conn->request_info.remote_port);; 12741 break;; 12742 }; 12743 ; 12744 /* Not breaking the loop, process next websocket frame. */; 12745 } else {; 12746 /* Read from the socket into the next available location in the; 12747 * message queue. */; 12748 n = pull_inner(NULL,; 12749 conn,; 12750 conn->buf + conn->data_len,; 12751 conn->buf_size - conn->data_len,; 12752 timeout);; 12753 if (n <= -2) {; 12754 /* Error, no bytes read */; 12755 DEBUG_TRACE(""PULL from %s:%u failed"",; 12756 conn->request_info.remote_addr,; 12757 conn->request_info.remote_port);; 12758 break;; 12759 }; 12760 if (n > 0) {; 12761 conn->data_len += n;; 12762 /* Reset open PING count */; 12763 ping_count = 0;; 12764 } else {; 12765 if (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12766 && (!conn->must_close)) {; 12767 if (ping_count > MG_MAX_UNANSWERED_PING) {; 12768 /* Stop sending PING */; 12769 DEBUG_TRACE(""Too many (%i) unanswered ping from %s:%u ""; 12770 ""- closing connection"",; 12771 ping_count,; 12772 conn->request_info.remote_addr,; 12773 conn->request_info.remote_port);; 12774 break;; 12775 }; 12776 if (enable_ping_pong) {; 12777 /* Send Websocket PING message */; 12778 DEBUG_TRACE(""PIN",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:371171,Availability,ping,ping,371171,"2736 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12737 /* Opcode == 8, connection close */; 12738 DEBUG_TRACE(""Message requests to close connection from %s:%u"",; 12739 conn->request_info.remote_addr,; 12740 conn->request_info.remote_port);; 12741 break;; 12742 }; 12743 ; 12744 /* Not breaking the loop, process next websocket frame. */; 12745 } else {; 12746 /* Read from the socket into the next available location in the; 12747 * message queue. */; 12748 n = pull_inner(NULL,; 12749 conn,; 12750 conn->buf + conn->data_len,; 12751 conn->buf_size - conn->data_len,; 12752 timeout);; 12753 if (n <= -2) {; 12754 /* Error, no bytes read */; 12755 DEBUG_TRACE(""PULL from %s:%u failed"",; 12756 conn->request_info.remote_addr,; 12757 conn->request_info.remote_port);; 12758 break;; 12759 }; 12760 if (n > 0) {; 12761 conn->data_len += n;; 12762 /* Reset open PING count */; 12763 ping_count = 0;; 12764 } else {; 12765 if (STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 12766 && (!conn->must_close)) {; 12767 if (ping_count > MG_MAX_UNANSWERED_PING) {; 12768 /* Stop sending PING */; 12769 DEBUG_TRACE(""Too many (%i) unanswered ping from %s:%u ""; 12770 ""- closing connection"",; 12771 ping_count,; 12772 conn->request_info.remote_addr,; 12773 conn->request_info.remote_port);; 12774 break;; 12775 }; 12776 if (enable_ping_pong) {; 12777 /* Send Websocket PING message */; 12778 DEBUG_TRACE(""PING to %s:%u"",; 12779 conn->request_info.remote_addr,; 12780 conn->request_info.remote_port);; 12781 ret = mg_websocket_write(conn,; 12782 MG_WEBSOCKET_OPCODE_PING,; 12783 NULL,; 12784 0);; 12785 ; 12786 if (ret <= 0) {; 12787 /* Error: send failed */; 12788 DEBUG_TRACE(""Send PING failed (%i)"", ret);; 12789 break;; 12790 }; 12791 ping_count++;; 12792 }; 12793 }; 12794 /* Timeout: should retry */; 12795 /* TODO: get timeout def */; 12796 }; 12797 }; 12798 }; 12799 ; 12800 /* Leave data processing loop */; 12801 mg_set_thread_name(""worker"");; 12802 conn->in_websocket_handling = 0;; 12803 DEBU",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:375687,Availability,mask,mask,375687,"iling 0x00 0x00 0xff 0xff bytes; 12870 } else; 12871#endif; 12872 header[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);; 12873 ; 12874#if defined(GCC_DIAGNOSTIC); 12875#pragma GCC diagnostic pop; 12876#endif; 12877 ; 12878 /* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */; 12879 if (dataLen < 126) {; 12880 /* inline 7-bit length field */; 12881 header[1] = (unsigned char)dataLen;; 12882 headerLen = 2;; 12883 } else if (dataLen <= 0xFFFF) {; 12884 /* 16-bit length field */; 12885 uint16_t len = htons((uint16_t)dataLen);; 12886 header[1] = 126;; 12887 memcpy(header + 2, &len, 2);; 12888 headerLen = 4;; 12889 } else {; 12890 /* 64-bit length field */; 12891 uint32_t len1 = htonl((uint32_t)((uint64_t)dataLen >> 32));; 12892 uint32_t len2 = htonl((uint32_t)(dataLen & 0xFFFFFFFFu));; 12893 header[1] = 127;; 12894 memcpy(header + 2, &len1, 4);; 12895 memcpy(header + 6, &len2, 4);; 12896 headerLen = 10;; 12897 }; 12898 ; 12899 if (masking_key) {; 12900 /* add mask */; 12901 header[1] |= 0x80;; 12902 memcpy(header + headerLen, &masking_key, 4);; 12903 headerLen += 4;; 12904 }; 12905 ; 12906 retval = mg_write(conn, header, headerLen);; 12907 if (retval != (int)headerLen) {; 12908 /* Did not send complete header */; 12909 retval = -1;; 12910 } else {; 12911 if (dataLen > 0) {; 12912#if defined(USE_ZLIB) && defined(MG_EXPERIMENTAL_INTERFACES); 12913 if (use_deflate) {; 12914 retval = mg_write(conn, deflated, dataLen);; 12915 mg_free(deflated);; 12916 } else; 12917#endif; 12918 retval = mg_write(conn, data, dataLen);; 12919 }; 12920 /* if dataLen == 0, the header length (2) is returned */; 12921 }; 12922 ; 12923 /* TODO: Remove this unlock as well, when lock is removed. */; 12924 mg_unlock_connection(conn);; 12925 ; 12926 return retval;; 12927}; 12928 ; 12929int; 12930mg_websocket_write(struct mg_connection *conn,; 12931 int opcode,; 12932 const char *data,; 12933 size_t dataLen); 12934{; 12935 return mg_websocket_write_exec(conn, opcode, data, dataLen, 0)",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:377815,Availability,error,error,377815,"ut); 12941{; 12942 size_t i = 0;; 12943 ; 12944 i = 0;; 12945 if ((in_len > 3) && ((ptrdiff_t)in % 4) == 0) {; 12946 /* Convert in 32 bit words, if data is 4 byte aligned */; 12947 while (i < (in_len - 3)) {; 12948 *(uint32_t *)(void *)(out + i) =; 12949 *(uint32_t *)(void *)(in + i) ^ masking_key;; 12950 i += 4;; 12951 }; 12952 }; 12953 if (i != in_len) {; 12954 /* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/; 12955 while (i < in_len) {; 12956 *(uint8_t *)(void *)(out + i) =; 12957 *(uint8_t *)(void *)(in + i); 12958 ^ *(((uint8_t *)&masking_key) + (i % 4));; 12959 i++;; 12960 }; 12961 }; 12962}; 12963 ; 12964 ; 12965int; 12966mg_websocket_client_write(struct mg_connection *conn,; 12967 int opcode,; 12968 const char *data,; 12969 size_t dataLen); 12970{; 12971 int retval = -1;; 12972 char *masked_data =; 12973 (char *)mg_malloc_ctx(((dataLen + 7) / 4) * 4, conn->phys_ctx);; 12974 uint32_t masking_key = 0;; 12975 ; 12976 if (masked_data == NULL) {; 12977 /* Return -1 in an error case */; 12978 mg_cry_internal(conn,; 12979 ""%s"",; 12980 ""Cannot allocate buffer for masked websocket response: ""; 12981 ""Out of memory"");; 12982 return -1;; 12983 }; 12984 ; 12985 do {; 12986 /* Get a masking key - but not 0 */; 12987 masking_key = (uint32_t)get_random();; 12988 } while (masking_key == 0);; 12989 ; 12990 mask_data(data, dataLen, masking_key, masked_data);; 12991 ; 12992 retval = mg_websocket_write_exec(; 12993 conn, opcode, masked_data, dataLen, masking_key);; 12994 mg_free(masked_data);; 12995 ; 12996 return retval;; 12997}; 12998 ; 12999 ; 13000static void; 13001handle_websocket_request(struct mg_connection *conn,; 13002 const char *path,; 13003 int is_callback_resource,; 13004 struct mg_websocket_subprotocols *subprotocols,; 13005 mg_websocket_connect_handler ws_connect_handler,; 13006 mg_websocket_ready_handler ws_ready_handler,; 13007 mg_websocket_data_handler ws_data_handler,; 13008 mg_websocket_close_handler ws_close_handler,; 13009 void *cbData); 13010{; 13",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:377906,Availability,mask,masked,377906,"_t)in % 4) == 0) {; 12946 /* Convert in 32 bit words, if data is 4 byte aligned */; 12947 while (i < (in_len - 3)) {; 12948 *(uint32_t *)(void *)(out + i) =; 12949 *(uint32_t *)(void *)(in + i) ^ masking_key;; 12950 i += 4;; 12951 }; 12952 }; 12953 if (i != in_len) {; 12954 /* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/; 12955 while (i < in_len) {; 12956 *(uint8_t *)(void *)(out + i) =; 12957 *(uint8_t *)(void *)(in + i); 12958 ^ *(((uint8_t *)&masking_key) + (i % 4));; 12959 i++;; 12960 }; 12961 }; 12962}; 12963 ; 12964 ; 12965int; 12966mg_websocket_client_write(struct mg_connection *conn,; 12967 int opcode,; 12968 const char *data,; 12969 size_t dataLen); 12970{; 12971 int retval = -1;; 12972 char *masked_data =; 12973 (char *)mg_malloc_ctx(((dataLen + 7) / 4) * 4, conn->phys_ctx);; 12974 uint32_t masking_key = 0;; 12975 ; 12976 if (masked_data == NULL) {; 12977 /* Return -1 in an error case */; 12978 mg_cry_internal(conn,; 12979 ""%s"",; 12980 ""Cannot allocate buffer for masked websocket response: ""; 12981 ""Out of memory"");; 12982 return -1;; 12983 }; 12984 ; 12985 do {; 12986 /* Get a masking key - but not 0 */; 12987 masking_key = (uint32_t)get_random();; 12988 } while (masking_key == 0);; 12989 ; 12990 mask_data(data, dataLen, masking_key, masked_data);; 12991 ; 12992 retval = mg_websocket_write_exec(; 12993 conn, opcode, masked_data, dataLen, masking_key);; 12994 mg_free(masked_data);; 12995 ; 12996 return retval;; 12997}; 12998 ; 12999 ; 13000static void; 13001handle_websocket_request(struct mg_connection *conn,; 13002 const char *path,; 13003 int is_callback_resource,; 13004 struct mg_websocket_subprotocols *subprotocols,; 13005 mg_websocket_connect_handler ws_connect_handler,; 13006 mg_websocket_ready_handler ws_ready_handler,; 13007 mg_websocket_data_handler ws_data_handler,; 13008 mg_websocket_close_handler ws_close_handler,; 13009 void *cbData); 13010{; 13011 const char *websock_key = mg_get_header(conn, ""Sec-WebSocket-Key"");; 13012 const char *v",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:378023,Availability,mask,masking,378023,"12948 *(uint32_t *)(void *)(out + i) =; 12949 *(uint32_t *)(void *)(in + i) ^ masking_key;; 12950 i += 4;; 12951 }; 12952 }; 12953 if (i != in_len) {; 12954 /* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/; 12955 while (i < in_len) {; 12956 *(uint8_t *)(void *)(out + i) =; 12957 *(uint8_t *)(void *)(in + i); 12958 ^ *(((uint8_t *)&masking_key) + (i % 4));; 12959 i++;; 12960 }; 12961 }; 12962}; 12963 ; 12964 ; 12965int; 12966mg_websocket_client_write(struct mg_connection *conn,; 12967 int opcode,; 12968 const char *data,; 12969 size_t dataLen); 12970{; 12971 int retval = -1;; 12972 char *masked_data =; 12973 (char *)mg_malloc_ctx(((dataLen + 7) / 4) * 4, conn->phys_ctx);; 12974 uint32_t masking_key = 0;; 12975 ; 12976 if (masked_data == NULL) {; 12977 /* Return -1 in an error case */; 12978 mg_cry_internal(conn,; 12979 ""%s"",; 12980 ""Cannot allocate buffer for masked websocket response: ""; 12981 ""Out of memory"");; 12982 return -1;; 12983 }; 12984 ; 12985 do {; 12986 /* Get a masking key - but not 0 */; 12987 masking_key = (uint32_t)get_random();; 12988 } while (masking_key == 0);; 12989 ; 12990 mask_data(data, dataLen, masking_key, masked_data);; 12991 ; 12992 retval = mg_websocket_write_exec(; 12993 conn, opcode, masked_data, dataLen, masking_key);; 12994 mg_free(masked_data);; 12995 ; 12996 return retval;; 12997}; 12998 ; 12999 ; 13000static void; 13001handle_websocket_request(struct mg_connection *conn,; 13002 const char *path,; 13003 int is_callback_resource,; 13004 struct mg_websocket_subprotocols *subprotocols,; 13005 mg_websocket_connect_handler ws_connect_handler,; 13006 mg_websocket_ready_handler ws_ready_handler,; 13007 mg_websocket_data_handler ws_data_handler,; 13008 mg_websocket_close_handler ws_close_handler,; 13009 void *cbData); 13010{; 13011 const char *websock_key = mg_get_header(conn, ""Sec-WebSocket-Key"");; 13012 const char *version = mg_get_header(conn, ""Sec-WebSocket-Version"");; 13013 ptrdiff_t lua_websock = 0;; 13014 ; 13015#if !defined(U",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:384685,Availability,error,error,384685,"ter callbacks for Lua. */; 13145 return;; 13146 }; 13147 }; 13148 ; 13149#if defined(USE_LUA); 13150 /* Step 3: No callback. Check if Lua is responsible. */; 13151 else {; 13152 /* Step 3.1: Check if Lua is responsible. */; 13153 if (conn->dom_ctx->config[LUA_WEBSOCKET_EXTENSIONS]) {; 13154 lua_websock = match_prefix_strlen(; 13155 conn->dom_ctx->config[LUA_WEBSOCKET_EXTENSIONS], path);; 13156 }; 13157 ; 13158 if (lua_websock) {; 13159 /* Step 3.2: Lua is responsible: call it. */; 13160 conn->lua_websocket_state = lua_websocket_new(path, conn);; 13161 if (!conn->lua_websocket_state) {; 13162 /* Lua rejected the new client */; 13163 return;; 13164 }; 13165 }; 13166 }; 13167#endif; 13168 ; 13169 /* Step 4: Check if there is a responsible websocket handler. */; 13170 if (!is_callback_resource && !lua_websock) {; 13171 /* There is no callback, and Lua is not responsible either. */; 13172 /* Reply with a 404 Not Found. We are still at a standard; 13173 * HTTP request here, before the websocket handshake, so; 13174 * we can still send standard HTTP error replies. */; 13175 mg_send_http_error(conn, 404, ""%s"", ""Not found"");; 13176 return;; 13177 }; 13178 ; 13179 /* Step 5: The websocket connection has been accepted */; 13180 if (!send_websocket_handshake(conn, websock_key)) {; 13181 mg_send_http_error(conn, 500, ""%s"", ""Websocket handshake failed"");; 13182 return;; 13183 }; 13184 ; 13185 /* Step 6: Call the ready handler */; 13186 if (is_callback_resource) {; 13187 if (ws_ready_handler != NULL) {; 13188 ws_ready_handler(conn, cbData);; 13189 }; 13190#if defined(USE_LUA); 13191 } else if (lua_websock) {; 13192 if (!lua_websocket_ready(conn, conn->lua_websocket_state)) {; 13193 /* the ready handler returned false */; 13194 return;; 13195 }; 13196#endif; 13197 }; 13198 ; 13199 /* Step 7: Enter the read loop */; 13200 if (is_callback_resource) {; 13201 read_websocket(conn, ws_data_handler, cbData);; 13202#if defined(USE_LUA); 13203 } else if (lua_websock) {; 13204 read_websocket",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:388209,Availability,error,errors,388209,"r(upgrade, ""websocket"")) {; 13257 /* The headers ""Host"", ""Sec-WebSocket-Key"", ""Sec-WebSocket-Protocol"" and; 13258 * ""Sec-WebSocket-Version"" are also required.; 13259 * Don't check them here, since even an unsupported websocket protocol; 13260 * request still IS a websocket request (in contrast to a standard HTTP; 13261 * request). It will fail later in handle_websocket_request.; 13262 */; 13263 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13264 }; 13265 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13266 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13267 }; 13268 ; 13269 /* Upgrade to another protocol */; 13270 return -1;; 13271}; 13272 ; 13273 ; 13274static int; 13275parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13276{; 13277 int n;; 13278 unsigned int a, b, c, d, slash;; 13279 ; 13280 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13281 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13282 // integer value, but function will not report conversion; 13283 // errors; consider using 'strtol' instead; 13284 slash = 32;; 13285 if (sscanf(vec->ptr, ""%u.%u.%u.%u%n"", &a, &b, &c, &d, &n); 13286 != 4) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to; 13287 // an integer value, but function will not report conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:388487,Availability,error,errors,388487,"bsocket_request.; 13262 */; 13263 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13264 }; 13265 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13266 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13267 }; 13268 ; 13269 /* Upgrade to another protocol */; 13270 return -1;; 13271}; 13272 ; 13273 ; 13274static int; 13275parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13276{; 13277 int n;; 13278 unsigned int a, b, c, d, slash;; 13279 ; 13280 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13281 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13282 // integer value, but function will not report conversion; 13283 // errors; consider using 'strtol' instead; 13284 slash = 32;; 13285 if (sscanf(vec->ptr, ""%u.%u.%u.%u%n"", &a, &b, &c, &d, &n); 13286 != 4) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to; 13287 // an integer value, but function will not report conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; 13311 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13312 slash = 128;; 13313 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13314 n = 0;; 13315 }; 13316 }; 13317 ; 13318 if ((n <= 0) && no_strict) {; 13319 /* no square brackets? */; 13320 p = strchr(vec->ptr, '/');; 13321 if (p && (p < (vec->ptr + vec->len))) {; 13322 if (((size_t)(p - ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:388938,Availability,mask,mask,388938,"eport conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; 13311 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13312 slash = 128;; 13313 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13314 n = 0;; 13315 }; 13316 }; 13317 ; 13318 if ((n <= 0) && no_strict) {; 13319 /* no square brackets? */; 13320 p = strchr(vec->ptr, '/');; 13321 if (p && (p < (vec->ptr + vec->len))) {; 13322 if (((size_t)(p - vec->ptr) < sizeof(ad)); 13323 && (sscanf(p, ""/%u%n"", &slash, &n) == 1)) {; 13324 n += (int)(p - vec->ptr);; 13325 mg_strlcpy(ad, vec->ptr, (size_t)(p - vec->ptr) + 1);; 13326 } else {; 13327 n = 0;; 13328 }; 13329 } else if (vec->len < sizeof(ad)) {; 13330 n = (int)vec->len;; 13331 slash = 128;; 13332 mg_strlcpy(ad, vec->ptr, vec->len + 1);; 13333 }; 13334 }; 13335 ; 13336 if ((n > 0) && ((size_t)n == vec->len) && (slash < 129)) {; 13337 p = ad;; 13338 c = 0;; 13339 /* zone indexes are unsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(A",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:389008,Availability,mask,mask,389008,"eport conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; 13311 if (sscanf(vec->ptr, ""[%49[^]]]/%u%n"", ad, &slash, &n) != 2) {; 13312 slash = 128;; 13313 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13314 n = 0;; 13315 }; 13316 }; 13317 ; 13318 if ((n <= 0) && no_strict) {; 13319 /* no square brackets? */; 13320 p = strchr(vec->ptr, '/');; 13321 if (p && (p < (vec->ptr + vec->len))) {; 13322 if (((size_t)(p - vec->ptr) < sizeof(ad)); 13323 && (sscanf(p, ""/%u%n"", &slash, &n) == 1)) {; 13324 n += (int)(p - vec->ptr);; 13325 mg_strlcpy(ad, vec->ptr, (size_t)(p - vec->ptr) + 1);; 13326 } else {; 13327 n = 0;; 13328 }; 13329 } else if (vec->len < sizeof(ad)) {; 13330 n = (int)vec->len;; 13331 slash = 128;; 13332 mg_strlcpy(ad, vec->ptr, vec->len + 1);; 13333 }; 13334 }; 13335 ; 13336 if ((n > 0) && ((size_t)n == vec->len) && (slash < 129)) {; 13337 p = ad;; 13338 c = 0;; 13339 /* zone indexes are unsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(A",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:390674,Availability,mask,mask,390674,"nsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(AF_INET6, ad, &sin6, sizeof(sin6), 0)) {; 13354 /* IPv6 format */; 13355 for (i = 0; i < 16; i++) {; 13356 uint8_t ip = sa->sin6.sin6_addr.s6_addr[i];; 13357 uint8_t net = sin6.sin6_addr.s6_addr[i];; 13358 uint8_t mask = 0;; 13359 ; 13360 if (8 * i + 8 < slash) {; 13361 mask = 0xFFu;; 13362 } else if (8 * i < slash) {; 13363 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13364 }; 13365 if ((ip & mask) != net) {; 13366 return 0;; 13367 }; 13368 }; 13369 return 1;; 13370 }; 13371 }; 13372 }; 13373 }; 13374#else; 13375 (void)no_strict;; 13376#endif; 13377 ; 13378 /* malformed */; 13379 return -1;; 13380}; 13381 ; 13382 ; 13383static int; 13384set_throttle(const char *spec, const union usa *rsa, const char *uri); 13385{; 13386 int throttle = 0;; 13387 struct vec vec, val;; 13388 char mult;; 13389 double v;; 13390 ; 13391 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13392 mult = ',';; 13393 if ((val.ptr == NULL); 13394 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13395 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13396 // to an integer value, but function will not report; 13397 // conversion errors; consider using 'strtol' instead; 13398 || (v < 0); 13399 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13400 && (mult != ','))) {; 13401 continue;; 13402 }; 13403 v *= (lowercase(&mult) == 'k'); 13404 ? 1024; 13405 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13406 if (vec.len == 1 && vec.ptr[0] == '*') {; 13407 throttle = (int)v;; 13408 } else {; 13409 int matched = parse_match_net(&vec, rsa, 0",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:390731,Availability,mask,mask,390731,"nsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(AF_INET6, ad, &sin6, sizeof(sin6), 0)) {; 13354 /* IPv6 format */; 13355 for (i = 0; i < 16; i++) {; 13356 uint8_t ip = sa->sin6.sin6_addr.s6_addr[i];; 13357 uint8_t net = sin6.sin6_addr.s6_addr[i];; 13358 uint8_t mask = 0;; 13359 ; 13360 if (8 * i + 8 < slash) {; 13361 mask = 0xFFu;; 13362 } else if (8 * i < slash) {; 13363 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13364 }; 13365 if ((ip & mask) != net) {; 13366 return 0;; 13367 }; 13368 }; 13369 return 1;; 13370 }; 13371 }; 13372 }; 13373 }; 13374#else; 13375 (void)no_strict;; 13376#endif; 13377 ; 13378 /* malformed */; 13379 return -1;; 13380}; 13381 ; 13382 ; 13383static int; 13384set_throttle(const char *spec, const union usa *rsa, const char *uri); 13385{; 13386 int throttle = 0;; 13387 struct vec vec, val;; 13388 char mult;; 13389 double v;; 13390 ; 13391 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13392 mult = ',';; 13393 if ((val.ptr == NULL); 13394 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13395 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13396 // to an integer value, but function will not report; 13397 // conversion errors; consider using 'strtol' instead; 13398 || (v < 0); 13399 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13400 && (mult != ','))) {; 13401 continue;; 13402 }; 13403 v *= (lowercase(&mult) == 'k'); 13404 ? 1024; 13405 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13406 if (vec.len == 1 && vec.ptr[0] == '*') {; 13407 throttle = (int)v;; 13408 } else {; 13409 int matched = parse_match_net(&vec, rsa, 0",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:390787,Availability,mask,mask,390787,"nsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(AF_INET6, ad, &sin6, sizeof(sin6), 0)) {; 13354 /* IPv6 format */; 13355 for (i = 0; i < 16; i++) {; 13356 uint8_t ip = sa->sin6.sin6_addr.s6_addr[i];; 13357 uint8_t net = sin6.sin6_addr.s6_addr[i];; 13358 uint8_t mask = 0;; 13359 ; 13360 if (8 * i + 8 < slash) {; 13361 mask = 0xFFu;; 13362 } else if (8 * i < slash) {; 13363 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13364 }; 13365 if ((ip & mask) != net) {; 13366 return 0;; 13367 }; 13368 }; 13369 return 1;; 13370 }; 13371 }; 13372 }; 13373 }; 13374#else; 13375 (void)no_strict;; 13376#endif; 13377 ; 13378 /* malformed */; 13379 return -1;; 13380}; 13381 ; 13382 ; 13383static int; 13384set_throttle(const char *spec, const union usa *rsa, const char *uri); 13385{; 13386 int throttle = 0;; 13387 struct vec vec, val;; 13388 char mult;; 13389 double v;; 13390 ; 13391 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13392 mult = ',';; 13393 if ((val.ptr == NULL); 13394 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13395 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13396 // to an integer value, but function will not report; 13397 // conversion errors; consider using 'strtol' instead; 13398 || (v < 0); 13399 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13400 && (mult != ','))) {; 13401 continue;; 13402 }; 13403 v *= (lowercase(&mult) == 'k'); 13404 ? 1024; 13405 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13406 if (vec.len == 1 && vec.ptr[0] == '*') {; 13407 throttle = (int)v;; 13408 } else {; 13409 int matched = parse_match_net(&vec, rsa, 0",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:390861,Availability,mask,mask,390861,"nsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(AF_INET6, ad, &sin6, sizeof(sin6), 0)) {; 13354 /* IPv6 format */; 13355 for (i = 0; i < 16; i++) {; 13356 uint8_t ip = sa->sin6.sin6_addr.s6_addr[i];; 13357 uint8_t net = sin6.sin6_addr.s6_addr[i];; 13358 uint8_t mask = 0;; 13359 ; 13360 if (8 * i + 8 < slash) {; 13361 mask = 0xFFu;; 13362 } else if (8 * i < slash) {; 13363 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13364 }; 13365 if ((ip & mask) != net) {; 13366 return 0;; 13367 }; 13368 }; 13369 return 1;; 13370 }; 13371 }; 13372 }; 13373 }; 13374#else; 13375 (void)no_strict;; 13376#endif; 13377 ; 13378 /* malformed */; 13379 return -1;; 13380}; 13381 ; 13382 ; 13383static int; 13384set_throttle(const char *spec, const union usa *rsa, const char *uri); 13385{; 13386 int throttle = 0;; 13387 struct vec vec, val;; 13388 char mult;; 13389 double v;; 13390 ; 13391 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13392 mult = ',';; 13393 if ((val.ptr == NULL); 13394 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13395 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13396 // to an integer value, but function will not report; 13397 // conversion errors; consider using 'strtol' instead; 13398 || (v < 0); 13399 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13400 && (mult != ','))) {; 13401 continue;; 13402 }; 13403 v *= (lowercase(&mult) == 'k'); 13404 ? 1024; 13405 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13406 if (vec.len == 1 && vec.ptr[0] == '*') {; 13407 throttle = (int)v;; 13408 } else {; 13409 int matched = parse_match_net(&vec, rsa, 0",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:391594,Availability,error,errors,391594,"[i];; 13358 uint8_t mask = 0;; 13359 ; 13360 if (8 * i + 8 < slash) {; 13361 mask = 0xFFu;; 13362 } else if (8 * i < slash) {; 13363 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13364 }; 13365 if ((ip & mask) != net) {; 13366 return 0;; 13367 }; 13368 }; 13369 return 1;; 13370 }; 13371 }; 13372 }; 13373 }; 13374#else; 13375 (void)no_strict;; 13376#endif; 13377 ; 13378 /* malformed */; 13379 return -1;; 13380}; 13381 ; 13382 ; 13383static int; 13384set_throttle(const char *spec, const union usa *rsa, const char *uri); 13385{; 13386 int throttle = 0;; 13387 struct vec vec, val;; 13388 char mult;; 13389 double v;; 13390 ; 13391 while ((spec = next_option(spec, &vec, &val)) != NULL) {; 13392 mult = ',';; 13393 if ((val.ptr == NULL); 13394 || (sscanf(val.ptr, ""%lf%c"", &v, &mult); 13395 < 1) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 13396 // to an integer value, but function will not report; 13397 // conversion errors; consider using 'strtol' instead; 13398 || (v < 0); 13399 || ((lowercase(&mult) != 'k') && (lowercase(&mult) != 'm'); 13400 && (mult != ','))) {; 13401 continue;; 13402 }; 13403 v *= (lowercase(&mult) == 'k'); 13404 ? 1024; 13405 : ((lowercase(&mult) == 'm') ? 1048576 : 1);; 13406 if (vec.len == 1 && vec.ptr[0] == '*') {; 13407 throttle = (int)v;; 13408 } else {; 13409 int matched = parse_match_net(&vec, rsa, 0);; 13410 if (matched >= 0) {; 13411 /* a valid IP subnet */; 13412 if (matched) {; 13413 throttle = (int)v;; 13414 }; 13415 } else if (match_prefix(vec.ptr, vec.len, uri) > 0) {; 13416 throttle = (int)v;; 13417 }; 13418 }; 13419 }; 13420 ; 13421 return throttle;; 13422}; 13423 ; 13424 ; 13425/* The mg_upload function is superseeded by mg_handle_form_request. */; 13426#include ""handle_form.inl""; 13427 ; 13428 ; 13429static int; 13430get_first_ssl_listener_index(const struct mg_context *ctx); 13431{; 13432 unsigned int i;; 13433 int idx = -1;; 13434 if (ctx) {; 13435 for (i = 0; ((idx == -1) && (i < ctx->num_listening_sockets)); i++)",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:393451,Availability,error,error,393451,"s_ssl ? ((int)(i)) : -1;; 13437 }; 13438 }; 13439 return idx;; 13440}; 13441 ; 13442 ; 13443/* Return host (without port) */; 13444static void; 13445get_host_from_request_info(struct vec *host, const struct mg_request_info *ri); 13446{; 13447 const char *host_header =; 13448 get_header(ri->http_headers, ri->num_headers, ""Host"");; 13449 ; 13450 host->ptr = NULL;; 13451 host->len = 0;; 13452 ; 13453 if (host_header != NULL) {; 13454 const char *pos;; 13455 ; 13456 /* If the ""Host"" is an IPv6 address, like [::1], parse until ]; 13457 * is found. */; 13458 if (*host_header == '[') {; 13459 pos = strchr(host_header, ']');; 13460 if (!pos) {; 13461 /* Malformed hostname starts with '[', but no ']' found */; 13462 DEBUG_TRACE(""%s"", ""Host name format error '[' without ']'"");; 13463 return;; 13464 }; 13465 /* terminate after ']' */; 13466 host->ptr = host_header;; 13467 host->len = (size_t)(pos + 1 - host_header);; 13468 } else {; 13469 /* Otherwise, a ':' separates hostname and port number */; 13470 pos = strchr(host_header, ':');; 13471 if (pos != NULL) {; 13472 host->len = (size_t)(pos - host_header);; 13473 } else {; 13474 host->len = strlen(host_header);; 13475 }; 13476 host->ptr = host_header;; 13477 }; 13478 }; 13479}; 13480 ; 13481 ; 13482static int; 13483switch_domain_context(struct mg_connection *conn); 13484{; 13485 struct vec host;; 13486 ; 13487 get_host_from_request_info(&host, &conn->request_info);; 13488 ; 13489 if (host.ptr) {; 13490 if (conn->ssl) {; 13491 /* This is a HTTPS connection, maybe we have a hostname; 13492 * from SNI (set in ssl_servername_callback). */; 13493 const char *sslhost = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 13494 if (sslhost && (conn->dom_ctx != &(conn->phys_ctx->dd))) {; 13495 /* We are not using the default domain */; 13496 if ((strlen(sslhost) != host.len); 13497 || mg_strncasecmp(host.ptr, sslhost, host.len)) {; 13498 /* Mismatch between SNI domain and HTTP domain */; 13499 DEBUG_TRACE(""Host mismatch: SNI: %s, HTTPS: %.*",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:399772,Availability,avail,available,399772,"e == AUTH_HANDLER) {; 13643 DEBUG_ASSERT(handler == NULL);; 13644 DEBUG_ASSERT(connect_handler == NULL && ready_handler == NULL; 13645 && data_handler == NULL && close_handler == NULL);; 13646 DEBUG_ASSERT(is_delete_request || (auth_handler != NULL));; 13647 if (handler != NULL) {; 13648 return;; 13649 }; 13650 if ((connect_handler != NULL) || (ready_handler != NULL); 13651 || (data_handler != NULL) || (close_handler != NULL)) {; 13652 return;; 13653 }; 13654 if (!is_delete_request && (auth_handler == NULL)) {; 13655 return;; 13656 }; 13657 } else {; 13658 /* Unknown handler type. */; 13659 return;; 13660 }; 13661 ; 13662 if (!phys_ctx || !dom_ctx) {; 13663 /* no context available */; 13664 return;; 13665 }; 13666 ; 13667 mg_lock_context(phys_ctx);; 13668 ; 13669 /* first try to find an existing handler */; 13670 do {; 13671 lastref = &(dom_ctx->handlers);; 13672 for (tmp_rh = dom_ctx->handlers; tmp_rh != NULL;; 13673 tmp_rh = tmp_rh->next) {; 13674 if (tmp_rh->handler_type == handler_type; 13675 && (urilen == tmp_rh->uri_len) && !strcmp(tmp_rh->uri, uri)) {; 13676 if (!is_delete_request) {; 13677 /* update existing handler */; 13678 if (handler_type == REQUEST_HANDLER) {; 13679 /* Wait for end of use before updating */; 13680 if (tmp_rh->refcount) {; 13681 mg_unlock_context(phys_ctx);; 13682 mg_sleep(1);; 13683 mg_lock_context(phys_ctx);; 13684 /* tmp_rh might have been freed, search again. */; 13685 break;; 13686 }; 13687 /* Ok, the handler is no more use -> Update it */; 13688 tmp_rh->handler = handler;; 13689 } else if (handler_type == WEBSOCKET_HANDLER) {; 13690 tmp_rh->subprotocols = subprotocols;; 13691 tmp_rh->connect_handler = connect_handler;; 13692 tmp_rh->ready_handler = ready_handler;; 13693 tmp_rh->data_handler = data_handler;; 13694 tmp_rh->close_handler = close_handler;; 13695 } else { /* AUTH_HANDLER */; 13696 tmp_rh->auth_handler = auth_handler;; 13697 }; 13698 tmp_rh->cbdata = cbdata;; 13699 } else {; 13700 /* remove existing handler */; 13701 if (",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:412257,Availability,avail,available,412257,"internal state (required for HTTP/2 proxy) */; 14041 conn->request_state = 0;; 14042 ; 14043 /* 1. get the request url */; 14044 /* 1.1. split into url and query string */; 14045 if ((conn->request_info.query_string = strchr(ri->request_uri, '?')); 14046 != NULL) {; 14047 *((char *)conn->request_info.query_string++) = '\0';; 14048 }; 14049 ; 14050 /* 1.2. do a https redirect, if required. Do not decode URIs yet. */; 14051 if (!conn->client.is_ssl && conn->client.ssl_redir) {; 14052 ssl_index = get_first_ssl_listener_index(conn->phys_ctx);; 14053 if (ssl_index >= 0) {; 14054 int port = (int)ntohs(USA_IN_PORT_UNSAFE(; 14055 &(conn->phys_ctx->listening_sockets[ssl_index].lsa)));; 14056 redirect_to_https_port(conn, port);; 14057 } else {; 14058 /* A http to https forward port has been specified,; 14059 * but no https port to forward to. */; 14060 mg_send_http_error(conn,; 14061 503,; 14062 ""%s"",; 14063 ""Error: SSL forward not configured properly"");; 14064 mg_cry_internal(conn,; 14065 ""%s"",; 14066 ""Can not redirect to SSL, no SSL port available"");; 14067 }; 14068 return;; 14069 }; 14070 uri_len = (int)strlen(ri->local_uri);; 14071 ; 14072 /* 1.3. decode url (if config says so) */; 14073 if (should_decode_url(conn)) {; 14074 mg_url_decode(; 14075 ri->local_uri, uri_len, (char *)ri->local_uri, uri_len + 1, 0);; 14076 }; 14077 ; 14078 /* URL decode the query-string only if explicity set in the configuration */; 14079 if (conn->request_info.query_string) {; 14080 if (should_decode_query_string(conn)) {; 14081 url_decode_in_place((char *)conn->request_info.query_string);; 14082 }; 14083 }; 14084 ; 14085 /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is not; 14086 * possible. The fact that we cleaned the URI is stored in that the; 14087 * pointer to ri->local_ur and ri->local_uri_raw are now different.; 14088 * ri->local_uri_raw still points to memory allocated in; 14089 * worker_thread_run(). ri->local_uri is private to the request so we; 14090 * don't have t",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:420692,Availability,avail,available,420692,"uth_callback_data)) {; 14273 ; 14274 /* Callback handler will not be used anymore. Release it */; 14275 release_handler_ref(conn, handler_info);; 14276 ; 14277 return;; 14278 }; 14279 } else if (is_put_or_delete_request && !is_script_resource; 14280 && !is_callback_resource) {; 14281 HTTP1_only;; 14282 /* 6.2. this request is a PUT/DELETE to a real file */; 14283 /* 6.2.1. thus, the server must have real files */; 14284#if defined(NO_FILES); 14285 if (1) {; 14286#else; 14287 if (conn->dom_ctx->config[DOCUMENT_ROOT] == NULL) {; 14288#endif; 14289 /* This code path will not be called for request handlers */; 14290 DEBUG_ASSERT(handler_info == NULL);; 14291 ; 14292 /* This server does not have any real files, thus the; 14293 * PUT/DELETE methods are not valid. */; 14294 mg_send_http_error(conn,; 14295 405,; 14296 ""%s method not allowed"",; 14297 conn->request_info.request_method);; 14298 return;; 14299 }; 14300 ; 14301#if !defined(NO_FILES); 14302 /* 6.2.2. Check if put authorization for static files is; 14303 * available.; 14304 */; 14305 if (!is_authorized_for_put(conn)) {; 14306 send_authorization_request(conn, NULL);; 14307 return;; 14308 }; 14309#endif; 14310 ; 14311 } else {; 14312 /* 6.3. This is either a OPTIONS, GET, HEAD or POST request,; 14313 * or it is a PUT or DELETE request to a resource that does not; 14314 * correspond to a file. Check authorization. */; 14315 if (!check_authorization(conn, path)) {; 14316 send_authorization_request(conn, NULL);; 14317 ; 14318 /* Callback handler will not be used anymore. Release it */; 14319 release_handler_ref(conn, handler_info);; 14320 ; 14321 return;; 14322 }; 14323 }; 14324 ; 14325 /* request is authorized or does not need authorization */; 14326 ; 14327 /* 7. check if there are request handlers for this uri */; 14328 if (is_callback_resource) {; 14329 HTTP1_only;; 14330 if (!is_websocket_request) {; 14331 i = callback_handler(conn, callback_data);; 14332 ; 14333 /* Callback handler will not be used anymore. Releas",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:428378,Availability,error,error,428378,"od, ""PROPFIND"")) {; 14511 handle_propfind(conn, path, &file.stat);; 14512 return;; 14513 }; 14514 /* 13.2. Handle OPTIONS for files */; 14515 if (!strcmp(ri->request_method, ""OPTIONS"")) {; 14516 /* This standard handler is only used for real files.; 14517 * Scripts should support the OPTIONS method themselves, to allow a; 14518 * maximum flexibility.; 14519 * Lua and CGI scripts may fully support CORS this way (including; 14520 * preflights). */; 14521 send_options(conn);; 14522 return;; 14523 }; 14524 /* 13.3. everything but GET and HEAD (e.g. POST) */; 14525 if ((0 != strcmp(ri->request_method, ""GET"")); 14526 && (0 != strcmp(ri->request_method, ""HEAD""))) {; 14527 mg_send_http_error(conn,; 14528 405,; 14529 ""%s method not allowed"",; 14530 conn->request_info.request_method);; 14531 return;; 14532 }; 14533 ; 14534 /* 14. directories */; 14535 if (file.stat.is_directory) {; 14536 /* Substitute files have already been handled above. */; 14537 /* Here we can either generate and send a directory listing,; 14538 * or send an ""access denied"" error. */; 14539 if (!mg_strcasecmp(conn->dom_ctx->config[ENABLE_DIRECTORY_LISTING],; 14540 ""yes"")) {; 14541 handle_directory_request(conn, path);; 14542 } else {; 14543 mg_send_http_error(conn,; 14544 403,; 14545 ""%s"",; 14546 ""Error: Directory listing denied"");; 14547 }; 14548 return;; 14549 }; 14550 ; 14551 /* 15. Files with search/replace patterns: LSP and SSI */; 14552 if (is_template_text_file) {; 14553 HTTP1_only;; 14554 handle_file_based_request(conn, path, &file);; 14555 return;; 14556 }; 14557 ; 14558 /* 16. Static file - maybe cached */; 14559#if !defined(NO_CACHING); 14560 if ((!conn->in_error_handler) && is_not_modified(conn, &file.stat)) {; 14561 /* Send 304 ""Not Modified"" - this must not send any body data */; 14562 handle_not_modified_static_file_request(conn, &file);; 14563 return;; 14564 }; 14565#endif /* !NO_CACHING */; 14566 ; 14567 /* 17. Static file - not cached */; 14568 handle_static_file_request(conn, path, &fil",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:435604,Availability,error,errors,435604,"int; 14723parse_port_string(const struct vec *vec, struct socket *so, int *ip_version); 14724{; 14725 unsigned int a, b, c, d;; 14726 unsigned port;; 14727 unsigned long portUL;; 14728 int ch, len;; 14729 const char *cb;; 14730 char *endptr;; 14731#if defined(USE_IPV6); 14732 char buf[100] = {0};; 14733#endif; 14734 ; 14735 /* MacOS needs that. If we do not zero it, subsequent bind() will fail.; 14736 * Also, all-zeroes in the socket address means binding to all addresses; 14737 * for both IPv4 and IPv6 (INADDR_ANY and IN6ADDR_ANY_INIT). */; 14738 memset(so, 0, sizeof(*so));; 14739 so->lsa.sin.sin_family = AF_INET;; 14740 *ip_version = 0;; 14741 ; 14742 /* Initialize len as invalid. */; 14743 port = 0;; 14744 len = 0;; 14745 ; 14746 /* Test for different ways to format this string */; 14747 if (sscanf(vec->ptr,; 14748 ""%u.%u.%u.%u:%u%n"",; 14749 &a,; 14750 &b,; 14751 &c,; 14752 &d,; 14753 &port,; 14754 &len) // NOLINT(cert-err34-c) 'sscanf' used to convert a string; 14755 // to an integer value, but function will not report; 14756 // conversion errors; consider using 'strtol' instead; 14757 == 5) {; 14758 /* Bind to a specific IPv4 address, e.g. 192.168.1.5:8080 */; 14759 so->lsa.sin.sin_addr.s_addr =; 14760 htonl((a << 24) | (b << 16) | (c << 8) | d);; 14761 so->lsa.sin.sin_port = htons((uint16_t)port);; 14762 *ip_version = 4;; 14763 ; 14764#if defined(USE_IPV6); 14765 } else if (sscanf(vec->ptr, ""[%49[^]]]:%u%n"", buf, &port, &len) == 2; 14766 && ((size_t)len <= vec->len); 14767 && mg_inet_pton(; 14768 AF_INET6, buf, &so->lsa.sin6, sizeof(so->lsa.sin6), 0)) {; 14769 /* IPv6 address, examples: see above */; 14770 /* so->lsa.sin6.sin6_family = AF_INET6; already set by mg_inet_pton; 14771 */; 14772 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14773 *ip_version = 6;; 14774#endif; 14775 ; 14776 } else if ((vec->ptr[0] == '+'); 14777 && (sscanf(vec->ptr + 1, ""%u%n"", &port, &len); 14778 == 1)) { // NOLINT(cert-err34-c) 'sscanf' used to convert a; 14779 // string to an ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:436609,Availability,error,errors,436609,"rs; consider using 'strtol' instead; 14757 == 5) {; 14758 /* Bind to a specific IPv4 address, e.g. 192.168.1.5:8080 */; 14759 so->lsa.sin.sin_addr.s_addr =; 14760 htonl((a << 24) | (b << 16) | (c << 8) | d);; 14761 so->lsa.sin.sin_port = htons((uint16_t)port);; 14762 *ip_version = 4;; 14763 ; 14764#if defined(USE_IPV6); 14765 } else if (sscanf(vec->ptr, ""[%49[^]]]:%u%n"", buf, &port, &len) == 2; 14766 && ((size_t)len <= vec->len); 14767 && mg_inet_pton(; 14768 AF_INET6, buf, &so->lsa.sin6, sizeof(so->lsa.sin6), 0)) {; 14769 /* IPv6 address, examples: see above */; 14770 /* so->lsa.sin6.sin6_family = AF_INET6; already set by mg_inet_pton; 14771 */; 14772 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14773 *ip_version = 6;; 14774#endif; 14775 ; 14776 } else if ((vec->ptr[0] == '+'); 14777 && (sscanf(vec->ptr + 1, ""%u%n"", &port, &len); 14778 == 1)) { // NOLINT(cert-err34-c) 'sscanf' used to convert a; 14779 // string to an integer value, but function will not; 14780 // report conversion errors; consider using 'strtol'; 14781 // instead; 14782 ; 14783 /* Port is specified with a +, bind to IPv6 and IPv4, INADDR_ANY */; 14784 /* Add 1 to len for the + character we skipped before */; 14785 len++;; 14786 ; 14787#if defined(USE_IPV6); 14788 /* Set socket family to IPv6, do not use IPV6_V6ONLY */; 14789 so->lsa.sin6.sin6_family = AF_INET6;; 14790 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14791 *ip_version = 4 + 6;; 14792#else; 14793 /* Bind to IPv4 only, since IPv6 is not built in. */; 14794 so->lsa.sin.sin_port = htons((uint16_t)port);; 14795 *ip_version = 4;; 14796#endif; 14797 ; 14798 } else if (is_valid_port(portUL = strtoul(vec->ptr, &endptr, 0)); 14799 && (vec->ptr != endptr)) {; 14800 len = (int)(endptr - vec->ptr);; 14801 port = (uint16_t)portUL;; 14802 /* If only port is specified, bind to IPv4, INADDR_ANY */; 14803 so->lsa.sin.sin_port = htons((uint16_t)port);; 14804 *ip_version = 4;; 14805 ; 14806 } else if ((cb = strchr(vec->ptr, ':')) != NULL) {; 14807 ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:438691,Availability,error,errors,438691,"hostname. This check algotithm; 14808 * will only work for RFC 952 compliant hostnames,; 14809 * starting with a letter, containing only letters,; 14810 * digits and hyphen ('-'). Newer specs may allow; 14811 * more, but this is not guaranteed here, since it; 14812 * may interfere with rules for port option lists. */; 14813 ; 14814 /* According to RFC 1035, hostnames are restricted to 255 characters; 14815 * in total (63 between two dots). */; 14816 char hostname[256];; 14817 size_t hostnlen = (size_t)(cb - vec->ptr);; 14818 ; 14819 if ((hostnlen >= vec->len) || (hostnlen >= sizeof(hostname))) {; 14820 /* This would be invalid in any case */; 14821 *ip_version = 0;; 14822 return 0;; 14823 }; 14824 ; 14825 mg_strlcpy(hostname, vec->ptr, hostnlen + 1);; 14826 ; 14827 if (mg_inet_pton(; 14828 AF_INET, hostname, &so->lsa.sin, sizeof(so->lsa.sin), 1)) {; 14829 if (sscanf(cb + 1, ""%u%n"", &port, &len); 14830 == 1) { // NOLINT(cert-err34-c) 'sscanf' used to convert a; 14831 // string to an integer value, but function will not; 14832 // report conversion errors; consider using 'strtol'; 14833 // instead; 14834 *ip_version = 4;; 14835 so->lsa.sin.sin_port = htons((uint16_t)port);; 14836 len += (int)(hostnlen + 1);; 14837 } else {; 14838 len = 0;; 14839 }; 14840#if defined(USE_IPV6); 14841 } else if (mg_inet_pton(AF_INET6,; 14842 hostname,; 14843 &so->lsa.sin6,; 14844 sizeof(so->lsa.sin6),; 14845 1)) {; 14846 if (sscanf(cb + 1, ""%u%n"", &port, &len) == 1) {; 14847 *ip_version = 6;; 14848 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14849 len += (int)(hostnlen + 1);; 14850 } else {; 14851 len = 0;; 14852 }; 14853#endif; 14854 } else {; 14855 len = 0;; 14856 }; 14857 ; 14858#if defined(USE_X_DOM_SOCKET); 14859 ; 14860 } else if (vec->ptr[0] == 'x') {; 14861 /* unix (linux) domain socket */; 14862 if (vec->len < sizeof(so->lsa.sun.sun_path)) {; 14863 len = vec->len;; 14864 so->lsa.sun.sun_family = AF_UNIX;; 14865 memset(so->lsa.sun.sun_path, 0, sizeof(so->lsa.sun.sun_path));; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:439868,Availability,failure,failure,439868," 14835 so->lsa.sin.sin_port = htons((uint16_t)port);; 14836 len += (int)(hostnlen + 1);; 14837 } else {; 14838 len = 0;; 14839 }; 14840#if defined(USE_IPV6); 14841 } else if (mg_inet_pton(AF_INET6,; 14842 hostname,; 14843 &so->lsa.sin6,; 14844 sizeof(so->lsa.sin6),; 14845 1)) {; 14846 if (sscanf(cb + 1, ""%u%n"", &port, &len) == 1) {; 14847 *ip_version = 6;; 14848 so->lsa.sin6.sin6_port = htons((uint16_t)port);; 14849 len += (int)(hostnlen + 1);; 14850 } else {; 14851 len = 0;; 14852 }; 14853#endif; 14854 } else {; 14855 len = 0;; 14856 }; 14857 ; 14858#if defined(USE_X_DOM_SOCKET); 14859 ; 14860 } else if (vec->ptr[0] == 'x') {; 14861 /* unix (linux) domain socket */; 14862 if (vec->len < sizeof(so->lsa.sun.sun_path)) {; 14863 len = vec->len;; 14864 so->lsa.sun.sun_family = AF_UNIX;; 14865 memset(so->lsa.sun.sun_path, 0, sizeof(so->lsa.sun.sun_path));; 14866 memcpy(so->lsa.sun.sun_path, (char *)vec->ptr + 1, vec->len - 1);; 14867 port = 0;; 14868 *ip_version = 99;; 14869 } else {; 14870 /* String too long */; 14871 len = 0;; 14872 }; 14873#endif; 14874 ; 14875 } else {; 14876 /* Parsing failure. */; 14877 len = 0;; 14878 }; 14879 ; 14880 /* sscanf and the option splitting code ensure the following condition; 14881 * Make sure the port is valid and vector ends with the port, 's' or 'r' */; 14882 if ((len > 0) && is_valid_port(port); 14883 && (((size_t)len == vec->len) || (((size_t)len + 1) == vec->len))) {; 14884 /* Next character after the port number */; 14885 ch = ((size_t)len < vec->len) ? vec->ptr[len] : '\0';; 14886 so->is_ssl = (ch == 's');; 14887 so->ssl_redir = (ch == 'r');; 14888 if ((ch == '\0') || (ch == 's') || (ch == 'r')) {; 14889 return 1;; 14890 }; 14891 }; 14892 ; 14893 /* Reset ip_version to 0 if there is an error */; 14894 *ip_version = 0;; 14895 return 0;; 14896}; 14897 ; 14898 ; 14899/* Is there any SSL port in use? */; 14900static int; 14901is_ssl_port_used(const char *ports); 14902{; 14903 if (ports) {; 14904 /* There are several different allo",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:440520,Availability,error,error,440520,"; 14862 if (vec->len < sizeof(so->lsa.sun.sun_path)) {; 14863 len = vec->len;; 14864 so->lsa.sun.sun_family = AF_UNIX;; 14865 memset(so->lsa.sun.sun_path, 0, sizeof(so->lsa.sun.sun_path));; 14866 memcpy(so->lsa.sun.sun_path, (char *)vec->ptr + 1, vec->len - 1);; 14867 port = 0;; 14868 *ip_version = 99;; 14869 } else {; 14870 /* String too long */; 14871 len = 0;; 14872 }; 14873#endif; 14874 ; 14875 } else {; 14876 /* Parsing failure. */; 14877 len = 0;; 14878 }; 14879 ; 14880 /* sscanf and the option splitting code ensure the following condition; 14881 * Make sure the port is valid and vector ends with the port, 's' or 'r' */; 14882 if ((len > 0) && is_valid_port(port); 14883 && (((size_t)len == vec->len) || (((size_t)len + 1) == vec->len))) {; 14884 /* Next character after the port number */; 14885 ch = ((size_t)len < vec->len) ? vec->ptr[len] : '\0';; 14886 so->is_ssl = (ch == 's');; 14887 so->ssl_redir = (ch == 'r');; 14888 if ((ch == '\0') || (ch == 's') || (ch == 'r')) {; 14889 return 1;; 14890 }; 14891 }; 14892 ; 14893 /* Reset ip_version to 0 if there is an error */; 14894 *ip_version = 0;; 14895 return 0;; 14896}; 14897 ; 14898 ; 14899/* Is there any SSL port in use? */; 14900static int; 14901is_ssl_port_used(const char *ports); 14902{; 14903 if (ports) {; 14904 /* There are several different allowed syntax variants:; 14905 * - ""80"" for a single port using every network interface; 14906 * - ""localhost:80"" for a single port using only localhost; 14907 * - ""80,localhost:8080"" for two ports, one bound to localhost; 14908 * - ""80,127.0.0.1:8084,[::1]:8086"" for three ports, one bound; 14909 * to IPv4 localhost, one to IPv6 localhost; 14910 * - ""+80"" use port 80 for IPv4 and IPv6; 14911 * - ""+80r,+443s"" port 80 (HTTP) is a redirect to port 443 (HTTPS),; 14912 * for both: IPv4 and IPv4; 14913 * - ""+443s,localhost:8080"" port 443 (HTTPS) for every interface,; 14914 * additionally port 8080 bound to localhost connections; 14915 *; 14916 * If we just look for 's' anywhe",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:445316,Availability,error,errors,445316,"st of protocol numbers (e.g., TCP==6) see:; 15014 * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml; 15015 */; 15016 if ((so.sock =; 15017 socket(so.lsa.sa.sa_family,; 15018 SOCK_STREAM,; 15019 (ip_version == 99) ? (/* LOCAL */ 0) : (/* TCP */ 6))); 15020 == INVALID_SOCKET) {; 15021 ; 15022 mg_cry_ctx_internal(phys_ctx,; 15023 ""cannot create socket (entry %i)"",; 15024 portsTotal);; 15025 continue;; 15026 }; 15027 ; 15028#if defined(_WIN32); 15029 /* Windows SO_REUSEADDR lets many procs binds to a; 15030 * socket, SO_EXCLUSIVEADDRUSE makes the bind fail; 15031 * if someone already has the socket -- DTL */; 15032 /* NOTE: If SO_EXCLUSIVEADDRUSE is used,; 15033 * Windows might need a few seconds before; 15034 * the same port can be used again in the; 15035 * same process, so a short Sleep may be; 15036 * required between mg_stop and mg_start.; 15037 */; 15038 if (setsockopt(so.sock,; 15039 SOL_SOCKET,; 15040 SO_EXCLUSIVEADDRUSE,; 15041 (SOCK_OPT_TYPE)&on,; 15042 sizeof(on)); 15043 != 0) {; 15044 ; 15045 /* Set reuse option, but don't abort on errors. */; 15046 mg_cry_ctx_internal(; 15047 phys_ctx,; 15048 ""cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)"",; 15049 portsTotal);; 15050 }; 15051#else; 15052 if (setsockopt(so.sock,; 15053 SOL_SOCKET,; 15054 SO_REUSEADDR,; 15055 (SOCK_OPT_TYPE)&on,; 15056 sizeof(on)); 15057 != 0) {; 15058 ; 15059 /* Set reuse option, but don't abort on errors. */; 15060 mg_cry_ctx_internal(; 15061 phys_ctx,; 15062 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15063 portsTotal);; 15064 }; 15065#endif; 15066 ; 15067#if defined(USE_X_DOM_SOCKET); 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:445666,Availability,error,errors,445666," ""cannot create socket (entry %i)"",; 15024 portsTotal);; 15025 continue;; 15026 }; 15027 ; 15028#if defined(_WIN32); 15029 /* Windows SO_REUSEADDR lets many procs binds to a; 15030 * socket, SO_EXCLUSIVEADDRUSE makes the bind fail; 15031 * if someone already has the socket -- DTL */; 15032 /* NOTE: If SO_EXCLUSIVEADDRUSE is used,; 15033 * Windows might need a few seconds before; 15034 * the same port can be used again in the; 15035 * same process, so a short Sleep may be; 15036 * required between mg_stop and mg_start.; 15037 */; 15038 if (setsockopt(so.sock,; 15039 SOL_SOCKET,; 15040 SO_EXCLUSIVEADDRUSE,; 15041 (SOCK_OPT_TYPE)&on,; 15042 sizeof(on)); 15043 != 0) {; 15044 ; 15045 /* Set reuse option, but don't abort on errors. */; 15046 mg_cry_ctx_internal(; 15047 phys_ctx,; 15048 ""cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)"",; 15049 portsTotal);; 15050 }; 15051#else; 15052 if (setsockopt(so.sock,; 15053 SOL_SOCKET,; 15054 SO_REUSEADDR,; 15055 (SOCK_OPT_TYPE)&on,; 15056 sizeof(on)); 15057 != 0) {; 15058 ; 15059 /* Set reuse option, but don't abort on errors. */; 15060 mg_cry_ctx_internal(; 15061 phys_ctx,; 15062 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15063 portsTotal);; 15064 }; 15065#endif; 15066 ; 15067#if defined(USE_X_DOM_SOCKET); 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 (void *)&off,; 15082 sizeof(off)); 15083 != 0) {; 15084 ; 15085 /* Set IPv6 only option, but don't abort on errors. */; 15086 mg_cry_ctx_internal(phys_ctx,; 15087 ""cannot set socket option ""; 15088 ""IPV6_V6ONLY=off (entry %i)"",; 15089 portsTotal);; 15090 }; 15091 } else {; 15092 if (so.lsa.sa.sa_family == AF_INET6; 15093 && setsockopt(so.sock,; 15094 I",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:446343,Availability,error,errors,446343,"44 ; 15045 /* Set reuse option, but don't abort on errors. */; 15046 mg_cry_ctx_internal(; 15047 phys_ctx,; 15048 ""cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)"",; 15049 portsTotal);; 15050 }; 15051#else; 15052 if (setsockopt(so.sock,; 15053 SOL_SOCKET,; 15054 SO_REUSEADDR,; 15055 (SOCK_OPT_TYPE)&on,; 15056 sizeof(on)); 15057 != 0) {; 15058 ; 15059 /* Set reuse option, but don't abort on errors. */; 15060 mg_cry_ctx_internal(; 15061 phys_ctx,; 15062 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15063 portsTotal);; 15064 }; 15065#endif; 15066 ; 15067#if defined(USE_X_DOM_SOCKET); 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 (void *)&off,; 15082 sizeof(off)); 15083 != 0) {; 15084 ; 15085 /* Set IPv6 only option, but don't abort on errors. */; 15086 mg_cry_ctx_internal(phys_ctx,; 15087 ""cannot set socket option ""; 15088 ""IPV6_V6ONLY=off (entry %i)"",; 15089 portsTotal);; 15090 }; 15091 } else {; 15092 if (so.lsa.sa.sa_family == AF_INET6; 15093 && setsockopt(so.sock,; 15094 IPPROTO_IPV6,; 15095 IPV6_V6ONLY,; 15096 (void *)&on,; 15097 sizeof(on)); 15098 != 0) {; 15099 ; 15100 /* Set IPv6 only option, but don't abort on errors. */; 15101 mg_cry_ctx_internal(phys_ctx,; 15102 ""cannot set socket option ""; 15103 ""IPV6_V6ONLY=on (entry %i)"",; 15104 portsTotal);; 15105 }; 15106 }; 15107#else; 15108 mg_cry_ctx_internal(phys_ctx, ""%s"", ""IPv6 not available"");; 15109 closesocket(so.sock);; 15110 so.sock = INVALID_SOCKET;; 15111 continue;; 15112#endif; 15113 }; 15114 ; 15115 if (so.lsa.sa.sa_family == AF_INET) {; 15116 ; 15117 len = sizeof(so.lsa.sin);; 15118 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15119 mg_cry_ctx_internal(phys_ctx,; 15120 ""cannot",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:446735,Availability,error,errors,446735,"bort on errors. */; 15060 mg_cry_ctx_internal(; 15061 phys_ctx,; 15062 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15063 portsTotal);; 15064 }; 15065#endif; 15066 ; 15067#if defined(USE_X_DOM_SOCKET); 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 (void *)&off,; 15082 sizeof(off)); 15083 != 0) {; 15084 ; 15085 /* Set IPv6 only option, but don't abort on errors. */; 15086 mg_cry_ctx_internal(phys_ctx,; 15087 ""cannot set socket option ""; 15088 ""IPV6_V6ONLY=off (entry %i)"",; 15089 portsTotal);; 15090 }; 15091 } else {; 15092 if (so.lsa.sa.sa_family == AF_INET6; 15093 && setsockopt(so.sock,; 15094 IPPROTO_IPV6,; 15095 IPV6_V6ONLY,; 15096 (void *)&on,; 15097 sizeof(on)); 15098 != 0) {; 15099 ; 15100 /* Set IPv6 only option, but don't abort on errors. */; 15101 mg_cry_ctx_internal(phys_ctx,; 15102 ""cannot set socket option ""; 15103 ""IPV6_V6ONLY=on (entry %i)"",; 15104 portsTotal);; 15105 }; 15106 }; 15107#else; 15108 mg_cry_ctx_internal(phys_ctx, ""%s"", ""IPv6 not available"");; 15109 closesocket(so.sock);; 15110 so.sock = INVALID_SOCKET;; 15111 continue;; 15112#endif; 15113 }; 15114 ; 15115 if (so.lsa.sa.sa_family == AF_INET) {; 15116 ; 15117 len = sizeof(so.lsa.sin);; 15118 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15119 mg_cry_ctx_internal(phys_ctx,; 15120 ""cannot bind to %.*s: %d (%s)"",; 15121 (int)vec.len,; 15122 vec.ptr,; 15123 (int)ERRNO,; 15124 strerror(errno));; 15125 closesocket(so.sock);; 15126 so.sock = INVALID_SOCKET;; 15127 continue;; 15128 }; 15129 }; 15130#if defined(USE_IPV6); 15131 else if (so.lsa.sa.sa_family == AF_INET6) {; 15132 ; 15133 len = sizeof(so.lsa.sin6);; 15134 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15135 mg_cry_ctx_i",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:446957,Availability,avail,available,446957," 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 (void *)&off,; 15082 sizeof(off)); 15083 != 0) {; 15084 ; 15085 /* Set IPv6 only option, but don't abort on errors. */; 15086 mg_cry_ctx_internal(phys_ctx,; 15087 ""cannot set socket option ""; 15088 ""IPV6_V6ONLY=off (entry %i)"",; 15089 portsTotal);; 15090 }; 15091 } else {; 15092 if (so.lsa.sa.sa_family == AF_INET6; 15093 && setsockopt(so.sock,; 15094 IPPROTO_IPV6,; 15095 IPV6_V6ONLY,; 15096 (void *)&on,; 15097 sizeof(on)); 15098 != 0) {; 15099 ; 15100 /* Set IPv6 only option, but don't abort on errors. */; 15101 mg_cry_ctx_internal(phys_ctx,; 15102 ""cannot set socket option ""; 15103 ""IPV6_V6ONLY=on (entry %i)"",; 15104 portsTotal);; 15105 }; 15106 }; 15107#else; 15108 mg_cry_ctx_internal(phys_ctx, ""%s"", ""IPv6 not available"");; 15109 closesocket(so.sock);; 15110 so.sock = INVALID_SOCKET;; 15111 continue;; 15112#endif; 15113 }; 15114 ; 15115 if (so.lsa.sa.sa_family == AF_INET) {; 15116 ; 15117 len = sizeof(so.lsa.sin);; 15118 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15119 mg_cry_ctx_internal(phys_ctx,; 15120 ""cannot bind to %.*s: %d (%s)"",; 15121 (int)vec.len,; 15122 vec.ptr,; 15123 (int)ERRNO,; 15124 strerror(errno));; 15125 closesocket(so.sock);; 15126 so.sock = INVALID_SOCKET;; 15127 continue;; 15128 }; 15129 }; 15130#if defined(USE_IPV6); 15131 else if (so.lsa.sa.sa_family == AF_INET6) {; 15132 ; 15133 len = sizeof(so.lsa.sin6);; 15134 if (bind(so.sock, &so.lsa.sa, len) != 0) {; 15135 mg_cry_ctx_internal(phys_ctx,; 15136 ""cannot bind to IPv6 %.*s: %d (%s)"",; 15137 (int)vec.len,; 15138 vec.ptr,; 15139 (int)ERRNO,; 15140 strerror(errno));; 15141 closesocket(so.sock);; 15142 so.sock = INVALID_SOCKET;; 15",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:456259,Availability,error,error,456259,": """",; 15395 ri->http_version,; 15396 conn->status_code,; 15397 conn->num_bytes_sent,; 15398 referer,; 15399 user_agent);; 15400 }; 15401 ; 15402 /* Here we have a log message in log_buf. Call the callback */; 15403 if (conn->phys_ctx->callbacks.log_access) {; 15404 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15405 /* do not log if callack returns non-zero */; 15406 if (fi.access.fp) {; 15407 mg_fclose(&fi.access);; 15408 }; 15409 return;; 15410 }; 15411 }; 15412 ; 15413 /* Store in file */; 15414 if (fi.access.fp) {; 15415 int ok = 1;; 15416 flockfile(fi.access.fp);; 15417 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15418 ok = 0;; 15419 }; 15420 if (fflush(fi.access.fp) != 0) {; 15421 ok = 0;; 15422 }; 15423 funlockfile(fi.access.fp);; 15424 if (mg_fclose(&fi.access) != 0) {; 15425 ok = 0;; 15426 }; 15427 if (!ok) {; 15428 mg_cry_internal(conn,; 15429 ""Error writing log file %s"",; 15430 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15431 }; 15432 }; 15433}; 15434#else; 15435#error ""Either enable filesystems or provide a custom log_access implementation""; 15436#endif /* Externally provided function */; 15437 ; 15438 ; 15439/* Verify given socket address against the ACL.; 15440 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15441 */; 15442static int; 15443check_acl(struct mg_context *phys_ctx, const union usa *sa); 15444{; 15445 int allowed, flag, matched;; 15446 struct vec vec;; 15447 ; 15448 if (phys_ctx) {; 15449 const char *list = phys_ctx->dd.config[ACCESS_CONTROL_LIST];; 15450 ; 15451 /* If any ACL is set, deny by default */; 15452 allowed = (list == NULL) ? '+' : '-';; 15453 ; 15454 while ((list = next_option(list, &vec, NULL)) != NULL) {; 15455 flag = vec.ptr[0];; 15456 matched = -1;; 15457 if ((vec.len > 0) && ((flag == '+') || (flag == '-'))) {; 15458 vec.ptr++;; 15459 vec.len--;; 15460 matched = parse_match_net(&vec, sa, 1);; 15461 }; 15462 if (matched < 0) {; 15463 mg_cry_ctx_internal(phys_ctx,; 15464 ""%s: su",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:462282,Availability,error,error,462282,"x->config[SSL_CERTIFICATE]) == NULL) {; 15600 /* If pem is NULL and conn->phys_ctx->callbacks.init_ssl is not,; 15601 * refresh_trust still can not work. */; 15602 return 0;; 15603 }; 15604 chain = conn->dom_ctx->config[SSL_CERTIFICATE_CHAIN];; 15605 if (chain == NULL) {; 15606 /* pem is not NULL here */; 15607 chain = pem;; 15608 }; 15609 if (*chain == 0) {; 15610 chain = NULL;; 15611 }; 15612 ; 15613 if (stat(pem, &cert_buf) != -1) {; 15614 t = (int64_t)cert_buf.st_mtime;; 15615 }; 15616 ; 15617 mg_lock_context(conn->phys_ctx);; 15618 if ((t != 0) && (conn->dom_ctx->ssl_cert_last_mtime != t)) {; 15619 conn->dom_ctx->ssl_cert_last_mtime = t;; 15620 ; 15621 should_verify_peer = 0;; 15622 if (conn->dom_ctx->config[SSL_DO_VERIFY_PEER] != NULL) {; 15623 if (mg_strcasecmp(conn->dom_ctx->config[SSL_DO_VERIFY_PEER], ""yes""); 15624 == 0) {; 15625 should_verify_peer = 1;; 15626 } else if (mg_strcasecmp(conn->dom_ctx->config[SSL_DO_VERIFY_PEER],; 15627 ""optional""); 15628 == 0) {; 15629 should_verify_peer = 1;; 15630 }; 15631 }; 15632 ; 15633 if (should_verify_peer) {; 15634 char *ca_path = conn->dom_ctx->config[SSL_CA_PATH];; 15635 char *ca_file = conn->dom_ctx->config[SSL_CA_FILE];; 15636 if (SSL_CTX_load_verify_locations(conn->dom_ctx->ssl_ctx,; 15637 ca_file,; 15638 ca_path); 15639 != 1) {; 15640 mg_unlock_context(conn->phys_ctx);; 15641 mg_cry_ctx_internal(; 15642 conn->phys_ctx,; 15643 ""SSL_CTX_load_verify_locations error: %s ""; 15644 ""ssl_verify_peer requires setting ""; 15645 ""either ssl_ca_path or ssl_ca_file. Is any of them ""; 15646 ""present in ""; 15647 ""the .conf file?"",; 15648 ssl_error());; 15649 return 0;; 15650 }; 15651 }; 15652 ; 15653 if (ssl_use_pem_file(conn->phys_ctx, conn->dom_ctx, pem, chain) == 0) {; 15654 mg_unlock_context(conn->phys_ctx);; 15655 return 0;; 15656 }; 15657 }; 15658 mg_unlock_context(conn->phys_ctx);; 15659 ; 15660 return 1;; 15661}; 15662 ; 15663#if defined(OPENSSL_API_1_1); 15664#else; 15665static pthread_mutex_t *ssl_mutexes;; 15666#endi",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:463699,Availability,error,error,463699,"lock_context(conn->phys_ctx);; 15641 mg_cry_ctx_internal(; 15642 conn->phys_ctx,; 15643 ""SSL_CTX_load_verify_locations error: %s ""; 15644 ""ssl_verify_peer requires setting ""; 15645 ""either ssl_ca_path or ssl_ca_file. Is any of them ""; 15646 ""present in ""; 15647 ""the .conf file?"",; 15648 ssl_error());; 15649 return 0;; 15650 }; 15651 }; 15652 ; 15653 if (ssl_use_pem_file(conn->phys_ctx, conn->dom_ctx, pem, chain) == 0) {; 15654 mg_unlock_context(conn->phys_ctx);; 15655 return 0;; 15656 }; 15657 }; 15658 mg_unlock_context(conn->phys_ctx);; 15659 ; 15660 return 1;; 15661}; 15662 ; 15663#if defined(OPENSSL_API_1_1); 15664#else; 15665static pthread_mutex_t *ssl_mutexes;; 15666#endif /* OPENSSL_API_1_1 */; 15667 ; 15668static int; 15669sslize(struct mg_connection *conn,; 15670 int (*func)(SSL *),; 15671 const struct mg_client_options *client_options); 15672{; 15673 int ret, err;; 15674 int short_trust;; 15675 unsigned timeout = 1024;; 15676 unsigned i;; 15677 ; 15678 if (!conn) {; 15679 return 0;; 15680 }; 15681 ; 15682 short_trust =; 15683 (conn->dom_ctx->config[SSL_SHORT_TRUST] != NULL); 15684 && (mg_strcasecmp(conn->dom_ctx->config[SSL_SHORT_TRUST], ""yes"") == 0);; 15685 ; 15686 if (short_trust) {; 15687 int trust_ret = refresh_trust(conn);; 15688 if (!trust_ret) {; 15689 return trust_ret;; 15690 }; 15691 }; 15692 ; 15693 mg_lock_context(conn->phys_ctx);; 15694 conn->ssl = SSL_new(conn->dom_ctx->ssl_ctx);; 15695 mg_unlock_context(conn->phys_ctx);; 15696 if (conn->ssl == NULL) {; 15697 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15698 OPENSSL_REMOVE_THREAD_STATE();; 15699 return 0;; 15700 }; 15701 SSL_set_app_data(conn->ssl, (char *)conn);; 15702 ; 15703 ret = SSL_set_fd(conn->ssl, conn->client.sock);; 15704 if (ret != 1) {; 15705 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15706 SSL_free(conn->ssl);; 15707 conn->ssl = NULL;; 15708 OPENSSL_REMOVE_THREAD_STATE();; 15709 return 0;; 15710 }; 15711 ; 15712 if (client_options) {; 15713 if (client_opt",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:463962,Availability,error,error,463962,"nn->dom_ctx->config[SSL_SHORT_TRUST] != NULL); 15684 && (mg_strcasecmp(conn->dom_ctx->config[SSL_SHORT_TRUST], ""yes"") == 0);; 15685 ; 15686 if (short_trust) {; 15687 int trust_ret = refresh_trust(conn);; 15688 if (!trust_ret) {; 15689 return trust_ret;; 15690 }; 15691 }; 15692 ; 15693 mg_lock_context(conn->phys_ctx);; 15694 conn->ssl = SSL_new(conn->dom_ctx->ssl_ctx);; 15695 mg_unlock_context(conn->phys_ctx);; 15696 if (conn->ssl == NULL) {; 15697 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15698 OPENSSL_REMOVE_THREAD_STATE();; 15699 return 0;; 15700 }; 15701 SSL_set_app_data(conn->ssl, (char *)conn);; 15702 ; 15703 ret = SSL_set_fd(conn->ssl, conn->client.sock);; 15704 if (ret != 1) {; 15705 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15706 SSL_free(conn->ssl);; 15707 conn->ssl = NULL;; 15708 OPENSSL_REMOVE_THREAD_STATE();; 15709 return 0;; 15710 }; 15711 ; 15712 if (client_options) {; 15713 if (client_options->host_name) {; 15714 SSL_set_tlsext_host_name(conn->ssl, client_options->host_name);; 15715 }; 15716 }; 15717 ; 15718 /* Reuse the request timeout for the SSL_Accept/SSL_connect timeout */; 15719 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 15720 /* NOTE: The loop below acts as a back-off, so we can end; 15721 * up sleeping for more (or less) than the REQUEST_TIMEOUT. */; 15722 int to = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]);; 15723 if (to >= 0) {; 15724 timeout = (unsigned)to;; 15725 }; 15726 }; 15727 ; 15728 /* SSL functions may fail and require to be called again:; 15729 * see https://www.openssl.org/docs/manmaster/ssl/SSL_get_error.html; 15730 * Here ""func"" could be SSL_connect or SSL_accept. */; 15731 for (i = 0; i <= timeout; i += 50) {; 15732 ERR_clear_error();; 15733 /* conn->dom_ctx may be changed here (see ssl_servername_callback) */; 15734 ret = func(conn->ssl);; 15735 if (ret != 1) {; 15736 err = SSL_get_error(conn->ssl, ret);; 15737 if ((err == SSL_ERROR_WANT_CONNECT); 15738 || (err == SSL_ERROR_WANT_ACCEPT); 1573",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:466103,Availability,error,error,466103,"if (ret != 1) {; 15736 err = SSL_get_error(conn->ssl, ret);; 15737 if ((err == SSL_ERROR_WANT_CONNECT); 15738 || (err == SSL_ERROR_WANT_ACCEPT); 15739 || (err == SSL_ERROR_WANT_READ) || (err == SSL_ERROR_WANT_WRITE); 15740 || (err == SSL_ERROR_WANT_X509_LOOKUP)) {; 15741 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 15742 /* Don't wait if the server is going to be stopped. */; 15743 break;; 15744 }; 15745 if (err == SSL_ERROR_WANT_X509_LOOKUP) {; 15746 /* Simply retry the function call. */; 15747 mg_sleep(50);; 15748 } else {; 15749 /* Need to retry the function call ""later"".; 15750 * See https://linux.die.net/man/3/ssl_get_error; 15751 * This is typical for non-blocking sockets. */; 15752 struct mg_pollfd pfd;; 15753 int pollres;; 15754 pfd.fd = conn->client.sock;; 15755 pfd.events = ((err == SSL_ERROR_WANT_CONNECT); 15756 || (err == SSL_ERROR_WANT_WRITE)); 15757 ? POLLOUT; 15758 : POLLIN;; 15759 pollres =; 15760 mg_poll(&pfd, 1, 50, &(conn->phys_ctx->stop_flag));; 15761 if (pollres < 0) {; 15762 /* Break if error occured (-1); 15763 * or server shutdown (-2) */; 15764 break;; 15765 }; 15766 }; 15767 ; 15768 } else if (err == SSL_ERROR_SYSCALL) {; 15769 /* This is an IO error. Look at errno. */; 15770 mg_cry_internal(conn, ""SSL syscall error %i"", ERRNO);; 15771 break;; 15772 ; 15773 } else {; 15774 /* This is an SSL specific error, e.g. SSL_ERROR_SSL */; 15775 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15776 break;; 15777 }; 15778 ; 15779 } else {; 15780 /* success */; 15781 break;; 15782 }; 15783 }; 15784 ERR_clear_error();; 15785 ; 15786 if (ret != 1) {; 15787 SSL_free(conn->ssl);; 15788 conn->ssl = NULL;; 15789 OPENSSL_REMOVE_THREAD_STATE();; 15790 return 0;; 15791 }; 15792 ; 15793 return 1;; 15794}; 15795 ; 15796 ; 15797/* Return OpenSSL error message (from CRYPTO lib) */; 15798static const char *; 15799ssl_error(void); 15800{; 15801 unsigned long err;; 15802 err = ERR_get_error();; 15803 return ((err == 0) ? """" : ERR_error_string(err, NUL",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:466268,Availability,error,error,466268,"if (ret != 1) {; 15736 err = SSL_get_error(conn->ssl, ret);; 15737 if ((err == SSL_ERROR_WANT_CONNECT); 15738 || (err == SSL_ERROR_WANT_ACCEPT); 15739 || (err == SSL_ERROR_WANT_READ) || (err == SSL_ERROR_WANT_WRITE); 15740 || (err == SSL_ERROR_WANT_X509_LOOKUP)) {; 15741 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 15742 /* Don't wait if the server is going to be stopped. */; 15743 break;; 15744 }; 15745 if (err == SSL_ERROR_WANT_X509_LOOKUP) {; 15746 /* Simply retry the function call. */; 15747 mg_sleep(50);; 15748 } else {; 15749 /* Need to retry the function call ""later"".; 15750 * See https://linux.die.net/man/3/ssl_get_error; 15751 * This is typical for non-blocking sockets. */; 15752 struct mg_pollfd pfd;; 15753 int pollres;; 15754 pfd.fd = conn->client.sock;; 15755 pfd.events = ((err == SSL_ERROR_WANT_CONNECT); 15756 || (err == SSL_ERROR_WANT_WRITE)); 15757 ? POLLOUT; 15758 : POLLIN;; 15759 pollres =; 15760 mg_poll(&pfd, 1, 50, &(conn->phys_ctx->stop_flag));; 15761 if (pollres < 0) {; 15762 /* Break if error occured (-1); 15763 * or server shutdown (-2) */; 15764 break;; 15765 }; 15766 }; 15767 ; 15768 } else if (err == SSL_ERROR_SYSCALL) {; 15769 /* This is an IO error. Look at errno. */; 15770 mg_cry_internal(conn, ""SSL syscall error %i"", ERRNO);; 15771 break;; 15772 ; 15773 } else {; 15774 /* This is an SSL specific error, e.g. SSL_ERROR_SSL */; 15775 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15776 break;; 15777 }; 15778 ; 15779 } else {; 15780 /* success */; 15781 break;; 15782 }; 15783 }; 15784 ERR_clear_error();; 15785 ; 15786 if (ret != 1) {; 15787 SSL_free(conn->ssl);; 15788 conn->ssl = NULL;; 15789 OPENSSL_REMOVE_THREAD_STATE();; 15790 return 0;; 15791 }; 15792 ; 15793 return 1;; 15794}; 15795 ; 15796 ; 15797/* Return OpenSSL error message (from CRYPTO lib) */; 15798static const char *; 15799ssl_error(void); 15800{; 15801 unsigned long err;; 15802 err = ERR_get_error();; 15803 return ((err == 0) ? """" : ERR_error_string(err, NUL",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:466335,Availability,error,error,466335,"O(&conn->phys_ctx->stop_flag)) {; 15742 /* Don't wait if the server is going to be stopped. */; 15743 break;; 15744 }; 15745 if (err == SSL_ERROR_WANT_X509_LOOKUP) {; 15746 /* Simply retry the function call. */; 15747 mg_sleep(50);; 15748 } else {; 15749 /* Need to retry the function call ""later"".; 15750 * See https://linux.die.net/man/3/ssl_get_error; 15751 * This is typical for non-blocking sockets. */; 15752 struct mg_pollfd pfd;; 15753 int pollres;; 15754 pfd.fd = conn->client.sock;; 15755 pfd.events = ((err == SSL_ERROR_WANT_CONNECT); 15756 || (err == SSL_ERROR_WANT_WRITE)); 15757 ? POLLOUT; 15758 : POLLIN;; 15759 pollres =; 15760 mg_poll(&pfd, 1, 50, &(conn->phys_ctx->stop_flag));; 15761 if (pollres < 0) {; 15762 /* Break if error occured (-1); 15763 * or server shutdown (-2) */; 15764 break;; 15765 }; 15766 }; 15767 ; 15768 } else if (err == SSL_ERROR_SYSCALL) {; 15769 /* This is an IO error. Look at errno. */; 15770 mg_cry_internal(conn, ""SSL syscall error %i"", ERRNO);; 15771 break;; 15772 ; 15773 } else {; 15774 /* This is an SSL specific error, e.g. SSL_ERROR_SSL */; 15775 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15776 break;; 15777 }; 15778 ; 15779 } else {; 15780 /* success */; 15781 break;; 15782 }; 15783 }; 15784 ERR_clear_error();; 15785 ; 15786 if (ret != 1) {; 15787 SSL_free(conn->ssl);; 15788 conn->ssl = NULL;; 15789 OPENSSL_REMOVE_THREAD_STATE();; 15790 return 0;; 15791 }; 15792 ; 15793 return 1;; 15794}; 15795 ; 15796 ; 15797/* Return OpenSSL error message (from CRYPTO lib) */; 15798static const char *; 15799ssl_error(void); 15800{; 15801 unsigned long err;; 15802 err = ERR_get_error();; 15803 return ((err == 0) ? """" : ERR_error_string(err, NULL));; 15804}; 15805 ; 15806 ; 15807static int; 15808hexdump2string(void *mem, int memlen, char *buf, int buflen); 15809{; 15810 int i;; 15811 const char hexdigit[] = ""0123456789abcdef"";; 15812 ; 15813 if ((memlen <= 0) || (buflen <= 0)) {; 15814 return 0;; 15815 }; 15816 if (buflen < (3 * me",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:466426,Availability,error,error,466426,"O(&conn->phys_ctx->stop_flag)) {; 15742 /* Don't wait if the server is going to be stopped. */; 15743 break;; 15744 }; 15745 if (err == SSL_ERROR_WANT_X509_LOOKUP) {; 15746 /* Simply retry the function call. */; 15747 mg_sleep(50);; 15748 } else {; 15749 /* Need to retry the function call ""later"".; 15750 * See https://linux.die.net/man/3/ssl_get_error; 15751 * This is typical for non-blocking sockets. */; 15752 struct mg_pollfd pfd;; 15753 int pollres;; 15754 pfd.fd = conn->client.sock;; 15755 pfd.events = ((err == SSL_ERROR_WANT_CONNECT); 15756 || (err == SSL_ERROR_WANT_WRITE)); 15757 ? POLLOUT; 15758 : POLLIN;; 15759 pollres =; 15760 mg_poll(&pfd, 1, 50, &(conn->phys_ctx->stop_flag));; 15761 if (pollres < 0) {; 15762 /* Break if error occured (-1); 15763 * or server shutdown (-2) */; 15764 break;; 15765 }; 15766 }; 15767 ; 15768 } else if (err == SSL_ERROR_SYSCALL) {; 15769 /* This is an IO error. Look at errno. */; 15770 mg_cry_internal(conn, ""SSL syscall error %i"", ERRNO);; 15771 break;; 15772 ; 15773 } else {; 15774 /* This is an SSL specific error, e.g. SSL_ERROR_SSL */; 15775 mg_cry_internal(conn, ""sslize error: %s"", ssl_error());; 15776 break;; 15777 }; 15778 ; 15779 } else {; 15780 /* success */; 15781 break;; 15782 }; 15783 }; 15784 ERR_clear_error();; 15785 ; 15786 if (ret != 1) {; 15787 SSL_free(conn->ssl);; 15788 conn->ssl = NULL;; 15789 OPENSSL_REMOVE_THREAD_STATE();; 15790 return 0;; 15791 }; 15792 ; 15793 return 1;; 15794}; 15795 ; 15796 ; 15797/* Return OpenSSL error message (from CRYPTO lib) */; 15798static const char *; 15799ssl_error(void); 15800{; 15801 unsigned long err;; 15802 err = ERR_get_error();; 15803 return ((err == 0) ? """" : ERR_error_string(err, NULL));; 15804}; 15805 ; 15806 ; 15807static int; 15808hexdump2string(void *mem, int memlen, char *buf, int buflen); 15809{; 15810 int i;; 15811 const char hexdigit[] = ""0123456789abcdef"";; 15812 ; 15813 if ((memlen <= 0) || (buflen <= 0)) {; 15814 return 0;; 15815 }; 15816 if (buflen < (3 * me",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:466492,Availability,error,error,466492,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:466865,Availability,error,error,466865,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:472230,Availability,error,error,472230,"k for ebuf */; 15947 ebuf,; 15948 ebuf_len,; 15949 ""%s: cannot load %s"",; 15950 __func__,; 15951 dll_name);; 15952 return NULL;; 15953 }; 15954 ; 15955 ok = 1;; 15956 for (fp = sw; fp->name != NULL; fp++) {; 15957#if defined(_WIN32); 15958 /* GetProcAddress() returns pointer to function */; 15959 u.fp = (void (*)(void))dlsym(dll_handle, fp->name);; 15960#else; 15961 /* dlsym() on UNIX returns void *. ISO C forbids casts of data; 15962 * pointers to function pointers. We need to use a union to make a; 15963 * cast. */; 15964 u.p = dlsym(dll_handle, fp->name);; 15965#endif /* _WIN32 */; 15966 ; 15967 /* Set pointer (might be NULL) */; 15968 fp->ptr = u.fp;; 15969 ; 15970 if (u.fp == NULL) {; 15971 DEBUG_TRACE(""Missing function: %s\n"", fp->name);; 15972 if (feature_missing) {; 15973 feature_missing[fp->required]++;; 15974 }; 15975 if (fp->required == TLS_Mandatory) {; 15976 /* Mandatory function is missing */; 15977 if (ok) {; 15978 /* This is the first missing function.; 15979 * Create a new error message. */; 15980 mg_snprintf(NULL,; 15981 &truncated,; 15982 ebuf,; 15983 ebuf_len,; 15984 ""%s: %s: cannot find %s"",; 15985 __func__,; 15986 dll_name,; 15987 fp->name);; 15988 ok = 0;; 15989 } else {; 15990 /* This is yet anothermissing function.; 15991 * Append existing error message. */; 15992 size_t cur_len = strlen(ebuf);; 15993 if (!truncated && ((ebuf_len - cur_len) > 3)) {; 15994 mg_snprintf(NULL,; 15995 &truncated,; 15996 ebuf + cur_len,; 15997 ebuf_len - cur_len - 3,; 15998 "", %s"",; 15999 fp->name);; 16000 if (truncated) {; 16001 /* If truncated, add ""..."" */; 16002 strcat(ebuf, ""..."");; 16003 }; 16004 }; 16005 }; 16006 }; 16007 }; 16008 }; 16009 ; 16010 if (!ok) {; 16011 (void)dlclose(dll_handle);; 16012 return NULL;; 16013 }; 16014 ; 16015 return dll_handle;; 16016}; 16017 ; 16018 ; 16019static void *ssllib_dll_handle; /* Store the ssl library handle. */; 16020static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16021 ; 16022#endif /* NO_SSL",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:472510,Availability,error,error,472510,"function */; 15959 u.fp = (void (*)(void))dlsym(dll_handle, fp->name);; 15960#else; 15961 /* dlsym() on UNIX returns void *. ISO C forbids casts of data; 15962 * pointers to function pointers. We need to use a union to make a; 15963 * cast. */; 15964 u.p = dlsym(dll_handle, fp->name);; 15965#endif /* _WIN32 */; 15966 ; 15967 /* Set pointer (might be NULL) */; 15968 fp->ptr = u.fp;; 15969 ; 15970 if (u.fp == NULL) {; 15971 DEBUG_TRACE(""Missing function: %s\n"", fp->name);; 15972 if (feature_missing) {; 15973 feature_missing[fp->required]++;; 15974 }; 15975 if (fp->required == TLS_Mandatory) {; 15976 /* Mandatory function is missing */; 15977 if (ok) {; 15978 /* This is the first missing function.; 15979 * Create a new error message. */; 15980 mg_snprintf(NULL,; 15981 &truncated,; 15982 ebuf,; 15983 ebuf_len,; 15984 ""%s: %s: cannot find %s"",; 15985 __func__,; 15986 dll_name,; 15987 fp->name);; 15988 ok = 0;; 15989 } else {; 15990 /* This is yet anothermissing function.; 15991 * Append existing error message. */; 15992 size_t cur_len = strlen(ebuf);; 15993 if (!truncated && ((ebuf_len - cur_len) > 3)) {; 15994 mg_snprintf(NULL,; 15995 &truncated,; 15996 ebuf + cur_len,; 15997 ebuf_len - cur_len - 3,; 15998 "", %s"",; 15999 fp->name);; 16000 if (truncated) {; 16001 /* If truncated, add ""..."" */; 16002 strcat(ebuf, ""..."");; 16003 }; 16004 }; 16005 }; 16006 }; 16007 }; 16008 }; 16009 ; 16010 if (!ok) {; 16011 (void)dlclose(dll_handle);; 16012 return NULL;; 16013 }; 16014 ; 16015 return dll_handle;; 16016}; 16017 ; 16018 ; 16019static void *ssllib_dll_handle; /* Store the ssl library handle. */; 16020static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16021 ; 16022#endif /* NO_SSL_DL */; 16023 ; 16024 ; 16025#if defined(SSL_ALREADY_INITIALIZED); 16026static volatile ptrdiff_t cryptolib_users =; 16027 1; /* Reference counter for crypto library. */; 16028#else; 16029static volatile ptrdiff_t cryptolib_users =; 16030 0; /* Reference counter for crypto libr",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:474212,Availability,error,error,474212,"tic void *ssllib_dll_handle; /* Store the ssl library handle. */; 16020static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16021 ; 16022#endif /* NO_SSL_DL */; 16023 ; 16024 ; 16025#if defined(SSL_ALREADY_INITIALIZED); 16026static volatile ptrdiff_t cryptolib_users =; 16027 1; /* Reference counter for crypto library. */; 16028#else; 16029static volatile ptrdiff_t cryptolib_users =; 16030 0; /* Reference counter for crypto library. */; 16031#endif; 16032 ; 16033 ; 16034static int; 16035initialize_openssl(char *ebuf, size_t ebuf_len); 16036{; 16037#if !defined(OPENSSL_API_1_1) && !defined(OPENSSL_API_3_0); 16038 int i, num_locks;; 16039 size_t size;; 16040#endif; 16041 ; 16042 if (ebuf_len > 0) {; 16043 ebuf[0] = 0;; 16044 }; 16045 ; 16046#if !defined(NO_SSL_DL); 16047 if (!cryptolib_dll_handle) {; 16048 memset(tls_feature_missing, 0, sizeof(tls_feature_missing));; 16049 cryptolib_dll_handle = load_tls_dll(; 16050 ebuf, ebuf_len, CRYPTO_LIB, crypto_sw, tls_feature_missing);; 16051 if (!cryptolib_dll_handle) {; 16052 mg_snprintf(NULL,; 16053 NULL, /* No truncation check for ebuf */; 16054 ebuf,; 16055 ebuf_len,; 16056 ""%s: error loading library %s"",; 16057 __func__,; 16058 CRYPTO_LIB);; 16059 DEBUG_TRACE(""%s"", ebuf);; 16060 return 0;; 16061 }; 16062 }; 16063#endif /* NO_SSL_DL */; 16064 ; 16065 if (mg_atomic_inc(&cryptolib_users) > 1) {; 16066 return 1;; 16067 }; 16068 ; 16069#if !defined(OPENSSL_API_1_1) && !defined(OPENSSL_API_3_0); 16070 /* Initialize locking callbacks, needed for thread safety.; 16071 * http://www.openssl.org/support/faq.html#PROG1; 16072 */; 16073 num_locks = CRYPTO_num_locks();; 16074 if (num_locks < 0) {; 16075 num_locks = 0;; 16076 }; 16077 size = sizeof(pthread_mutex_t) * ((size_t)(num_locks));; 16078 ; 16079 /* allocate mutex array, if required */; 16080 if (num_locks == 0) {; 16081 /* No mutex array required */; 16082 ssl_mutexes = NULL;; 16083 } else {; 16084 /* Mutex array required - allocate it */; 16085 ssl_mutexes",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:475672,Availability,error,error,475672,"s = CRYPTO_num_locks();; 16074 if (num_locks < 0) {; 16075 num_locks = 0;; 16076 }; 16077 size = sizeof(pthread_mutex_t) * ((size_t)(num_locks));; 16078 ; 16079 /* allocate mutex array, if required */; 16080 if (num_locks == 0) {; 16081 /* No mutex array required */; 16082 ssl_mutexes = NULL;; 16083 } else {; 16084 /* Mutex array required - allocate it */; 16085 ssl_mutexes = (pthread_mutex_t *)mg_malloc(size);; 16086 ; 16087 /* Check OOM */; 16088 if (ssl_mutexes == NULL) {; 16089 mg_snprintf(NULL,; 16090 NULL, /* No truncation check for ebuf */; 16091 ebuf,; 16092 ebuf_len,; 16093 ""%s: cannot allocate mutexes: %s"",; 16094 __func__,; 16095 ssl_error());; 16096 DEBUG_TRACE(""%s"", ebuf);; 16097 return 0;; 16098 }; 16099 ; 16100 /* initialize mutex array */; 16101 for (i = 0; i < num_locks; i++) {; 16102 if (0 != pthread_mutex_init(&ssl_mutexes[i], &pthread_mutex_attr)) {; 16103 mg_snprintf(NULL,; 16104 NULL, /* No truncation check for ebuf */; 16105 ebuf,; 16106 ebuf_len,; 16107 ""%s: error initializing mutex %i of %i"",; 16108 __func__,; 16109 i,; 16110 num_locks);; 16111 DEBUG_TRACE(""%s"", ebuf);; 16112 mg_free(ssl_mutexes);; 16113 return 0;; 16114 }; 16115 }; 16116 }; 16117 ; 16118 CRYPTO_set_locking_callback(&ssl_locking_callback);; 16119 CRYPTO_set_id_callback(&mg_current_thread_id);; 16120#endif /* OPENSSL_API_1_1 || OPENSSL_API_3_0 */; 16121 ; 16122#if !defined(NO_SSL_DL); 16123 if (!ssllib_dll_handle) {; 16124 ssllib_dll_handle =; 16125 load_tls_dll(ebuf, ebuf_len, SSL_LIB, ssl_sw, tls_feature_missing);; 16126 if (!ssllib_dll_handle) {; 16127#if !defined(OPENSSL_API_1_1); 16128 mg_free(ssl_mutexes);; 16129#endif; 16130 DEBUG_TRACE(""%s"", ebuf);; 16131 return 0;; 16132 }; 16133 }; 16134#endif /* NO_SSL_DL */; 16135 ; 16136#if (defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) \; 16137 && !defined(NO_SSL_DL); 16138 /* Initialize SSL library */; 16139 OPENSSL_init_ssl(0, NULL);; 16140 OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS; 16141 | OPENSSL_INIT_LOAD_CRYPT",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:480350,Availability,error,error,480350,"16234 if (version_id > 0); 16235 ret |= SSL_OP_NO_SSLv2;; 16236 if (version_id > 1); 16237 ret |= SSL_OP_NO_SSLv3;; 16238 if (version_id > 2); 16239 ret |= SSL_OP_NO_TLSv1;; 16240 if (version_id > 3); 16241 ret |= SSL_OP_NO_TLSv1_1;; 16242 if (version_id > 4); 16243 ret |= SSL_OP_NO_TLSv1_2;; 16244#if defined(SSL_OP_NO_TLSv1_3); 16245 if (version_id > 5); 16246 ret |= SSL_OP_NO_TLSv1_3;; 16247#endif; 16248 return (long)ret;; 16249}; 16250#endif /* OPENSSL_API_1_1 */; 16251 ; 16252 ; 16253/* SSL callback documentation:; 16254 * https://www.openssl.org/docs/man1.1.0/ssl/SSL_set_info_callback.html; 16255 * https://wiki.openssl.org/index.php/Manual:SSL_CTX_set_info_callback(3); 16256 * https://linux.die.net/man/3/ssl_set_info_callback */; 16257/* Note: There is no ""const"" for the first argument in the documentation; 16258 * examples, however some (maybe most, but not all) headers of OpenSSL; 16259 * versions / OpenSSL compatibility layers have it. Having a different; 16260 * definition will cause a warning in C and an error in C++. Use ""const SSL; 16261 * *"", while automatical conversion from ""SSL *"" works for all compilers,; 16262 * but not other way around */; 16263static void; 16264ssl_info_callback(const SSL *ssl, int what, int ret); 16265{; 16266 (void)ret;; 16267 ; 16268 if (what & SSL_CB_HANDSHAKE_START) {; 16269 SSL_get_app_data(ssl);; 16270 }; 16271 if (what & SSL_CB_HANDSHAKE_DONE) {; 16272 /* TODO: check for openSSL 1.1 */; 16273 //#define SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS 0x0001; 16274 // ssl->s3->flags |= SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS;; 16275 }; 16276}; 16277 ; 16278 ; 16279static int; 16280ssl_servername_callback(SSL *ssl, int *ad, void *arg); 16281{; 16282#if defined(GCC_DIAGNOSTIC); 16283#pragma GCC diagnostic push; 16284#pragma GCC diagnostic ignored ""-Wcast-align""; 16285#endif /* defined(GCC_DIAGNOSTIC) */; 16286 ; 16287 /* We used an aligned pointer in SSL_set_app_data */; 16288 struct mg_connection *conn = (struct mg_connection *)SSL_get_app_data",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:481860,Availability,avail,available,481860,"IATE_CIPHERS;; 16275 }; 16276}; 16277 ; 16278 ; 16279static int; 16280ssl_servername_callback(SSL *ssl, int *ad, void *arg); 16281{; 16282#if defined(GCC_DIAGNOSTIC); 16283#pragma GCC diagnostic push; 16284#pragma GCC diagnostic ignored ""-Wcast-align""; 16285#endif /* defined(GCC_DIAGNOSTIC) */; 16286 ; 16287 /* We used an aligned pointer in SSL_set_app_data */; 16288 struct mg_connection *conn = (struct mg_connection *)SSL_get_app_data(ssl);; 16289 ; 16290#if defined(GCC_DIAGNOSTIC); 16291#pragma GCC diagnostic pop; 16292#endif /* defined(GCC_DIAGNOSTIC) */; 16293 ; 16294 const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);; 16295 ; 16296 (void)ad;; 16297 (void)arg;; 16298 ; 16299 if ((conn == NULL) || (conn->phys_ctx == NULL)) {; 16300 DEBUG_ASSERT(0);; 16301 return SSL_TLSEXT_ERR_NOACK;; 16302 }; 16303 conn->dom_ctx = &(conn->phys_ctx->dd);; 16304 ; 16305 /* Old clients (Win XP) will not support SNI. Then, there; 16306 * is no server name available in the request - we can; 16307 * only work with the default certificate.; 16308 * Multiple HTTPS hosts on one IP+port are only possible; 16309 * with a certificate containing all alternative names.; 16310 */; 16311 if ((servername == NULL) || (*servername == 0)) {; 16312 DEBUG_TRACE(""%s"", ""SSL connection not supporting SNI"");; 16313 mg_lock_context(conn->phys_ctx);; 16314 SSL_set_SSL_CTX(ssl, conn->dom_ctx->ssl_ctx);; 16315 mg_unlock_context(conn->phys_ctx);; 16316 return SSL_TLSEXT_ERR_NOACK;; 16317 }; 16318 ; 16319 DEBUG_TRACE(""TLS connection to host %s"", servername);; 16320 ; 16321 while (conn->dom_ctx) {; 16322 if (!mg_strcasecmp(servername,; 16323 conn->dom_ctx->config[AUTHENTICATION_DOMAIN])) {; 16324 /* Found matching domain */; 16325 DEBUG_TRACE(""TLS domain %s found"",; 16326 conn->dom_ctx->config[AUTHENTICATION_DOMAIN]);; 16327 break;; 16328 }; 16329 mg_lock_context(conn->phys_ctx);; 16330 conn->dom_ctx = conn->dom_ctx->next;; 16331 mg_unlock_context(conn->phys_ctx);; 16332 }; 16333 ; 163",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:486054,Availability,error,error,486054,"398 return SSL_TLSEXT_ERR_OK;; 16399 }; 16400 }; 16401 }; 16402 ; 16403 /* Nothing found */; 16404 return SSL_TLSEXT_ERR_NOACK;; 16405}; 16406 ; 16407 ; 16408static int; 16409next_protos_advertised_cb(SSL *ssl,; 16410 const unsigned char **data,; 16411 unsigned int *len,; 16412 void *arg); 16413{; 16414 struct mg_domain_context *dom_ctx = (struct mg_domain_context *)arg;; 16415 *data = (const unsigned char *)alpn_proto_list;; 16416 *len = (unsigned int)strlen((const char *)data);; 16417 ; 16418 (void)ssl;; 16419 (void)dom_ctx;; 16420 ; 16421 return SSL_TLSEXT_ERR_OK;; 16422}; 16423 ; 16424 ; 16425static int; 16426init_alpn(struct mg_context *phys_ctx, struct mg_domain_context *dom_ctx); 16427{; 16428 unsigned int alpn_len = (unsigned int)strlen((char *)alpn_proto_list);; 16429 int ret = SSL_CTX_set_alpn_protos(dom_ctx->ssl_ctx,; 16430 (const unsigned char *)alpn_proto_list,; 16431 alpn_len);; 16432 if (ret != 0) {; 16433 mg_cry_ctx_internal(phys_ctx,; 16434 ""SSL_CTX_set_alpn_protos error: %s"",; 16435 ssl_error());; 16436 }; 16437 ; 16438 SSL_CTX_set_alpn_select_cb(dom_ctx->ssl_ctx,; 16439 alpn_select_cb,; 16440 (void *)dom_ctx);; 16441 ; 16442 SSL_CTX_set_next_protos_advertised_cb(dom_ctx->ssl_ctx,; 16443 next_protos_advertised_cb,; 16444 (void *)dom_ctx);; 16445 ; 16446 return ret;; 16447}; 16448#endif; 16449 ; 16450 ; 16451/* Setup SSL CTX as required by CivetWeb */; 16452static int; 16453init_ssl_ctx_impl(struct mg_context *phys_ctx,; 16454 struct mg_domain_context *dom_ctx,; 16455 const char *pem,; 16456 const char *chain); 16457{; 16458 int callback_ret;; 16459 int should_verify_peer;; 16460 int peer_certificate_optional;; 16461 const char *ca_path;; 16462 const char *ca_file;; 16463 int use_default_verify_paths;; 16464 int verify_depth;; 16465 struct timespec now_mt;; 16466 md5_byte_t ssl_context_id[16];; 16467 md5_state_t md5state;; 16468 int protocol_ver;; 16469 int ssl_cache_timeout;; 16470 ; 16471#if (defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) \",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:487230,Availability,error,error,487230,"xt_protos_advertised_cb(dom_ctx->ssl_ctx,; 16443 next_protos_advertised_cb,; 16444 (void *)dom_ctx);; 16445 ; 16446 return ret;; 16447}; 16448#endif; 16449 ; 16450 ; 16451/* Setup SSL CTX as required by CivetWeb */; 16452static int; 16453init_ssl_ctx_impl(struct mg_context *phys_ctx,; 16454 struct mg_domain_context *dom_ctx,; 16455 const char *pem,; 16456 const char *chain); 16457{; 16458 int callback_ret;; 16459 int should_verify_peer;; 16460 int peer_certificate_optional;; 16461 const char *ca_path;; 16462 const char *ca_file;; 16463 int use_default_verify_paths;; 16464 int verify_depth;; 16465 struct timespec now_mt;; 16466 md5_byte_t ssl_context_id[16];; 16467 md5_state_t md5state;; 16468 int protocol_ver;; 16469 int ssl_cache_timeout;; 16470 ; 16471#if (defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) \; 16472 && !defined(NO_SSL_DL); 16473 if ((dom_ctx->ssl_ctx = SSL_CTX_new(TLS_server_method())) == NULL) {; 16474 mg_cry_ctx_internal(phys_ctx,; 16475 ""SSL_CTX_new (server) error: %s"",; 16476 ssl_error());; 16477 return 0;; 16478 }; 16479#else; 16480 if ((dom_ctx->ssl_ctx = SSL_CTX_new(SSLv23_server_method())) == NULL) {; 16481 mg_cry_ctx_internal(phys_ctx,; 16482 ""SSL_CTX_new (server) error: %s"",; 16483 ssl_error());; 16484 return 0;; 16485 }; 16486#endif /* OPENSSL_API_1_1 || OPENSSL_API_3_0 */; 16487 ; 16488#if defined(SSL_OP_NO_TLSv1_3); 16489 SSL_CTX_clear_options(dom_ctx->ssl_ctx,; 16490 SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1; 16491 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_2; 16492 | SSL_OP_NO_TLSv1_3);; 16493#else; 16494 SSL_CTX_clear_options(dom_ctx->ssl_ctx,; 16495 SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1; 16496 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_2);; 16497#endif; 16498 ; 16499 protocol_ver = atoi(dom_ctx->config[SSL_PROTOCOL_VERSION]);; 16500 SSL_CTX_set_options(dom_ctx->ssl_ctx, ssl_get_protocol(protocol_ver));; 16501 SSL_CTX_set_options(dom_ctx->ssl_ctx, SSL_OP_SINGLE_DH_USE);; 16502 SSL_CTX_set_options(dom_ctx->ssl_ctx, S",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:487446,Availability,error,error,487446,"16452static int; 16453init_ssl_ctx_impl(struct mg_context *phys_ctx,; 16454 struct mg_domain_context *dom_ctx,; 16455 const char *pem,; 16456 const char *chain); 16457{; 16458 int callback_ret;; 16459 int should_verify_peer;; 16460 int peer_certificate_optional;; 16461 const char *ca_path;; 16462 const char *ca_file;; 16463 int use_default_verify_paths;; 16464 int verify_depth;; 16465 struct timespec now_mt;; 16466 md5_byte_t ssl_context_id[16];; 16467 md5_state_t md5state;; 16468 int protocol_ver;; 16469 int ssl_cache_timeout;; 16470 ; 16471#if (defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) \; 16472 && !defined(NO_SSL_DL); 16473 if ((dom_ctx->ssl_ctx = SSL_CTX_new(TLS_server_method())) == NULL) {; 16474 mg_cry_ctx_internal(phys_ctx,; 16475 ""SSL_CTX_new (server) error: %s"",; 16476 ssl_error());; 16477 return 0;; 16478 }; 16479#else; 16480 if ((dom_ctx->ssl_ctx = SSL_CTX_new(SSLv23_server_method())) == NULL) {; 16481 mg_cry_ctx_internal(phys_ctx,; 16482 ""SSL_CTX_new (server) error: %s"",; 16483 ssl_error());; 16484 return 0;; 16485 }; 16486#endif /* OPENSSL_API_1_1 || OPENSSL_API_3_0 */; 16487 ; 16488#if defined(SSL_OP_NO_TLSv1_3); 16489 SSL_CTX_clear_options(dom_ctx->ssl_ctx,; 16490 SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1; 16491 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_2; 16492 | SSL_OP_NO_TLSv1_3);; 16493#else; 16494 SSL_CTX_clear_options(dom_ctx->ssl_ctx,; 16495 SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1; 16496 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_TLSv1_2);; 16497#endif; 16498 ; 16499 protocol_ver = atoi(dom_ctx->config[SSL_PROTOCOL_VERSION]);; 16500 SSL_CTX_set_options(dom_ctx->ssl_ctx, ssl_get_protocol(protocol_ver));; 16501 SSL_CTX_set_options(dom_ctx->ssl_ctx, SSL_OP_SINGLE_DH_USE);; 16502 SSL_CTX_set_options(dom_ctx->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);; 16503 SSL_CTX_set_options(dom_ctx->ssl_ctx,; 16504 SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION);; 16505 SSL_CTX_set_options(dom_ctx->ssl_ctx, SSL_OP_NO_COMPRESSION);; 16506 ; 16507",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:490175,Availability,error,error,490175," described, but not resolved:; 16523 * https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526; 16524 * Wrong const cast ignored on C or can be suppressed by compiler flags.; 16525 * But when compiled with modern C++ compiler, correct const should be; 16526 * provided; 16527 */; 16528 SSL_CTX_set_info_callback(dom_ctx->ssl_ctx, ssl_info_callback);; 16529 ; 16530 SSL_CTX_set_tlsext_servername_callback(dom_ctx->ssl_ctx,; 16531 ssl_servername_callback);; 16532 ; 16533 /* If a callback has been specified, call it. */; 16534 callback_ret = (phys_ctx->callbacks.init_ssl == NULL); 16535 ? 0; 16536 : (phys_ctx->callbacks.init_ssl(dom_ctx->ssl_ctx,; 16537 phys_ctx->user_data));; 16538 ; 16539 /* If callback returns 0, civetweb sets up the SSL certificate.; 16540 * If it returns 1, civetweb assumes the calback already did this.; 16541 * If it returns -1, initializing ssl fails. */; 16542 if (callback_ret < 0) {; 16543 mg_cry_ctx_internal(phys_ctx,; 16544 ""SSL callback returned error: %i"",; 16545 callback_ret);; 16546 return 0;; 16547 }; 16548 if (callback_ret > 0) {; 16549 /* Callback did everything. */; 16550 return 1;; 16551 }; 16552 ; 16553 /* If a domain callback has been specified, call it. */; 16554 callback_ret = (phys_ctx->callbacks.init_ssl_domain == NULL); 16555 ? 0; 16556 : (phys_ctx->callbacks.init_ssl_domain(; 16557 dom_ctx->config[AUTHENTICATION_DOMAIN],; 16558 dom_ctx->ssl_ctx,; 16559 phys_ctx->user_data));; 16560 ; 16561 /* If domain callback returns 0, civetweb sets up the SSL certificate.; 16562 * If it returns 1, civetweb assumes the calback already did this.; 16563 * If it returns -1, initializing ssl fails. */; 16564 if (callback_ret < 0) {; 16565 mg_cry_ctx_internal(phys_ctx,; 16566 ""Domain SSL callback returned error: %i"",; 16567 callback_ret);; 16568 return 0;; 16569 }; 16570 if (callback_ret > 0) {; 16571 /* Domain callback did everything. */; 16572 return 1;; 16573 }; 16574 ; 16575 /* Use some combination of start time, domain and port as a SSL",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:490947,Availability,error,error,490947," If it returns 1, civetweb assumes the calback already did this.; 16541 * If it returns -1, initializing ssl fails. */; 16542 if (callback_ret < 0) {; 16543 mg_cry_ctx_internal(phys_ctx,; 16544 ""SSL callback returned error: %i"",; 16545 callback_ret);; 16546 return 0;; 16547 }; 16548 if (callback_ret > 0) {; 16549 /* Callback did everything. */; 16550 return 1;; 16551 }; 16552 ; 16553 /* If a domain callback has been specified, call it. */; 16554 callback_ret = (phys_ctx->callbacks.init_ssl_domain == NULL); 16555 ? 0; 16556 : (phys_ctx->callbacks.init_ssl_domain(; 16557 dom_ctx->config[AUTHENTICATION_DOMAIN],; 16558 dom_ctx->ssl_ctx,; 16559 phys_ctx->user_data));; 16560 ; 16561 /* If domain callback returns 0, civetweb sets up the SSL certificate.; 16562 * If it returns 1, civetweb assumes the calback already did this.; 16563 * If it returns -1, initializing ssl fails. */; 16564 if (callback_ret < 0) {; 16565 mg_cry_ctx_internal(phys_ctx,; 16566 ""Domain SSL callback returned error: %i"",; 16567 callback_ret);; 16568 return 0;; 16569 }; 16570 if (callback_ret > 0) {; 16571 /* Domain callback did everything. */; 16572 return 1;; 16573 }; 16574 ; 16575 /* Use some combination of start time, domain and port as a SSL; 16576 * context ID. This should be unique on the current machine. */; 16577 md5_init(&md5state);; 16578 clock_gettime(CLOCK_MONOTONIC, &now_mt);; 16579 md5_append(&md5state, (const md5_byte_t *)&now_mt, sizeof(now_mt));; 16580 md5_append(&md5state,; 16581 (const md5_byte_t *)phys_ctx->dd.config[LISTENING_PORTS],; 16582 strlen(phys_ctx->dd.config[LISTENING_PORTS]));; 16583 md5_append(&md5state,; 16584 (const md5_byte_t *)dom_ctx->config[AUTHENTICATION_DOMAIN],; 16585 strlen(dom_ctx->config[AUTHENTICATION_DOMAIN]));; 16586 md5_append(&md5state, (const md5_byte_t *)phys_ctx, sizeof(*phys_ctx));; 16587 md5_append(&md5state, (const md5_byte_t *)dom_ctx, sizeof(*dom_ctx));; 16588 md5_finish(&md5state, ssl_context_id);; 16589 ; 16590 SSL_CTX_set_session_id_context(do",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:493259,Availability,error,error,493259,"state, (const md5_byte_t *)dom_ctx, sizeof(*dom_ctx));; 16588 md5_finish(&md5state, ssl_context_id);; 16589 ; 16590 SSL_CTX_set_session_id_context(dom_ctx->ssl_ctx,; 16591 (unsigned char *)ssl_context_id,; 16592 sizeof(ssl_context_id));; 16593 ; 16594 if (pem != NULL) {; 16595 if (!ssl_use_pem_file(phys_ctx, dom_ctx, pem, chain)) {; 16596 return 0;; 16597 }; 16598 }; 16599 ; 16600 /* Should we support client certificates? */; 16601 /* Default is ""no"". */; 16602 should_verify_peer = 0;; 16603 peer_certificate_optional = 0;; 16604 if (dom_ctx->config[SSL_DO_VERIFY_PEER] != NULL) {; 16605 if (mg_strcasecmp(dom_ctx->config[SSL_DO_VERIFY_PEER], ""yes"") == 0) {; 16606 /* Yes, they are mandatory */; 16607 should_verify_peer = 1;; 16608 } else if (mg_strcasecmp(dom_ctx->config[SSL_DO_VERIFY_PEER],; 16609 ""optional""); 16610 == 0) {; 16611 /* Yes, they are optional */; 16612 should_verify_peer = 1;; 16613 peer_certificate_optional = 1;; 16614 }; 16615 }; 16616 ; 16617 use_default_verify_paths =; 16618 (dom_ctx->config[SSL_DEFAULT_VERIFY_PATHS] != NULL); 16619 && (mg_strcasecmp(dom_ctx->config[SSL_DEFAULT_VERIFY_PATHS], ""yes""); 16620 == 0);; 16621 ; 16622 if (should_verify_peer) {; 16623 ca_path = dom_ctx->config[SSL_CA_PATH];; 16624 ca_file = dom_ctx->config[SSL_CA_FILE];; 16625 if (SSL_CTX_load_verify_locations(dom_ctx->ssl_ctx, ca_file, ca_path); 16626 != 1) {; 16627 mg_cry_ctx_internal(phys_ctx,; 16628 ""SSL_CTX_load_verify_locations error: %s ""; 16629 ""ssl_verify_peer requires setting ""; 16630 ""either ssl_ca_path or ssl_ca_file. ""; 16631 ""Is any of them present in the ""; 16632 "".conf file?"",; 16633 ssl_error());; 16634 return 0;; 16635 }; 16636 ; 16637 if (peer_certificate_optional) {; 16638 SSL_CTX_set_verify(dom_ctx->ssl_ctx, SSL_VERIFY_PEER, NULL);; 16639 } else {; 16640 SSL_CTX_set_verify(dom_ctx->ssl_ctx,; 16641 SSL_VERIFY_PEER; 16642 | SSL_VERIFY_FAIL_IF_NO_PEER_CERT,; 16643 NULL);; 16644 }; 16645 ; 16646 if (use_default_verify_paths; 16647 && (SSL_CTX_set_default_veri",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:493925,Availability,error,error,493925,"y_locations(dom_ctx->ssl_ctx, ca_file, ca_path); 16626 != 1) {; 16627 mg_cry_ctx_internal(phys_ctx,; 16628 ""SSL_CTX_load_verify_locations error: %s ""; 16629 ""ssl_verify_peer requires setting ""; 16630 ""either ssl_ca_path or ssl_ca_file. ""; 16631 ""Is any of them present in the ""; 16632 "".conf file?"",; 16633 ssl_error());; 16634 return 0;; 16635 }; 16636 ; 16637 if (peer_certificate_optional) {; 16638 SSL_CTX_set_verify(dom_ctx->ssl_ctx, SSL_VERIFY_PEER, NULL);; 16639 } else {; 16640 SSL_CTX_set_verify(dom_ctx->ssl_ctx,; 16641 SSL_VERIFY_PEER; 16642 | SSL_VERIFY_FAIL_IF_NO_PEER_CERT,; 16643 NULL);; 16644 }; 16645 ; 16646 if (use_default_verify_paths; 16647 && (SSL_CTX_set_default_verify_paths(dom_ctx->ssl_ctx) != 1)) {; 16648 mg_cry_ctx_internal(phys_ctx,; 16649 ""SSL_CTX_set_default_verify_paths error: %s"",; 16650 ssl_error());; 16651 return 0;; 16652 }; 16653 ; 16654 if (dom_ctx->config[SSL_VERIFY_DEPTH]) {; 16655 verify_depth = atoi(dom_ctx->config[SSL_VERIFY_DEPTH]);; 16656 SSL_CTX_set_verify_depth(dom_ctx->ssl_ctx, verify_depth);; 16657 }; 16658 }; 16659 ; 16660 if (dom_ctx->config[SSL_CIPHER_LIST] != NULL) {; 16661 if (SSL_CTX_set_cipher_list(dom_ctx->ssl_ctx,; 16662 dom_ctx->config[SSL_CIPHER_LIST]); 16663 != 1) {; 16664 mg_cry_ctx_internal(phys_ctx,; 16665 ""SSL_CTX_set_cipher_list error: %s"",; 16666 ssl_error());; 16667 }; 16668 }; 16669 ; 16670 /* SSL session caching */; 16671 ssl_cache_timeout = ((dom_ctx->config[SSL_CACHE_TIMEOUT] != NULL); 16672 ? atoi(dom_ctx->config[SSL_CACHE_TIMEOUT]); 16673 : 0);; 16674 if (ssl_cache_timeout > 0) {; 16675 SSL_CTX_set_session_cache_mode(dom_ctx->ssl_ctx, SSL_SESS_CACHE_BOTH);; 16676 /* SSL_CTX_sess_set_cache_size(dom_ctx->ssl_ctx, 10000); ... use; 16677 * default */; 16678 SSL_CTX_set_timeout(dom_ctx->ssl_ctx, (long)ssl_cache_timeout);; 16679 }; 16680 ; 16681#if defined(USE_ALPN); 16682 /* Initialize ALPN only of TLS library (OpenSSL version) supports ALPN */; 16683#if !defined(NO_SSL_DL); 16684 if (!tls_feature_missing[T",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:494427,Availability,error,error,494427,"y_locations(dom_ctx->ssl_ctx, ca_file, ca_path); 16626 != 1) {; 16627 mg_cry_ctx_internal(phys_ctx,; 16628 ""SSL_CTX_load_verify_locations error: %s ""; 16629 ""ssl_verify_peer requires setting ""; 16630 ""either ssl_ca_path or ssl_ca_file. ""; 16631 ""Is any of them present in the ""; 16632 "".conf file?"",; 16633 ssl_error());; 16634 return 0;; 16635 }; 16636 ; 16637 if (peer_certificate_optional) {; 16638 SSL_CTX_set_verify(dom_ctx->ssl_ctx, SSL_VERIFY_PEER, NULL);; 16639 } else {; 16640 SSL_CTX_set_verify(dom_ctx->ssl_ctx,; 16641 SSL_VERIFY_PEER; 16642 | SSL_VERIFY_FAIL_IF_NO_PEER_CERT,; 16643 NULL);; 16644 }; 16645 ; 16646 if (use_default_verify_paths; 16647 && (SSL_CTX_set_default_verify_paths(dom_ctx->ssl_ctx) != 1)) {; 16648 mg_cry_ctx_internal(phys_ctx,; 16649 ""SSL_CTX_set_default_verify_paths error: %s"",; 16650 ssl_error());; 16651 return 0;; 16652 }; 16653 ; 16654 if (dom_ctx->config[SSL_VERIFY_DEPTH]) {; 16655 verify_depth = atoi(dom_ctx->config[SSL_VERIFY_DEPTH]);; 16656 SSL_CTX_set_verify_depth(dom_ctx->ssl_ctx, verify_depth);; 16657 }; 16658 }; 16659 ; 16660 if (dom_ctx->config[SSL_CIPHER_LIST] != NULL) {; 16661 if (SSL_CTX_set_cipher_list(dom_ctx->ssl_ctx,; 16662 dom_ctx->config[SSL_CIPHER_LIST]); 16663 != 1) {; 16664 mg_cry_ctx_internal(phys_ctx,; 16665 ""SSL_CTX_set_cipher_list error: %s"",; 16666 ssl_error());; 16667 }; 16668 }; 16669 ; 16670 /* SSL session caching */; 16671 ssl_cache_timeout = ((dom_ctx->config[SSL_CACHE_TIMEOUT] != NULL); 16672 ? atoi(dom_ctx->config[SSL_CACHE_TIMEOUT]); 16673 : 0);; 16674 if (ssl_cache_timeout > 0) {; 16675 SSL_CTX_set_session_cache_mode(dom_ctx->ssl_ctx, SSL_SESS_CACHE_BOTH);; 16676 /* SSL_CTX_sess_set_cache_size(dom_ctx->ssl_ctx, 10000); ... use; 16677 * default */; 16678 SSL_CTX_set_timeout(dom_ctx->ssl_ctx, (long)ssl_cache_timeout);; 16679 }; 16680 ; 16681#if defined(USE_ALPN); 16682 /* Initialize ALPN only of TLS library (OpenSSL version) supports ALPN */; 16683#if !defined(NO_SSL_DL); 16684 if (!tls_feature_missing[T",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:496312,Availability,error,error,496312," pointer. */; 16698static int; 16699init_ssl_ctx(struct mg_context *phys_ctx, struct mg_domain_context *dom_ctx); 16700{; 16701 void *ssl_ctx = 0;; 16702 int callback_ret;; 16703 const char *pem;; 16704 const char *chain;; 16705 char ebuf[128];; 16706 ; 16707 if (!phys_ctx) {; 16708 return 0;; 16709 }; 16710 ; 16711 if (!dom_ctx) {; 16712 dom_ctx = &(phys_ctx->dd);; 16713 }; 16714 ; 16715 if (!is_ssl_port_used(dom_ctx->config[LISTENING_PORTS])) {; 16716 /* No SSL port is set. No need to setup SSL. */; 16717 return 1;; 16718 }; 16719 ; 16720 /* Check for external SSL_CTX */; 16721 callback_ret =; 16722 (phys_ctx->callbacks.external_ssl_ctx == NULL); 16723 ? 0; 16724 : (phys_ctx->callbacks.external_ssl_ctx(&ssl_ctx,; 16725 phys_ctx->user_data));; 16726 ; 16727 if (callback_ret < 0) {; 16728 /* Callback exists and returns <0: Initializing failed. */; 16729 mg_cry_ctx_internal(phys_ctx,; 16730 ""external_ssl_ctx callback returned error: %i"",; 16731 callback_ret);; 16732 return 0;; 16733 } else if (callback_ret > 0) {; 16734 /* Callback exists and returns >0: Initializing complete,; 16735 * civetweb should not modify the SSL context. */; 16736 dom_ctx->ssl_ctx = (SSL_CTX *)ssl_ctx;; 16737 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16738 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16739 return 0;; 16740 }; 16741 return 1;; 16742 }; 16743 /* If the callback does not exist or return 0, civetweb must initialize; 16744 * the SSL context. Handle ""domain"" callback next. */; 16745 ; 16746 /* Check for external domain SSL_CTX callback. */; 16747 callback_ret = (phys_ctx->callbacks.external_ssl_ctx_domain == NULL); 16748 ? 0; 16749 : (phys_ctx->callbacks.external_ssl_ctx_domain(; 16750 dom_ctx->config[AUTHENTICATION_DOMAIN],; 16751 &ssl_ctx,; 16752 phys_ctx->user_data));; 16753 ; 16754 if (callback_ret < 0) {; 16755 /* Callback < 0: Error. Abort init. */; 16756 mg_cry_ctx_internal(; 16757 phys_ctx,; 16758 ""external_ssl_ctx_domain callback returned error: %i"",; 16759 callback_r",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:497344,Availability,error,error,497344,"0;; 16733 } else if (callback_ret > 0) {; 16734 /* Callback exists and returns >0: Initializing complete,; 16735 * civetweb should not modify the SSL context. */; 16736 dom_ctx->ssl_ctx = (SSL_CTX *)ssl_ctx;; 16737 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16738 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16739 return 0;; 16740 }; 16741 return 1;; 16742 }; 16743 /* If the callback does not exist or return 0, civetweb must initialize; 16744 * the SSL context. Handle ""domain"" callback next. */; 16745 ; 16746 /* Check for external domain SSL_CTX callback. */; 16747 callback_ret = (phys_ctx->callbacks.external_ssl_ctx_domain == NULL); 16748 ? 0; 16749 : (phys_ctx->callbacks.external_ssl_ctx_domain(; 16750 dom_ctx->config[AUTHENTICATION_DOMAIN],; 16751 &ssl_ctx,; 16752 phys_ctx->user_data));; 16753 ; 16754 if (callback_ret < 0) {; 16755 /* Callback < 0: Error. Abort init. */; 16756 mg_cry_ctx_internal(; 16757 phys_ctx,; 16758 ""external_ssl_ctx_domain callback returned error: %i"",; 16759 callback_ret);; 16760 return 0;; 16761 } else if (callback_ret > 0) {; 16762 /* Callback > 0: Consider init done. */; 16763 dom_ctx->ssl_ctx = (SSL_CTX *)ssl_ctx;; 16764 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16765 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16766 return 0;; 16767 }; 16768 return 1;; 16769 }; 16770 /* else: external_ssl_ctx/external_ssl_ctx_domain do not exist or return; 16771 * 0, CivetWeb should continue initializing SSL */; 16772 ; 16773 /* If PEM file is not specified and the init_ssl callbacks; 16774 * are not specified, setup will fail. */; 16775 if (((pem = dom_ctx->config[SSL_CERTIFICATE]) == NULL); 16776 && (phys_ctx->callbacks.init_ssl == NULL); 16777 && (phys_ctx->callbacks.init_ssl_domain == NULL)) {; 16778 /* No certificate and no init_ssl callbacks:; 16779 * Essential data to set up TLS is missing.; 16780 */; 16781 mg_cry_ctx_internal(phys_ctx,; 16782 ""Initializing SSL failed: -%s is not set"",; 16783 config_options[SSL_CERTIFICATE].name);; 1678",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:506029,Availability,error,error,506029," GCC diagnostic ignored ""-Wconversion""; 17007#endif; 17008 /* Data type of linger structure elements may differ,; 17009 * so we don't know what cast we need here.; 17010 * Disable type conversion warnings. */; 17011 ; 17012 linger.l_linger = (linger_timeout + 999) / 1000;; 17013 ; 17014#if defined(GCC_DIAGNOSTIC); 17015#pragma GCC diagnostic pop; 17016#endif; 17017#if defined(_MSC_VER); 17018#pragma warning(pop); 17019#endif; 17020 ; 17021 } else {; 17022 linger.l_onoff = 0;; 17023 linger.l_linger = 0;; 17024 }; 17025 ; 17026 if (linger_timeout < -1) {; 17027 /* Default: don't configure any linger */; 17028 } else if (getsockopt(conn->client.sock,; 17029 SOL_SOCKET,; 17030 SO_ERROR,; 17031#if defined(_WIN32) /* WinSock uses different data type here */; 17032 (char *)&error_code,; 17033#else; 17034 &error_code,; 17035#endif; 17036 &opt_len); 17037 != 0) {; 17038 /* Cannot determine if socket is already closed. This should; 17039 * not occur and never did in a test. Log an error message; 17040 * and continue. */; 17041 mg_cry_internal(conn,; 17042 ""%s: getsockopt(SOL_SOCKET SO_ERROR) failed: %s"",; 17043 __func__,; 17044 strerror(ERRNO));; 17045#if defined(_WIN32); 17046 } else if (error_code == WSAECONNRESET) {; 17047#else; 17048 } else if (error_code == ECONNRESET) {; 17049#endif; 17050 /* Socket already closed by client/peer, close socket without linger; 17051 */; 17052 } else {; 17053 ; 17054 /* Set linger timeout */; 17055 if (setsockopt(conn->client.sock,; 17056 SOL_SOCKET,; 17057 SO_LINGER,; 17058 (char *)&linger,; 17059 sizeof(linger)); 17060 != 0) {; 17061 mg_cry_internal(; 17062 conn,; 17063 ""%s: setsockopt(SOL_SOCKET SO_LINGER(%i,%i)) failed: %s"",; 17064 __func__,; 17065 linger.l_onoff,; 17066 linger.l_linger,; 17067 strerror(ERRNO));; 17068 }; 17069 }; 17070 ; 17071 /* Now we know that our FIN is ACK-ed, safe to close */; 17072 closesocket(conn->client.sock);; 17073 conn->client.sock = INVALID_SOCKET;; 17074}; 17075#endif; 17076 ; 17077 ; 17078static void; ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:507502,Availability,alive,alive,507502," == ECONNRESET) {; 17049#endif; 17050 /* Socket already closed by client/peer, close socket without linger; 17051 */; 17052 } else {; 17053 ; 17054 /* Set linger timeout */; 17055 if (setsockopt(conn->client.sock,; 17056 SOL_SOCKET,; 17057 SO_LINGER,; 17058 (char *)&linger,; 17059 sizeof(linger)); 17060 != 0) {; 17061 mg_cry_internal(; 17062 conn,; 17063 ""%s: setsockopt(SOL_SOCKET SO_LINGER(%i,%i)) failed: %s"",; 17064 __func__,; 17065 linger.l_onoff,; 17066 linger.l_linger,; 17067 strerror(ERRNO));; 17068 }; 17069 }; 17070 ; 17071 /* Now we know that our FIN is ACK-ed, safe to close */; 17072 closesocket(conn->client.sock);; 17073 conn->client.sock = INVALID_SOCKET;; 17074}; 17075#endif; 17076 ; 17077 ; 17078static void; 17079close_connection(struct mg_connection *conn); 17080{; 17081#if defined(USE_SERVER_STATS); 17082 conn->conn_state = 6; /* to close */; 17083#endif; 17084 ; 17085#if defined(USE_LUA) && defined(USE_WEBSOCKET); 17086 if (conn->lua_websocket_state) {; 17087 lua_websocket_close(conn, conn->lua_websocket_state);; 17088 conn->lua_websocket_state = NULL;; 17089 }; 17090#endif; 17091 ; 17092 mg_lock_connection(conn);; 17093 ; 17094 /* Set close flag, so keep-alive loops will stop */; 17095 conn->must_close = 1;; 17096 ; 17097 /* call the connection_close callback if assigned */; 17098 if (conn->phys_ctx->callbacks.connection_close != NULL) {; 17099 if (conn->phys_ctx->context_type == CONTEXT_SERVER) {; 17100 conn->phys_ctx->callbacks.connection_close(conn);; 17101 }; 17102 }; 17103 ; 17104 /* Reset user data, after close callback is called.; 17105 * Do not reuse it. If the user needs a destructor,; 17106 * it must be done in the connection_close callback. */; 17107 mg_set_user_connection_data(conn, NULL);; 17108 ; 17109 ; 17110#if defined(USE_SERVER_STATS); 17111 conn->conn_state = 7; /* closing */; 17112#endif; 17113 ; 17114#if defined(USE_MBEDTLS); 17115 if (conn->ssl != NULL) {; 17116 mbed_ssl_close(conn->ssl);; 17117 conn->ssl = NULL;; 17118 }; 17119",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:513706,Availability,error,error,513706,"; 17246 return NULL;; 17247 }; 17248 ; 17249#if defined(GCC_DIAGNOSTIC); 17250#pragma GCC diagnostic push; 17251#pragma GCC diagnostic ignored ""-Wcast-align""; 17252#endif /* defined(GCC_DIAGNOSTIC) */; 17253 /* conn_size is aligned to 8 bytes */; 17254 ; 17255 conn->phys_ctx = (struct mg_context *)(((char *)conn) + conn_size);; 17256 ; 17257#if defined(GCC_DIAGNOSTIC); 17258#pragma GCC diagnostic pop; 17259#endif /* defined(GCC_DIAGNOSTIC) */; 17260 ; 17261 conn->buf = (((char *)conn) + conn_size + ctx_size);; 17262 conn->buf_size = (int)max_req_size;; 17263 conn->phys_ctx->context_type = CONTEXT_HTTP_CLIENT;; 17264 conn->dom_ctx = &(conn->phys_ctx->dd);; 17265 ; 17266 if (!connect_socket(conn->phys_ctx,; 17267 client_options->host,; 17268 client_options->port,; 17269 use_ssl,; 17270 ebuf,; 17271 ebuf_len,; 17272 &sock,; 17273 &sa)) {; 17274 /* ebuf is set by connect_socket,; 17275 * free all memory and return NULL; */; 17276 mg_free(conn);; 17277 return NULL;; 17278 }; 17279 ; 17280#if !defined(NO_SSL) && !defined(USE_MBEDTLS) // TODO: mbedTLS client; 17281#if (defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) \; 17282 && !defined(NO_SSL_DL); 17283 if (use_ssl; 17284 && (conn->dom_ctx->ssl_ctx = SSL_CTX_new(TLS_client_method())); 17285 == NULL) {; 17286 mg_snprintf(NULL,; 17287 NULL, /* No truncation check for ebuf */; 17288 ebuf,; 17289 ebuf_len,; 17290 ""SSL_CTX_new error: %s"",; 17291 ssl_error());; 17292 closesocket(sock);; 17293 mg_free(conn);; 17294 return NULL;; 17295 }; 17296#else; 17297 if (use_ssl; 17298 && (conn->dom_ctx->ssl_ctx = SSL_CTX_new(SSLv23_client_method())); 17299 == NULL) {; 17300 mg_snprintf(NULL,; 17301 NULL, /* No truncation check for ebuf */; 17302 ebuf,; 17303 ebuf_len,; 17304 ""SSL_CTX_new error: %s"",; 17305 ssl_error());; 17306 closesocket(sock);; 17307 mg_free(conn);; 17308 return NULL;; 17309 }; 17310#endif /* OPENSSL_API_1_1 || OPENSSL_API_3_0 */; 17311#endif /* NO_SSL */; 17312 ; 17313 ; 17314#if defined(USE_IPV6); 17315 len = (sa.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:514061,Availability,error,error,514061,"; 17246 return NULL;; 17247 }; 17248 ; 17249#if defined(GCC_DIAGNOSTIC); 17250#pragma GCC diagnostic push; 17251#pragma GCC diagnostic ignored ""-Wcast-align""; 17252#endif /* defined(GCC_DIAGNOSTIC) */; 17253 /* conn_size is aligned to 8 bytes */; 17254 ; 17255 conn->phys_ctx = (struct mg_context *)(((char *)conn) + conn_size);; 17256 ; 17257#if defined(GCC_DIAGNOSTIC); 17258#pragma GCC diagnostic pop; 17259#endif /* defined(GCC_DIAGNOSTIC) */; 17260 ; 17261 conn->buf = (((char *)conn) + conn_size + ctx_size);; 17262 conn->buf_size = (int)max_req_size;; 17263 conn->phys_ctx->context_type = CONTEXT_HTTP_CLIENT;; 17264 conn->dom_ctx = &(conn->phys_ctx->dd);; 17265 ; 17266 if (!connect_socket(conn->phys_ctx,; 17267 client_options->host,; 17268 client_options->port,; 17269 use_ssl,; 17270 ebuf,; 17271 ebuf_len,; 17272 &sock,; 17273 &sa)) {; 17274 /* ebuf is set by connect_socket,; 17275 * free all memory and return NULL; */; 17276 mg_free(conn);; 17277 return NULL;; 17278 }; 17279 ; 17280#if !defined(NO_SSL) && !defined(USE_MBEDTLS) // TODO: mbedTLS client; 17281#if (defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) \; 17282 && !defined(NO_SSL_DL); 17283 if (use_ssl; 17284 && (conn->dom_ctx->ssl_ctx = SSL_CTX_new(TLS_client_method())); 17285 == NULL) {; 17286 mg_snprintf(NULL,; 17287 NULL, /* No truncation check for ebuf */; 17288 ebuf,; 17289 ebuf_len,; 17290 ""SSL_CTX_new error: %s"",; 17291 ssl_error());; 17292 closesocket(sock);; 17293 mg_free(conn);; 17294 return NULL;; 17295 }; 17296#else; 17297 if (use_ssl; 17298 && (conn->dom_ctx->ssl_ctx = SSL_CTX_new(SSLv23_client_method())); 17299 == NULL) {; 17300 mg_snprintf(NULL,; 17301 NULL, /* No truncation check for ebuf */; 17302 ebuf,; 17303 ebuf_len,; 17304 ""SSL_CTX_new error: %s"",; 17305 ssl_error());; 17306 closesocket(sock);; 17307 mg_free(conn);; 17308 return NULL;; 17309 }; 17310#endif /* OPENSSL_API_1_1 || OPENSSL_API_3_0 */; 17311#endif /* NO_SSL */; 17312 ; 17313 ; 17314#if defined(USE_IPV6); 17315 len = (sa.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:516527,Availability,error,error,516527,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:517047,Availability,error,error,517047," 17360 if (client_options->client_cert) {; 17361 if (!ssl_use_pem_file(conn->phys_ctx,; 17362 conn->dom_ctx,; 17363 client_options->client_cert,; 17364 NULL)) {; 17365 mg_snprintf(NULL,; 17366 NULL, /* No truncation check for ebuf */; 17367 ebuf,; 17368 ebuf_len,; 17369 ""Can not use SSL client certificate"");; 17370 SSL_CTX_free(conn->dom_ctx->ssl_ctx);; 17371 closesocket(sock);; 17372 mg_free(conn);; 17373 return NULL;; 17374 }; 17375 }; 17376 ; 17377 if (client_options->server_cert) {; 17378 if (SSL_CTX_load_verify_locations(conn->dom_ctx->ssl_ctx,; 17379 client_options->server_cert,; 17380 NULL); 17381 != 1) {; 17382 mg_cry_internal(conn,; 17383 ""SSL_CTX_load_verify_locations error: %s "",; 17384 ssl_error());; 17385 SSL_CTX_free(conn->dom_ctx->ssl_ctx);; 17386 closesocket(sock);; 17387 mg_free(conn);; 17388 return NULL;; 17389 }; 17390 SSL_CTX_set_verify(conn->dom_ctx->ssl_ctx, SSL_VERIFY_PEER, NULL);; 17391 } else {; 17392 SSL_CTX_set_verify(conn->dom_ctx->ssl_ctx, SSL_VERIFY_NONE, NULL);; 17393 }; 17394 ; 17395 if (!sslize(conn, SSL_connect, client_options)) {; 17396 mg_snprintf(NULL,; 17397 NULL, /* No truncation check for ebuf */; 17398 ebuf,; 17399 ebuf_len,; 17400 ""SSL connection error"");; 17401 SSL_CTX_free(conn->dom_ctx->ssl_ctx);; 17402 closesocket(sock);; 17403 mg_free(conn);; 17404 return NULL;; 17405 }; 17406 }; 17407#endif; 17408 ; 17409 return conn;; 17410}; 17411 ; 17412 ; 17413CIVETWEB_API struct mg_connection *; 17414mg_connect_client_secure(const struct mg_client_options *client_options,; 17415 char *error_buffer,; 17416 size_t error_buffer_size); 17417{; 17418 return mg_connect_client_impl(client_options,; 17419 1,; 17420 error_buffer,; 17421 error_buffer_size);; 17422}; 17423 ; 17424 ; 17425struct mg_connection *; 17426mg_connect_client(const char *host,; 17427 int port,; 17428 int use_ssl,; 17429 char *error_buffer,; 17430 size_t error_buffer_size); 17431{; 17432 struct mg_client_options opts;; 17433 memset(&opts, 0, sizeof(opts));; 17434 opts.",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518263,Availability,error,error,518263,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518403,Availability,error,error,518403,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518427,Availability,error,error,518427,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518455,Availability,error,error,518455,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518494,Availability,error,error,518494,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518600,Availability,error,error,518600,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518619,Availability,error,error,518619,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518716,Availability,error,error,518716,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518740,Availability,error,error,518740,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:518760,Availability,error,error,518760,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:519343,Availability,error,error,519343,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:519362,Availability,error,error,519362,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:519459,Availability,error,error,519459,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:519483,Availability,error,error,519483,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:519503,Availability,error,error,519503,"s, 0, sizeof(opts));; 17434 opts.host = host;; 17435 opts.port = port;; 17436 return mg_connect_client_impl(&opts,; 17437 use_ssl,; 17438 error_buffer,; 17439 error_buffer_size);; 17440}; 17441 ; 17442 ; 17443#if defined(MG_EXPERIMENTAL_INTERFACES); 17444struct mg_connection *; 17445mg_connect_client2(const char *host,; 17446 const char *protocol,; 17447 int port,; 17448 const char *path,; 17449 struct mg_init_data *init,; 17450 struct mg_error_data *error); 17451{; 17452 int is_ssl, is_ws;; 17453 /* void *user_data = (init != NULL) ? init->user_data : NULL; -- TODO */; 17454 ; 17455 if (error != NULL) {; 17456 error->code = 0;; 17457 if (error->text_buffer_size > 0) {; 17458 *error->text = 0;; 17459 }; 17460 }; 17461 ; 17462 if ((host == NULL) || (protocol == NULL)) {; 17463 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17464 mg_snprintf(NULL,; 17465 NULL, /* No truncation check for error buffers */; 17466 error->text,; 17467 error->text_buffer_size,; 17468 ""%s"",; 17469 ""Invalid parameters"");; 17470 }; 17471 return NULL;; 17472 }; 17473 ; 17474 /* check all known protocolls */; 17475 if (!mg_strcasecmp(protocol, ""http"")) {; 17476 is_ssl = 0;; 17477 is_ws = 0;; 17478 } else if (!mg_strcasecmp(protocol, ""https"")) {; 17479 is_ssl = 1;; 17480 is_ws = 0;; 17481#if defined(USE_WEBSOCKET); 17482 } else if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interf",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520005,Availability,error,error,520005,"se if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for ab",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520022,Availability,error,error,520022,"se if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for ab",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520052,Availability,error,error,520052,"se if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for ab",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520069,Availability,error,error,520069,"se if (!mg_strcasecmp(protocol, ""ws"")) {; 17483 is_ssl = 0;; 17484 is_ws = 1;; 17485 } else if (!mg_strcasecmp(protocol, ""wss"")) {; 17486 is_ssl = 1;; 17487 is_ws = 1;; 17488#endif; 17489 } else {; 17490 if ((error != NULL) && (error->text_buffer_size > 0)) {; 17491 mg_snprintf(NULL,; 17492 NULL, /* No truncation check for error buffers */; 17493 error->text,; 17494 error->text_buffer_size,; 17495 ""Protocol %s not supported"",; 17496 protocol);; 17497 }; 17498 return NULL;; 17499 }; 17500 ; 17501 /* TODO: The current implementation here just calls the old; 17502 * implementations, without using any new options. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for ab",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520561,Availability,error,error,520561,"ons. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for absolute uri without port,; 17551 * return 4 for absolute uri with port */; 17552static int; 17553get_uri_type(const char *uri); 17554{; 17555 int i;; 17556 const char *hostend, *portbegin;; 17557 char *portend;; 17558 unsigned long port;; 17559 ; 17560 /* According to the HTTP standard; 17561 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2; 17562 * URI can be an asterisk (*) or should start with slash (relative uri),; 17563 * or it should start with the protocol (absolute uri). */; 17564 if ((uri[0] == '*') && (uri[1] == '\0')) {; 17565 /* asterisk */; 17566 return 1;; 17567 }; 17568 ; 175",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520578,Availability,error,error,520578,"ons. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for absolute uri without port,; 17551 * return 4 for absolute uri with port */; 17552static int; 17553get_uri_type(const char *uri); 17554{; 17555 int i;; 17556 const char *hostend, *portbegin;; 17557 char *portend;; 17558 unsigned long port;; 17559 ; 17560 /* According to the HTTP standard; 17561 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2; 17562 * URI can be an asterisk (*) or should start with slash (relative uri),; 17563 * or it should start with the protocol (absolute uri). */; 17564 if ((uri[0] == '*') && (uri[1] == '\0')) {; 17565 /* asterisk */; 17566 return 1;; 17567 }; 17568 ; 175",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520608,Availability,error,error,520608,"ons. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for absolute uri without port,; 17551 * return 4 for absolute uri with port */; 17552static int; 17553get_uri_type(const char *uri); 17554{; 17555 int i;; 17556 const char *hostend, *portbegin;; 17557 char *portend;; 17558 unsigned long port;; 17559 ; 17560 /* According to the HTTP standard; 17561 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2; 17562 * URI can be an asterisk (*) or should start with slash (relative uri),; 17563 * or it should start with the protocol (absolute uri). */; 17564 if ((uri[0] == '*') && (uri[1] == '\0')) {; 17565 /* asterisk */; 17566 return 1;; 17567 }; 17568 ; 175",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:520625,Availability,error,error,520625,"ons. This is just a first; 17503 * step to test the new interfaces. */; 17504#if defined(USE_WEBSOCKET); 17505 if (is_ws) {; 17506 /* TODO: implement all options */; 17507 return mg_connect_websocket_client(; 17508 host,; 17509 port,; 17510 is_ssl,; 17511 ((error != NULL) ? error->text : NULL),; 17512 ((error != NULL) ? error->text_buffer_size : 0),; 17513 (path ? path : """"),; 17514 NULL /* TODO: origin */,; 17515 experimental_websocket_client_data_wrapper,; 17516 experimental_websocket_client_close_wrapper,; 17517 (void *)init->callbacks);; 17518 }; 17519#endif; 17520 ; 17521 /* TODO: all additional options */; 17522 struct mg_client_options opts;; 17523 memset(&opts, 0, sizeof(opts));; 17524 opts.host = host;; 17525 opts.port = port;; 17526 return mg_connect_client_impl(&opts,; 17527 is_ssl,; 17528 ((error != NULL) ? error->text : NULL),; 17529 ((error != NULL) ? error->text_buffer_size; 17530 : 0));; 17531}; 17532#endif; 17533 ; 17534 ; 17535static const struct {; 17536 const char *proto;; 17537 size_t proto_len;; 17538 unsigned default_port;; 17539} abs_uri_protocols[] = {{""http://"", 7, 80},; 17540 {""https://"", 8, 443},; 17541 {""ws://"", 5, 80},; 17542 {""wss://"", 6, 443},; 17543 {NULL, 0, 0}};; 17544 ; 17545 ; 17546/* Check if the uri is valid.; 17547 * return 0 for invalid uri,; 17548 * return 1 for *,; 17549 * return 2 for relative uri,; 17550 * return 3 for absolute uri without port,; 17551 * return 4 for absolute uri with port */; 17552static int; 17553get_uri_type(const char *uri); 17554{; 17555 int i;; 17556 const char *hostend, *portbegin;; 17557 char *portend;; 17558 unsigned long port;; 17559 ; 17560 /* According to the HTTP standard; 17561 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2; 17562 * URI can be an asterisk (*) or should start with slash (relative uri),; 17563 * or it should start with the protocol (absolute uri). */; 17564 if ((uri[0] == '*') && (uri[1] == '\0')) {; 17565 /* asterisk */; 17566 return 1;; 17567 }; 17568 ; 175",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:527293,Availability,error,error,527293,"_domain_len < (server_domain_len + 2)) {; 17699 /* Request is directed to another server: The server name; 17700 * is longer than the request name.; 17701 * Drop this case here to avoid overflows in the; 17702 * following checks. */; 17703 return 0;; 17704 }; 17705 if (hostbegin[request_domain_len - server_domain_len - 1] != '.') {; 17706 /* Request is directed to another server: It could be a; 17707 * substring; 17708 * like notmyserver.com */; 17709 return 0;; 17710 }; 17711 if (0; 17712 != memcmp(server_domain,; 17713 hostbegin + request_domain_len - server_domain_len,; 17714 server_domain_len)) {; 17715 /* Request is directed to another server:; 17716 * The server name is different. */; 17717 return 0;; 17718 }; 17719 }; 17720 }; 17721 ; 17722 return hostend;; 17723}; 17724 ; 17725 ; 17726static int; 17727get_message(struct mg_connection *conn, char *ebuf, size_t ebuf_len, int *err); 17728{; 17729 if (ebuf_len > 0) {; 17730 ebuf[0] = '\0';; 17731 }; 17732 *err = 0;; 17733 ; 17734 reset_per_request_attributes(conn);; 17735 ; 17736 if (!conn) {; 17737 mg_snprintf(conn,; 17738 NULL, /* No truncation check for ebuf */; 17739 ebuf,; 17740 ebuf_len,; 17741 ""%s"",; 17742 ""Internal error"");; 17743 *err = 500;; 17744 return 0;; 17745 }; 17746 ; 17747 /* Set the time the request was received. This value should be used for; 17748 * timeouts. */; 17749 clock_gettime(CLOCK_MONOTONIC, &(conn->req_time));; 17750 ; 17751 conn->request_len =; 17752 read_message(NULL, conn, conn->buf, conn->buf_size, &conn->data_len);; 17753 DEBUG_ASSERT(conn->request_len < 0 || conn->data_len >= conn->request_len);; 17754 if ((conn->request_len >= 0) && (conn->data_len < conn->request_len)) {; 17755 mg_snprintf(conn,; 17756 NULL, /* No truncation check for ebuf */; 17757 ebuf,; 17758 ebuf_len,; 17759 ""%s"",; 17760 ""Invalid message size"");; 17761 *err = 500;; 17762 return 0;; 17763 }; 17764 ; 17765 if ((conn->request_len == 0) && (conn->data_len == conn->buf_size)) {; 17766 mg_snprintf(conn,; 17767 ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:534356,Availability,error,error,534356,"code == 304) {; 17961 conn->content_len = 0;; 17962 }; 17963 } else {; 17964 /* TODO: we should also consider HEAD method */; 17965 if (((conn->response_info.status_code >= 100); 17966 && (conn->response_info.status_code <= 199)); 17967 || (conn->response_info.status_code == 204); 17968 || (conn->response_info.status_code == 304)) {; 17969 conn->content_len = 0;; 17970 } else {; 17971 conn->content_len = -1; /* unknown content length */; 17972 }; 17973 }; 17974 ; 17975 return 1;; 17976}; 17977 ; 17978 ; 17979int; 17980mg_get_response(struct mg_connection *conn,; 17981 char *ebuf,; 17982 size_t ebuf_len,; 17983 int timeout); 17984{; 17985 int err, ret;; 17986 char txt[32]; /* will not overflow */; 17987 char *save_timeout;; 17988 char *new_timeout;; 17989 ; 17990 if (ebuf_len > 0) {; 17991 ebuf[0] = '\0';; 17992 }; 17993 ; 17994 if (!conn) {; 17995 mg_snprintf(conn,; 17996 NULL, /* No truncation check for ebuf */; 17997 ebuf,; 17998 ebuf_len,; 17999 ""%s"",; 18000 ""Parameter error"");; 18001 return -1;; 18002 }; 18003 ; 18004 /* Reset the previous responses */; 18005 conn->data_len = 0;; 18006 ; 18007 /* Implementation of API function for HTTP clients */; 18008 save_timeout = conn->dom_ctx->config[REQUEST_TIMEOUT];; 18009 ; 18010 if (timeout >= 0) {; 18011 mg_snprintf(conn, NULL, txt, sizeof(txt), ""%i"", timeout);; 18012 new_timeout = txt;; 18013 } else {; 18014 new_timeout = NULL;; 18015 }; 18016 ; 18017 conn->dom_ctx->config[REQUEST_TIMEOUT] = new_timeout;; 18018 ret = get_response(conn, ebuf, ebuf_len, &err);; 18019 conn->dom_ctx->config[REQUEST_TIMEOUT] = save_timeout;; 18020 ; 18021 /* TODO: here, the URI is the http response code */; 18022 conn->request_info.local_uri_raw = conn->request_info.request_uri;; 18023 conn->request_info.local_uri = conn->request_info.local_uri_raw;; 18024 ; 18025 /* TODO (mid): Define proper return values - maybe return length?; 18026 * For the first test use <0 for error and >0 for OK */; 18027 return (ret == 0) ? -1 : +1;; 18028}; 1802",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:535297,Availability,error,error,535297,"or"");; 18001 return -1;; 18002 }; 18003 ; 18004 /* Reset the previous responses */; 18005 conn->data_len = 0;; 18006 ; 18007 /* Implementation of API function for HTTP clients */; 18008 save_timeout = conn->dom_ctx->config[REQUEST_TIMEOUT];; 18009 ; 18010 if (timeout >= 0) {; 18011 mg_snprintf(conn, NULL, txt, sizeof(txt), ""%i"", timeout);; 18012 new_timeout = txt;; 18013 } else {; 18014 new_timeout = NULL;; 18015 }; 18016 ; 18017 conn->dom_ctx->config[REQUEST_TIMEOUT] = new_timeout;; 18018 ret = get_response(conn, ebuf, ebuf_len, &err);; 18019 conn->dom_ctx->config[REQUEST_TIMEOUT] = save_timeout;; 18020 ; 18021 /* TODO: here, the URI is the http response code */; 18022 conn->request_info.local_uri_raw = conn->request_info.request_uri;; 18023 conn->request_info.local_uri = conn->request_info.local_uri_raw;; 18024 ; 18025 /* TODO (mid): Define proper return values - maybe return length?; 18026 * For the first test use <0 for error and >0 for OK */; 18027 return (ret == 0) ? -1 : +1;; 18028}; 18029 ; 18030 ; 18031struct mg_connection *; 18032mg_download(const char *host,; 18033 int port,; 18034 int use_ssl,; 18035 char *ebuf,; 18036 size_t ebuf_len,; 18037 const char *fmt,; 18038 ...); 18039{; 18040 struct mg_connection *conn;; 18041 va_list ap;; 18042 int i;; 18043 int reqerr;; 18044 ; 18045 if (ebuf_len > 0) {; 18046 ebuf[0] = '\0';; 18047 }; 18048 ; 18049 va_start(ap, fmt);; 18050 ; 18051 /* open a connection */; 18052 conn = mg_connect_client(host, port, use_ssl, ebuf, ebuf_len);; 18053 ; 18054 if (conn != NULL) {; 18055 i = mg_vprintf(conn, fmt, ap);; 18056 if (i <= 0) {; 18057 mg_snprintf(conn,; 18058 NULL, /* No truncation check for ebuf */; 18059 ebuf,; 18060 ebuf_len,; 18061 ""%s"",; 18062 ""Error sending request"");; 18063 } else {; 18064 /* make sure the buffer is clear */; 18065 conn->data_len = 0;; 18066 get_response(conn, ebuf, ebuf_len, &reqerr);; 18067 ; 18068 /* TODO: here, the URI is the http response code */; 18069 conn->request_info.local_uri = conn->re",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:536426,Availability,error,error,536426,"ULL) {; 18055 i = mg_vprintf(conn, fmt, ap);; 18056 if (i <= 0) {; 18057 mg_snprintf(conn,; 18058 NULL, /* No truncation check for ebuf */; 18059 ebuf,; 18060 ebuf_len,; 18061 ""%s"",; 18062 ""Error sending request"");; 18063 } else {; 18064 /* make sure the buffer is clear */; 18065 conn->data_len = 0;; 18066 get_response(conn, ebuf, ebuf_len, &reqerr);; 18067 ; 18068 /* TODO: here, the URI is the http response code */; 18069 conn->request_info.local_uri = conn->request_info.request_uri;; 18070 }; 18071 }; 18072 ; 18073 /* if an error occurred, close the connection */; 18074 if ((ebuf[0] != '\0') && (conn != NULL)) {; 18075 mg_close_connection(conn);; 18076 conn = NULL;; 18077 }; 18078 ; 18079 va_end(ap);; 18080 return conn;; 18081}; 18082 ; 18083 ; 18084struct websocket_client_thread_data {; 18085 struct mg_connection *conn;; 18086 mg_websocket_data_handler data_handler;; 18087 mg_websocket_close_handler close_handler;; 18088 void *callback_data;; 18089};; 18090 ; 18091 ; 18092#if defined(USE_WEBSOCKET); 18093#if defined(_WIN32); 18094static unsigned __stdcall websocket_client_thread(void *data); 18095#else; 18096static void *; 18097websocket_client_thread(void *data); 18098#endif; 18099{; 18100 struct websocket_client_thread_data *cdata =; 18101 (struct websocket_client_thread_data *)data;; 18102 ; 18103 void *user_thread_ptr = NULL;; 18104 ; 18105#if !defined(_WIN32) && !defined(__ZEPHYR__); 18106 struct sigaction sa;; 18107 ; 18108 /* Ignore SIGPIPE */; 18109 memset(&sa, 0, sizeof(sa));; 18110 sa.sa_handler = SIG_IGN;; 18111 sigaction(SIGPIPE, &sa, NULL);; 18112#endif; 18113 ; 18114 mg_set_thread_name(""ws-clnt"");; 18115 ; 18116 if (cdata->conn->phys_ctx) {; 18117 if (cdata->conn->phys_ctx->callbacks.init_thread) {; 18118 /* 3 indicates a websocket client thread */; 18119 /* TODO: check if conn->phys_ctx can be set */; 18120 user_thread_ptr = cdata->conn->phys_ctx->callbacks.init_thread(; 18121 cdata->conn->phys_ctx, 3);; 18122 }; 18123 }; 18124 ; 18125 read_websock",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:539936,Availability,error,error,539936," *user_data); 18165{; 18166 struct mg_connection *conn = NULL;; 18167 ; 18168#if defined(USE_WEBSOCKET); 18169 struct websocket_client_thread_data *thread_data;; 18170 static const char *magic = ""x3JJHMbDL1EzLkh9GBhXDw=="";; 18171 ; 18172 const char *host = client_options->host;; 18173 int i;; 18174 ; 18175#if defined(__clang__); 18176#pragma clang diagnostic push; 18177#pragma clang diagnostic ignored ""-Wformat-nonliteral""; 18178#endif; 18179 ; 18180 /* Establish the client connection and request upgrade */; 18181 conn = mg_connect_client_impl(client_options,; 18182 use_ssl,; 18183 error_buffer,; 18184 error_buffer_size);; 18185 ; 18186 /* Connection object will be null if something goes wrong */; 18187 if (conn == NULL) {; 18188 /* error_buffer should be already filled ... */; 18189 if (!error_buffer[0]) {; 18190 /* ... if not add an error message */; 18191 mg_snprintf(conn,; 18192 NULL, /* No truncation check for ebuf */; 18193 error_buffer,; 18194 error_buffer_size,; 18195 ""Unexpected error"");; 18196 }; 18197 return NULL;; 18198 }; 18199 ; 18200 if (origin != NULL) {; 18201 if (extensions != NULL) {; 18202 i = mg_printf(conn,; 18203 ""GET %s HTTP/1.1\r\n""; 18204 ""Host: %s\r\n""; 18205 ""Upgrade: websocket\r\n""; 18206 ""Connection: Upgrade\r\n""; 18207 ""Sec-WebSocket-Key: %s\r\n""; 18208 ""Sec-WebSocket-Version: 13\r\n""; 18209 ""Sec-WebSocket-Extensions: %s\r\n""; 18210 ""Origin: %s\r\n""; 18211 ""\r\n"",; 18212 path,; 18213 host,; 18214 magic,; 18215 extensions,; 18216 origin);; 18217 } else {; 18218 i = mg_printf(conn,; 18219 ""GET %s HTTP/1.1\r\n""; 18220 ""Host: %s\r\n""; 18221 ""Upgrade: websocket\r\n""; 18222 ""Connection: Upgrade\r\n""; 18223 ""Sec-WebSocket-Key: %s\r\n""; 18224 ""Sec-WebSocket-Version: 13\r\n""; 18225 ""Origin: %s\r\n""; 18226 ""\r\n"",; 18227 path,; 18228 host,; 18229 magic,; 18230 origin);; 18231 }; 18232 } else {; 18233 ; 18234 if (extensions != NULL) {; 18235 i = mg_printf(conn,; 18236 ""GET %s HTTP/1.1\r\n""; 18237 ""Host: %s\r\n""; 18238 ""Upgrade: websocket\r\n""; 182",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:540092,Availability,error,error,540092," *user_data); 18165{; 18166 struct mg_connection *conn = NULL;; 18167 ; 18168#if defined(USE_WEBSOCKET); 18169 struct websocket_client_thread_data *thread_data;; 18170 static const char *magic = ""x3JJHMbDL1EzLkh9GBhXDw=="";; 18171 ; 18172 const char *host = client_options->host;; 18173 int i;; 18174 ; 18175#if defined(__clang__); 18176#pragma clang diagnostic push; 18177#pragma clang diagnostic ignored ""-Wformat-nonliteral""; 18178#endif; 18179 ; 18180 /* Establish the client connection and request upgrade */; 18181 conn = mg_connect_client_impl(client_options,; 18182 use_ssl,; 18183 error_buffer,; 18184 error_buffer_size);; 18185 ; 18186 /* Connection object will be null if something goes wrong */; 18187 if (conn == NULL) {; 18188 /* error_buffer should be already filled ... */; 18189 if (!error_buffer[0]) {; 18190 /* ... if not add an error message */; 18191 mg_snprintf(conn,; 18192 NULL, /* No truncation check for ebuf */; 18193 error_buffer,; 18194 error_buffer_size,; 18195 ""Unexpected error"");; 18196 }; 18197 return NULL;; 18198 }; 18199 ; 18200 if (origin != NULL) {; 18201 if (extensions != NULL) {; 18202 i = mg_printf(conn,; 18203 ""GET %s HTTP/1.1\r\n""; 18204 ""Host: %s\r\n""; 18205 ""Upgrade: websocket\r\n""; 18206 ""Connection: Upgrade\r\n""; 18207 ""Sec-WebSocket-Key: %s\r\n""; 18208 ""Sec-WebSocket-Version: 13\r\n""; 18209 ""Sec-WebSocket-Extensions: %s\r\n""; 18210 ""Origin: %s\r\n""; 18211 ""\r\n"",; 18212 path,; 18213 host,; 18214 magic,; 18215 extensions,; 18216 origin);; 18217 } else {; 18218 i = mg_printf(conn,; 18219 ""GET %s HTTP/1.1\r\n""; 18220 ""Host: %s\r\n""; 18221 ""Upgrade: websocket\r\n""; 18222 ""Connection: Upgrade\r\n""; 18223 ""Sec-WebSocket-Key: %s\r\n""; 18224 ""Sec-WebSocket-Version: 13\r\n""; 18225 ""Origin: %s\r\n""; 18226 ""\r\n"",; 18227 path,; 18228 host,; 18229 magic,; 18230 origin);; 18231 }; 18232 } else {; 18233 ; 18234 if (extensions != NULL) {; 18235 i = mg_printf(conn,; 18236 ""GET %s HTTP/1.1\r\n""; 18237 ""Host: %s\r\n""; 18238 ""Upgrade: websocket\r\n""; 182",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:542611,Availability,error,error,542611,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:542853,Availability,error,error,542853,,MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:547999,Availability,alive,alive,547999,"ar *extensions,; 18429 mg_websocket_data_handler data_func,; 18430 mg_websocket_close_handler close_func,; 18431 void *user_data); 18432{; 18433 struct mg_client_options client_options;; 18434 memset(&client_options, 0, sizeof(client_options));; 18435 client_options.host = host;; 18436 client_options.port = port;; 18437 ; 18438 return mg_connect_websocket_client_impl(&client_options,; 18439 use_ssl,; 18440 error_buffer,; 18441 error_buffer_size,; 18442 path,; 18443 origin,; 18444 extensions,; 18445 data_func,; 18446 close_func,; 18447 user_data);; 18448}; 18449 ; 18450struct mg_connection *; 18451mg_connect_websocket_client_secure_extensions(; 18452 const struct mg_client_options *client_options,; 18453 char *error_buffer,; 18454 size_t error_buffer_size,; 18455 const char *path,; 18456 const char *origin,; 18457 const char *extensions,; 18458 mg_websocket_data_handler data_func,; 18459 mg_websocket_close_handler close_func,; 18460 void *user_data); 18461{; 18462 if (!client_options) {; 18463 return NULL;; 18464 }; 18465 return mg_connect_websocket_client_impl(client_options,; 18466 1,; 18467 error_buffer,; 18468 error_buffer_size,; 18469 path,; 18470 origin,; 18471 extensions,; 18472 data_func,; 18473 close_func,; 18474 user_data);; 18475}; 18476 ; 18477/* Prepare connection data structure */; 18478static void; 18479init_connection(struct mg_connection *conn); 18480{; 18481 /* Is keep alive allowed by the server */; 18482 int keep_alive_enabled =; 18483 !mg_strcasecmp(conn->dom_ctx->config[ENABLE_KEEP_ALIVE], ""yes"");; 18484 ; 18485 if (!keep_alive_enabled) {; 18486 conn->must_close = 1;; 18487 }; 18488 ; 18489 /* Important: on new connection, reset the receiving buffer. Credit; 18490 * goes to crule42. */; 18491 conn->data_len = 0;; 18492 conn->handled_requests = 0;; 18493 conn->connection_type = CONNECTION_TYPE_INVALID;; 18494 mg_set_user_connection_data(conn, NULL);; 18495 ; 18496#if defined(USE_SERVER_STATS); 18497 conn->conn_state = 2; /* init */; 18498#endif; 1",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:549910,Availability,alive,alive,549910,"ion(conn, &conn_data);; 18505 mg_set_user_connection_data(conn, conn_data);; 18506 }; 18507 }; 18508}; 18509 ; 18510 ; 18511/* Process a connection - may handle multiple requests; 18512 * using the same connection.; 18513 * Must be called with a valid connection (conn and; 18514 * conn->phys_ctx must be valid).; 18515 */; 18516static void; 18517process_new_connection(struct mg_connection *conn); 18518{; 18519 struct mg_request_info *ri = &conn->request_info;; 18520 int keep_alive, discard_len;; 18521 char ebuf[100];; 18522 const char *hostend;; 18523 int reqerr, uri_type;; 18524 ; 18525#if defined(USE_SERVER_STATS); 18526 ptrdiff_t mcon = mg_atomic_inc(&(conn->phys_ctx->active_connections));; 18527 mg_atomic_add(&(conn->phys_ctx->total_connections), 1);; 18528 mg_atomic_max(&(conn->phys_ctx->max_active_connections), mcon);; 18529#endif; 18530 ; 18531 DEBUG_TRACE(""Start processing connection from %s"",; 18532 conn->request_info.remote_addr);; 18533 ; 18534 /* Loop over multiple requests sent using the same connection; 18535 * (while ""keep alive""). */; 18536 do {; 18537 DEBUG_TRACE(""calling get_request (%i times for this connection)"",; 18538 conn->handled_requests + 1);; 18539 ; 18540#if defined(USE_SERVER_STATS); 18541 conn->conn_state = 3; /* ready */; 18542#endif; 18543 ; 18544 if (!get_request(conn, ebuf, sizeof(ebuf), &reqerr)) {; 18545 /* The request sent by the client could not be understood by; 18546 * the server, or it was incomplete or a timeout. Send an; 18547 * error message and close the connection. */; 18548 if (reqerr > 0) {; 18549 DEBUG_ASSERT(ebuf[0] != '\0');; 18550 mg_send_http_error(conn, reqerr, ""%s"", ebuf);; 18551 }; 18552 ; 18553 } else if (strcmp(ri->http_version, ""1.0""); 18554 && strcmp(ri->http_version, ""1.1"")) {; 18555 /* HTTP/2 is not allowed here */; 18556 mg_snprintf(conn,; 18557 NULL, /* No truncation check for ebuf */; 18558 ebuf,; 18559 sizeof(ebuf),; 18560 ""Bad HTTP version: [%s]"",; 18561 ri->http_version);; 18562 mg_send_http_error(con",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:550352,Availability,error,error,550352," char ebuf[100];; 18522 const char *hostend;; 18523 int reqerr, uri_type;; 18524 ; 18525#if defined(USE_SERVER_STATS); 18526 ptrdiff_t mcon = mg_atomic_inc(&(conn->phys_ctx->active_connections));; 18527 mg_atomic_add(&(conn->phys_ctx->total_connections), 1);; 18528 mg_atomic_max(&(conn->phys_ctx->max_active_connections), mcon);; 18529#endif; 18530 ; 18531 DEBUG_TRACE(""Start processing connection from %s"",; 18532 conn->request_info.remote_addr);; 18533 ; 18534 /* Loop over multiple requests sent using the same connection; 18535 * (while ""keep alive""). */; 18536 do {; 18537 DEBUG_TRACE(""calling get_request (%i times for this connection)"",; 18538 conn->handled_requests + 1);; 18539 ; 18540#if defined(USE_SERVER_STATS); 18541 conn->conn_state = 3; /* ready */; 18542#endif; 18543 ; 18544 if (!get_request(conn, ebuf, sizeof(ebuf), &reqerr)) {; 18545 /* The request sent by the client could not be understood by; 18546 * the server, or it was incomplete or a timeout. Send an; 18547 * error message and close the connection. */; 18548 if (reqerr > 0) {; 18549 DEBUG_ASSERT(ebuf[0] != '\0');; 18550 mg_send_http_error(conn, reqerr, ""%s"", ebuf);; 18551 }; 18552 ; 18553 } else if (strcmp(ri->http_version, ""1.0""); 18554 && strcmp(ri->http_version, ""1.1"")) {; 18555 /* HTTP/2 is not allowed here */; 18556 mg_snprintf(conn,; 18557 NULL, /* No truncation check for ebuf */; 18558 ebuf,; 18559 sizeof(ebuf),; 18560 ""Bad HTTP version: [%s]"",; 18561 ri->http_version);; 18562 mg_send_http_error(conn, 505, ""%s"", ebuf);; 18563 }; 18564 ; 18565 if (ebuf[0] == '\0') {; 18566 uri_type = get_uri_type(conn->request_info.request_uri);; 18567 switch (uri_type) {; 18568 case 1:; 18569 /* Asterisk */; 18570 conn->request_info.local_uri_raw = 0;; 18571 /* TODO: Deal with '*'. */; 18572 break;; 18573 case 2:; 18574 /* relative uri */; 18575 conn->request_info.local_uri_raw =; 18576 conn->request_info.request_uri;; 18577 break;; 18578 case 3:; 18579 case 4:; 18580 /* absolute uri (with/without port) */; 185",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:552661,Availability,error,error,552661,"ck for ebuf */; 18592 ebuf,; 18593 sizeof(ebuf),; 18594 ""Invalid URI"");; 18595 mg_send_http_error(conn, 400, ""%s"", ebuf);; 18596 conn->request_info.local_uri_raw = NULL;; 18597 break;; 18598 }; 18599 conn->request_info.local_uri =; 18600 (char *)conn->request_info.local_uri_raw;; 18601 }; 18602 ; 18603 if (ebuf[0] != '\0') {; 18604 conn->protocol_type = -1;; 18605 ; 18606 } else {; 18607 /* HTTP/1 allows protocol upgrade */; 18608 conn->protocol_type = should_switch_to_protocol(conn);; 18609 ; 18610 if (conn->protocol_type == PROTOCOL_TYPE_HTTP2) {; 18611 /* This will occur, if a HTTP/1.1 request should be upgraded; 18612 * to HTTP/2 - but not if HTTP/2 is negotiated using ALPN.; 18613 * Since most (all?) major browsers only support HTTP/2 using; 18614 * ALPN, this is hard to test and very low priority.; 18615 * Deactivate it (at least for now).; 18616 */; 18617 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18618 }; 18619 }; 18620 ; 18621 DEBUG_TRACE(""http: %s, error: %s"",; 18622 (ri->http_version ? ri->http_version : ""none""),; 18623 (ebuf[0] ? ebuf : ""none""));; 18624 ; 18625 if (ebuf[0] == '\0') {; 18626 if (conn->request_info.local_uri) {; 18627 ; 18628 /* handle request to local server */; 18629 handle_request_stat_log(conn);; 18630 ; 18631 } else {; 18632 /* TODO: handle non-local request (PROXY) */; 18633 conn->must_close = 1;; 18634 }; 18635 } else {; 18636 conn->must_close = 1;; 18637 }; 18638 ; 18639 /* Response complete. Free header buffer */; 18640 free_buffered_response_header_list(conn);; 18641 ; 18642 if (ri->remote_user != NULL) {; 18643 mg_free((void *)ri->remote_user);; 18644 /* Important! When having connections with and without auth; 18645 * would cause double free and then crash */; 18646 ri->remote_user = NULL;; 18647 }; 18648 ; 18649 /* NOTE(lsm): order is important here. should_keep_alive() call; 18650 * is using parsed request, which will be invalid after; 18651 * memmove's below.; 18652 * Therefore, memorize should_keep_alive() result now for la",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:554931,Availability,error,error,554931,"ould_keep_alive() call; 18650 * is using parsed request, which will be invalid after; 18651 * memmove's below.; 18652 * Therefore, memorize should_keep_alive() result now for later; 18653 * use in loop exit condition. */; 18654 /* Enable it only if this request is completely discardable. */; 18655 keep_alive = STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 18656 && should_keep_alive(conn) && (conn->content_len >= 0); 18657 && (conn->request_len > 0); 18658 && ((conn->is_chunked == 4); 18659 || (!conn->is_chunked; 18660 && ((conn->consumed_content == conn->content_len); 18661 || ((conn->request_len + conn->content_len); 18662 <= conn->data_len)))); 18663 && (conn->protocol_type == PROTOCOL_TYPE_HTTP1);; 18664 ; 18665 if (keep_alive) {; 18666 /* Discard all buffered data for this request */; 18667 discard_len =; 18668 ((conn->request_len + conn->content_len) < conn->data_len); 18669 ? (int)(conn->request_len + conn->content_len); 18670 : conn->data_len;; 18671 conn->data_len -= discard_len;; 18672 ; 18673 if (conn->data_len > 0) {; 18674 DEBUG_TRACE(""discard_len = %d"", discard_len);; 18675 memmove(conn->buf,; 18676 conn->buf + discard_len,; 18677 (size_t)conn->data_len);; 18678 }; 18679 }; 18680 ; 18681 DEBUG_ASSERT(conn->data_len >= 0);; 18682 DEBUG_ASSERT(conn->data_len <= conn->buf_size);; 18683 ; 18684 if ((conn->data_len < 0) || (conn->data_len > conn->buf_size)) {; 18685 DEBUG_TRACE(""internal error: data_len = %li, buf_size = %li"",; 18686 (long int)conn->data_len,; 18687 (long int)conn->buf_size);; 18688 break;; 18689 }; 18690 conn->handled_requests++;; 18691 } while (keep_alive);; 18692 ; 18693 DEBUG_TRACE(""Done processing connection from %s (%f sec)"",; 18694 conn->request_info.remote_addr,; 18695 difftime(time(NULL), conn->conn_birth_time));; 18696 ; 18697 close_connection(conn);; 18698 ; 18699#if defined(USE_SERVER_STATS); 18700 mg_atomic_add(&(conn->phys_ctx->total_requests), conn->handled_requests);; 18701 mg_atomic_dec(&(conn->phys_ctx->active_connections)",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:561478,Availability,error,error,561478,"hys_ctx;; 18856 int thread_index;; 18857 struct mg_workerTLS tls;; 18858 ; 18859 mg_set_thread_name(""worker"");; 18860 ; 18861 tls.is_master = 0;; 18862 tls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 18863#if defined(_WIN32); 18864 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 18865#endif; 18866 ; 18867 /* Initialize thread local storage before calling any callback */; 18868 pthread_setspecific(sTlsKey, &tls);; 18869 ; 18870 /* Check if there is a user callback */; 18871 if (ctx->callbacks.init_thread) {; 18872 /* call init_thread for a worker thread (type 1), and store the; 18873 * return value */; 18874 tls.user_ptr = ctx->callbacks.init_thread(ctx, 1);; 18875 } else {; 18876 /* No callback: set user pointer to NULL */; 18877 tls.user_ptr = NULL;; 18878 }; 18879 ; 18880 /* Connection structure has been pre-allocated */; 18881 thread_index = (int)(conn - ctx->worker_connections);; 18882 if ((thread_index < 0); 18883 || ((unsigned)thread_index >= (unsigned)ctx->cfg_worker_threads)) {; 18884 mg_cry_ctx_internal(ctx,; 18885 ""Internal error: Invalid worker index %i"",; 18886 thread_index);; 18887 return;; 18888 }; 18889 ; 18890 /* Request buffers are not pre-allocated. They are private to the; 18891 * request and do not contain any state information that might be; 18892 * of interest to anyone observing a server status. */; 18893 conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx);; 18894 if (conn->buf == NULL) {; 18895 mg_cry_ctx_internal(; 18896 ctx,; 18897 ""Out of memory: Cannot allocate buffer for worker %i"",; 18898 thread_index);; 18899 return;; 18900 }; 18901 conn->buf_size = (int)ctx->max_request_size;; 18902 ; 18903 conn->dom_ctx = &(ctx->dd); /* Use default domain and default host */; 18904 ; 18905 conn->tls_user_ptr = tls.user_ptr; /* store ptr for quick access */; 18906 ; 18907 conn->request_info.user_data = ctx->user_data;; 18908 /* Allocate a mutex for this connection to allow communication both; 189",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:563336,Availability,error,error,563336,"ck access */; 18906 ; 18907 conn->request_info.user_data = ctx->user_data;; 18908 /* Allocate a mutex for this connection to allow communication both; 18909 * within the request handler and from elsewhere in the application; 18910 */; 18911 if (0 != pthread_mutex_init(&conn->mutex, &pthread_mutex_attr)) {; 18912 mg_free(conn->buf);; 18913 mg_cry_ctx_internal(ctx, ""%s"", ""Cannot create mutex"");; 18914 return;; 18915 }; 18916 ; 18917#if defined(USE_SERVER_STATS); 18918 conn->conn_state = 1; /* not consumed */; 18919#endif; 18920 ; 18921 /* Call consume_socket() even when ctx->stop_flag > 0, to let it; 18922 * signal sq_empty condvar to wake up the master waiting in; 18923 * produce_socket() */; 18924 while (consume_socket(ctx, &conn->client, thread_index)) {; 18925 ; 18926 /* New connections must start with new protocol negotiation */; 18927 tls.alpn_proto = NULL;; 18928 ; 18929#if defined(USE_SERVER_STATS); 18930 conn->conn_close_time = 0;; 18931#endif; 18932 conn->conn_birth_time = time(NULL);; 18933 ; 18934 /* Fill in IP, port info early so even if SSL setup below fails,; 18935 * error handler would have the corresponding info.; 18936 * Thanks to Johannes Winkelmann for the patch.; 18937 */; 18938 conn->request_info.remote_port =; 18939 ntohs(USA_IN_PORT_UNSAFE(&conn->client.rsa));; 18940 ; 18941 conn->request_info.server_port =; 18942 ntohs(USA_IN_PORT_UNSAFE(&conn->client.lsa));; 18943 ; 18944 sockaddr_to_string(conn->request_info.remote_addr,; 18945 sizeof(conn->request_info.remote_addr),; 18946 &conn->client.rsa);; 18947 ; 18948 DEBUG_TRACE(""Incomming %sconnection from %s"",; 18949 (conn->client.is_ssl ? ""SSL "" : """"),; 18950 conn->request_info.remote_addr);; 18951 ; 18952 conn->request_info.is_ssl = conn->client.is_ssl;; 18953 ; 18954 if (conn->client.is_ssl) {; 18955 ; 18956#if defined(USE_MBEDTLS); 18957 /* HTTPS connection */; 18958 if (mbed_ssl_accept(&(conn->ssl),; 18959 conn->dom_ctx->ssl_ctx,; 18960 (int *)&(conn->client.sock),; 18961 conn->phys_ctx); 1896",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:564581,Availability,failure,failure,564581," ntohs(USA_IN_PORT_UNSAFE(&conn->client.lsa));; 18943 ; 18944 sockaddr_to_string(conn->request_info.remote_addr,; 18945 sizeof(conn->request_info.remote_addr),; 18946 &conn->client.rsa);; 18947 ; 18948 DEBUG_TRACE(""Incomming %sconnection from %s"",; 18949 (conn->client.is_ssl ? ""SSL "" : """"),; 18950 conn->request_info.remote_addr);; 18951 ; 18952 conn->request_info.is_ssl = conn->client.is_ssl;; 18953 ; 18954 if (conn->client.is_ssl) {; 18955 ; 18956#if defined(USE_MBEDTLS); 18957 /* HTTPS connection */; 18958 if (mbed_ssl_accept(&(conn->ssl),; 18959 conn->dom_ctx->ssl_ctx,; 18960 (int *)&(conn->client.sock),; 18961 conn->phys_ctx); 18962 == 0) {; 18963 /* conn->dom_ctx is set in get_request */; 18964 /* process HTTPS connection */; 18965 init_connection(conn);; 18966 conn->connection_type = CONNECTION_TYPE_REQUEST;; 18967 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 18968 process_new_connection(conn);; 18969 } else {; 18970 /* make sure the connection is cleaned up on SSL failure */; 18971 close_connection(conn);; 18972 }; 18973 ; 18974#elif !defined(NO_SSL); 18975 /* HTTPS connection */; 18976 if (sslize(conn, SSL_accept, NULL)) {; 18977 /* conn->dom_ctx is set in get_request */; 18978 ; 18979 /* Get SSL client certificate information (if set) */; 18980 struct mg_client_cert client_cert;; 18981 if (ssl_get_client_cert_info(conn, &client_cert)) {; 18982 conn->request_info.client_cert = &client_cert;; 18983 }; 18984 ; 18985 /* process HTTPS connection */; 18986#if defined(USE_HTTP2); 18987 if ((tls.alpn_proto != NULL); 18988 && (!memcmp(tls.alpn_proto, ""\x02h2"", 3))) {; 18989 /* process HTTPS/2 connection */; 18990 init_connection(conn);; 18991 conn->connection_type = CONNECTION_TYPE_REQUEST;; 18992 conn->protocol_type = PROTOCOL_TYPE_HTTP2;; 18993 conn->content_len =; 18994 -1; /* content length is not predefined */; 18995 conn->is_chunked = 0; /* HTTP2 is never chunked */; 18996 process_new_http2_connection(conn);; 18997 } else; 18998#endif; 18999 {; 19000 /* process ",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:566748,Availability,failure,failure,566748,"*)(conn->request_info.client_cert->subject));; 19011 mg_free((void *)(conn->request_info.client_cert->issuer));; 19012 mg_free((void *)(conn->request_info.client_cert->serial));; 19013 mg_free((void *)(conn->request_info.client_cert->finger));; 19014 /* Free certificate memory */; 19015 X509_free(; 19016 (X509 *)conn->request_info.client_cert->peer_cert);; 19017 conn->request_info.client_cert->peer_cert = 0;; 19018 conn->request_info.client_cert->subject = 0;; 19019 conn->request_info.client_cert->issuer = 0;; 19020 conn->request_info.client_cert->serial = 0;; 19021 conn->request_info.client_cert->finger = 0;; 19022 conn->request_info.client_cert = 0;; 19023 }; 19024 } else {; 19025 /* make sure the connection is cleaned up on SSL failure */; 19026 close_connection(conn);; 19027 }; 19028#endif; 19029 ; 19030 } else {; 19031 /* process HTTP connection */; 19032 init_connection(conn);; 19033 conn->connection_type = CONNECTION_TYPE_REQUEST;; 19034 /* Start with HTTP, WS will be an ""upgrade"" request later */; 19035 conn->protocol_type = PROTOCOL_TYPE_HTTP1;; 19036 process_new_connection(conn);; 19037 }; 19038 ; 19039 DEBUG_TRACE(""%s"", ""Connection closed"");; 19040 ; 19041#if defined(USE_SERVER_STATS); 19042 conn->conn_close_time = time(NULL);; 19043#endif; 19044 }; 19045 ; 19046 /* Call exit thread user callback */; 19047 if (ctx->callbacks.exit_thread) {; 19048 ctx->callbacks.exit_thread(ctx, 1, tls.user_ptr);; 19049 }; 19050 ; 19051 /* delete thread local storage objects */; 19052 pthread_setspecific(sTlsKey, NULL);; 19053#if defined(_WIN32); 19054 CloseHandle(tls.pthread_cond_helper_mutex);; 19055#endif; 19056 pthread_mutex_destroy(&conn->mutex);; 19057 ; 19058 /* Free the request buffer. */; 19059 conn->buf_size = 0;; 19060 mg_free(conn->buf);; 19061 conn->buf = NULL;; 19062 ; 19063 /* Free cleaned URI (if any) */; 19064 if (conn->request_info.local_uri != conn->request_info.local_uri_raw) {; 19065 mg_free((void *)conn->request_info.local_uri);; 19066 conn->request_in",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:570290,Availability,alive,alive,570290,"_); 19112 int on = 1;; 19113#endif; 19114 memset(&so, 0, sizeof(so));; 19115 ; 19116 if ((so.sock = accept(listener->sock, &so.rsa.sa, &len)); 19117 == INVALID_SOCKET) {; 19118 } else if (check_acl(ctx, &so.rsa) != 1) {; 19119 sockaddr_to_string(src_addr, sizeof(src_addr), &so.rsa);; 19120 mg_cry_ctx_internal(ctx,; 19121 ""%s: %s is not allowed to connect"",; 19122 __func__,; 19123 src_addr);; 19124 closesocket(so.sock);; 19125 } else {; 19126 /* Put so socket structure into the queue */; 19127 DEBUG_TRACE(""Accepted socket %d"", (int)so.sock);; 19128 set_close_on_exec(so.sock, NULL, ctx);; 19129 so.is_ssl = listener->is_ssl;; 19130 so.ssl_redir = listener->ssl_redir;; 19131 if (getsockname(so.sock, &so.lsa.sa, &len) != 0) {; 19132 mg_cry_ctx_internal(ctx,; 19133 ""%s: getsockname() failed: %s"",; 19134 __func__,; 19135 strerror(ERRNO));; 19136 }; 19137 ; 19138#if !defined(__ZEPHYR__); 19139 if ((so.lsa.sa.sa_family == AF_INET); 19140 || (so.lsa.sa.sa_family == AF_INET6)) {; 19141 /* Set TCP keep-alive for TCP sockets (IPv4 and IPv6).; 19142 * This is needed because if HTTP-level keep-alive; 19143 * is enabled, and client resets the connection, server won't get; 19144 * TCP FIN or RST and will keep the connection open forever. With; 19145 * TCP keep-alive, next keep-alive handshake will figure out that; 19146 * the client is down and will close the server end.; 19147 * Thanks to Igor Klopov who suggested the patch. */; 19148 if (setsockopt(so.sock,; 19149 SOL_SOCKET,; 19150 SO_KEEPALIVE,; 19151 (SOCK_OPT_TYPE)&on,; 19152 sizeof(on)); 19153 != 0) {; 19154 mg_cry_ctx_internal(; 19155 ctx,; 19156 ""%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s"",; 19157 __func__,; 19158 strerror(ERRNO));; 19159 }; 19160 }; 19161#endif; 19162 ; 19163 /* Disable TCP Nagle's algorithm. Normally TCP packets are coalesced; 19164 * to effectively fill up the underlying IP packet payload and; 19165 * reduce the overhead of sending lots of small buffers. However; 19166 * this hurts the server's th",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
https://root.cern/doc/v632/civetweb_8c_source.html:570380,Availability,alive,alive,570380," 19117 == INVALID_SOCKET) {; 19118 } else if (check_acl(ctx, &so.rsa) != 1) {; 19119 sockaddr_to_string(src_addr, sizeof(src_addr), &so.rsa);; 19120 mg_cry_ctx_internal(ctx,; 19121 ""%s: %s is not allowed to connect"",; 19122 __func__,; 19123 src_addr);; 19124 closesocket(so.sock);; 19125 } else {; 19126 /* Put so socket structure into the queue */; 19127 DEBUG_TRACE(""Accepted socket %d"", (int)so.sock);; 19128 set_close_on_exec(so.sock, NULL, ctx);; 19129 so.is_ssl = listener->is_ssl;; 19130 so.ssl_redir = listener->ssl_redir;; 19131 if (getsockname(so.sock, &so.lsa.sa, &len) != 0) {; 19132 mg_cry_ctx_internal(ctx,; 19133 ""%s: getsockname() failed: %s"",; 19134 __func__,; 19135 strerror(ERRNO));; 19136 }; 19137 ; 19138#if !defined(__ZEPHYR__); 19139 if ((so.lsa.sa.sa_family == AF_INET); 19140 || (so.lsa.sa.sa_family == AF_INET6)) {; 19141 /* Set TCP keep-alive for TCP sockets (IPv4 and IPv6).; 19142 * This is needed because if HTTP-level keep-alive; 19143 * is enabled, and client resets the connection, server won't get; 19144 * TCP FIN or RST and will keep the connection open forever. With; 19145 * TCP keep-alive, next keep-alive handshake will figure out that; 19146 * the client is down and will close the server end.; 19147 * Thanks to Igor Klopov who suggested the patch. */; 19148 if (setsockopt(so.sock,; 19149 SOL_SOCKET,; 19150 SO_KEEPALIVE,; 19151 (SOCK_OPT_TYPE)&on,; 19152 sizeof(on)); 19153 != 0) {; 19154 mg_cry_ctx_internal(; 19155 ctx,; 19156 ""%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s"",; 19157 __func__,; 19158 strerror(ERRNO));; 19159 }; 19160 }; 19161#endif; 19162 ; 19163 /* Disable TCP Nagle's algorithm. Normally TCP packets are coalesced; 19164 * to effectively fill up the underlying IP packet payload and; 19165 * reduce the overhead of sending lots of small buffers. However; 19166 * this hurts the server's throughput (ie. operations per second); 19167 * when HTTP 1.1 persistent connections are used and the responses; 19168 * are relatively small (",MatchSource.WIKI,doc/v632/civetweb_8c_source.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html
